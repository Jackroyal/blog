<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[搁浅St的blog]]></title>
  <subtitle><![CDATA[我最喜欢笨笨]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://jackroyal.github.io/"/>
  <updated>2015-10-29T06:12:58.325Z</updated>
  <id>http://jackroyal.github.io/</id>
  
  <author>
    <name><![CDATA[John Doe]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[微信支付app支付3.0接口开发]]></title>
    <link href="http://jackroyal.github.io/2015/10/25/weixin-app-pay-v3-0/"/>
    <id>http://jackroyal.github.io/2015/10/25/weixin-app-pay-v3-0/</id>
    <published>2015-10-25T13:30:03.000Z</published>
    <updated>2015-10-29T06:12:58.325Z</updated>
    <content type="html"><![CDATA[<p>最近在做微信支付,因为前段时间做了微信的公众账号支付,我以为是一个东西,结果发现不是,我真是醉了,竟然是独立的两套东西.<br><a id="more"></a><br><img src="http://ww4.sinaimg.cn/large/692869a3gw1exdqakso33j20ny0dptbi.jpg" alt="微信支付架构图"><br>整个微信支付,分为三大平台,公众平台(就是公众账号那个),开发平台(主要针对app这块),商户平台(所有微信支付的结算,最终在这里).三个平台的账号都不同,而且必须不同,不然不让你注册.<br>其中,需要用户注册的是公众平台和开放平台,当你审核通过以后,就会给你分配一个对应的商户号.也就是说,你一个公司,申请一个公众号和一个开放平台账号,分别给你一个商户号,你就一共有两个商户号.这两个商户号不同,我之前就是拿着公众账号对应的商户号(客户给错了),去做app支付,一直说不对应.<br>下面进入正文,看看怎么开发</p>
<h1 id="准备工作">准备工作</h1><p>首先你需要注册<a href="https://open.weixin.qq.com/" target="_blank" rel="external">开放平台</a>账号,然后添加一个app应用(里面包含你的appid和appkey),并且进行认证,然后就会收到一封邮件,里面包含了你分到的商户号.</p>
<h1 id="1_流程图">1 流程图</h1><p>接下来,我们需要搞清楚微信app支付开发的流程,如下图所示.<br><img src="http://ww1.sinaimg.cn/large/692869a3gw1exgxrb07bfj20ou0sy453.jpg" alt="微信app支付流程图"><br>其中,红色的部分是需要我们做的,具体分下来,客户端要做的事就比较少,生成预支付订单,返回签名的package这些都是服务端做的(开发客户端真爽),当然从另外一个角度来说,这些事情也确实应该放在服务器端来做,因为涉及到一些key和密钥之类的东西,放在客户端app中不安全,如果app被反编译就暴露了这些信息.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">商户系统和微信支付系统主要交互说明：</span><br><span class="line">步骤<span class="number">1</span>：用户在商户APP中选择商品，提交订单，选择微信支付。</span><br><span class="line">步骤<span class="number">2</span>：商户后台收到用户支付单，调用微信支付统一下单接口。参见【统一下单API】。</span><br><span class="line">步骤<span class="number">3</span>：统一下单接口返回正常的prepay_id，再按签名规范重新生成签名后，将数据传输给APP。参与签名的字段名为appId，partnerId，prepayId，nonceStr，timeStamp，package。注意：package的值格式为Sign=WXPay</span><br><span class="line">步骤<span class="number">4</span>：商户APP调起微信支付。api参见本章节【app端开发步骤说明】</span><br><span class="line">步骤<span class="number">5</span>：商户后台接收支付通知。api参见【支付结果通知API】</span><br><span class="line">步骤<span class="number">6</span>：商户后台查询支付结果。，api参见【查询订单API】</span><br></pre></td></tr></table></figure></p>
<p>服务端要做的,就是步骤1235,客户端做步骤4就行了,步骤6看自己的需求,我们没有做.<br>首先,生成商户服务器订单,这个自不必说,只有生成订单,才有订单号,才能做后面的工作.<br>我们重点看下步骤2和步骤3</p>
<h1 id="2_调用统一下单接口">2  调用统一下单接口</h1><p>首先,我们需要看一下<a href="https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=9_1" target="_blank" rel="external">统一下单接口</a>文档,里面包含了请求的地址和要传的参数,顾名思义,那些必填字段是必须要填写的,这是我的请求参数列表<code>out_trade_no</code>,<code>body</code>,<code>total_fee</code>,<code>time_start</code>,<code>time_expire</code>,<code>spbill_create_ip</code>,<code>notify_url</code>,<code>trade_type</code>还有一个签名<code>sign</code>,这就是所有的请求字段.</p>
<h2 id="签名">签名</h2><p>签名的思路是,把所有得除<code>sign</code>字段以外的字段,按照参数名ASCII码从小到大排序,使用URL键值对的格式（即key1=value1&amp;key2=value2…）拼接成字符串stringA。在stringA最后拼接上key得到stringSignTemp字符串，并对stringSignTemp进行MD5运算，再将得到的字符串所有字符转换为大写，得到sign值signValue。<a href="https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_3" target="_blank" rel="external">官方文档</a>.</p>
<p>签名可能有点蛋疼,你可以看<a href="https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_3" target="_blank" rel="external">这个</a>文档.微信也提供了签名的<a href="https://pay.weixin.qq.com/wiki/tools/signverify/" target="_blank" rel="external">在线调试工具</a>,你把参数填进去,看看签名拿到的值是否和你签名的结果一样.</p>
<h2 id="调用unifiedOrder">调用unifiedOrder</h2><p>由于统一下单接口,所有的支付方式都会调用,包括公众账号的几种支付方式,而且官方没有app支付的sdk代码,所以我们直接用公众号支付的js sdk代码.<br>sdk里面已经封装好了对统一下单接口的调用,包括签名,所以我们只需要调用这个就好了.</p>
<h2 id="整理参数">整理参数</h2><p>调用统一下单接口后,会返回很多数据,我们还是调用js sdk里面的处理函数,因为返回的是xml的内容,有些数据我们不要,(下面的结果是js api的,结果跟app除了trade_type不同,其他都是一样的)<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">xml</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">return_code</span>&gt;</span><span class="cdata">&lt;![CDATA[SUCCESS]]&gt;</span><span class="tag">&lt;/<span class="title">return_code</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">return_msg</span>&gt;</span><span class="cdata">&lt;![CDATA[OK]]&gt;</span><span class="tag">&lt;/<span class="title">return_msg</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">appid</span>&gt;</span><span class="cdata">&lt;![CDATA[wx2421b1c4370ec43b]]&gt;</span><span class="tag">&lt;/<span class="title">appid</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">mch_id</span>&gt;</span><span class="cdata">&lt;![CDATA[10000100]]&gt;</span><span class="tag">&lt;/<span class="title">mch_id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">nonce_str</span>&gt;</span><span class="cdata">&lt;![CDATA[IITRi8Iabbblz1Jc]]&gt;</span><span class="tag">&lt;/<span class="title">nonce_str</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">sign</span>&gt;</span><span class="cdata">&lt;![CDATA[7921E432F65EB8ED0CE9755F0E86D72F]]&gt;</span><span class="tag">&lt;/<span class="title">sign</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">result_code</span>&gt;</span><span class="cdata">&lt;![CDATA[SUCCESS]]&gt;</span><span class="tag">&lt;/<span class="title">result_code</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">prepay_id</span>&gt;</span><span class="cdata">&lt;![CDATA[wx201411101639507cbf6ffd8b0779950874]]&gt;</span><span class="tag">&lt;/<span class="title">prepay_id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">trade_type</span>&gt;</span><span class="cdata">&lt;![CDATA[JSAPI]]&gt;</span><span class="tag">&lt;/<span class="title">trade_type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">xml</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>上面的参数中,我们需要appid(就是你配置中的那个appid),prepay_id(预支付id,之前都是为了它),partnerid(就是你配置的商户号mch_id),其他的就没啥用了,我们接下来要给客户端返回一个数据包,全部的数据如下<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;"<span class="attribute">appid</span>":<span class="value"><span class="string">"wx8c965dd8b4794241"</span></span>,"<span class="attribute">noncestr</span>":<span class="value"><span class="string">"oxh4g98rfgbmugwbmxfg72ay6qpvieos"</span></span>,"<span class="attribute">package</span>":<span class="value"><span class="string">"Sign=WXpay"</span></span>,"<span class="attribute">partnerid</span>":<span class="value"><span class="string">"1277670101"</span></span>,"<span class="attribute">prepayid</span>":<span class="value"><span class="string">"wx2015102014523449175fc2fd0939076028"</span></span>,"<span class="attribute">timestamp</span>":<span class="value"><span class="string">"1445323951"</span></span>,"<span class="attribute">sign</span>":<span class="value"><span class="string">"7F84997FDW40F6F15DD1C28A9E313122"</span></span>&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>noncestr</code>是重新生成的,<code>package</code>是固定写法,里面的内容必须写<code>&quot;Sign=WXpay&quot;</code>,<code>timestamp</code>也是重新生成的,<code>sign</code>是重新签名后的结果.<br>然后把数据返回给客户端就行了,客户端调起支付.</p>
<h1 id="3_支付回调">3  支付回调</h1><p>和支付宝原理一样,不过微信返回的数据不是标准的<code>post</code>,所以你没法通过<code>$_POST[&#39;out_trade_no&#39;]</code>这样来获取数据.<br>所以,我的做法还是调用js sdk里面的回调方法,把那个回调类继承了一下,我们只需要重写<code>NotifyProcess</code>函数就行了,在这里面加入自己的逻辑,比如判断订单是否存在,订单是否已经处理过之类的.<br>至此,大流程已经走通了.</p>
<h1 id="4_优化">4  优化</h1><p>在调试过程中,我发现同一个订单号不能重复的去获取预支付的prepay_id,所以,我们在整理参数那一步后,需要将返回参数存到数据库,下次申请支付的时候,先去数据库查一下,有的话,就不用给微信服务器请求了</p>
<p>打完收工.</p>
<h1 id="参考文献">参考文献</h1><p>1 <a href="https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=11_1" target="_blank" rel="external">微信官方sdk下载</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在做微信支付,因为前段时间做了微信的公众账号支付,我以为是一个东西,结果发现不是,我真是醉了,竟然是独立的两套东西.<br>]]>
    
    </summary>
    
      <category term="api" scheme="http://jackroyal.github.io/tags/api/"/>
    
      <category term="微信支付" scheme="http://jackroyal.github.io/tags/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/"/>
    
      <category term="php" scheme="http://jackroyal.github.io/categories/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ubuntu下设置apache的目录映射]]></title>
    <link href="http://jackroyal.github.io/2015/10/15/ubuntu-lamp-alias-setting/"/>
    <id>http://jackroyal.github.io/2015/10/15/ubuntu-lamp-alias-setting/</id>
    <published>2015-10-15T14:12:37.000Z</published>
    <updated>2015-10-29T06:08:43.994Z</updated>
    <content type="html"><![CDATA[<p>好吧,我的博客一不小心又荒废下来了,话不多说,进入正文.<br><a id="more"></a><br>最近的项目一直在忙,发布代码的时候遇到一个麻烦事,由于所有项目代码都放在服务器的根目录,也就是<code>/var/www/html</code>下;然后还有一个api的页面,我放在一个<code>api</code>文件夹中,然后把整个<code>api</code>文件夹放在<code>html</code>目录下.由于每次发布代码都是替换整个根目录<code>html</code>下的文件,你懂的,我每次发布项目代码后,<code>api</code>就没了,需要我单独解压,再复制,blablabla,总之一个字,<strong>  烦  </strong>.<br>我突然想起来,phpmyadmin安装后就不在网站的根目录,但是访问的时候我却还是直接在ip后面跟目录,比如<code>http://127.0.0.1/phpmyadmin</code>,这货应该是用了一个映射,我照着这个样子搞一个,不就行了,说干就干.</p>
<h1 id="1_使用的命令">1 使用的命令</h1><p><code>Alias</code> 这个是这次主要使用的命令,使用的方法很简单,如下所示<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Alias /api /home/ch/api</span><br></pre></td></tr></table></figure></p>
<p>意思就是如果你在ip后面添加<code>/api</code>后缀,也就是你在浏览器访问<code>http://127.0.0.1/api</code>,那么实际就会访问到<code>/home/ch/api</code>目录下</p>
<h1 id="2_使用方法">2 使用方法</h1><h3 id="Linux下">Linux下</h3><p>由于我用的是ubuntu,所以具体说下ubuntu下怎么用.<br>根据<a href="http://huirong.github.io/2015/04/01/installLamp/" target="_blank" rel="external">在Ubuntu上安装LAMP服务器并简单配置</a>,这篇文章中关于<code>phpmyadmin</code>的设置部分,以下为摘抄<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">配置Apache服务器</span><br><span class="line">如果此时在浏览器中输入<span class="string">http:</span><span class="comment">//localhost/phpmyadmin，会提示404错误</span></span><br><span class="line">此时应该进行简单的配置，将phpMyAdmin的配置文件，复制到Apache2下</span><br><span class="line"></span><br><span class="line">cp <span class="regexp">/etc/</span>phpmyadmin<span class="regexp">/apache.conf /</span>etc<span class="regexp">/apache2/</span>conf-enabled/phpmyadmin.conf</span><br><span class="line">然后重启Apache服务器</span><br><span class="line"></span><br><span class="line">service apache2 restart</span><br></pre></td></tr></table></figure></p>
<p>我们得到启发,本来phpmyadmin也是不在<code>html</code>根目录下的,上面的操作做了什么呢?<br>我们打开<code>/etc/apache2/conf-enabled/phpmyadmin.conf</code>这个文件看看<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># phpMyAdmin default Apache configuration</span></span><br><span class="line"></span><br><span class="line"><span class="constant">Alias</span> /phpmyadmin /usr/share/phpmyadmin</span><br><span class="line"></span><br><span class="line">&lt;<span class="constant">Directory</span> /usr/share/phpmyadmin&gt;</span><br><span class="line">    <span class="constant">Options</span> <span class="constant">FollowSymLinks</span></span><br><span class="line">    <span class="constant">DirectoryIndex</span> index.php</span><br><span class="line"></span><br><span class="line">    &lt;<span class="constant">IfModule</span> mod_php5.c&gt;</span><br><span class="line">        <span class="constant">AddType</span> application/x-httpd-php .php</span><br><span class="line"></span><br><span class="line">        php_flag magic_quotes_gpc <span class="constant">Off</span></span><br><span class="line">        php_flag track_vars <span class="constant">On</span></span><br><span class="line">        php_flag register_globals <span class="constant">Off</span></span><br><span class="line">        php_admin_flag allow_url_fopen <span class="constant">Off</span></span><br><span class="line">        php_value include_path .</span><br><span class="line">        php_admin_value upload_tmp_dir /var/<span class="class"><span class="keyword">lib</span>/<span class="title">phpmyadmin</span>/<span class="title">tmp</span></span></span><br><span class="line">        php_admin_value open_basedir /usr/share/phpmyadmin/<span class="symbol">:/etc/phpmyadmin/</span><span class="symbol">:/var/lib/phpmyadmin/</span><span class="symbol">:/usr/share/php/php-gettext/</span><span class="symbol">:/usr/share/javascript/</span></span><br><span class="line">    &lt;<span class="regexp">/IfModule&gt;</span><br><span class="line"></span><br><span class="line">&lt;/</span><span class="constant">Directory</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Authorize for setup</span></span><br><span class="line">&lt;<span class="constant">Directory</span> /usr/share/phpmyadmin/setup&gt;</span><br><span class="line">    &lt;<span class="constant">IfModule</span> mod_authn_file.c&gt;</span><br><span class="line">    <span class="constant">AuthType</span> <span class="constant">Basic</span></span><br><span class="line">    <span class="constant">AuthName</span> <span class="string">"phpMyAdmin Setup"</span></span><br><span class="line">    <span class="constant">AuthUserFile</span> /etc/phpmyadmin/htpasswd.setup</span><br><span class="line">    &lt;<span class="regexp">/IfModule&gt;</span><br><span class="line">    Require valid-user</span><br><span class="line">&lt;/</span><span class="constant">Directory</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Disallow web access to directories that don't need it</span></span><br><span class="line">&lt;<span class="constant">Directory</span> /usr/share/phpmyadmin/libraries&gt;</span><br><span class="line">    <span class="constant">Order</span> <span class="constant">Deny</span>,<span class="constant">Allow</span></span><br><span class="line">    <span class="constant">Deny</span> from <span class="constant">All</span></span><br><span class="line">&lt;<span class="regexp">/Directory&gt;</span><br><span class="line">&lt;Directory /usr</span><span class="regexp">/share/phpmyadmin</span><span class="regexp">/setup/lib</span>&gt;</span><br><span class="line">    <span class="constant">Order</span> <span class="constant">Deny</span>,<span class="constant">Allow</span></span><br><span class="line">    <span class="constant">Deny</span> from <span class="constant">All</span></span><br><span class="line">&lt;<span class="regexp">/Directory&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>看看这个文件的第一行,soga,原来他用的也是<code>Alias</code>命令,接下来我们继续往下走,下面的代码是什么意思呢?下面的代码是用来设置文件目录的权限的,就是<code>&lt;Directory&gt;</code>标签里面的内容.<br>关于这里的设置,我们可以参考<a href="https://httpd.apache.org/docs/2.2/mod/mod_authz_host.html# order" target="_blank" rel="external">apache官网</a>上的描述.简而言之<br><code>Order Deny,Allow</code>其实是Allow优先,举个例子<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword"><span class="common">Order</span></span> Deny,Allow</span><br><span class="line"><span class="keyword"><span class="common">Allow</span></span> from <span class="literal">All</span></span><br><span class="line"><span class="keyword"><span class="common">Deny</span></span> from <span class="literal">All</span></span><br></pre></td></tr></table></figure></p>
<p>由于<code>Deny</code>规则在<code>Allow</code>之前(Order规定的),所以先Deny所有的请求,然后<code>Allow</code>规则在其后,最后的结果就是所有的人都可以随意访问.假设你要对访问进行限制,建议按照下面这样设置<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword"><span class="common">Order</span></span> Deny,Allow</span><br><span class="line"><span class="keyword"><span class="common">Allow</span></span> from 192.168.1.122</span><br><span class="line"><span class="keyword"><span class="common">Deny</span></span> from <span class="literal">All</span></span><br></pre></td></tr></table></figure></p>
<p>也就是指允许ip为<code>192.168.1.122</code>的用户去访问,其他的用户都会被<code>Deny</code></p>
<h1 id="3_最后的结果">3 最后的结果</h1><p>结合上面的分析,给出我最后的结果<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Alias</span> /api /var/www/api</span><br><span class="line"><span class="tag">&lt;Directory /var/www/api&gt;</span></span><br><span class="line"> <span class="keyword"><span class="common">Options</span></span> FollowSymLinks Includes -Indexes</span><br><span class="line"></span><br><span class="line">  <span class="keyword">AllowOverride</span> None</span><br><span class="line">  <span class="keyword"><span class="common">Order</span></span> allow,deny</span><br><span class="line">  <span class="keyword"><span class="common">allow</span></span> from <span class="literal">all</span></span><br><span class="line"><span class="tag">&lt;/Directory&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这里的<code>-Indexes</code>选项的意思是,不要列出目录<br>打完收工</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>好吧,我的博客一不小心又荒废下来了,话不多说,进入正文.<br>]]>
    
    </summary>
    
      <category term="apache" scheme="http://jackroyal.github.io/tags/apache/"/>
    
      <category term="ubuntu" scheme="http://jackroyal.github.io/tags/ubuntu/"/>
    
      <category term="服务器" scheme="http://jackroyal.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[php中的bool值和类型转换]]></title>
    <link href="http://jackroyal.github.io/2015/07/20/php-boolean-value/"/>
    <id>http://jackroyal.github.io/2015/07/20/php-boolean-value/</id>
    <published>2015-07-20T06:23:21.000Z</published>
    <updated>2015-10-29T06:08:46.797Z</updated>
    <content type="html"><![CDATA[<p>最近在写php,发现有个问题一直无法避免,那就是关于php的bool值和类型转换.<br>以前每次遇到要校验一个变量<code>$a</code>,是否为空,都是使用<code>$a==&#39;&#39;</code>去判断,感觉不是很懂,反正一直这样用,也没出太多纰漏,而没有理会什么NUll,’’,0之类的其他值.今天决定研究下,把它彻底搞清楚.<br><a id="more"></a></p>
<h1 id="1_php的数据类型">1 php的数据类型</h1><p>php支持原始的8总数据类型.<br>4总标量类型:</p>
<ul>
<li>boolean</li>
<li>integer</li>
<li>float(也称作double类型)</li>
<li>string<br>2种复合类型</li>
<li>array(数组)</li>
<li>object(对象)<br>2种特殊类型</li>
<li>resource(资源)</li>
<li>NULL(无类型)<br>实际上 double 和 float 是相同的，由于一些历史的原因，这两个名称同时存在。<br>变量的类型通常不是由程序员设定的，确切地说，是由PHP根据该变量使用的上下文在运行时决定的。<br>前面几种类型很好理解,现在重点看一下resource类型和NULL类型</li>
</ul>
<ol>
<li><code>resource</code> 是一种特殊变量，保存了到外部资源的一个引用。资源是通过专门的函数来建立和使用的。由于资源类型变量保存有为打开文件、数据库连接、图形画布区域等的特殊句柄，因此将其它类型的值转换为资源没有意义。</li>
<li><code>NULL</code>,特殊的NULL值表示一个变量没有值。NULL类型唯一可能的值就是 NULL。在下列情况下一个变量被认为是NULL：</li>
</ol>
<ul>
<li>被赋值为 NULL。</li>
<li>尚未被赋值。</li>
<li>被 unset()。</li>
</ul>
<h1 id="2_常用的比较函数">2 常用的比较函数</h1><h3 id="empty()">empty()</h3><p>这个函数最近经常见到,它比较有特点.<br>如果 var 是非空或非零的值，则empty()返回<code>FALSE</code>。<br>换句话说，””、0、”0”、NULL、FALSE、array()、var $var以及没有任何属性的对象都将<br>被认为是空的，返回 TRUE。<br>如果变量没有赋值,empty()也不会报错.</p>
<h3 id="is_set()">is_set()</h3><p>这个函数和is_null()刚好相反,如果一个函数的is_null()返回<code>true</code>,那么它的is_set()则必定返回相反值,<code>false</code>.</p>
<h3 id="is_null()">is_null()</h3><p>所有的<code>is_</code>开头的函数,都不会进行类型转换,例如is_bool(‘0’),返回false,因为’0’不是一个布尔类型的值.<br>详细对比看下图<br><img src="http://ww4.sinaimg.cn/large/692869a3gw1euak04nwitj20nf0i2432.jpg" alt="使用 PHP 函数对变量 $x 进行比较"></p>
<p>更多更详细的比较,大家看这里<a href="http://php.net/manual/zh/types.comparisons.php" target="_blank" rel="external">php类型比较表</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在写php,发现有个问题一直无法避免,那就是关于php的bool值和类型转换.<br>以前每次遇到要校验一个变量<code>$a</code>,是否为空,都是使用<code>$a==&#39;&#39;</code>去判断,感觉不是很懂,反正一直这样用,也没出太多纰漏,而没有理会什么NUll,’’,0之类的其他值.今天决定研究下,把它彻底搞清楚.<br>]]>
    
    </summary>
    
      <category term="bool" scheme="http://jackroyal.github.io/tags/bool/"/>
    
      <category term="php" scheme="http://jackroyal.github.io/tags/php/"/>
    
      <category term="php" scheme="http://jackroyal.github.io/categories/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ubuntu 14.04配置thinkphp路由,隐藏index.php]]></title>
    <link href="http://jackroyal.github.io/2015/06/29/ubuntu-14-04-setting-about-thinkphp-url-rewrite/"/>
    <id>http://jackroyal.github.io/2015/06/29/ubuntu-14-04-setting-about-thinkphp-url-rewrite/</id>
    <published>2015-06-29T12:16:17.000Z</published>
    <updated>2015-10-29T06:08:44.831Z</updated>
    <content type="html"><![CDATA[<p>今天把代码发布到服务器上去,发现服务器的rewrite有问题,无法实现隐藏index.php的功能.<br><a id="more"></a></p>
<h1 id="环境">环境</h1><p>服务器:ubuntu 14.04 lts<br>apache:2.4.7<br>php:5.5.9-<br>mysql:5.5.43</p>
<h1 id="开启rewrite模块">开启rewrite模块</h1><p>在ubuntu中,开启很简单,执行以下bash命令即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo a2enmod rewrite</span><br></pre></td></tr></table></figure></p>
<h1 id="添加-htaccess支持">添加.htaccess支持</h1><p>默认apache会忽视所有的规则重写,即使添加了<code>.htaccess</code>文件,他不认.<br>在ubuntu 14.04中设置,跟其他版本的ubuntu有点不同<br>核心操作还是修改 <code>AllowOverride None</code>为<code>AllowOverride All</code>.<br>问题是这个文件到底在哪儿.<br>在网上找的教程中,有的说是在<code>/etc/apache2/sites-available/000-default.conf</code>中,在我这个版本的apache中,它不在这里.<br>他在<code>/etc/apache2/apache2.conf</code>中.<br>我们打开这个文件,大概在166行.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory /var/www/&gt;</span><br><span class="line">        Options Indexes FollowSymLinks</span><br><span class="line">        AllowOverride All</span><br><span class="line">        Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure></p>
<h1 id="重启apache服务器">重启apache服务器</h1><p>ok,都改完了,就剩一步,重启apache服务器.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure></p>
<p>搞定!<br><img src="http://ww3.sinaimg.cn/large/692869a3gw1etl9v3c6wzj20go09dmx6.jpg" alt="热疯了,空调房都热"></p>
<p><a href="http://www.dev-metal.com/enable-mod_rewrite-ubuntu-14-04-lts/" target="_blank" rel="external"></a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天把代码发布到服务器上去,发现服务器的rewrite有问题,无法实现隐藏index.php的功能.<br>]]>
    
    </summary>
    
      <category term="thinkphp" scheme="http://jackroyal.github.io/tags/thinkphp/"/>
    
      <category term="ubuntu" scheme="http://jackroyal.github.io/tags/ubuntu/"/>
    
      <category term="Linux" scheme="http://jackroyal.github.io/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[digitalocean配置ipv6]]></title>
    <link href="http://jackroyal.github.io/2015/06/16/digitalocean-support-google-scholar-by-ipv6/"/>
    <id>http://jackroyal.github.io/2015/06/16/digitalocean-support-google-scholar-by-ipv6/</id>
    <published>2015-06-16T14:24:18.000Z</published>
    <updated>2015-10-29T06:08:52.009Z</updated>
    <content type="html"><![CDATA[<p>之前配置了ubuntu的shadowsocks,用来做代理翻墙.不过,google scholar一直无解,因为digitalocean的ipv4的地址都被google scholar墙掉了.今天(其实离现在已经好多天了),看到一篇文章,很受启发,决定使用ipv6来试试.<br><a id="more"></a></p>
<h1 id="前提条件">前提条件</h1><p>首先你得有一台digitalocean的vps,建议选择洛杉矶的服务器,<br>选个5美元的就够了.</p>
<h1 id="1_新建droplet">1 新建droplet</h1><p>如果你以前没有搭建droplet,今天新建的话,比较简单,我们直接启用ipv6支持.<br><img src="http://ww3.sinaimg.cn/large/692869a3gw1etfo3h9svlj211h1tidny.jpg" alt="新建droplet,尤其注意勾选ipv6"><br>注意勾选ipv6,后面的步骤,请参考第3步</p>
<h1 id="2_修改droplet">2 修改droplet</h1><p>我的droplet已经搭建好了,所以只能修改,添加ipv6的支持.<br>你打开droplet的<code>setting</code>,在<code>network</code>中应该可以看到<code>enable ipv6</code><br><img src="http://ww1.sinaimg.cn/large/692869a3gw1etfosgf63kj207w05ujrn.jpg" alt="带有启用ipv6选项的页面"><br>启用后,稍后片刻,页面如下.<br><img src="http://ww4.sinaimg.cn/large/692869a3gw1etfohrljtmj20se0i2tb7.jpg" alt="在droplet的setting中启用ipv6后的页面"></p>
<h1 id="3_设置ipv6">3 设置ipv6</h1><p>当我们启用ipv6支持以后,还需要对服务器进行设置.</p>
<h2 id="第一步_我们把ipv6的地址添加到网卡中">第一步  我们把ipv6的地址添加到网卡中</h2><p>我们编辑<code>/etc/network/interfaces</code>这个文件,使用命令<code>sudo vi /etc/network/interfaces</code><br>修改后内容如下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># This file describes the network interfaces available on your</span></span><br><span class="line"><span class="preprocessor"># system and how to activate them. For more information, see</span></span><br><span class="line"><span class="preprocessor"># interfaces(<span class="number">5</span>).</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># The loopback network interface</span></span><br><span class="line"><span class="keyword">auto</span> lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># The primary network interface</span></span><br><span class="line"><span class="keyword">auto</span> eth0</span><br><span class="line">iface eth0 inet <span class="keyword">static</span></span><br><span class="line">        address 你的ipv4</span><br><span class="line">        netmask <span class="number">255.255</span><span class="number">.192</span><span class="number">.0</span></span><br><span class="line">        gateway 你的ipv4网关</span><br><span class="line">        dns-nameservers <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span> <span class="number">8.8</span><span class="number">.4</span><span class="number">.4</span></span><br><span class="line"><span class="preprocessor"># 以上内容不需要修改,只需要添加下面的部分</span></span><br><span class="line">iface eth0 inet6 <span class="keyword">static</span></span><br><span class="line">    address 上图中的ipv6地址</span><br><span class="line">    netmask <span class="number">64</span></span><br><span class="line">    gateway 网关地址</span><br><span class="line">    autoconf <span class="number">0</span></span><br><span class="line">    dns-nameservers <span class="number">2001</span>:<span class="number">4860</span>:<span class="number">4860</span>::<span class="number">8844</span> <span class="number">2001</span>:<span class="number">4860</span>:<span class="number">4860</span>::<span class="number">8888</span> <span class="number">209.244</span><span class="number">.0</span><span class="number">.3</span></span><br></pre></td></tr></table></figure></p>
<p>修改完成后,我们重启下服务器(因为我的重启网络服务没有效果,所以我重启了),<br>如果你看到如下图片,就表示你的ipv6配置好了,我们后面来测试一下<br><img src="http://ww2.sinaimg.cn/large/692869a3gw1etfp7pj65dj20hs04fzlv.jpg" alt="ipv6成功启用后"></p>
<h2 id="第二步_测试ipv6_是否配置成功">第二步 测试ipv6 是否配置成功</h2><p>我们使用ping命令来测试,ping是测试ipv4的,测试ipv6是用ping6,命令如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ping6 ipv6.google.com</span><br><span class="line"></span><br><span class="line">PING ipv6.google.com(nuq04s29-in-x0e.<span class="number">1</span>e100.net) <span class="number">56</span> data bytes</span><br><span class="line"><span class="number">64</span> bytes from nuq04s29-in-x0e.<span class="number">1</span>e100.net: icmp_seq=<span class="number">1</span> ttl=<span class="number">57</span> time=<span class="number">2.23</span> ms</span><br><span class="line"><span class="number">64</span> bytes from nuq04s29-in-x0e.<span class="number">1</span>e100.net: icmp_seq=<span class="number">2</span> ttl=<span class="number">57</span> time=<span class="number">1.97</span> ms</span><br><span class="line"><span class="number">64</span> bytes from nuq04s29-in-x0e.<span class="number">1</span>e100.net: icmp_seq=<span class="number">3</span> ttl=<span class="number">57</span> time=<span class="number">1.95</span> ms</span><br><span class="line"><span class="number">64</span> bytes from nuq04s29-in-x0e.<span class="number">1</span>e100.net: icmp_seq=<span class="number">4</span> ttl=<span class="number">57</span> time=<span class="number">2.14</span> ms</span><br><span class="line"><span class="number">64</span> bytes from nuq04s29-in-x0e.<span class="number">1</span>e100.net: icmp_seq=<span class="number">5</span> ttl=<span class="number">57</span> time=<span class="number">1.93</span> ms</span><br></pre></td></tr></table></figure></p>
<p>如果发包成功,那就可以进行下一步了</p>
<h1 id="4_修改hosts">4 修改hosts</h1><p>因为ipv4无法访问google scholar,所以我们配置下hosts,让所有对访问google学术的,都使用ipv6去访问.执行命令如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/hosts</span><br></pre></td></tr></table></figure></p>
<p>我们在hosts文件的后面,添加如下内容:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2607<span class="pseudo">:f8b0</span><span class="pseudo">:4007</span><span class="pseudo">:805</span><span class="pseudo">::100f</span> <span class="tag">scholar</span><span class="class">.google</span><span class="class">.cn</span></span><br><span class="line">2607<span class="pseudo">:f8b0</span><span class="pseudo">:4007</span><span class="pseudo">:805</span><span class="pseudo">::100f</span> <span class="tag">scholar</span><span class="class">.google</span><span class="class">.com</span></span><br><span class="line">2607<span class="pseudo">:f8b0</span><span class="pseudo">:4007</span><span class="pseudo">:805</span><span class="pseudo">::100f</span> <span class="tag">scholar</span><span class="class">.google</span><span class="class">.com</span><span class="class">.hk</span></span><br><span class="line">2607<span class="pseudo">:f8b0</span><span class="pseudo">:4007</span><span class="pseudo">:805</span><span class="pseudo">::100f</span> <span class="tag">scholar</span><span class="class">.l</span><span class="class">.google</span><span class="class">.com</span></span><br></pre></td></tr></table></figure></p>
<p>ok,打完收工,睡觉</p>
<h1 id="参考文献">参考文献</h1><p>1 <a href="https://www.v2ex.com/t/163133" target="_blank" rel="external">一个解决 Google Scholar block DigitalOcean SFO IP 的方法</a><br>2 <a href="https://www.digitalocean.com/community/tutorials/how-to-enable-ipv6-for-digitalocean-droplets" target="_blank" rel="external">How To Enable IPv6 for DigitalOcean Droplets</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前配置了ubuntu的shadowsocks,用来做代理翻墙.不过,google scholar一直无解,因为digitalocean的ipv4的地址都被google scholar墙掉了.今天(其实离现在已经好多天了),看到一篇文章,很受启发,决定使用ipv6来试试.<br>]]>
    
    </summary>
    
      <category term="digitalocean" scheme="http://jackroyal.github.io/tags/digitalocean/"/>
    
      <category term="ipv6" scheme="http://jackroyal.github.io/tags/ipv6/"/>
    
      <category term="shadowsocks" scheme="http://jackroyal.github.io/tags/shadowsocks/"/>
    
      <category term="ubuntu" scheme="http://jackroyal.github.io/tags/ubuntu/"/>
    
      <category term="Linux" scheme="http://jackroyal.github.io/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[安装和配置hexo 3.0]]></title>
    <link href="http://jackroyal.github.io/2015/06/16/hexo-3-0-update/"/>
    <id>http://jackroyal.github.io/2015/06/16/hexo-3-0-update/</id>
    <published>2015-06-16T14:22:43.000Z</published>
    <updated>2015-10-29T06:08:50.371Z</updated>
    <content type="html"><![CDATA[<p>update：2015-06-24 16:56<br>额，谁会相信，其实这篇文章是拖了一周之后才写的。</p>
<p>因为最近换回了win7，所以之前搭建的hexo环境都没了，需要重新搭建。在网上看到hexo 3.0 还可以，而且，我妹子也换3.0了，so  我也换成hexo 3.0的。<br><a id="more"></a></p>
<h1 id="安装环境">安装环境</h1><p><strong>操作系统</strong>：win7<br><strong>相关版本</strong>：<br>            hexo-cli: 0.1.7<br>            os: Windows_NT 6.1.7601 win32 x64<br>            node: 0.12.4</p>
<h1 id="安装过程">安装过程</h1><h1 id="#_1-_安装Github_for_windows"># 1. 安装Github for windows</h1><p>因为我之前就在用Github,所以早就安装了这个.已经装过的同学请忽略这一段.<br>下载 <a href="https://windows.github.com/" title="Github for windows" target="_blank" rel="external">Github for windows</a> 并执行即可完成安装(<em>在线安装,会有点慢</em>)。这个软件的的好处是有一个带GUI的界面,还有一个终端界面.如图所示<br><img src="http://ww2.sinaimg.cn/large/692869a3jw1emplp1lz31j204w033mx0.jpg" alt="Github for windows"><br><img src="http://ww2.sinaimg.cn/large/692869a3gw1empluh6hvej210b0j741r.jpg" alt="GUI and Bash"></p>
<h1 id="#_2-_安装Node-js"># 2. 安装Node.js</h1><p>在 Windows 环境下安装 <a href="http://nodejs.org/" title="Node.js 官网" target="_blank" rel="external">Node.js</a> 非常简单，仅须下载安装文件并执行即可完成安装。（win下建议下载msi格式的，因为这样可以不用配置环境变量之类的）</p>
<h1 id="#_3-_测试node-js是否安装"># 3. 测试node.js是否安装</h1><p>在任何控制台输入(可以按windows键+R,输入cmd,然后输入npm,一般来说不会有问题)<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span></span><br></pre></td></tr></table></figure></p>
<p>返回值如下<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Usage</span>: <span class="string">npm &lt;command&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="stata">where &lt;command&gt; is <span class="keyword">one</span> of:</span><br><span class="line">    add-user, adduser, apihelp, author, bin, bugs, c, cache,</span><br><span class="line">    completion, config, ddp, dedupe, deprecate, docs, <span class="keyword">edit</span>,</span><br><span class="line">    explore, faq, find, find-dupes, get, <span class="keyword">help</span>, <span class="keyword">help</span>-<span class="keyword">search</span>,</span><br><span class="line">    home, i, info, init, install, isntall, issues, <span class="keyword">la</span>, link,</span><br><span class="line">    <span class="keyword">list</span>, ll, ln, login, <span class="keyword">ls</span>, outdated, owner, pack, prefix,</span><br><span class="line">    prune, publish, r, rb, rebuild, remove, repo, restart, <span class="keyword">rm</span>,</span><br><span class="line">    root, <span class="keyword">run</span>-script, s, <span class="keyword">se</span>, <span class="keyword">search</span>, <span class="keyword">set</span>, show, shrinkwrap,</span><br><span class="line">    star, stars, start, stop, submodule, t, tag, <span class="keyword">test</span>, tst, un,</span><br><span class="line">    uninstall, unlink, unpublish, unstar, up, <span class="keyword">update</span>, v,</span><br><span class="line">    <span class="keyword">version</span>, <span class="keyword">view</span>, whoami</span><br><span class="line"></span><br><span class="line">npm &lt;cmd&gt; -<span class="keyword">h</span>     quick <span class="keyword">help</span> <span class="keyword">on</span> &lt;cmd&gt;</span><br><span class="line">npm -<span class="keyword">l</span>           <span class="keyword">display</span> full usage info</span><br><span class="line">npm faq          commonly asked questions</span><br><span class="line">npm <span class="keyword">help</span> &lt;term&gt;  <span class="keyword">search</span> <span class="keyword">for</span> <span class="keyword">help</span> <span class="keyword">on</span> &lt;term&gt;</span><br><span class="line">npm <span class="keyword">help</span> npm     involved overview</span><br><span class="line"></span><br><span class="line">Specify configs <span class="keyword">in</span> the ini-formatted <span class="keyword">file</span>:</span><br><span class="line">    C:\Users\chenhao\.npmrc</span><br><span class="line">or <span class="keyword">on</span> the command <span class="keyword">line</span> via: npm &lt;command&gt; --key value</span><br><span class="line">Config info can be viewed via: npm <span class="keyword">help</span> config</span><br><span class="line"></span><br><span class="line">npm@1.4.28 <span class="keyword">D</span>:\<span class="keyword">Program</span> Files (x86)\nodejs\node_modules\npm</span></span><br></pre></td></tr></table></figure></p>
<p>看到这个结果,就表示你的node.js已经安装上去了<br><em>感谢我们家笨笨的反馈：</em>此处如果npm无效，首先确定win下你采用的是msi格式的安装文件，然后<strong>重启</strong>下电脑，应该就正常了。</p>
<h1 id="#_4-_安装hexo"># 4. 安装hexo</h1><p>接下来的操作我都是用<strong>Github for windows</strong>自带的Bash来完成的,因为后面会涉及到SSH,用<strong>Github for windows</strong>,就可以避免这个问题.</p>
<ul>
<li><p>在Bash中输入以下命令</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> hexo-cli -<span class="keyword">g</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建hexo文件夹<br>创建你hexo放置的文件夹,先用Bash进入到目标文件夹,比如我的是F:/blog/,接下来初始化hexo,自动生成相关的文件,在F:/blog/环境下,输入</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">cd</span> /f/<span class="keyword">blog </span> # 这个命令表示当前进入目录为f：/<span class="keyword">blog/</span><br><span class="line"></span><span class="label">hexo</span> init</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装依赖包</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>本地预览,做完以上操作,可以本地预览一下</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">g</span></span><br><span class="line">hexo <span class="literal">s</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>以上两条命令的意思是:<br>生成相关文件(就是生成目标html,静态博客嘛,就是很多html组成)<br>打开本地服务器预览(node.js就是干这事的,点击访问<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a>,就可以看到了)<br><strong>update-2015-09-29:</strong>在3.0版本中将<code>hexo server</code>(简写命令就是<code>hexo s</code>),独立成模块,需要手动安装,不然你执行<code>hexo s</code>,就会出现无法识别这个命令<br>安装方法和后面配置模块一样<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-server --save</span><br></pre></td></tr></table></figure></p>
<h2 id="ok,到这里,博客搭建基本完成,现在要做的就是把它发布到你的Github上去"><strong>ok</strong>,到这里,博客搭建基本完成,现在要做的就是把它发布到你的Github上去</h2><p>接下来,教你怎么发布到Github上去</p>
<h1 id="注册Github">注册Github</h1><p>这一步没什么说的,如果你连简单的注册都不会,我也不会教你╮(╯▽╰)╭</p>
<h1 id="创建公共库">创建公共库</h1><p>在自己Github主页右下角，创建一个新的repository(<a href="https://github.com/new" title="点我新建" target="_blank" rel="external">点这里</a>)。比如我的Github账号是Jackroyal，那么我应该创建的repository名字应该是Jackroyal.github.io(注意你的repository名字就是Jackroyal.github.io,我之前用的是Jackroyal怎么尝试都不行)。</p>
<blockquote>
<p>PS:有个大小写的问题其实我注册的是Jackroyal,大写的J,但是我访问的时候特别是带https的链接,他会自动转为小写访问.怎么说呢?简单点,你就按照你的用户名来,该大写大写,该小写小写</p>
</blockquote>
<h1 id="部署">部署</h1><p>现在万事俱备,只差部署了.<br>hexo3.0,跟2.0不同,deploy插件我们需要手动去安装,执行如下命令:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure></p>
<p>接下来,我们来配置deploy的信息,修改<code>_config.yml</code>.<br>这个文件在路径是F:/blog/_config.yml.<br>用编辑器把它打开,修改最后一段<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//github.com/Jackroyal/Jackroyal.github.io.git</span></span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure></p>
<p>照着我的这个格式修改就好了,把我里面的用户名替换成你的.<br>至此基本完成所有搭建步骤.</p>
<h1 id="上传">上传</h1><p>我们开始上传项目的代码,再重复一次,我一直以来用的工具都是<em>Github for windows</em>自带的Bash,所以我没有配置SSH,如果你用的windows自带的终端或者其他比如msysgit,可能需要配置SSH,不然无法使用Github(点击<a href="https://help.github.com/articles/generating-ssh-keys/" title="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="external"><code>这里</code></a>查看官方教程).<br>我们输入以下命令<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">g</span></span><br><span class="line">hexo <span class="literal">d</span></span><br></pre></td></tr></table></figure></p>
<p>或者偷个懒<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">d</span> -<span class="keyword">g</span></span><br></pre></td></tr></table></figure></p>
<p>ok,现在就可以去看看你的个人主页了,逼格满满有木有.<br>如果发布不成功,继续往下面看.</p>
<h1 id="配置hexo">配置hexo</h1><p>上面的内容和之前一样,接下来写,配置hexo 3.0的步骤.</p>
<h2 id="1_安装rss支持">1 安装rss支持</h2><p>执行如下命令:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> hexo-generator-feed <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure></p>
<p>我们接下来修改配置文件,编辑<code>_config.yml</code><br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">feed</span>:</span><br><span class="line">  <span class="attribute">type</span>: atom</span><br><span class="line">  <span class="attribute">path</span>: atom.xml</span><br><span class="line">  <span class="attribute">limit</span>: <span class="number">20</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2_安装sitemap支持">2 安装sitemap支持</h2><p>执行如下命令:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> hexo-generator-sitemap <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure></p>
<p>我们接下来修改配置文件,编辑<code>_config.yml</code><br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sitemap</span>:</span><br><span class="line">    <span class="attribute">path</span>: sitemap.xml</span><br></pre></td></tr></table></figure></p>
<p><strong>PS:类似的,还可以安装其他的插件,尤其注意<code>hexo-deployer-git</code>这个插件,如果你发布不成功,可能是这个插件没有装</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> hexo-generator-<span class="keyword">index</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">archive</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">category</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-tag <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="3_最终修改后的配置文件">3 最终修改后的配置文件</h2><p>我把我的配置文件分享出来给大家参考下:<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># Hexo Configuration</span></span><br><span class="line"><span class="preprocessor"># # Docs: http://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="preprocessor"># # Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Site</span></span><br><span class="line"><span class="label">title:</span> 搁浅<span class="keyword">St</span>的blog</span><br><span class="line"><span class="label">subtitle:</span> 我最喜欢笨笨</span><br><span class="line"><span class="label">description:</span> jackroyal 博客 搁浅<span class="keyword">St</span> 笨笨</span><br><span class="line"><span class="label">author:</span> 搁浅<span class="keyword">St</span></span><br><span class="line"><span class="label">author:</span> John Doe</span><br><span class="line"><span class="label">language:</span> <span class="built_in">zh</span>-CN</span><br><span class="line"><span class="label">timezone:</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># URL</span></span><br><span class="line"><span class="preprocessor"># # If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="label">url:</span> http://jackroyal.github.io</span><br><span class="line"><span class="label">root:</span> /</span><br><span class="line"><span class="label">permalink:</span> :year/:month/:day/:title/</span><br><span class="line"><span class="label">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Directory</span></span><br><span class="line"><span class="label">source_dir:</span> source</span><br><span class="line"><span class="label">public_dir:</span> public</span><br><span class="line"><span class="label">tag_dir:</span> tags</span><br><span class="line"><span class="label">archive_dir:</span> archives</span><br><span class="line"><span class="label">category_dir:</span> categories</span><br><span class="line"><span class="label">code_dir:</span> downloads/code</span><br><span class="line"><span class="label">i18n_dir:</span> :lang</span><br><span class="line"><span class="label">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Writing</span></span><br><span class="line"><span class="label">new_post_name:</span> :title.md <span class="preprocessor"># File name of new posts</span></span><br><span class="line"><span class="label">default_layout:</span> post</span><br><span class="line"><span class="label">titlecase:</span> false <span class="preprocessor"># Transform title into titlecase</span></span><br><span class="line"><span class="label">external_link:</span> true <span class="preprocessor"># Open external links in new tab</span></span><br><span class="line"><span class="label">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="label">render_drafts:</span> false</span><br><span class="line"><span class="label">post_asset_folder:</span> false</span><br><span class="line"><span class="label">relative_link:</span> false</span><br><span class="line"><span class="label">future:</span> true</span><br><span class="line"><span class="label">highlight:</span></span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: true</span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Category &amp; Tag</span></span><br><span class="line"><span class="label">default_category:</span> uncategorized</span><br><span class="line"><span class="label">category_map:</span></span><br><span class="line"><span class="label">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Date / Time format</span></span><br><span class="line"><span class="preprocessor"># # Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="preprocessor"># # You can customize the date format as defined in</span></span><br><span class="line"><span class="preprocessor"># # http://momentjs.com/docs/# /displaying/format/</span></span><br><span class="line"><span class="label">date_format:</span> YYYY-MM-DD</span><br><span class="line"><span class="label">time_format:</span> HH:mm:ss</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Pagination</span></span><br><span class="line"><span class="preprocessor"># # Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="label">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="label">pagination_dir:</span> page</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Extensions</span></span><br><span class="line"><span class="preprocessor"># # Plugins: http://hexo.io/plugins/</span></span><br><span class="line"></span><br><span class="line"><span class="label">index_generator:</span></span><br><span class="line">  per_page: <span class="number">10</span> <span class="preprocessor">## 首页默认10篇文章标题 如果值为0不分页</span></span><br><span class="line"></span><br><span class="line"><span class="label">archive_generator:</span></span><br><span class="line">    per_page: <span class="number">10</span> <span class="preprocessor">## 归档页面默认10篇文章标题</span></span><br><span class="line">    yearly: true  <span class="preprocessor">## 生成年视图</span></span><br><span class="line">    monthly: true <span class="preprocessor">## 生成月视图</span></span><br><span class="line"></span><br><span class="line"><span class="label">tag_generator:</span></span><br><span class="line">    per_page: <span class="number">10</span> <span class="preprocessor">## 标签分类页面默认10篇文章</span></span><br><span class="line"></span><br><span class="line"><span class="label">category_generator:</span></span><br><span class="line">    per_page: <span class="number">10</span> <span class="preprocessor">### 分类页面默认10篇文章</span></span><br><span class="line"></span><br><span class="line"><span class="label">sitemap:</span></span><br><span class="line">    path: sitemap.xml</span><br><span class="line"></span><br><span class="line"><span class="label">feed:</span></span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="label">duoshuo_shortname:</span> jackroyal  <span class="preprocessor">## 这里填写你的多说的短网址</span></span><br><span class="line"><span class="preprocessor"># # Themes: http://hexo.io/themes/</span></span><br><span class="line"><span class="label">theme:</span> light   <span class="preprocessor">## 主题的名称,我用的是light,默认的是landscape</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Deployment</span></span><br><span class="line"><span class="preprocessor"># # Docs: http://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="label">deploy:</span></span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/Jackroyal/Jackroyal.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p>
<p>hexo 3.0有一些新的特性,插件的封装更好了,插件安装和管理很方便.<br>hexo还支持多发布,可以同时发布到github和gitcafe.</p>
<h1 id="参考文献">参考文献</h1><p>1 <a href="https://hexo.io/zh-cn/docs/server.html" target="_blank" rel="external">hexo 服务器</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>update：2015-06-24 16:56<br>额，谁会相信，其实这篇文章是拖了一周之后才写的。</p>
<p>因为最近换回了win7，所以之前搭建的hexo环境都没了，需要重新搭建。在网上看到hexo 3.0 还可以，而且，我妹子也换3.0了，so  我也换成hexo 3.0的。<br>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://jackroyal.github.io/tags/hexo/"/>
    
      <category term="hexo" scheme="http://jackroyal.github.io/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[给hexo配置上评论和访问量]]></title>
    <link href="http://jackroyal.github.io/2015/05/30/hexo-setting-with-comments-and-visitors/"/>
    <id>http://jackroyal.github.io/2015/05/30/hexo-setting-with-comments-and-visitors/</id>
    <published>2015-05-30T06:08:49.000Z</published>
    <updated>2015-10-29T06:08:49.539Z</updated>
    <content type="html"><![CDATA[<p>哈哈,我们家笨笨,绝对是我学习技术的很大很大很大大的动力.更开始用github pages的时候,就觉得没法看访问量和评论数量这事,很蛋疼,不过也没折腾.<br>今天上午,我们家笨笨说没有评论和访问量不好,都不知道多少人看了.妹子都发话了,果断要搞定.<br><a id="more"></a><br>google一番找到解决方法:</p>
<h4 id="1_关于评论数量的显示,我们可以直接使用多说官网提供的方法,很简单">1 关于评论数量的显示,我们可以直接使用多说官网提供的方法,很简单</h4><h4 id="2_关于访问量统计这事儿,不太好搞,我找到了这个不蒜子,这位非著名码农自己做的访问统计,哈哈,点个赞">2 关于访问量统计这事儿,不太好搞,我找到了这个<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="external">不蒜子</a>,这位非著名码农自己做的访问统计,哈哈,点个赞</h4><h4 id="3_今天还看到了font-awesome,可以显示一些小图标,为了显示效果更好,一并加上去">3 今天还看到了font-awesome,可以显示一些小图标,为了显示效果更好,一并加上去</h4><p>先展示一下最终的效果:<br><br><img src="http://ww1.sinaimg.cn/large/692869a3gw1esm9snxfcuj20su0ad74x.jpg" alt="页底关于整站访问量的显示"><br><img src="http://ww4.sinaimg.cn/large/692869a3gw1esm9tcczdij20r00doq4t.jpg" alt="文章页面关于访问量和评论数量的显示"></p>
<p>下面,开始动手</p>
<h1 id="1_配置评论数量的显示">1 配置评论数量的显示</h1><p>首先,确认你的评论系统用的是多说,如果不是,那就不用继续往下看了(参考<a href="http://localhost:4000/2014/11/28/custom-hexo/" target="_blank" rel="external">这里</a>配置多说).<br>我使用的主题是<code>light</code>,其他主题原理类似.我们打开<code>themes/light/layout/_partial/article.ejs</code>,我们在<code>header</code>标签的尾部添加上下面的代码:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">%</span> <span class="attribute">if</span> (<span class="attribute">item.excerpt</span> &amp;&amp; <span class="attribute">index</span>)&#123; %&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="title">%</span> &#125; <span class="attribute">else</span> &#123; %&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"busuanzi_container_page_pv"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"head-plus"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"fa fa-user"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span><span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"busuanzi_value_page_pv"</span>&gt;</span><span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"fa fa-spinner fa-spin"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>次访问</span><br><span class="line">   <span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"head-plus"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"fa fa-comments"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"ds-thread-count"</span> <span class="attribute">data-thread-key</span>=<span class="value">"&lt;%= page.layout %&gt;-&lt;%= page.slug %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"fa fa-spinner fa-spin"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>条评论</span><br><span class="line">   <span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="title">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>最终效果如图<br><br><img src="http://ww2.sinaimg.cn/large/692869a3gw1esmas5d58oj20x50jc46f.jpg" alt="修改后的article.ejs"><br>以上代码,是最终成型的代码,我加入了一些美化的东西,最核心的就是<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"ds-thread-count"</span> <span class="attribute">data-thread-key</span>=<span class="value">"&lt;%= page.layout %&gt;-&lt;%= page.slug %&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>尤其注意<code>data-thread-key</code>的设置,他和你之前配置多说的时候是一致的,每篇文章有一个独一无二的key,你可以去你的<code>themes/light/layout/_partial/comment.ejs</code>里找到关于data-thread-key的内容,直接复制过来即可.</p>
<p>Ps:这里我们可能还需要配置下数据显示的格式,在你的多说后台管理里面,进入设置界面如图<br><img src="http://ww3.sinaimg.cn/large/692869a3gw1esmayan2utj20w50mx0ya.jpg" alt="多说后台设置"><br>我们找到<code>暂无评论</code>,<code>1条评论</code>,<code>{num}条评论</code>,这几个设置,修改成自己要的格式,也可以参照我的修改,<code>0</code>,<code>1</code>,<code>{num}</code></p>
<h1 id="2_配置文章访问量的显示">2 配置文章访问量的显示</h1><p>这个更简单了,按照作者的说法,只需要引入一个js,再添加一个span就完成了.由于js一般放置在页面的最底部,所以我们找到<code>themes/light/layout/_partial/after_footer.ejs</code>,我们在最后添加上下面的代码:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>上面就完成了js文件的引入,我们再在要显示访问量的地方添加一个span就行了.比如我想显示在标题的下面,那就打开<code>themes/light/layout/_partial/article.ejs</code>,添加的代码,就是<code>第一步</code>里面添加的那个.如果你想简洁一点,也可以只添加下面核心代码就行:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">本站总访问量<span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"busuanzi_value_site_pv"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>次</span><br><span class="line">本站访客数<span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>人次</span><br><span class="line">本文总阅读量<span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"busuanzi_value_page_pv"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>次</span><br></pre></td></tr></table></figure></p>
<h1 id="3_经过美化后最终的代码">3  经过美化后最终的代码</h1><p>如果只用官方提供的代码,没有优化,很丑,我优化了下,分享一下.</p>
<p>1.修改<code>themes/light/layout/_partial/article.ejs</code>,在header标签的末尾添加以下代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">%</span> <span class="attribute">if</span> (<span class="attribute">item.excerpt</span> &amp;&amp; <span class="attribute">index</span>)&#123; %&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="title">%</span> &#125; <span class="attribute">else</span> &#123; %&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"busuanzi_container_page_pv"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"head-plus"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"fa fa-user"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span><span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"busuanzi_value_page_pv"</span>&gt;</span><span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"fa fa-spinner fa-spin"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>次访问</span><br><span class="line">   <span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"head-plus"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"fa fa-comments"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"ds-thread-count"</span> <span class="attribute">data-thread-key</span>=<span class="value">"&lt;%= page.layout %&gt;-&lt;%= page.slug %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"fa fa-spinner fa-spin"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>条评论</span><br><span class="line">   <span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="title">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://ww2.sinaimg.cn/large/692869a3gw1esmas5d58oj20x50jc46f.jpg" alt="修改后的article.ejs"><br>2.修改<code>themes/light/layout/_partial/footer.ejs</code>,下面是footer.ejs的<strong>全部代码</strong>:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"alignleft"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">%</span> <span class="attribute">if</span> (<span class="attribute">config.author</span>)&#123; %&gt;</span></span><br><span class="line">  &amp;copy; <span class="tag">&lt;<span class="title">%=</span> <span class="attribute">new</span> <span class="attribute">Date</span>()<span class="attribute">.getFullYear</span>() %&gt;</span> <span class="tag">&lt;<span class="title">%=</span> <span class="attribute">config.author</span> %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">%</span> &#125; <span class="attribute">else</span> &#123; %&gt;</span></span><br><span class="line">  &amp;copy; <span class="tag">&lt;<span class="title">%=</span> <span class="attribute">new</span> <span class="attribute">Date</span>()<span class="attribute">.getFullYear</span>() %&gt;</span> <span class="tag">&lt;<span class="title">%=</span> <span class="attribute">config.title</span> %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">%</span> &#125; %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"busuanzi_container_site_pv"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"fa fa-flag"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span>    你是第<span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"busuanzi_value_site_pv"</span>&gt;</span><span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"fa fa-spinner fa-spin"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>个到访的小伙伴</span><br><span class="line"><span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"clearfix"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><br>3.修改<code>themes/light/layout/_partial/after_footer.ejs</code>,我们在<strong>最后</strong>添加上下面的代码:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>4.修改<code>themes\light\source\css\_partial\article.styl</code>,我们在第124行,在<code>.entry</code>之前添加上以下代码,尤其注意与左右的间距,因为它是一个树形结构,它与左侧的距离,影响着它的层级.我们这里应该和entry平级,下面代码应该与<code>.entry</code>对齐<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.busuanzi_container_page_pv</span><br><span class="line">    margin:<span class="number">20</span>px <span class="number">0</span></span><br><span class="line">    color: <span class="preprocessor"># <span class="number">817</span>C7C</span></span><br><span class="line">    font-size: <span class="number">12</span>px</span><br><span class="line"><span class="preprocessor"># busuanzi_value_page_pv</span></span><br><span class="line">    padding-left:<span class="number">4</span>px</span><br><span class="line">.head-plus</span><br><span class="line">    padding-left:<span class="number">4</span>px</span><br><span class="line">.ds-thread-count</span><br><span class="line">    padding-left:<span class="number">4</span>px</span><br></pre></td></tr></table></figure></p>
<p>最终效果如图:<br><img src="http://ww4.sinaimg.cn/large/692869a3gw1esmajbsx38j20k30gwadu.jpg" alt="添加css,注意左对齐"><br>5.修改<code>themes\light\source\css\_partial\footer.styl</code>,在最后添加上以下代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># busuanzi_value_site_pv</span></span><br><span class="line">  color:black</span><br><span class="line">  padding:<span class="number">4</span>px</span><br><span class="line"><span class="preprocessor"># busuanzi_container_site_pv</span></span><br><span class="line">  padding-left:<span class="number">2</span>em</span><br></pre></td></tr></table></figure></p>
<p>6.修改<code>themes\light\source\css\_partial\variable.styl</code>,在最后添加以下代码<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="at_rule">@import</span> <span class="function"><span class="title">url</span><span class="params">(<span class="string">"http://libs.useso.com/js/font-awesome/4.2.0/css/font-awesome.min.css"</span>)</span></span></span><br></pre></td></tr></table></figure></p>
<p>ok  打完收工</p>
<h1 id="参考文献">参考文献</h1><p>1 博客访问技术工具–不蒜子 <a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="external">http://ibruce.info/2015/04/04/busuanzi/</a><br>2 <a href="http://dev.duoshuo.com/docs/5016427f77cf5fa30500000e" target="_blank" rel="external">多说-代码显示【文章评论数】方法</a></p>
<h1 id="致谢">致谢</h1><p>这里，要感谢我最亲爱的笨笨<a href="http://huirong.github.io" target="_blank" rel="external">http://huirong.github.io</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>哈哈,我们家笨笨,绝对是我学习技术的很大很大很大大的动力.更开始用github pages的时候,就觉得没法看访问量和评论数量这事,很蛋疼,不过也没折腾.<br>今天上午,我们家笨笨说没有评论和访问量不好,都不知道多少人看了.妹子都发话了,果断要搞定.<br>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://jackroyal.github.io/tags/hexo/"/>
    
      <category term="hexo" scheme="http://jackroyal.github.io/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于python的requests库，模拟登录csdn博客]]></title>
    <link href="http://jackroyal.github.io/2015/05/23/python-requests-login-csdn-blog/"/>
    <id>http://jackroyal.github.io/2015/05/23/python-requests-login-csdn-blog/</id>
    <published>2015-05-23T11:06:04.000Z</published>
    <updated>2015-10-29T06:08:45.707Z</updated>
    <content type="html"><![CDATA[<p>还是继续我的python学习。以前写的爬虫用的urllib2来实现，也用过scrapy的爬虫框架，这次试试requests，刚开始用，用起来确实比urllib2好，封装的更好一些，使用起来简单方便很多。<br><a id="more"></a></p>
<h1 id="安装requests库">安装requests库</h1><p>在ubuntu下面安装很简单<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure></p>
<p>就搞定了</p>
<h1 id="快速上手的小例子">快速上手的小例子</h1><p>下面给个快速入门，最简单的例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line"><span class="keyword">print</span> r.text</span><br></pre></td></tr></table></figure></p>
<p>这段代码，很简单。<br>第一行，引入requests库，这是必然的。<br>第二行，通过get方式获取baidu首页的内容。<br>第三行，把返回的response内容，输出出来</p>
<p>果然很简单，这样就可以发送一个get请求，同理，你还可以使用<br><code>requests.post</code>,<code>requests.put</code>,<code>requests.options</code>,<code>requests.head</code>，发送请求，没错就是这么简单，果然比urllib2好用。</p>
<h1 id="模拟登录csdn">模拟登录csdn</h1><p>我们需要其他的辅助工具</p>
<h3 id="浏览器：Firefox">浏览器：Firefox</h3><h3 id="浏览器插件：tamper_data，firebug">浏览器插件：tamper data，firebug</h3><p>我们需要tamper data来拦截请求，因为chrome没有这个功能的插件，所以这个只能使用firefox来做（除了拦截请求chrome没有，其他的工作都可以用chrome，看个人喜好吧）。</p>
<h1 id="分析登录过程">分析登录过程</h1><h2 id="1_打开登录页面">1 打开登录页面</h2><p>我们首先打开csdn的登录页面<code>https://passport.csdn.net/account/login?ref=toolbar</code><br>这个链接，前面部分是登录的网址，问号后面的参数，顾名思义，referer，就是你从哪里跳过来的，也许是一个页面跳转到登录的，toolbar就是我自己点击顶部导航栏，然后跳转到登录页面的。</p>
<h2 id="2_清除相关的cookie">2 清除相关的cookie</h2><p>为了排除不必要的干扰，我们先清除掉所有的相关的cookie，这样方便我们分析哪些参数是必须的。<br><img src="http://ww1.sinaimg.cn/large/692869a3gw1esegc1itw2j20qu075779.jpg" alt="firefox中，清除cookie"></p>
<h2 id="3_登录过程分析">3 登录过程分析</h2><p>清除了cookie后，我们刷新一下页面<code>https://passport.csdn.net/account/login?ref=toolbar</code>，重新获取对应的cookie。<br>然后我们就开始用tamper data来拦截请求。<br><img src="http://ww2.sinaimg.cn/large/692869a3gw1esegfztiz7j20s40ftdjw.jpg" alt="使用tamper data"><br>我们点击<code>start tamper</code>，在网页中填写用户名和密码。点击<code>登录</code>，会发出一个请求，然后tamper data会拦截下这个请求，询问我们是否拦截，点击tamper，我们可以在这个请求提交之前，查看请求的内容，还可以做删改。<br><img src="http://ww1.sinaimg.cn/large/692869a3gw1esegkslypyj20y20gntdt.jpg" alt="发出第一个登录请求前拦截下来，查看表单内容"><br>csdn的登录过程比较简单，发送一个登录表单过去，就登录成功了，不过记得修改headers，这是后话。</p>
<h2 id="4_开始模拟登录">4 开始模拟登录</h2><p>知道登录过程了，我们就开始写登录的代码。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 使用beautifulsoup来处理获取的html内容，这个库需要安装，还是使用pip install beautifulsoup4来安装</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"><span class="comment"># 这个函数使用来提取流水号的</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">toJson</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="string">'''</span><br><span class="line">    提取lt流水号，将数据化为一个字典</span><br><span class="line">    '''</span></span><br><span class="line">    soup = bs(str)</span><br><span class="line">    tt = &#123;&#125;</span><br><span class="line">    <span class="comment"># 提取form表单中所有的input标签，以字典的形式来保存name：value</span></span><br><span class="line">    <span class="keyword">for</span> inp <span class="keyword">in</span> soup.form.find_all(<span class="string">'input'</span>):</span><br><span class="line">        <span class="keyword">if</span> inp.get(<span class="string">'name'</span>) != <span class="keyword">None</span>:</span><br><span class="line">            tt[inp.get(<span class="string">'name'</span>)] =inp.get(<span class="string">'value'</span>)</span><br><span class="line">    <span class="keyword">return</span> tt</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 这行代码，是用来维持cookie的，你后续的操作都不用担心cookie，他会自动带上相应的cookie</span></span><br><span class="line">s = requests.Session()</span><br><span class="line"><span class="comment"># 我们需要带表单的参数,这里面有个参数lt,登录操作的流水号，我们需要从html页面中进行提取</span></span><br><span class="line">payload =&#123;<span class="string">'username'</span>:<span class="string">'jackroyal'</span>,<span class="string">'password'</span>:<span class="string">'123456'</span>,<span class="string">'lt'</span>:soup[<span class="string">"lt"</span>],<span class="string">'execution'</span>:<span class="string">'e1s1'</span>,<span class="string">'_eventId'</span>:<span class="string">'submit'</span>&#125;</span><br><span class="line">r = s.post(<span class="string">"http://passport.csdn.net/account/login"</span>,data=payload,headers=header)</span><br><span class="line"><span class="keyword">print</span> r.text</span><br></pre></td></tr></table></figure></p>
<p>ok，至此，登录就成功了</p>
<h2 id="5_优化">5 优化</h2><p>当你登录成功后，你会问，我怎么知道登录成功了呢？当你试图去抓取<code>http://write.blog.csdn.net/postlist</code>的内容的时候，你会发现一个403的错误，这是为啥呢？<br>很简单，<code>user agent</code>没有修改，我们用的是默认的<code>user agent</code>，这可不是一个正常的用户，所以被网站拒绝了。我们加上他就好了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">header = &#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:38.0) Gecko/20100101 Firefox/38.0'</span>&#125;</span><br><span class="line">r = s.post(<span class="string">"http://passport.csdn.net/account/login"</span>,data=payload,headers=header)</span><br><span class="line"><span class="keyword">print</span> r.text</span><br></pre></td></tr></table></figure></p>
<h1 id="后话">后话</h1><p>上面的代码还是太简单，我们都知道cookie是有有效期的，我在做调试的时候，没修改一次，就要模拟登录一次，这样不好，我们要保存cookie，这样下次就不需要重新发送登录请求了<br>分享出完整的代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"><span class="keyword">from</span> cookielib <span class="keyword">import</span> LWPCookieJar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">toJson</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="string">'''</span><br><span class="line">    提取lt流水号，将数据化为一个字典</span><br><span class="line">    '''</span></span><br><span class="line">    soup = bs(str)</span><br><span class="line">    tt = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> inp <span class="keyword">in</span> soup.form.find_all(<span class="string">'input'</span>):</span><br><span class="line">        <span class="keyword">if</span> inp.get(<span class="string">'name'</span>) != <span class="keyword">None</span>:</span><br><span class="line">            tt[inp.get(<span class="string">'name'</span>)] =inp.get(<span class="string">'value'</span>)</span><br><span class="line">    <span class="keyword">return</span> tt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># cookie setting</span></span><br><span class="line">s = requests.Session()</span><br><span class="line">s.cookies = LWPCookieJar(<span class="string">'cookiejar'</span>)</span><br><span class="line">header = &#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:38.0) Gecko/20100101 Firefox/38.0'</span>&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'cookiejar'</span>):</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"there is no cookie,setting"</span></span><br><span class="line">    r = s.get(<span class="string">"http://passport.csdn.net/account/login"</span>)</span><br><span class="line">    soup = toJson(r.text)</span><br><span class="line">    payload =&#123;<span class="string">'username'</span>:<span class="string">'jackroyal'</span>,<span class="string">'password'</span>:<span class="string">'123456'</span>,<span class="string">'lt'</span>:soup[<span class="string">"lt"</span>],<span class="string">'execution'</span>:<span class="string">'e1s1'</span>,<span class="string">'_eventId'</span>:<span class="string">'submit'</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> payload</span><br><span class="line">    r = s.post(<span class="string">"http://passport.csdn.net/account/login"</span>,data=payload,headers=header)</span><br><span class="line">    s.cookies.save(ignore_discard=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> r.text</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"cookie exists,restore"</span></span><br><span class="line">    s.cookies.load(ignore_discard=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># r = s.get("https://passport.csdn.net/content/loginbox/loginapi.js")</span></span><br><span class="line">r = s.get(<span class="string">"http://write.blog.csdn.net/postlist"</span>,headers=header)</span><br><span class="line"><span class="keyword">print</span> r.text</span><br></pre></td></tr></table></figure></p>
<h1 id="参考文献">参考文献</h1><p>1 <a href="http://requests-docs-cn.readthedocs.org/zh_CN/latest/user/quickstart.html" target="_blank" rel="external">requests官方文档快速上手——中文版</a><br>2 <a href="http://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="external">beautifuisoup官方文档</a><br>3 <a href="http://stackoverflow.com/questions/13030095/how-to-save-requests-python-cookies-to-a-file" target="_blank" rel="external">python的requests如何保存cookie到文件</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>还是继续我的python学习。以前写的爬虫用的urllib2来实现，也用过scrapy的爬虫框架，这次试试requests，刚开始用，用起来确实比urllib2好，封装的更好一些，使用起来简单方便很多。<br>]]>
    
    </summary>
    
      <category term="csdn" scheme="http://jackroyal.github.io/tags/csdn/"/>
    
      <category term="python" scheme="http://jackroyal.github.io/tags/python/"/>
    
      <category term="requests" scheme="http://jackroyal.github.io/tags/requests/"/>
    
      <category term="模拟登录" scheme="http://jackroyal.github.io/tags/%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/"/>
    
      <category term="python学习笔记" scheme="http://jackroyal.github.io/categories/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[html5在ie中遇到的那些坑]]></title>
    <link href="http://jackroyal.github.io/2015/05/15/holes-in-ie6-about-html5/"/>
    <id>http://jackroyal.github.io/2015/05/15/holes-in-ie6-about-html5/</id>
    <published>2015-05-15T15:19:43.000Z</published>
    <updated>2015-10-29T06:08:49.149Z</updated>
    <content type="html"><![CDATA[<p>这段时间,笨笨找了个活儿,做一个页面,能够适配所有的主流浏览器,包括pc,平板和手机等终端(这和当年某刘提的要求一样啊).<br>我第一个想到的是bootstrap,可惜这货太大了,我只是几个简单的页面,没必要用这么大体量的东西.<br>搜索一番以后,我找到了我的解决方案,media query,支付宝也是这么解决的.<br><a id="more"></a></p>
<h1 id="前提条件">前提条件</h1><p>以下所给出的例子,都是html5的页面,不合适html4.0的页面,也就是说你的头部必须是<br><code>&lt;!DOCTYPE html&gt;</code>才行,如果是<code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</code>,是不行的,要仔细看清楚哈.<br>下面就来罗列一下,这次经过的那些坑:</p>
<h1 id="1_自动适配终端屏幕宽度">1  自动适配终端屏幕宽度</h1><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta <span class="property">name</span>=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"</span>&gt;</span><br></pre></td></tr></table></figure>
<p>content属性值 :<br>     width:可视区域的宽度，值可为数字或关键词device-width<br>     height:同width<br>     intial-scale:页面首次被显示是可视区域的缩放级别，取值1.0则页面按实际尺寸显示，无任何缩放<br>     maximum-scale=1.0, minimum-scale=1.0;可视区域的缩放级别，<br>              maximum-scale用户可将页面放大的程序，1.0将禁止用户放大到实际尺寸之上。<br>     user-scalable:是否可对页面进行缩放，no 禁止缩放</p>
<h1 id="2_使ie6-8支持html5的元素">2  使ie6-8支持html5的元素</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML5 shim, for IE6-8 support of HTML5 elements --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span><br><span class="line">&lt;script src="http://html5shim.googlecode.com/svn/trunk/html5.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>
<p>以上代码,顾名思义,当ie的版本是9一下的时候,加载html5.js这个文件(建议最好下载下来在本地调用),他是用来帮助ie6-8支持html元素的.</p>
<h1 id="3_ie10以下的版本不支持placeholder(不完美解决)">3  ie10以下的版本不支持placeholder(不完美解决)</h1><p>placeholder是html5里面才有的东东,ie8不支持就算了,ie9都不支持,伤不起.这个没办法,只能用js去写,网上有很多类似的东西,不过不是很好用,我找到的都不完美.<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">function</span><span class="list">($)</span> <span class="collection">&#123;</span><br><span class="line">  /**</span><br><span class="line">   * 没有开花的树</span><br><span class="line">   * http://blog.csdn.net/mycwq/</span><br><span class="line">   * <span class="number">2012</span>/<span class="number">11</span>/<span class="number">28</span> <span class="number">15</span>:<span class="number">12</span></span><br><span class="line">   */</span><br><span class="line"></span><br><span class="line">  var placeholderfriend = <span class="collection">&#123;</span><br><span class="line">    focus: function<span class="list">(<span class="keyword">s</span>)</span> <span class="collection">&#123;</span><br><span class="line">      s = $<span class="list">(<span class="keyword">s</span>)</span>.hide<span class="list">()</span>.prev<span class="list">()</span>.show<span class="list">()</span>.focus<span class="list">()</span><span class="comment">;</span></span><br><span class="line">      var idValue = s.attr<span class="list">(<span class="string">"id"</span>)</span><span class="comment">;</span></span><br><span class="line">      if <span class="list">(<span class="keyword">idValue</span>)</span> <span class="collection">&#123;</span><br><span class="line">        s.attr<span class="list">(<span class="string">"id"</span>, idValue.replace<span class="list">(<span class="string">"placeholderfriend"</span>, <span class="string">""</span>)</span>)</span><span class="comment">;</span></span><br><span class="line">      &#125;</span></span><br><span class="line">      var clsValue = s.attr<span class="list">(<span class="string">"class"</span>)</span><span class="comment">;</span></span><br><span class="line">      if <span class="list">(<span class="keyword">clsValue</span>)</span> <span class="collection">&#123;</span><br><span class="line">        s.attr<span class="list">(<span class="string">"class"</span>, clsValue.replace<span class="list">(<span class="string">"placeholderfriend"</span>, <span class="string">""</span>)</span>)</span><span class="comment">;</span></span><br><span class="line">      &#125;</span></span><br><span class="line">    &#125;</span></span><br><span class="line">  &#125;</span></span><br><span class="line"></span><br><span class="line">  //判断是否支持placeholder</span><br><span class="line">  function isPlaceholer<span class="list">()</span> <span class="collection">&#123;</span><br><span class="line">    var input = document.createElement<span class="list">(<span class="keyword">'input'</span>)</span><span class="comment">;</span></span><br><span class="line">    return <span class="string">"placeholder"</span> in input;</span><br><span class="line">  &#125;</span></span><br><span class="line">  //不支持的代码</span><br><span class="line">  if <span class="list">(<span class="keyword">!isPlaceholer</span><span class="list">()</span>)</span> <span class="collection">&#123;</span><br><span class="line">    $<span class="list">(<span class="keyword">function</span><span class="list">()</span> <span class="collection">&#123;</span><br><span class="line"></span><br><span class="line">      var form = $<span class="list">(<span class="keyword">this</span>)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">      //遍历所有文本框，添加placeholder模拟事件</span><br><span class="line">      var elements = form.find<span class="list">(<span class="string">"input[type='text'][placeholder]"</span>)</span><span class="comment">;</span></span><br><span class="line">      elements.each<span class="list">(<span class="keyword">function</span><span class="list">()</span> <span class="collection">&#123;</span><br><span class="line">        var s = $<span class="list">(<span class="keyword">this</span>)</span><span class="comment">;</span></span><br><span class="line">        var pValue = s.attr<span class="list">(<span class="string">"placeholder"</span>)</span><span class="comment">;</span></span><br><span class="line">        var sValue = s.val<span class="list">()</span><span class="comment">;</span></span><br><span class="line">        if <span class="list">(<span class="keyword">pValue</span>)</span> <span class="collection">&#123;</span><br><span class="line">          if <span class="list">(<span class="keyword">sValue</span> == '')</span> <span class="collection">&#123;</span><br><span class="line">            s.val<span class="list">(<span class="keyword">pValue</span>)</span><span class="comment">;</span></span><br><span class="line">          &#125;</span></span><br><span class="line">        &#125;</span></span><br><span class="line">      &#125;</span>)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">      elements.focus<span class="list">(<span class="keyword">function</span><span class="list">()</span> <span class="collection">&#123;</span><br><span class="line">        var s = $<span class="list">(<span class="keyword">this</span>)</span><span class="comment">;</span></span><br><span class="line">        var pValue = s.attr<span class="list">(<span class="string">"placeholder"</span>)</span><span class="comment">;</span></span><br><span class="line">        var sValue = s.val<span class="list">()</span><span class="comment">;</span></span><br><span class="line">        if <span class="list">(<span class="keyword">sValue</span> &amp;&amp; pValue)</span> <span class="collection">&#123;</span><br><span class="line">          if <span class="list">(<span class="keyword">sValue</span> == pValue)</span> <span class="collection">&#123;</span><br><span class="line">            s.val<span class="list">(<span class="keyword">''</span>)</span><span class="comment">;</span></span><br><span class="line">          &#125;</span></span><br><span class="line">        &#125;</span></span><br><span class="line">      &#125;</span>)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">      elements.blur<span class="list">(<span class="keyword">function</span><span class="list">()</span> <span class="collection">&#123;</span><br><span class="line">        var s = $<span class="list">(<span class="keyword">this</span>)</span><span class="comment">;</span></span><br><span class="line">        var pValue = s.attr<span class="list">(<span class="string">"placeholder"</span>)</span><span class="comment">;</span></span><br><span class="line">        var sValue = s.val<span class="list">()</span><span class="comment">;</span></span><br><span class="line">        if <span class="list">(<span class="keyword">!sValue</span>)</span> <span class="collection">&#123;</span><br><span class="line">          s.val<span class="list">(<span class="keyword">pValue</span>)</span><span class="comment">;</span></span><br><span class="line">        &#125;</span></span><br><span class="line">      &#125;</span>)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">      //遍历所有密码框，添加placeholder模拟事件</span><br><span class="line">      var elementsPass = form.find<span class="list">(<span class="string">"input[type='password'][placeholder]"</span>)</span><span class="comment">;</span></span><br><span class="line">      elementsPass.each<span class="list">(<span class="keyword">function</span><span class="list">(<span class="keyword">i</span>)</span> <span class="collection">&#123;</span><br><span class="line">        var s = $<span class="list">(<span class="keyword">this</span>)</span><span class="comment">;</span></span><br><span class="line">        var pValue = s.attr<span class="list">(<span class="string">"placeholder"</span>)</span><span class="comment">;</span></span><br><span class="line">        var sValue = s.val<span class="list">()</span><span class="comment">;</span></span><br><span class="line">        if <span class="list">(<span class="keyword">pValue</span>)</span> <span class="collection">&#123;</span><br><span class="line">          if <span class="list">(<span class="keyword">sValue</span> == '')</span> <span class="collection">&#123;</span><br><span class="line">            //DOM不支持type的修改，需要复制密码框属性，生成新的DOM</span><br><span class="line">            var html = this.outerHTML || <span class="string">""</span><span class="comment">;</span></span><br><span class="line">            html = html.replace<span class="list">(/\s*type=<span class="list">(<span class="collection">['<span class="string">"])?password\1/gi, "</span> type=text placeholderfriend<span class="string">")</span><br><span class="line">              .replace(/\s*(?:value|on[a-z]+|name)(=(['"</span>]</span>)</span>?\S*\<span class="number">1</span>)</span>?/gi, <span class="string">" "</span>)</span><br><span class="line">              .replace<span class="list">(/\s*placeholderfriend/, <span class="string">" placeholderfriend value='"</span> + pValue</span><br><span class="line">              + <span class="string">"' "</span> + <span class="string">"onfocus='placeholderfriendfocus(this);' "</span>)</span><span class="comment">;</span></span><br><span class="line">            var idValue = s.attr<span class="list">(<span class="string">"id"</span>)</span><span class="comment">;</span></span><br><span class="line">            if <span class="list">(<span class="keyword">idValue</span>)</span> <span class="collection">&#123;</span><br><span class="line">              s.attr<span class="list">(<span class="string">"id"</span>, idValue + <span class="string">"placeholderfriend"</span>)</span><span class="comment">;</span></span><br><span class="line">            &#125;</span></span><br><span class="line">            var clsValue = s.attr<span class="list">(<span class="string">"class"</span>)</span><span class="comment">;</span></span><br><span class="line">            if <span class="list">(<span class="keyword">clsValue</span>)</span> <span class="collection">&#123;</span><br><span class="line">              s.attr<span class="list">(<span class="string">"class"</span>, clsValue + <span class="string">"placeholderfriend"</span>)</span><span class="comment">;</span></span><br><span class="line">            &#125;</span></span><br><span class="line">            s.hide<span class="list">()</span><span class="comment">;</span></span><br><span class="line">            s.after<span class="list">(<span class="keyword">html</span>)</span><span class="comment">;</span></span><br><span class="line">          &#125;</span></span><br><span class="line">        &#125;</span></span><br><span class="line">      &#125;</span>)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">      elementsPass.blur<span class="list">(<span class="keyword">function</span><span class="list">()</span> <span class="collection">&#123;</span><br><span class="line">        var s = $<span class="list">(<span class="keyword">this</span>)</span><span class="comment">;</span></span><br><span class="line">        var sValue = s.val<span class="list">()</span><span class="comment">;</span></span><br><span class="line">        if <span class="list">(<span class="keyword">sValue</span> == '')</span> <span class="collection">&#123;</span><br><span class="line">          var idValue = s.attr<span class="list">(<span class="string">"id"</span>)</span><span class="comment">;</span></span><br><span class="line">          if <span class="list">(<span class="keyword">idValue</span>)</span> <span class="collection">&#123;</span><br><span class="line">            s.attr<span class="list">(<span class="string">"id"</span>, idValue + <span class="string">"placeholderfriend"</span>)</span><span class="comment">;</span></span><br><span class="line">          &#125;</span></span><br><span class="line">          var clsValue = s.attr<span class="list">(<span class="string">"class"</span>)</span><span class="comment">;</span></span><br><span class="line">          if <span class="list">(<span class="keyword">clsValue</span>)</span> <span class="collection">&#123;</span><br><span class="line">            s.attr<span class="list">(<span class="string">"class"</span>, clsValue + <span class="string">"placeholderfriend"</span>)</span><span class="comment">;</span></span><br><span class="line">          &#125;</span></span><br><span class="line">          s.hide<span class="list">()</span>.next<span class="list">()</span>.show<span class="list">()</span><span class="comment">;</span></span><br><span class="line">        &#125;</span></span><br><span class="line">      &#125;</span>)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span>)</span><span class="comment">;</span></span><br><span class="line">  &#125;</span></span><br><span class="line">  window.placeholderfriendfocus = placeholderfriend.focus;</span><br><span class="line">&#125;</span>)</span><span class="list">(<span class="keyword">jQuery</span>)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>我最终选择这段代码,他能够在ie的各版本中正常运行,支持<code>text</code>和<code>password</code>标签.<br>唯一的不足是,你直接点提交,你的text里面会有内容,内容就是placeholder中设置的提示内容.</p>
<h1 id="4_background-size在ie9一下不支持">4  background-size在ie9一下不支持</h1><p>background-size属性是用来让背景图片平铺的.不过ie9一下并不支持这个属性,我们使用滤镜来实现平铺的效果,示例代码如下.<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background-size</span>:<span class="value"> cover</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">filter</span>:<span class="value">progid:DXImageTransform.Microsoft.<span class="function">AlphaImageLoader</span>(src=<span class="string">'./assets/images/01.png'</span>, sizingMethod=<span class="string">'scale'</span>)\<span class="number">9</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<p>需要注意的是,这里的图片路径是相对于html文件的,不是css的路径,如果设置了没效果,先检查下你的路径.</p>
<h1 id="5_input输入框_光标不居中">5  input输入框 光标不居中</h1><p>这个问题来自于魅族手机,还有老大难的ie6-8的测试中.<br>解决方法是设置<code>height</code>和<code>line-height</code>等高,没那么简单,这里有技巧的<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">line-height</span>:<span class="value"> normal</span></span>;<span class="comment">/*这行代码解决了魅族手机中的不居中问题*/</span></span><br><span class="line"><span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">42px</span>\<span class="number">9</span></span></span>;<span class="comment">/*这行css代码的含义是ie9以下设置line-height为42px*/</span></span><br></pre></td></tr></table></figure></p>
<h1 id="6_opacity的继承问题">6  opacity的继承问题</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id='a' style=""&gt;</span><br><span class="line">    &lt;div id='b'&gt;</span><br><span class="line">    hello moto</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>如果我们给父div设置了一个<code>opacity</code>为0.1,即使我们给子div设置<code>opacity</code>为1,也是不管用的,如图<br><img src="http://ww1.sinaimg.cn/large/692869a3gw1es5fm0jafhj20iv0ecq46.jpg" alt="未设置父div的opacity之前"><br>设置父div的<code>opacity</code>之后<br><img src="http://ww4.sinaimg.cn/large/692869a3gw1es5fnsk3pvj20hy0fdwfm.jpg" alt="设置父div的opacity之后"><br>我们可以清楚看到子div受到了影响.<br>解决办法:解除父子关系,把子div从父div中挪出来</p>
<h1 id="7_border-radius在ie9以下不支持">7  border-radius在ie9以下不支持</h1><p>输入框等其他地方用到圆角的话,在老版本ie中果断是没有支持的.<br>我们需要用hack的方式<a href="http://css3pie.com/" target="_blank" rel="external">pie</a>,去实现border-radius和box-shadow等功能.加入pie以后的css代码如下:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">-moz-border-radius</span>:<span class="value"> <span class="number">6px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">-webkit-border-radius</span>:<span class="value"> <span class="number">6px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">6px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">behavior</span>:<span class="value"> <span class="function">url</span>(assets/css/pie.htc)</span></span>;<span class="comment">/*这一行是核心*/</span></span><br></pre></td></tr></table></figure></p>
<p>缺点:设置的border-radius四角的设置值都是相同的</p>
<h1 id="8_css递进关系">8 css递进关系</h1><p>挖坑,以后填</p>
<p>ps:晚安,亲爱的</p>
<h1 id="参考文献">参考文献</h1><p>1 <a href="http://www.cnblogs.com/yuzhongwusan/p/4184923.html" target="_blank" rel="external">meta name=”viewport” content=”width=device-width,initial-scale=1.0” 解释</a><br>2 <a href="http://css3pie.com/" target="_blank" rel="external">pie用hack方式在ie中实现border-radius</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这段时间,笨笨找了个活儿,做一个页面,能够适配所有的主流浏览器,包括pc,平板和手机等终端(这和当年某刘提的要求一样啊).<br>我第一个想到的是bootstrap,可惜这货太大了,我只是几个简单的页面,没必要用这么大体量的东西.<br>搜索一番以后,我找到了我的解决方案,media query,支付宝也是这么解决的.<br>]]>
    
    </summary>
    
      <category term="css" scheme="http://jackroyal.github.io/tags/css/"/>
    
      <category term="html5" scheme="http://jackroyal.github.io/tags/html5/"/>
    
      <category term="ie" scheme="http://jackroyal.github.io/tags/ie/"/>
    
      <category term="兼容性" scheme="http://jackroyal.github.io/tags/%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
      <category term="前端" scheme="http://jackroyal.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="前端" scheme="http://jackroyal.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[win8中使用vs2010配置opencv]]></title>
    <link href="http://jackroyal.github.io/2015/05/15/opencv-and-vs2010-in-win8/"/>
    <id>http://jackroyal.github.io/2015/05/15/opencv-and-vs2010-in-win8/</id>
    <published>2015-05-15T11:56:06.000Z</published>
    <updated>2015-10-29T06:08:47.548Z</updated>
    <content type="html"><![CDATA[<p>今天在师兄的帮助下,总算配置好了opencv.</p>
<h1 id="1_系统环境和软件版本">1 系统环境和软件版本</h1><p>操作系统:win8 64位<br>vs版本:vs2010 32位<br>opencv版本:opencv 2.4.10<br><a id="more"></a></p>
<h1 id="2_配置opencv">2 配置opencv</h1><p>安装vs比较简单,这里不再赘述.<br>现在说下配置opencv.<br>网上有很多相关的配置,都是设置环境变量,然后添加库目录,包含目录,blablabla.<br>这样做的坏处是,每次我新建一个项目,都要重复以上操作,这样岂不是很蛋疼.<br>如果你移植你的程序给别人,别人也还要去配置这些东西才能够运行,是不是很不方便?<br>所以,师兄教给我简单粗暴的办法,直接把相关文件手动复制到vs的目录下,这样就没这么多事了.<br><strong>缺点:每次都需要手动设置你所需要调用的lib文件</strong></p>
<h2 id="解压opencv到某个目录">解压opencv到某个目录</h2><p>这个很简单,双击那个exe,选择一个目录,就会把opencv的文件解压到你设定的那个目录.<br>我将它解压到<code>D:/opencv</code>下.</p>
<h2 id="复制include文件夹">复制include文件夹</h2><p>复制<code>D:\opencv\build\include</code>目录下的<code>opencv</code>和<code>opencv2</code><br>到<code>C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include</code>.<br><img src="http://ww3.sinaimg.cn/large/692869a3gw1es5atg7oimj20kw081ta4.jpg" alt="opencv解压后的include目录"><br><img src="http://ww2.sinaimg.cn/large/692869a3gw1es5az6qsa7j20jc099jtf.jpg" alt="复制以后的效果截图"></p>
<h2 id="复制lib文件夹">复制lib文件夹</h2><p>同理,复制lib文件夹<br>从<code>D:\opencv\build\x86\vc10\lib</code>复制到<code>C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\lib</code><br>如果你的程序是win32就选择x86,如果你写的程序是64位的,就复制x64的程序</p>
<h2 id="复制bin文件夹">复制bin文件夹</h2><p>复制bin目录下的东西,我们只需要系统找得到就行,所以我们这里采用环境变量的搞法</p>
<p>我们修改path变量,在后面添加<code>;d:\opencv\build\x86\vc10\bin</code>,效果如图所示<br><br><img src="http://ww2.sinaimg.cn/large/692869a3gw1es5bew5vcjj20e10g4go8.jpg" alt="修改path变量,添加opencv的bin目录路径"></p>
<h1 id="3_写代码调试">3 写代码调试</h1><p>代码如下:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># include &#60;opencv2/opencv.hpp&#62;&#10;# include &#60;iostream&#62;&#10;# include &#60;string&#62;&#10;# ifdef _DEBUG&#10;# pragma comment(lib,&#34;opencv_core2410d.lib&#34;)&#10;# pragma comment(lib,&#34;opencv_highgui2410d.lib&#34;)&#10;# else&#10;# pragma comment(lib,&#34;opencv_core2410.lib&#34;)&#10;# pragma comment(lib,&#34;opencv_highgui2410.lib&#34;)&#10;# endif&#10;using namespace cv;&#10;using namespace std;&#10;int main()&#10;&#123;&#10;    Mat img = imread(&#34;ie8-2.png&#34;);&#10;    if(img.empty())&#10;    &#123;&#10;        cout&#60;&#60;&#34;error&#34;;&#10;        return -1;&#10;   &#125;&#10;   imshow(&#34;xx&#30340;&#38739;&#29031;&#34;,img);&#10;   waitKey();&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>注意一下这段宏设置<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># <span class="keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="preprocessor"># <span class="keyword">pragma</span> comment(lib,<span class="string">"opencv_core2410d.lib"</span>)</span></span><br><span class="line"><span class="preprocessor"># <span class="keyword">pragma</span> comment(lib,<span class="string">"opencv_highgui2410d.lib"</span>)</span></span><br><span class="line"><span class="preprocessor"># <span class="keyword">else</span></span></span><br><span class="line"><span class="preprocessor"># <span class="keyword">pragma</span> comment(lib,<span class="string">"opencv_core2410.lib"</span>)</span></span><br><span class="line"><span class="preprocessor"># <span class="keyword">pragma</span> comment(lib,<span class="string">"opencv_highgui2410.lib"</span>)</span></span><br><span class="line"><span class="preprocessor"># <span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></p>
<p>debug和release,分别调用对应的lib<br>如果你当前是debug模式<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># <span class="keyword">pragma</span> comment(lib,<span class="string">"opencv_core2410d.lib"</span>)</span></span><br><span class="line"><span class="preprocessor"># <span class="keyword">pragma</span> comment(lib,<span class="string">"opencv_highgui2410d.lib"</span>)</span></span><br></pre></td></tr></table></figure></p>
<p>这段代码是必须要的,以后调用相应的lib文件,我们都要手动在头部加入这句话才行<br>否则,你会看到下面这堆东西<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>&gt;  test.cpp</span><br><span class="line"><span class="number">1</span>&gt;ManifestResourceCompile:</span><br><span class="line"><span class="number">1</span>&gt;  所有输出均为最新。</span><br><span class="line"><span class="number">1</span>&gt;test.obj : <span class="keyword">error</span> LNK2019: 无法解析的外部符号 <span class="string">"int __cdecl cv::waitKey(int)"</span> (?waitKey<span class="variable">@cv</span><span class="variable">@@</span>YAHH<span class="variable">@Z</span>)，该符号在函数 _main 中被引用</span><br><span class="line"><span class="number">1</span>&gt;test.obj : <span class="keyword">error</span> LNK2019: 无法解析的外部符号 <span class="string">"void __cdecl cv::imshow(class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; const &amp;,class cv::_InputArray const &amp;)"</span> (?imshow<span class="variable">@cv</span><span class="variable">@@</span>YAXABV?<span class="variable">$basic_string</span><span class="variable">@DU</span>?<span class="variable">$char_traits</span><span class="variable">@D</span><span class="variable">@std</span><span class="variable">@@</span>V?<span class="variable">$allocator</span><span class="variable">@D</span><span class="variable">@2</span><span class="variable">@@</span>std<span class="variable">@@</span>ABV_InputArray<span class="variable">@1</span><span class="variable">@@</span>Z)，该符号在函数 _main 中被引用</span><br><span class="line"><span class="number">1</span>&gt;test.obj : <span class="keyword">error</span> LNK2019: 无法解析的外部符号 <span class="string">"public: __thiscall cv::_InputArray::_InputArray(class cv::Mat const &amp;)"</span> (??<span class="number">0</span>_InputArray<span class="variable">@cv</span><span class="variable">@@</span>QAE<span class="variable">@ABVMat</span><span class="variable">@1</span><span class="variable">@@</span>Z)，该符号在函数 _main 中被引用</span><br><span class="line"><span class="number">1</span>&gt;test.obj : <span class="keyword">error</span> LNK2019: 无法解析的外部符号 <span class="string">"class cv::Mat __cdecl cv::imread(class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; const &amp;,int)"</span> (?imread<span class="variable">@cv</span><span class="variable">@@</span>YA?AVMat<span class="variable">@1</span><span class="variable">@ABV</span>?<span class="variable">$basic_string</span><span class="variable">@DU</span>?<span class="variable">$char_traits</span><span class="variable">@D</span><span class="variable">@std</span><span class="variable">@@</span>V?<span class="variable">$allocator</span><span class="variable">@D</span><span class="variable">@2</span><span class="variable">@@</span>std<span class="variable">@@</span>H<span class="variable">@Z</span>)，该符号在函数 _main 中被引用</span><br><span class="line"><span class="number">1</span>&gt;test.obj : <span class="keyword">error</span> LNK2019: 无法解析的外部符号 <span class="string">"void __cdecl cv::fastFree(void *)"</span> (?fastFree<span class="variable">@cv</span><span class="variable">@@</span>YAXPAX<span class="variable">@Z</span>)，该符号在函数 <span class="string">"public: __thiscall cv::Mat::~Mat(void)"</span> (??<span class="number">1</span>Mat<span class="variable">@cv</span><span class="variable">@@</span>QAE<span class="variable">@XZ</span>) 中被引用</span><br><span class="line"><span class="number">1</span>&gt;test.obj : <span class="keyword">error</span> LNK2019: 无法解析的外部符号 <span class="string">"public: void __thiscall cv::Mat::deallocate(void)"</span> (?deallocate<span class="variable">@Mat</span><span class="variable">@cv</span><span class="variable">@@</span>QAEXXZ)，该符号在函数 <span class="string">"public: void __thiscall cv::Mat::release(void)"</span> (?release<span class="variable">@Mat</span><span class="variable">@cv</span><span class="variable">@@</span>QAEXXZ) 中被引用</span><br><span class="line"><span class="number">1</span>&gt;test.obj : <span class="keyword">error</span> LNK2019: 无法解析的外部符号 <span class="string">"int __cdecl cv::_interlockedExchangeAdd(int *,int)"</span> (?_interlockedExchangeAdd<span class="variable">@cv</span><span class="variable">@@</span>YAHPAHH<span class="variable">@Z</span>)，该符号在函数 <span class="string">"public: void __thiscall cv::Mat::release(void)"</span> (?release<span class="variable">@Mat</span><span class="variable">@cv</span><span class="variable">@@</span>QAEXXZ) 中被引用</span><br><span class="line"><span class="number">1</span>&gt;C:\Users\chenhao\documents\visual studio <span class="number">2010</span>\Projects\b\Debug\b.exe : fatal <span class="keyword">error</span> LNK1120: <span class="number">7</span> 个无法解析的外部命令</span><br><span class="line"><span class="number">1</span>&gt;</span><br><span class="line"><span class="number">1</span>&gt;生成失败。</span><br><span class="line"><span class="number">1</span>&gt;</span><br><span class="line"><span class="number">1</span>&gt;已用时间 <span class="number">00</span>:<span class="number">00</span>:<span class="number">03.71</span></span><br><span class="line">========== 生成: 成功 <span class="number">0</span> 个，失败 <span class="number">1</span> 个，最新 <span class="number">0</span> 个，跳过 <span class="number">0</span> 个 ==========</span><br></pre></td></tr></table></figure></p>
<p>ok,打完收工!</p>
<p>ps:上述操作完,应该就好了.我还遇到一个奇葩问题<br>编译和生成解决方案没有问题，但是开始执行就出现应用程序无法正常启动 0xc000007b错误窗口<br>最后,原来是权限问题,使用管理员权限打开vs就解决了,win7下找兼容性设置,以管理员权限运行<br>我的win8没有找到兼容性设置,如图所示操作,每次都能以管理员权限打开vs<br><img src="http://ww4.sinaimg.cn/large/692869a3gw1es5bpz7mkqj20mm0giq7k.jpg" alt="win8使用管理员权限运行vs2010"></p>
<h1 id="参考文献">参考文献</h1><p>1 <a href="http://www.cnblogs.com/freedomshe/archive/2012/04/25/2470540.html" target="_blank" rel="external">VS2010+Opencv-2.4.0的配置攻略</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天在师兄的帮助下,总算配置好了opencv.</p>
<h1 id="1_系统环境和软件版本">1 系统环境和软件版本</h1><p>操作系统:win8 64位<br>vs版本:vs2010 32位<br>opencv版本:opencv 2.4.10<br>]]>
    
    </summary>
    
      <category term="opencv" scheme="http://jackroyal.github.io/tags/opencv/"/>
    
      <category term="vs2010" scheme="http://jackroyal.github.io/tags/vs2010/"/>
    
      <category term="win8" scheme="http://jackroyal.github.io/tags/win8/"/>
    
      <category term="软件安装与技巧" scheme="http://jackroyal.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%80%E5%B7%A7/"/>
    
      <category term="软件安装与技巧" scheme="http://jackroyal.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[opencv中LBPH的人脸识别代码分析]]></title>
    <link href="http://jackroyal.github.io/2015/05/06/opencv-lbph-source-code-analysis/"/>
    <id>http://jackroyal.github.io/2015/05/06/opencv-lbph-source-code-analysis/</id>
    <published>2015-05-06T14:32:42.000Z</published>
    <updated>2015-09-29T11:41:23.730Z</updated>
    <content type="html"><![CDATA[<p>我开始用opencv的时候，用的是opencv最新的3.0版本。不过我死活找不到LBPH的代码，网上的教程也都是opencv 2.4的，so  我也去下一份2.4的源码来读读。<br><a id="more"></a><br>opencv目前支持一下三种方法来实现人脸识别：</p>
<ul>
<li><strong>Eigenfaces特征脸createEigenFaceRecognizer()</strong></li>
<li><strong>Fisherfaces createFisherFaceRecognizer()</strong></li>
<li><strong>Local Binary Patterns Histograms局部二值直方图 createLBPHFaceRecognizer()</strong></li>
</ul>
<p>我今天读了一下LBPH的代码。<br>自动人脸识别就是如何从一幅图像中提取有意义的特征，把它们放入一种有用的表示方式，然后对他们进行一些分类。<br>特征脸方法描述了一个全面的方法来识别人脸：面部图像是一个点，这个点是从高维图像空间找到它在低维空间的表示，这样分类变得很简单。低维子空间低维是使用主元分析(Principal Component Analysis,PCA)找到的，它可以找拥有最大方差的那个轴。虽然这样的转换是从最佳重建角度考虑的，但是他没有把标签问题考虑进去。想象一个情况，如果变化是基于外部来源，比如光照。轴的最大方差不一定包含任何有鉴别性的信息，因此此时的分类是不可能的。因此，一个使用线性鉴别(Linear Discriminant Analysis,LDA)的特定类投影方法被提出来解决人脸识别问题。其中一个基本的想法就是，使类内方差最小的同时，使类外方差最大。<br>近年来，各种局部特征提取方法出现。为了避免输入的图像的高维数据，仅仅使用的局部特征描述图像的方法被提出，提取的特征(很有希望的)对于局部遮挡、光照变化、小样本等情况更强健。有关局部特征提取的方法有盖伯小波(Gabor Waelets)，离散傅立叶变换(Discrete Cosinus Transform,DCT)，局部二值模式(Local Binary Patterns,LBP)。使用什么方法来提取时域空间的局部特征依旧是一个开放性的研究问题，因为空间信息是潜在有用的信息。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我开始用opencv的时候，用的是opencv最新的3.0版本。不过我死活找不到LBPH的代码，网上的教程也都是opencv 2.4的，so  我也去下一份2.4的源码来读读。<br>]]>
    
    </summary>
    
      <category term="lbph" scheme="http://jackroyal.github.io/tags/lbph/"/>
    
      <category term="opencv" scheme="http://jackroyal.github.io/tags/opencv/"/>
    
      <category term="图像处理" scheme="http://jackroyal.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
      <category term="图像处理" scheme="http://jackroyal.github.io/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ubuntu 14.04 安装denyhosts]]></title>
    <link href="http://jackroyal.github.io/2015/04/28/ubuntu-denyhosts/"/>
    <id>http://jackroyal.github.io/2015/04/28/ubuntu-denyhosts/</id>
    <published>2015-04-28T12:19:23.000Z</published>
    <updated>2015-10-29T06:08:44.363Z</updated>
    <content type="html"><![CDATA[<h1 id="起因">起因</h1><p>因为之前服务器两次被黑，妈蛋。今天在上google+的时候，无意中看到一个维护vps的帖子，就顺手把我的服务器维护下。<br>之前被黑经历也很简单，因为方便管理的缘故，我给root用户设置了密码，没错，是弱口令，一扫不要一分钟就可以出来的那种。<br>我在那篇帖子中看到denyhosts这货。东西很简单，分析你的日志，如果有人连续登陆几次密码都错误，那么把他的ip添加到denyhost当中，禁止它继续扫描。这货还很多功能，可以设置禁止时间以后，自动解禁；可以配置自动解禁的次数;还可以配置用户密码尝试的次数，给管理员发邮件等。<br><a id="more"></a></p>
<h1 id="安装">安装</h1><h2 id="1、下载源码包,解压源码包">1、下载源码包,解压源码包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://sourceforge.net/projects/denyhosts/files/denyhosts/<span class="number">2.6</span>/DenyHosts-<span class="number">2.6</span>.tar.gz</span><br><span class="line">tar zxvf DenyHosts-<span class="number">2.6</span>.tar.gz</span><br><span class="line">cd DenyHosts-<span class="number">2.6</span></span><br></pre></td></tr></table></figure>
<h2 id="2、安装部署">2、安装部署</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python setup.py install</span><br><span class="line">cd /usr/share/denyhosts/</span><br><span class="line">cp denyhosts.cfg-dist denyhosts.cfg</span><br><span class="line">cp daemon-control-dist daemon-control</span><br></pre></td></tr></table></figure>
<h2 id="3、编辑配置文件denyhosts-cfg">3、编辑配置文件denyhosts.cfg</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi denyhosts.cfg</span><br></pre></td></tr></table></figure>
<p>几个常见的参数如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PURGE_DENY：当一个IP被阻止以后，过多长时间被自动解禁。可选如<span class="number">3</span>m（三分钟）、<span class="number">5</span>h（<span class="number">5</span>小时）、<span class="number">2</span>d（两天）、<span class="number">8</span>w（<span class="number">8</span>周）、<span class="number">1</span>y（一年）；</span><br><span class="line">PURGE_THRESHOLD：定义了某一IP最多被解封多少次。即某一IP由于暴力破解SSH密码被阻止/解封达到了PURGE_THRESHOLD次，则会被永久禁止；</span><br><span class="line">BLOCK_SERVICE：需要阻止的服务名；</span><br><span class="line">DENY_THRESHOLD_INVALID：某一无效用户名（不存在的用户）尝试多少次登录后被阻止；</span><br><span class="line">DENY_THRESHOLD_VALID：某一有效用户名尝试多少次登陆后被阻止（比如账号正确但密码错误），root除外；</span><br><span class="line">DENY_THRESHOLD_ROOT：root用户尝试登录多少次后被阻止；</span><br><span class="line">HOSTNAME_LOOKUP：是否尝试解析源IP的域名；</span><br></pre></td></tr></table></figure></p>
<p>一般我们就用默认就好，我们只需要改两个地方：</p>
<h3 id="第一个，我们注释掉第12行，启用第15行，修改以后结果如下(原因是ubuntu中的log不在/var/log/secure中，而是在/var/log/auth-log中)">第一个，我们注释掉第12行，启用第15行，修改以后结果如下(原因是ubuntu中的log不在/var/log/secure中，而是在/var/log/auth.log中)</h3><p><img src="http://ww3.sinaimg.cn/large/692869a3gw1erll3zp3xpj20id0b5q63.jpg" alt="修改后的denyhosts.cfg"></p>
<h3 id="第二个，我们启用第64行，也就是设置，ip被禁止后，禁止5天，这个时间你可以自行设置">第二个，我们启用第64行，也就是设置，ip被禁止后，禁止5天，这个时间你可以自行设置</h3><p>去掉前面的<code>#</code>,就行了，修改后结果如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">63</span> <span class="comment"># purge entries older than 5 days</span></span><br><span class="line"><span class="number">64</span> PURGE_DENY = <span class="number">5</span>d</span><br><span class="line"><span class="number">65</span> <span class="comment">###################################################################### #</span></span><br><span class="line"><span class="number">66</span></span><br></pre></td></tr></table></figure></p>
<h2 id="4、编辑配置文件daemon-control">4、编辑配置文件daemon-control</h2><p>因为在ubuntu系统中，有些文件不在预设的位置，所以我们需要编辑这个文件<br>我们只需要改第14行就好了，修改<code>/usr/bin/denyhosts.py</code>为<code>/usr/local/bin/denyhosts.py</code>，修改后结果如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span> </span><br><span class="line"><span class="number">14</span> DENYHOSTS_BIN   = <span class="string">"/usr/local/bin/denyhosts.py"</span></span><br><span class="line"><span class="number">15</span> DENYHOSTS_LOCK  = <span class="string">"/var/lock/subsys/denyhosts"</span></span><br><span class="line"><span class="number">16</span> DENYHOSTS_CFG   = <span class="string">"/usr/share/denyhosts/denyhosts.cfg"</span></span><br><span class="line"><span class="number">17</span> </span><br><span class="line"><span class="number">18</span> PYTHON_BIN      = <span class="string">"/usr/bin/env python"</span></span><br><span class="line"><span class="number">19</span></span><br></pre></td></tr></table></figure></p>
<h2 id="5、运行">5、运行</h2><p>运行，额，错误一堆啊，我们执行<code>sudo ./daemon-control start</code>,然后得到如下错误<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">starting DenyHosts:    /usr/bin/env python /usr/<span class="built_in">local</span>/bin/denyhosts.py --daemon --config=/usr/share/denyhosts/denyhosts.cfg</span><br><span class="line">DenyHosts could not obtain lock (pid: )</span><br><span class="line">[Errno <span class="number">2</span>] No such file or directory: <span class="string">'/var/lock/subsys/denyhosts'</span></span><br></pre></td></tr></table></figure></p>
<p>我们可以去<code>/var/lock</code>下面的确看不到subsys这个文件夹，那我们就手动创建他<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /var/lock/subsys</span><br></pre></td></tr></table></figure></p>
<p>继续执行<code>sudo ./daemon-control start</code>，应该就会成功<br>ps：如果还不成功，他缺什么文件我们就用<code>touch</code>新建这个文件，如果说<code>file exists</code>,我们就删除那个文件</p>
<h2 id="6、添加到开机启动">6、添加到开机启动</h2><p>第一种是将DenyHosts作为类似apache、mysql一样的服务，这种方法可以通过 /etc/init.d/denyhosts 命令来控制其状态。方法如下：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> /etc/init.<span class="literal">d</span></span><br><span class="line">ln -s /usr/share/denyhosts/daemon-control denyhosts</span><br><span class="line"># 上面的操作就把他变成了一个服务 我们可以使用service denyhosts start来启动服务</span><br><span class="line"># 下面把他添加到开机自启动，我们这里需要安装一个软件来实现</span><br><span class="line"># ubuntu中没有chkconfig命令，网上的教程是用的chkconfig，具体操作查看后面的参考文献1，ubuntu中对应的是<span class="keyword">update</span>-rc.<span class="keyword">d</span>，但是不好用，所以我用sysv-rc-<span class="keyword">conf</span> </span><br><span class="line">sudo apt-get install sysv-rc-<span class="keyword">conf</span></span><br><span class="line">sudo sysv-rc-<span class="keyword">conf</span></span><br></pre></td></tr></table></figure></p>
<p>我们设置运行级别2345，编辑以后如下所示<br><img src="http://ww2.sinaimg.cn/large/692869a3gw1erlmrt5ht5j20j80m40zg.jpg" alt="设置denyhosts开机自启动"><br>按<code>q</code>，退出并保存</p>
<p>第二种是将Denyhosts直接加入rc.local中自动启动（类似于Windows中的“启动文件夹”）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'/usr/share/denyhosts/daemon-control start'</span> &gt;&gt; /etc/rc.local</span><br></pre></td></tr></table></figure></p>
<h1 id="参考文献">参考文献</h1><p>1 <a href="http://www.bootf.com/571.html" target="_blank" rel="external">通过DenyHosts阻止SSH暴力攻击教程</a></p>
<p>2 <a href="http://askubuntu.com/questions/534324/var-log-secure-not-present-in-14-04-is-there-any-alternative" target="_blank" rel="external">/var/log/secure not present in 14.04 ,is there any alternative?</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="起因">起因</h1><p>因为之前服务器两次被黑，妈蛋。今天在上google+的时候，无意中看到一个维护vps的帖子，就顺手把我的服务器维护下。<br>之前被黑经历也很简单，因为方便管理的缘故，我给root用户设置了密码，没错，是弱口令，一扫不要一分钟就可以出来的那种。<br>我在那篇帖子中看到denyhosts这货。东西很简单，分析你的日志，如果有人连续登陆几次密码都错误，那么把他的ip添加到denyhost当中，禁止它继续扫描。这货还很多功能，可以设置禁止时间以后，自动解禁；可以配置自动解禁的次数;还可以配置用户密码尝试的次数，给管理员发邮件等。<br>]]>
    
    </summary>
    
      <category term="Linux" scheme="http://jackroyal.github.io/tags/Linux/"/>
    
      <category term="ubuntu" scheme="http://jackroyal.github.io/tags/ubuntu/"/>
    
      <category term="Linux" scheme="http://jackroyal.github.io/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ubuntu下使用scrapy抓取cnblogs]]></title>
    <link href="http://jackroyal.github.io/2015/04/26/ubuntu-scrapy-stackoverflow/"/>
    <id>http://jackroyal.github.io/2015/04/26/ubuntu-scrapy-stackoverflow/</id>
    <published>2015-04-26T08:52:28.000Z</published>
    <updated>2015-10-29T06:08:43.478Z</updated>
    <content type="html"><![CDATA[<p>今天在伯乐在线上看到一篇翻译的博客，讲的是使用scrapy来抓取stackoverflow上的问题，刚好好久没用这个，于是一并捡起来玩一下。<br><a id="more"></a></p>
<h1 id="软件安装">软件安装</h1><p>我的环境是：ubuntu 14.04 lts<br>需要安装相关软件</p>
<h2 id="scrapy">scrapy</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> Scrapy</span><br></pre></td></tr></table></figure>
<h2 id="PyMongo">PyMongo</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> pymongo</span><br></pre></td></tr></table></figure>
<h2 id="Mongodb">Mongodb</h2><p>上面安装的是python使用Mongodb的接口，很显然，我们要安装Mongodb才能使用<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get <span class="operator"><span class="keyword">install</span> mongodb-<span class="keyword">server</span></span></span><br></pre></td></tr></table></figure></p>
<p>至此，要使用的软件都已经安装完毕</p>
<h1 id="使用scrapy新建工程">使用scrapy新建工程</h1><p>使用scrapy新建工程很简单，如下所示，我们新建一个stack的项目，他会在你的当前目录新建一个stack文件夹<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject <span class="built_in">stack</span></span><br></pre></td></tr></table></figure></p>
<p>并且会建成如下所示的目录树结构<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">chen@chen-P31:~$ tree stack</span><br><span class="line">stack</span><br><span class="line">├── stack</span><br><span class="line">│   ├── __init__<span class="class">.py</span></span><br><span class="line">│   ├── items<span class="class">.py</span></span><br><span class="line">│   ├── pipelines<span class="class">.py</span></span><br><span class="line">│   ├── settings<span class="class">.py</span></span><br><span class="line">│   └── spiders</span><br><span class="line">│       └── __init__<span class="class">.py</span></span><br><span class="line">└── scrapy.cfg</span><br></pre></td></tr></table></figure></p>
<p>接下来，我们修改items.py的内容，这个文件用于定义存储“容器”，用来存储将要抓取的数据。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.item <span class="keyword">import</span> Item,Field</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackItem</span><span class="params">(Item)</span>:</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    title = Field()<span class="comment"># 我们添加两个字段，我们等会儿会抓取一个标题和url两个字段</span></span><br><span class="line">    url = Field()</span><br></pre></td></tr></table></figure></p>
<p>接着，还有一个很重要的东西，对，就是我们的蜘蛛，我们在spider目录下，新建一个stack_spider.py文件。顾名思义，这就是我们的蜘蛛。我们需要定义我们爬虫的起点，爬虫的规则等等<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Spider</span><br><span class="line"><span class="keyword">from</span> stack.items <span class="keyword">import</span> StackItem  <span class="comment"># 导入我们上面定义的容器类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackSpider</span><span class="params">(Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'stack'</span>   <span class="comment"># 定义我们爬虫的名字</span></span><br><span class="line">    allowed_domains = [<span class="string">"cnblogs.com"</span>]   <span class="comment"># 规定爬虫爬取的域名</span></span><br><span class="line">    start_urls = [<span class="string">'http://www.cnblogs.com/geqianst/p/'</span>,]   <span class="comment"># 爬虫工作的起点</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span><span class="comment"># 爬虫用来做数据解析的</span></span><br><span class="line">        questions = response.xpath(<span class="string">'//div[@id="myposts"]//a[@id]'</span>)</span><br><span class="line">        <span class="comment"># xpath选择器，这里的含义是取所有id为myposts的div，在它下面找所有带id的超链接a</span></span><br><span class="line">        <span class="comment"># 实际结果是这样的</span></span><br><span class="line">        <span class="comment"># [&lt;Selector xpath='//div[@id="myposts"]//a[@id]' data=u'&lt;a id="PostsList1_rpPosts_TitleUrl_0" hr'&gt;,</span></span><br><span class="line">        <span class="comment"># &lt;Selector xpath='//div[@id="myposts"]//a[@id]' data=u'&lt;a id="PostsList1_rpPosts_TitleUrl_1" hr'&gt;,</span></span><br><span class="line">        <span class="comment"># &lt;Selector xpath='//div[@id="myposts"]//a[@id]' data=u'&lt;a id="PostsList1_rpPosts_TitleUrl_2" hr'&gt;,</span></span><br><span class="line">        <span class="comment"># &lt;Selector xpath='//div[@id="myposts"]//a[@id]' data=u'&lt;a id="PostsList1_rpPosts_TitleUrl_3" hr'&gt;,</span></span><br><span class="line">        <span class="comment"># &lt;Selector xpath='//div[@id="myposts"]//a[@id]' data=u'&lt;a id="PostsList1_rpPosts_TitleUrl_4" hr'&gt;,</span></span><br><span class="line">        <span class="comment"># &lt;Selector xpath='//div[@id="myposts"]//a[@id]' data=u'&lt;a id="PostsList1_rpPosts_TitleUrl_5" hr'&gt;,</span></span><br><span class="line">        <span class="comment"># &lt;Selector xpath='//div[@id="myposts"]//a[@id]' data=u'&lt;a id="PostsList1_rpPosts_TitleUrl_6" hr'&gt;,</span></span><br><span class="line">        <span class="comment"># &lt;Selector xpath='//div[@id="myposts"]//a[@id]' data=u'&lt;a id="PostsList1_rpPosts_TitleUrl_7" hr'&gt;,</span></span><br><span class="line">        <span class="comment"># &lt;Selector xpath='//div[@id="myposts"]//a[@id]' data=u'&lt;a id="PostsList1_rpPosts_TitleUrl_8" hr'&gt;,</span></span><br><span class="line">        <span class="comment"># &lt;Selector xpath='//div[@id="myposts"]//a[@id]' data=u'&lt;a id="PostsList1_rpPosts_TitleUrl_9" hr'&gt;]</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> question <span class="keyword">in</span> questions:</span><br><span class="line">            item = StackItem()</span><br><span class="line">            item[<span class="string">'title'</span>] = question.xpath(</span><br><span class="line">                <span class="string">'text()'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">            item[<span class="string">'url'</span>] = question.xpath(</span><br><span class="line">                <span class="string">'@href'</span>).extract()[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">print</span> item</span><br><span class="line">            <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure></p>
<h1 id="测试">测试</h1><p>ok，上述工作基本完成，我们来测试一下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl stack</span><br></pre></td></tr></table></figure></p>
<p>还可以这样测试一下，使用shell命令<br><img src="http://ww4.sinaimg.cn/large/692869a3gw1erjvd7qeqdj213z0j9h2h.jpg" alt="用shell测试xpath"><br>妈蛋，我的竟然出错了，输出如下<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">chen@chen-P31:~/<span class="keyword">stack</span>$ scrapy crawl <span class="keyword">stack</span></span><br><span class="line">2015-04-26 16:49:11+0800 [scrapy] INFO: Scrapy 0.24.6 started (bot: <span class="keyword">stack</span>)</span><br><span class="line">2015-04-26 16:49:11+0800 [scrapy] INFO: Optional features available: ssl, http11</span><br><span class="line">2015-04-26 16:49:11+0800 [scrapy] INFO: Overridden settings: &#123;'NEWSPIDER_MODULE': '<span class="keyword">stack</span>.spiders', 'SPIDER_MODULES': ['<span class="keyword">stack</span>.spiders'], 'BOT_NAME': '<span class="keyword">stack</span>'&#125;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/bin/scrapy"</span>, <span class="keyword">line</span> 11, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    sys.<span class="keyword">exit</span>(execute())</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py"</span>, <span class="keyword">line</span> 143, <span class="keyword">in</span> execute</span><br><span class="line">    _run_print_help(parser, _run_command, cmd, <span class="keyword">args</span>, opts)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py"</span>, <span class="keyword">line</span> 89, <span class="keyword">in</span> _run_print_help</span><br><span class="line">    func(*a, **kw)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py"</span>, <span class="keyword">line</span> 150, <span class="keyword">in</span> _run_command</span><br><span class="line">    cmd.<span class="keyword">run</span>(<span class="keyword">args</span>, opts)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/commands/crawl.py"</span>, <span class="keyword">line</span> 60, <span class="keyword">in</span> <span class="keyword">run</span></span><br><span class="line">    self.crawler_process.start()</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py"</span>, <span class="keyword">line</span> 92, <span class="keyword">in</span> start</span><br><span class="line">    <span class="keyword">if</span> self.start_crawling():</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py"</span>, <span class="keyword">line</span> 124, <span class="keyword">in</span> start_crawling</span><br><span class="line">    <span class="keyword">return</span> self._start_crawler() is not None</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py"</span>, <span class="keyword">line</span> 139, <span class="keyword">in</span> _start_crawler</span><br><span class="line">    crawler.configure()</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py"</span>, <span class="keyword">line</span> 46, <span class="keyword">in</span> configure</span><br><span class="line">    self.extensions = ExtensionManager.from_crawler(self)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/middleware.py"</span>, <span class="keyword">line</span> 50, <span class="keyword">in</span> from_crawler</span><br><span class="line">    <span class="keyword">return</span> cls.from_settings(crawler.settings, crawler)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/middleware.py"</span>, <span class="keyword">line</span> 29, <span class="keyword">in</span> from_settings</span><br><span class="line">    mwcls = load_object(clspath)</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/utils/misc.py"</span>, <span class="keyword">line</span> 42, <span class="keyword">in</span> load_object</span><br><span class="line">    raise ImportError(<span class="string">"Error loading object '%s': %s"</span> % (path, <span class="keyword">e</span>))</span><br><span class="line">ImportError: <span class="keyword">Error</span> loading object 'scrapy.telnet.TelnetConsole': <span class="keyword">No</span> module named conch</span><br></pre></td></tr></table></figure></p>
<p>这是什么gui？<br>还好我有stackoverflow，google一番，找到解决办法（其实这不是最后的解决办法，请往后看）<br>网上说是twisted的问题，重新安装一下就好了，ok，走起<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">chen@chen-P31:~/stack$ sudo apt-get <span class="operator"><span class="keyword">install</span> twisted</span><br><span class="line">Reading <span class="keyword">package</span> lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line"><span class="keyword">E</span>: Unable <span class="keyword">to</span> <span class="keyword">locate</span> <span class="keyword">package</span> twisted</span><br><span class="line">chen@chen-P31:~/stack$ sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> twisted.conch</span><br><span class="line">Reading <span class="keyword">package</span> lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">Note, selecting <span class="string">'python-twisted-conch'</span> <span class="keyword">for</span> regex <span class="string">'twisted.conch'</span></span><br><span class="line">Note, selecting <span class="string">'python2.7-twisted-conch'</span> <span class="keyword">for</span> regex <span class="string">'twisted.conch'</span></span><br><span class="line">Note, selecting <span class="string">'python-twisted-conch'</span> instead <span class="keyword">of</span> <span class="string">'python2.7-twisted-conch'</span></span><br><span class="line">The <span class="keyword">following</span> packages were automatically installed <span class="keyword">and</span> <span class="keyword">are</span> <span class="keyword">no</span> longer <span class="keyword">required</span>:</span><br><span class="line">  cli-common dockmanager freepats gstreamer1<span class="number">.0</span>-plugins-bad-faad</span><br><span class="line">  gstreamer1<span class="number">.0</span>-plugins-bad-videoparsers libbotan-<span class="number">1.10</span>-<span class="number">0</span>:i386 libcdaudio1</span><br><span class="line">  libdbus-glib2<span class="number">.0</span>-cil libdbus2<span class="number">.0</span>-cil libdbusmenu-glib4:i386</span><br><span class="line">  libdbusmenu-gtk4:i386 libegl1-mesa:i386 libegl1-mesa-drivers:i386 libflite1</span><br><span class="line">  libfluidsynth1 libgbm1:i386 libgconf2<span class="number">.0</span>-cil libgdiplus libgif4</span><br><span class="line">  libgles2-mesa:i386 libglib2<span class="number">.0</span>-cil libgme0 libgmp10:i386</span><br><span class="line">  libgnome-desktop-<span class="number">2</span>-<span class="number">17</span> libgnome-keyring1<span class="number">.0</span>-cil libgnomedesktop2<span class="number">.20</span>-cil</span><br><span class="line">  libgstreamer-plugins-bad0<span class="number">.10</span>-<span class="number">0</span> libgstreamer-plugins-bad1<span class="number">.0</span>-<span class="number">0</span> libgtk2<span class="number">.0</span>-cil</span><br><span class="line">  libicu52:i386 libmimic0 libmms0 libmono-addins0<span class="number">.2</span>-cil libmono-cairo4<span class="number">.0</span>-cil</span><br><span class="line">  libmono-corlib4<span class="number">.0</span>-cil libmono-corlib4<span class="number">.5</span>-cil libmono-<span class="keyword">data</span>-tds4<span class="number">.0</span>-cil</span><br><span class="line">  libmono-i18n-west4<span class="number">.0</span>-cil libmono-i18n4<span class="number">.0</span>-cil libmono-posix4<span class="number">.0</span>-cil</span><br><span class="line">  libmono-security4<span class="number">.0</span>-cil libmono-sharpzip4<span class="number">.84</span>-cil libmono-sqlite4<span class="number">.0</span>-cil</span><br><span class="line">  libmono-<span class="keyword">system</span>-configuration4<span class="number">.0</span>-cil libmono-<span class="keyword">system</span>-core4<span class="number">.0</span>-cil</span><br><span class="line">  libmono-<span class="keyword">system</span>-data4<span class="number">.0</span>-cil libmono-<span class="keyword">system</span>-drawing4<span class="number">.0</span>-cil</span><br><span class="line">  libmono-<span class="keyword">system</span>-enterpriseservices4<span class="number">.0</span>-cil</span><br><span class="line">  libmono-<span class="keyword">system</span>-runtime-serialization-formatters-soap4<span class="number">.0</span>-cil</span><br><span class="line">  libmono-<span class="keyword">system</span>-security4<span class="number">.0</span>-cil libmono-<span class="keyword">system</span>-transactions4<span class="number">.0</span>-cil</span><br><span class="line">  libmono-<span class="keyword">system</span>-web-applicationservices4<span class="number">.0</span>-cil</span><br><span class="line">  libmono-<span class="keyword">system</span>-web-services4<span class="number">.0</span>-cil libmono-<span class="keyword">system</span>-web4<span class="number">.0</span>-cil</span><br><span class="line">  libmono-<span class="keyword">system</span>-<span class="keyword">xml</span>-linq4<span class="number">.0</span>-cil libmono-<span class="keyword">system</span>-xml4<span class="number">.0</span>-cil</span><br><span class="line">  libmono-system4<span class="number">.0</span>-cil libmono-web4<span class="number">.0</span>-cil libmpg123-<span class="number">0</span> libnotify0<span class="number">.4</span>-cil</span><br><span class="line">  libofa0 libopenal-<span class="keyword">data</span> libopenal1 libopenvg1-mesa:i386 libqrencode3:i386</span><br><span class="line">  libqt5core5a:i386 libqt5dbus5:i386 libqt5gui5:i386 libqt5network5:i386</span><br><span class="line">  libqt5widgets5:i386 libqtshadowsocks:i386 librsvg2-<span class="number">2.18</span>-cil libslv2-<span class="number">9</span></span><br><span class="line">  libsoundtouch0 libspandsp2 libsrtp0 libssl1<span class="number">.0</span><span class="number">.0</span>:i386 libv4l-<span class="number">0</span>:i386</span><br><span class="line">  libv4lconvert0:i386 libvo-aacenc0 libvo-amrwbenc0 libwayland-client0:i386</span><br><span class="line">  libwayland-egl1-mesa:i386 libwayland-server0:i386 libwildmidi-config</span><br><span class="line">  libwildmidi1 libwnck2<span class="number">.20</span>-cil libxcb-icccm4:i386 libxcb-image0:i386</span><br><span class="line">  libxcb-keysyms1:i386 libxcb-randr0:i386 libxcb-render-util0:i386</span><br><span class="line">  libxcb-shape0:i386 libxcb-util0:i386 libxcb-xfixes0:i386 libxcb-xkb1:i386</span><br><span class="line">  libxkbcommon-x11-<span class="number">0</span>:i386 libxkbcommon0:i386 libzbar0:i386 mono-<span class="number">4.0</span>-gac</span><br><span class="line">  mono-gac mono-runtime mono-runtime-common mono-runtime-sgen python-mpd</span><br><span class="line">  python-mutagen python-twisted-<span class="keyword">names</span></span><br><span class="line"><span class="keyword">Use</span> <span class="string">'apt-get autoremove'</span> <span class="keyword">to</span> remove them.</span><br><span class="line">The <span class="keyword">following</span> extra packages will be installed:</span><br><span class="line">  python-pyasn1</span><br><span class="line">The <span class="keyword">following</span> <span class="keyword">NEW</span> packages will be installed:</span><br><span class="line">  python-pyasn1 python-twisted-conch</span><br><span class="line"><span class="number">0</span> upgraded, <span class="number">2</span> newly installed, <span class="number">0</span> <span class="keyword">to</span> remove <span class="keyword">and</span> <span class="number">6</span> <span class="keyword">not</span> upgraded.</span><br><span class="line">Need <span class="keyword">to</span> <span class="keyword">get</span> <span class="number">286</span> kB <span class="keyword">of</span> archives.</span><br><span class="line"><span class="keyword">After</span> this operation, <span class="number">1</span>,<span class="number">793</span> kB <span class="keyword">of</span> additional disk <span class="keyword">space</span> will be used.</span><br><span class="line"><span class="keyword">Do</span> you want <span class="keyword">to</span> continue? [Y/<span class="keyword">n</span>] </span><br><span class="line"><span class="keyword">Get</span>:<span class="number">1</span> <span class="keyword">http</span>://mirrors.ustc.edu.cn/ubuntu/ trusty/<span class="keyword">main</span> python-pyasn1 all <span class="number">0.1</span><span class="number">.7</span>-<span class="number">1</span>ubuntu2 [<span class="number">44.2</span> kB]</span><br><span class="line"><span class="keyword">Get</span>:<span class="number">2</span> <span class="keyword">http</span>://mirrors.ustc.edu.cn/ubuntu/ trusty/<span class="keyword">main</span> python-twisted-conch all <span class="number">1</span>:<span class="number">13.2</span><span class="number">.0</span>-<span class="number">1</span>ubuntu1 [<span class="number">242</span> kB]</span><br><span class="line">Fetched <span class="number">286</span> kB <span class="keyword">in</span> <span class="number">0</span>s (<span class="number">1</span>,<span class="number">595</span> kB/s)         </span><br><span class="line">Selecting previously unselected <span class="keyword">package</span> python-pyasn1.</span><br><span class="line">(Reading <span class="keyword">database</span> ... <span class="number">359746</span> files <span class="keyword">and</span> directories currently installed.)</span><br><span class="line">Preparing <span class="keyword">to</span> unpack .../python-pyasn1_0<span class="number">.1</span><span class="number">.7</span>-<span class="number">1</span>ubuntu2_all.deb ...</span><br><span class="line">Unpacking python-pyasn1 (<span class="number">0.1</span><span class="number">.7</span>-<span class="number">1</span>ubuntu2) ...</span><br><span class="line">Selecting previously unselected <span class="keyword">package</span> python-twisted-conch.</span><br><span class="line">Preparing <span class="keyword">to</span> unpack .../python-twisted-conch_1%<span class="number">3</span>a13<span class="number">.2</span><span class="number">.0</span>-<span class="number">1</span>ubuntu1_all.deb ...</span><br><span class="line">Unpacking python-twisted-conch (<span class="number">1</span>:<span class="number">13.2</span><span class="number">.0</span>-<span class="number">1</span>ubuntu1) ...</span><br><span class="line">Processing <span class="keyword">triggers</span> <span class="keyword">for</span> doc-base (<span class="number">0.10</span><span class="number">.5</span>) ...</span><br><span class="line">Processing <span class="number">1</span> added doc-base <span class="keyword">file</span>...</span><br><span class="line">Processing <span class="keyword">triggers</span> <span class="keyword">for</span> man-db (<span class="number">2.6</span><span class="number">.7</span><span class="number">.1</span>-<span class="number">1</span>ubuntu1) ...</span><br><span class="line">Setting up python-pyasn1 (<span class="number">0.1</span><span class="number">.7</span>-<span class="number">1</span>ubuntu2) ...</span><br><span class="line">Setting up python-twisted-conch (<span class="number">1</span>:<span class="number">13.2</span><span class="number">.0</span>-<span class="number">1</span>ubuntu1) ...</span></span><br></pre></td></tr></table></figure></p>
<p>安装总算完成，再试一次，妈蛋，又来一个新错误，这是什么gui？？？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">chen@chen-P31:~/stack$ scrapy crawl stack</span><br><span class="line"><span class="number">2015</span>-<span class="number">04</span>-<span class="number">26</span> <span class="number">16</span>:<span class="number">50</span>:<span class="number">44</span>+<span class="number">0800</span> [scrapy] INFO: Scrapy <span class="number">0.24</span>.<span class="number">6</span> started (bot: stack)</span><br><span class="line"><span class="number">2015</span>-<span class="number">04</span>-<span class="number">26</span> <span class="number">16</span>:<span class="number">50</span>:<span class="number">44</span>+<span class="number">0800</span> [scrapy] INFO: Optional features available: ssl, http11</span><br><span class="line"><span class="number">2015</span>-<span class="number">04</span>-<span class="number">26</span> <span class="number">16</span>:<span class="number">50</span>:<span class="number">44</span>+<span class="number">0800</span> [scrapy] INFO: Overridden settings: &#123;<span class="string">'NEWSPIDER_MODULE'</span>: <span class="string">'stack.spiders'</span>, <span class="string">'SPIDER_MODULES'</span>: [<span class="string">'stack.spiders'</span>], <span class="string">'BOT_NAME'</span>: <span class="string">'stack'</span>&#125;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/usr/local/bin/scrapy"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    sys.exit(execute())</span><br><span class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py"</span>, line <span class="number">143</span>, <span class="keyword">in</span> execute</span><br><span class="line">    _run_<span class="built_in">print</span>_<span class="built_in">help</span>(parser, _run_<span class="built_in">command</span>, cmd, args, opts)</span><br><span class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py"</span>, line <span class="number">89</span>, <span class="keyword">in</span> _run_<span class="built_in">print</span>_<span class="built_in">help</span></span><br><span class="line">    func(*a, **kw)</span><br><span class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py"</span>, line <span class="number">150</span>, <span class="keyword">in</span> _run_<span class="built_in">command</span></span><br><span class="line">    cmd.run(args, opts)</span><br><span class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/commands/crawl.py"</span>, line <span class="number">60</span>, <span class="keyword">in</span> run</span><br><span class="line">    self.crawler_process.start()</span><br><span class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py"</span>, line <span class="number">92</span>, <span class="keyword">in</span> start</span><br><span class="line">    <span class="keyword">if</span> self.start_crawling():</span><br><span class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py"</span>, line <span class="number">124</span>, <span class="keyword">in</span> start_crawling</span><br><span class="line">    <span class="built_in">return</span> self._start_crawler() is not None</span><br><span class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py"</span>, line <span class="number">139</span>, <span class="keyword">in</span> _start_crawler</span><br><span class="line">    crawler.configure()</span><br><span class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py"</span>, line <span class="number">46</span>, <span class="keyword">in</span> configure</span><br><span class="line">    self.extensions = ExtensionManager.from_crawler(self)</span><br><span class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/middleware.py"</span>, line <span class="number">50</span>, <span class="keyword">in</span> from_crawler</span><br><span class="line">    <span class="built_in">return</span> cls.from_settings(crawler.settings, crawler)</span><br><span class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/middleware.py"</span>, line <span class="number">29</span>, <span class="keyword">in</span> from_settings</span><br><span class="line">    mwcls = load_object(clspath)</span><br><span class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/utils/misc.py"</span>, line <span class="number">42</span>, <span class="keyword">in</span> load_object</span><br><span class="line">    raise ImportError(<span class="string">"Error loading object '%s': %s"</span> % (path, e))</span><br><span class="line">ImportError: Error loading object <span class="string">'scrapy.contrib.memusage.MemoryUsage'</span>: No module named mail.smtp</span><br></pre></td></tr></table></figure></p>
<p>最后的最后，我在我们万能的github上找到<a href="https://github.com/scrapy/scrapy/issues/958" target="_blank" rel="external">答案</a>，原来是我们没有安装python-twisted，安装一下，世界都美好了<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install <span class="keyword">python</span>-twisted</span><br></pre></td></tr></table></figure></p>
<h2 id="输出到文件">输出到文件</h2><p>为了更直观的看到结果，我们将结果输出到一个json文件<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl stack -o items<span class="class">.json</span> -t json</span><br></pre></td></tr></table></figure></p>
<p>噢耶，第一个爬虫成功</p>
<h1 id="存储到mongodb">存储到mongodb</h1><p>接下来，我们做最后一件事，我们将结果存储到mongodb的数据库中<br>在这里，我遇到一个大坑，无论是伯乐在线翻译的博客<br>还是网上搜索到的一般教程，都是使用pymongo.Connection来连接数据库，可是妈蛋，你使用<code>pip install pymongo</code>安装的版本都是最新版本3.0.1，那个Connection的写法已经不支持，被丢弃了，擦。<br>我们来看一下版本，我学到一个新命令<code>pip show pymongo</code>，用来查看某一个包的版本的。<br><img src="http://ww4.sinaimg.cn/large/692869a3gw1erjct36jnrj20df038dgf.jpg" alt="查看pymongo版本"><br>在pymongo 3.0的版本中，已经不再支持pymongo.Connection，而是使用pymongo.MongoClient来替代。</p>
<h2 id="第一步">第一步</h2><p>创建一个用来保存我们抓取数据的数据库。打开<code>settings.py</code>,指定管道，然后加入数据库的相关设置<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">BOT_NAME = <span class="string">'stack'</span></span><br><span class="line"></span><br><span class="line">SPIDER_MODULES = [<span class="string">'stack.spiders'</span>]</span><br><span class="line">NEWSPIDER_MODULE = <span class="string">'stack.spiders'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span></span><br><span class="line"><span class="comment"># USER_AGENT = 'stack (+http://www.yourdomain.com)'</span></span><br><span class="line"></span><br><span class="line">ITEM_PIPELINES = [<span class="string">'stack.pipelines.MongoDBPipeline'</span>, ]</span><br><span class="line"><span class="comment"># 关于mongodb的相关设置，包括服务器的ip，端口号，数据库名，表名，</span></span><br><span class="line"><span class="comment"># 我也是第一次使用mongodb竟然不需要用户验证信息，而且这表名确实奇怪，叫做MONGODB_COLLECTION</span></span><br><span class="line">MONGODB_SERVER = <span class="string">"localhost"</span></span><br><span class="line">MONGODB_PORT = <span class="number">27017</span></span><br><span class="line">MONGODB_DB = <span class="string">"stackoverflow"</span></span><br><span class="line">MONGODB_COLLECTION = <span class="string">"questions"</span></span><br><span class="line"></span><br><span class="line">DOWNLOAD_DELAY = <span class="number">5</span>  <span class="comment"># 抓取的延迟</span></span><br></pre></td></tr></table></figure></p>
<h2 id="第二步">第二步</h2><p>我们已经能够爬取和解析html数据了，而且已经配置了数据库，接下来，我们通过<code>pipelines.py</code>中建立一个管道去连接这两个部分。<br>我们首先来完成数据库的连接部分<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapy.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> DropItem</span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoDBPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        connection = pymongo.MongoClient(</span><br><span class="line">            settings[<span class="string">'MONGODB_SERVER'</span>],</span><br><span class="line">            settings[<span class="string">'MONGODB_PORT'</span>]</span><br><span class="line">        )</span><br><span class="line">        db = connection[settings[<span class="string">'MONGODB_DB'</span>]]</span><br><span class="line">        self.collection = db[settings[<span class="string">'MONGODB_COLLECTION'</span>]]</span><br></pre></td></tr></table></figure></p>
<p>接下来定义一个处理函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> item:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            <span class="keyword">raise</span> DropItem(<span class="string">"Missing data!"</span>)</span><br><span class="line">    self.collection.update(&#123;<span class="string">'url'</span>: item[<span class="string">'url'</span>]&#125;, dict(item), upsert=<span class="keyword">True</span>)</span><br><span class="line">    log.msg(<span class="string">"Question added to MongoDB database!"</span>,</span><br><span class="line">            level=log.DEBUG, spider=spider)</span><br><span class="line">    <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure></p>
<p>ok,搞定，我们再测试一把<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl stack</span><br></pre></td></tr></table></figure></p>
<h2 id="执行效果如下">执行效果如下</h2><p><img src="http://ww1.sinaimg.cn/large/692869a3gw1erjv5to5w3j20w70g8wio.jpg" alt="mongodb数据库管理"></p>
<h1 id="参考文献">参考文献</h1><p>1 <a href="https://github.com/scrapy/scrapy/issues/958" target="_blank" rel="external">ImportError: Error loading object ‘scrapy.contrib.memusage.MemoryUsage’: No module named mail.smtp</a><br>2 <a href="http://stackoverflow.com/questions/8671071/error-to-execute-python-scrappy-module" target="_blank" rel="external">http://stackoverflow.com/questions/8671071/error-to-execute-python-scrappy-module</a><br>3 <a href="http://python.jobbole.com/81320/" target="_blank" rel="external">Python下用Scrapy和MongoDB构建爬虫系统（1）</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天在伯乐在线上看到一篇翻译的博客，讲的是使用scrapy来抓取stackoverflow上的问题，刚好好久没用这个，于是一并捡起来玩一下。<br>]]>
    
    </summary>
    
      <category term="python" scheme="http://jackroyal.github.io/tags/python/"/>
    
      <category term="scrapy" scheme="http://jackroyal.github.io/tags/scrapy/"/>
    
      <category term="爬虫" scheme="http://jackroyal.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="python学习笔记" scheme="http://jackroyal.github.io/categories/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用opencv实现人脸检测]]></title>
    <link href="http://jackroyal.github.io/2015/04/26/face-detection/"/>
    <id>http://jackroyal.github.io/2015/04/26/face-detection/</id>
    <published>2015-04-26T04:54:24.000Z</published>
    <updated>2015-10-29T06:08:51.597Z</updated>
    <content type="html"><![CDATA[<p>这两个星期，都在搞这个，就把代码都分享一下，太烂，就不分享到github了。<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8-*-</span></span><br><span class="line">__author__ = <span class="string">'chen'</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> ImageDraw</span><br><span class="line"><span class="keyword">import</span> sys,os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detectFaces</span><span class="params">(image_name)</span>:</span></span><br><span class="line">    img = cv2.imread(image_name)</span><br><span class="line">    face_cascade = cv2.CascadeClassifier(<span class="string">'../data2/haarcascades/haarcascade_frontalface_alt.xml'</span>)<span class="comment"># 加载级联分类器，这里使用的是intel训练出来的人脸识别分类器</span></span><br><span class="line">    <span class="keyword">if</span> img.ndim == <span class="number">3</span>:<span class="comment"># 判断图片是否是灰度图像，如果img.ndim==3那就表示不是灰度图像</span></span><br><span class="line">        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<span class="comment"># 将图片转化为灰度图像</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gray = img</span><br><span class="line"></span><br><span class="line">    faces = face_cascade.detectMultiScale(gray, scaleFactor=<span class="number">1.2</span>, minNeighbors=<span class="number">4</span>, minSize=(<span class="number">30</span>, <span class="number">30</span>), flags = cv2.CASCADE_SCALE_IMAGE)<span class="comment"># 核心操作，返回图片中所有的人脸的坐标和宽高度</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> (x, y, width, height) <span class="keyword">in</span> faces:</span><br><span class="line">        <span class="keyword">print</span> (x, y, width, height)</span><br><span class="line">        result.append((x, y, x+width, y+height))<span class="comment"># 将原始数据，转化为人脸的四个点的坐标</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawFaces</span><span class="params">(image_name)</span>:</span></span><br><span class="line">    faces = detectFaces(image_name)<span class="comment"># 此处的返回值是一个元组，(x, y, width, height)，每一个元组都包括人脸的（x,y）坐标，还有人脸的宽度和高度，有这些数据，我们就可以把人脸标记出来，比如画一个矩形框出来</span></span><br><span class="line">    <span class="keyword">print</span> faces</span><br><span class="line">    <span class="keyword">if</span> faces:</span><br><span class="line">        imga = cv2.imread(image_name)<span class="comment"># 读取图片</span></span><br><span class="line">        draw_rects(imga, faces, (<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>))<span class="comment"># 画矩形标记</span></span><br><span class="line">        cv2.imshow(<span class="string">'img'</span>, imga)<span class="comment"># 显示修改后的矩形</span></span><br><span class="line">        cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_rects</span><span class="params">(img, rects, color)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x1, y1, x2, y2 <span class="keyword">in</span> rects:</span><br><span class="line">        cv2.rectangle(img, (x1, y1), (x2, y2), color, <span class="number">2</span>)<span class="comment"># 调用cv2的矩形函数，画矩形</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveFaces</span><span class="params">(image_name)</span>:</span><span class="comment"># 将人脸截取并保存成图片</span></span><br><span class="line">    faces = detectFaces(image_name)</span><br><span class="line">    <span class="keyword">if</span> faces:</span><br><span class="line">        save_dir = image_name.split(<span class="string">'.'</span>)[<span class="number">0</span>] + <span class="string">"_faces_"</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(save_dir):<span class="comment"># 检测目录是否存在，如果不存在那就创建目录</span></span><br><span class="line">            os.mkdir(save_dir)</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> (x1, y1, x2, y2) <span class="keyword">in</span> faces:</span><br><span class="line">            imga = cv2.imread(image_name)</span><br><span class="line">            file_name = os.path.join(save_dir,str(count)+<span class="string">".jpg"</span>)</span><br><span class="line">            roi = imga[y1:y2,x1:x2]<span class="comment"># 这一步是重点，他就像取一个数组一样，把人脸的部分保存出来</span></span><br><span class="line">            cv2.imwrite(file_name,cv2.cvtColor(cv2.resize(roi,(<span class="number">92</span>,<span class="number">112</span>)), cv2.COLOR_BGR2GRAY))<span class="comment"># 把图片的size重新设定维（92,112），并将图片转换为灰度图像</span></span><br><span class="line">            <span class="comment"># cv2.imshow('aaa',imga)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">drawFaces(<span class="string">'../at/chen.jpg'</span>)</span><br><span class="line">saveFaces(<span class="string">'../at/chen.jpg'</span>)</span><br></pre></td></tr></table></figure></p>
<p>这里面的截取人脸并保存的saveFaces函数，我觉得还不错。网上找到的代码，调用了Image库，我的代码全部都是用cv2搞定的，没有用Image库。画矩形也是，我也都是用cv2自带的东西完成的。<br>我用以上代码生成的数据，去进行人脸识别，惨不忍睹。</p>
<h1 id="参考文献">参考文献</h1><p>1 <a href="http://blog.csdn.net/u012162613/article/details/43523507" target="_blank" rel="external">Python-OpenCV人脸检测(代码)</a><br>2 <a href="http://wangwei007.blog.51cto.com/68019/1104940" target="_blank" rel="external">python os.path模块常用方法详解</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这两个星期，都在搞这个，就把代码都分享一下，太烂，就不分享到github了。<br>]]>
    
    </summary>
    
      <category term="opencv" scheme="http://jackroyal.github.io/tags/opencv/"/>
    
      <category term="python" scheme="http://jackroyal.github.io/tags/python/"/>
    
      <category term="图像处理" scheme="http://jackroyal.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
      <category term="图像处理" scheme="http://jackroyal.github.io/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用opencv实现人脸识别]]></title>
    <link href="http://jackroyal.github.io/2015/04/26/face-recognizer/"/>
    <id>http://jackroyal.github.io/2015/04/26/face-recognizer/</id>
    <published>2015-04-26T02:50:00.000Z</published>
    <updated>2015-10-29T06:08:51.233Z</updated>
    <content type="html"><![CDATA[<p>最近搞了两个星期的opencv，人脸识别方向，感觉没有什么前途，看不到论文在哪里啊。<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">z = &#123;&#125; <span class="comment"># 存储关于每张图片对应的lable</span></span><br><span class="line">for_pre = []  <span class="comment"># 存储用来进行测试的图片，规则是每个人10张图，5张用来训练，5张用来测试</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize</span><span class="params">(X, low, high, dtype=None)</span>:</span></span><br><span class="line">    <span class="string">"""对数据进行正常化处理，让其处于最高和最低值之间."""</span></span><br><span class="line">    X = np.asarray(X)</span><br><span class="line">    minX, maxX = np.min(X), np.max(X)</span><br><span class="line">    <span class="comment"># normalize to [0...1].</span></span><br><span class="line">    X = X - float(minX)</span><br><span class="line">    X = X / float((maxX - minX))</span><br><span class="line">    <span class="comment"># scale to [low...high].</span></span><br><span class="line">    X = X * (high-low)</span><br><span class="line">    X = X + low</span><br><span class="line">    <span class="keyword">if</span> dtype <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> np.asarray(X)</span><br><span class="line">    <span class="keyword">return</span> np.asarray(X, dtype=dtype)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_images</span><span class="params">(path, sz=None)</span>:</span></span><br><span class="line">    <span class="string">"""从文件夹中读取图像，并且将其大小限制在一定范围之内</span><br><span class="line"></span><br><span class="line">    参数:</span><br><span class="line">        path: 图片的路径</span><br><span class="line">        sz: 设定图像的大小以元组的形式，例如(92,112)</span><br><span class="line"></span><br><span class="line">    返回值:</span><br><span class="line">        返回一个list的数据[X,y]</span><br><span class="line"></span><br><span class="line">            X: 一个numpy的数组，里面存储的是所有的图片的矩阵.</span><br><span class="line">            y:一个list存储的，都是与X中图片对应的lable</span><br><span class="line">    """</span></span><br><span class="line">    c = <span class="number">0</span></span><br><span class="line">    X,y = [], []</span><br><span class="line">    <span class="keyword">for</span> dirname, dirnames, filenames <span class="keyword">in</span> os.walk(path):</span><br><span class="line">        <span class="keyword">for</span> subdirname <span class="keyword">in</span> dirnames:</span><br><span class="line">            subject_path = os.path.join(dirname, subdirname)</span><br><span class="line">            <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(subject_path):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    im = cv2.imread(os.path.join(subject_path, filename), cv2.IMREAD_GRAYSCALE)</span><br><span class="line">                    <span class="comment"># resize to given size (if given)</span></span><br><span class="line">                    <span class="keyword">if</span> (sz <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>):</span><br><span class="line">                        im = cv2.resize(im, sz)</span><br><span class="line">                    <span class="keyword">if</span> y.count(c) &gt; <span class="number">4</span>:</span><br><span class="line">                        for_pre.append(&#123;<span class="string">'no'</span>:c,<span class="string">'src'</span>:np.asarray(im, dtype=np.uint8)&#125;)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        X.append(np.asarray(im, dtype=np.uint8))</span><br><span class="line">                        y.append(c)</span><br><span class="line">                    <span class="keyword">global</span> z</span><br><span class="line">                    z[os.path.join(subject_path, filename)] = c</span><br><span class="line">                <span class="keyword">except</span> IOError, (errno, strerror):</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"I/O error(&#123;0&#125;): &#123;1&#125;"</span>.format(errno, strerror)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"Unexpected error:"</span>, sys.exc_info()[<span class="number">0</span>]</span><br><span class="line">                    <span class="keyword">raise</span></span><br><span class="line">            c = c+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> [X,y]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prediction</span><span class="params">(model)</span>:</span></span><br><span class="line">    <span class="string">"""图像预测</span><br><span class="line"></span><br><span class="line">    参数:</span><br><span class="line">        model: 就是图片训练的那个model</span><br><span class="line"></span><br><span class="line">    数据集中每个人存储了10张图片，我把其中的5张存储到for_pre，作为训练数据。用已知的lable和预测的lable作比较，得出图片识别正确的概率</span><br><span class="line">    """</span></span><br><span class="line">    tn = <span class="number">0</span> <span class="comment"># 识别正确的图片数</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> for_pre:</span><br><span class="line">        [p_label, p_confidence] = model.predict(cv2.resize(item[<span class="string">'src'</span>],(<span class="number">92</span>,<span class="number">112</span>)))</span><br><span class="line">        <span class="keyword">if</span> p_label == item[<span class="string">'no'</span>]:</span><br><span class="line">            tn = tn+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'the answer is %d,'</span> % item[<span class="string">'no'</span>],</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Predicted label = %d (confidence=%.2f)"</span> % (p_label, p_confidence)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"总共有%d次预测，其中正确次数为%d"</span> %(len(for_pre),tn)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># This is where we write the images, if an output_dir is given</span></span><br><span class="line">    <span class="comment"># in command line:</span></span><br><span class="line">    out_dir = <span class="keyword">None</span></span><br><span class="line">    <span class="comment"># You'll need at least a path to your image data, please see</span></span><br><span class="line">    <span class="comment"># the tutorial coming with this source code on how to prepare</span></span><br><span class="line">    <span class="comment"># your image data:</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"USAGE: face_rec.py &lt;/path/to/images&gt; [&lt;/path/to/store/images/at&gt;]"</span></span><br><span class="line">        sys.exit()</span><br><span class="line">    <span class="comment"># Now read in the image data. This must be a valid path!</span></span><br><span class="line">    [X,y] = read_images(sys.argv[<span class="number">1</span>], (<span class="number">92</span>, <span class="number">112</span>))</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Convert labels to 32bit integers. This is a workaround for 64bit machines,</span></span><br><span class="line">    <span class="comment"># because the labels will truncated else. This will be fixed in code as</span></span><br><span class="line">    <span class="comment"># soon as possible, so Python users don't need to know about this.</span></span><br><span class="line">    <span class="comment"># Thanks to Leo Dirac for reporting:</span></span><br><span class="line">    y = np.asarray(y, dtype=np.int32)</span><br><span class="line">    <span class="comment"># If a out_dir is given, set it:</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        out_dir = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="comment"># Create the Eigenfaces model. We are going to use the default</span></span><br><span class="line">    <span class="comment"># parameters for this simple example, please read the documentation</span></span><br><span class="line">    <span class="comment"># for thresholding:</span></span><br><span class="line">    model = cv2.createEigenFaceRecognizer()</span><br><span class="line">    <span class="comment"># Read</span></span><br><span class="line">    <span class="comment"># Learn the model. Remember our function returns Python lists,</span></span><br><span class="line">    <span class="comment"># so we use np.asarray to turn them into NumPy lists to make</span></span><br><span class="line">    <span class="comment"># the OpenCV wrapper happy:</span></span><br><span class="line">    model.train(np.asarray(X), np.asarray(y))</span><br><span class="line">    prediction(model) <span class="comment"># 图片预测</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># You can see the available parameters with getParams():</span></span><br><span class="line">    <span class="keyword">print</span> model.getParams()</span><br><span class="line">    <span class="comment"># Now let's get some data:</span></span><br><span class="line">    mean = model.getMat(<span class="string">"mean"</span>)</span><br><span class="line">    <span class="keyword">print</span> out_dir + <span class="string">'/out.xml'</span></span><br><span class="line">    f = open(out_dir + <span class="string">'/out.xml'</span>,<span class="string">'w'</span>)</span><br><span class="line">    model.save(out_dir + <span class="string">'/out.xml'</span>)</span><br><span class="line">    eigenvectors = model.getMat(<span class="string">"eigenvectors"</span>)</span><br><span class="line">    <span class="comment"># We'll save the mean, by first normalizing it:</span></span><br><span class="line">    mean_norm = normalize(mean, <span class="number">0</span>, <span class="number">255</span>, dtype=np.uint8)</span><br><span class="line">    mean_resized = mean_norm.reshape(X[<span class="number">0</span>].shape)</span><br><span class="line">    <span class="keyword">if</span> out_dir <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        cv2.imshow(<span class="string">"mean"</span>, mean_resized)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cv2.imwrite(<span class="string">"%s/mean.png"</span> % (out_dir), mean_resized)</span><br><span class="line">    <span class="comment"># Turn the first (at most) 16 eigenvectors into grayscale</span></span><br><span class="line">    <span class="comment"># images. You could also use cv::normalize here, but sticking</span></span><br><span class="line">    <span class="comment"># to NumPy is much easier for now.</span></span><br><span class="line">    <span class="comment"># <span class="doctag">Note:</span> eigenvectors are stored by column:</span></span><br><span class="line">    <span class="comment"># for i in xrange(min(len(X), 16)):</span></span><br><span class="line">    <span class="comment">#     eigenvector_i = eigenvectors[:,i].reshape(X[0].shape)</span></span><br><span class="line">    <span class="comment">#     eigenvector_i_norm = normalize(eigenvector_i, 0, 255, dtype=np.uint8)</span></span><br><span class="line">    <span class="comment">#     # Show or save the images:</span></span><br><span class="line">    <span class="comment">#     if out_dir is None:</span></span><br><span class="line">    <span class="comment">#         cv2.imshow("%s/eigenface_%d" % (out_dir,i), eigenvector_i_norm)</span></span><br><span class="line">    <span class="comment">#     else:</span></span><br><span class="line">    <span class="comment">#         cv2.imwrite("%s/eigenface_%d.png" % (out_dir,i), eigenvector_i_norm)</span></span><br><span class="line">    <span class="comment"># Show the images:</span></span><br><span class="line">    <span class="keyword">print</span> z</span><br><span class="line">    <span class="keyword">if</span> out_dir <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p>
<p>代码执行效果如下<br><img src="http://ww1.sinaimg.cn/large/692869a3gw1eriuc3wsckj20nr08qn2q.jpg" alt="人脸识别执行效果"><br>我在这里输出的是那些预测错误的。<code>总共有200次预测，其中正确次数为186。</code>这预测率有点低啊，我用的数据都是来自于<a href="http://www.cl.cam.ac.uk/research/dtg/attarchive/facedatabase.html" target="_blank" rel="external"> AT&amp;T Facedatabase</a>。一共40个人，每个人10张图，图片宽高是92*112像素，全部是灰度图像。<br>至于如何提高图片识别的效率，我也不知道。</p>
<h1 id="参考文献">参考文献</h1><p>1 <a href="http://docs.opencv.org/modules/contrib/doc/facerec/facerec_tutorial.html" target="_blank" rel="external">http://docs.opencv.org/modules/contrib/doc/facerec/facerec_tutorial.html</a><br>2 <a href="https://code.google.com/p/pythonxy/source/browse/src/python/OpenCV/DOC/samples/python2/facerec_demo.py?repo=xy-27&amp;r=a2e41c7a3cb6db536b948747872cab71c696b44e" target="_blank" rel="external">python调用opencv实现人脸识别</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近搞了两个星期的opencv，人脸识别方向，感觉没有什么前途，看不到论文在哪里啊。<br>]]>
    
    </summary>
    
      <category term="opencv" scheme="http://jackroyal.github.io/tags/opencv/"/>
    
      <category term="python" scheme="http://jackroyal.github.io/tags/python/"/>
    
      <category term="图像处理" scheme="http://jackroyal.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
      <category term="图像处理" scheme="http://jackroyal.github.io/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[blog2markdown程序打包,csdn爬虫]]></title>
    <link href="http://jackroyal.github.io/2015/03/29/blog2markdown-csdn-windows/"/>
    <id>http://jackroyal.github.io/2015/03/29/blog2markdown-csdn-windows/</id>
    <published>2015-03-29T14:08:22.000Z</published>
    <updated>2015-10-29T06:08:55.503Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>项目地址<a href="https://github.com/Jackroyal/blog2markdown.git" target="_blank" rel="external">https://github.com/Jackroyal/blog2markdown.git</a></p>
</blockquote>
<p>用来实现普通blog到markdown的搬家，自动将blog的html转换成HEXO可用的Markdown格式<br>暂时只做了CSDN</p>
<h3 id="UPDATE:">UPDATE:</h3><p>2015-03-29 添加了打包成exe的程序,修复cmd下乱码,win和ubuntu完美运行<br>2015-03-29 连夜修复了在win下乱码的问题,删除了冗余代码<br>2015-03-28 将某些参数改为从配置文件中读取,加入更多异常判断<br>2014-12-15 优化标签解析功能,添加了标题,tag和category<br>2014-12-13 实现解析功能,基本完成解析功能<br>2014-12-10 实现CSDN的抓取，正在实现parse解析过程<br><a id="more"></a></p>
<h3 id="BUG">BUG</h3><p>如果代码中有# 和*会被转义成<code>\#</code>和<code>\*</code><br>对table的支持不好</p>
<h3 id="依赖库">依赖库</h3><p>爬虫使用了<code>beautifulsoup  4.3.2</code><br><a href="http://www.crummy.com/software/BeautifulSoup/" target="_blank" rel="external">点我点我</a><br>你必须安装这个才可以正常使用<br>PS:我打包了exe<a href="http://pan.baidu.com/s/1dDERlOP" target="_blank" rel="external">点此下载</a>,可以什么不装,改完配置文件,直接运行</p>
<h1 id="使用:">使用:</h1><h1 id="#_首先,编辑配置文件spider-conf"># 首先,编辑配置文件<code>spider.conf</code></h1><p>格式如下:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[blog]</span></span><br><span class="line"><span class="comment"># 此处url不需要单引号或者双引号,不然类型识别错误,网址最后不要/</span></span><br><span class="line"><span class="setting">url=<span class="value">http://blog.csdn.net/jackroyal</span></span></span><br><span class="line"><span class="title">[setting]</span></span><br><span class="line"><span class="setting">wait_time=<span class="value"><span class="number">5</span></span></span></span><br></pre></td></tr></table></figure></p>
<p>这里的<code>url</code>地址注意不要加引号,下面的<code>wait_time</code>是指两次抓取的间隔时间,这是为了安全起见,如果高频访问,可能会被封,我设置的<code>5</code>秒,你可以根据自己需要去设置</p>
<h2 id="打包">打包</h2><p>我打包了一个<a href="http://pan.baidu.com/s/1dDERlOP" target="_blank" rel="external">exe程序</a>,放在github项目的dist目录下,在windows系统中,<code>直接下载</code>,<code>运行</code></p>
<p>PS:由于pyInstaller的问题,导致无法在中文路径下正常运行</p>
<p>比如你放在C:/users/张三/spider.exe<br>这样是无法正常运行的<br>所以应该放在全英文的目录下<br>C:/software/spider.exe<br>运行结果如图<br><img src="http://ww2.sinaimg.cn/large/692869a3gw1eqmymt6bhrj20ip0cata6.jpg" alt="spider运行截图"><br><img src="http://ww1.sinaimg.cn/large/692869a3gw1eqmyur9uihj20mb0gqmzf.jpg" alt="运行结果截图"></p>
<h1 id="源码执行">源码执行</h1><p>如果你对我的exe不放心,可以自己执行python源码</p>
<h2 id="#_执行">#  执行</h2><p>在linux下,首先要给予执行权限<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x spider<span class="class">.py</span> ParseBlog<span class="class">.py</span></span><br><span class="line">python spider.py</span><br></pre></td></tr></table></figure></p>
<p>然后就可以了,输出文件在output文件夹</p>
<p>在win下,经过修复也可以正常运行了,在idle(在win中你安装了python2.7的话就会有这个编辑器)中是可以完全正常的显示中文<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#19981;&#36807;&#25235;&#21462;&#26159;&#27809;&#26377;&#38382;&#39064;&#30340;,&#27492;&#22788;&#23601;&#19981;&#32416;&#32467;&#20102;&#21704;,&#33021;&#29992;&#23601;&#22909;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在win下,没有权限的问题,直接执行就好了</span></span><br><span class="line"><span class="title">python</span> spider.py</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>项目地址<a href="https://github.com/Jackroyal/blog2markdown.git">https://github.com/Jackroyal/blog2markdown.git</a></p>
</blockquote>
<p>用来实现普通blog到markdown的搬家，自动将blog的html转换成HEXO可用的Markdown格式<br>暂时只做了CSDN</p>
<h3 id="UPDATE:">UPDATE:</h3><p>2015-03-29 添加了打包成exe的程序,修复cmd下乱码,win和ubuntu完美运行<br>2015-03-29 连夜修复了在win下乱码的问题,删除了冗余代码<br>2015-03-28 将某些参数改为从配置文件中读取,加入更多异常判断<br>2014-12-15 优化标签解析功能,添加了标题,tag和category<br>2014-12-13 实现解析功能,基本完成解析功能<br>2014-12-10 实现CSDN的抓取，正在实现parse解析过程<br>]]>
    
    </summary>
    
      <category term="github" scheme="http://jackroyal.github.io/tags/github/"/>
    
      <category term="hexo" scheme="http://jackroyal.github.io/tags/hexo/"/>
    
      <category term="python" scheme="http://jackroyal.github.io/tags/python/"/>
    
      <category term="windows" scheme="http://jackroyal.github.io/tags/windows/"/>
    
      <category term="python学习笔记" scheme="http://jackroyal.github.io/categories/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo发布失败]]></title>
    <link href="http://jackroyal.github.io/2015/03/29/hexo-deploy-error/"/>
    <id>http://jackroyal.github.io/2015/03/29/hexo-deploy-error/</id>
    <published>2015-03-29T10:09:28.000Z</published>
    <updated>2015-10-29T06:08:49.964Z</updated>
    <content type="html"><![CDATA[<p>可能受到上次ddos的问题,这两天国内访问github,总是感觉不顺畅.<br><a id="more"></a><br>今天下午写了一篇博客,可是却发布不成功,一直卡在这一步:<br><img src="http://ww3.sinaimg.cn/large/692869a3gw1eqmrrf20j1j20g006676y.jpg" alt="hexo发布的时候卡住"></p>
<p>然后我继续等,得到如下错误:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="variable">Failed</span> to <span class="keyword">receive</span> <span class="variable">SOCKS4</span> connect request ack.</span><br></pre></td></tr></table></figure></p>
<p>我执行了<code>hexo clean</code>命令,手动删掉了<code>.deploy</code>文件夹,可是还是不行<br>最后报错<br>无法连接<code>https://github.com/Jackroyal/Jackroyal.github.io.git</code></p>
<p><em>(ps:此处已经无法重现了,抽风啊)</em></p>
<p>最后我换了下这条链接<br>我修改了博客目录下的<code>_config.yml</code>,改了deploy参数<br>原参数设置<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: github</span><br><span class="line">  <span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//github.com/Jackroyal/Jackroyal.github.io.git</span></span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure></p>
<p>修改以后:<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: github</span><br><span class="line">  <span class="attribute">repo</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:Jackroyal/Jackroyal.github.io.git</span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure></p>
<p>然后就deploy成功了.</p>
<p><em>PPPS:千万注意,上面的参数设置repo:后面有一个空格,没有空格会报错</em></p>
<h1 id="update:">update:</h1><p>repo的两种方式分别为ssh和https<br>昨天没搞清楚,专门去查了一下,ssh和https两种提交的区别<br>官方推荐用https,因为这回要求你输入用户名和密码,这样更安全<br>用ssh的话,只要你的ssh-key(可以设置一道类似密码的东西,和你的key一起加密,这样使用的时候会要求输入这段密码)对,那么就都可以提交,没有了更多的验证过程(可以设置一个para加密,提交会要求输入这段para)</p>
<p>2015-05-06<br>最近又发现，使用ssh提交的话，github不会计算到你的conribute里面去，也就是你今天提交了，但是github的contribute不会变化，所以还是改成https吧，不然怎么装B呢？</p>
<h3 id="友情链接">友情链接</h3><p><a href="http://rolight.cn/blog/?p=34" target="_blank" rel="external">ubuntu  shadowsocks 全局 代理</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>可能受到上次ddos的问题,这两天国内访问github,总是感觉不顺畅.<br>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://jackroyal.github.io/tags/hexo/"/>
    
      <category term="hexo" scheme="http://jackroyal.github.io/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python学习笔记--python和beautifulsoup遇到的编码问题]]></title>
    <link href="http://jackroyal.github.io/2015/03/29/python-blog-spider/"/>
    <id>http://jackroyal.github.io/2015/03/29/python-blog-spider/</id>
    <published>2015-03-29T06:43:45.000Z</published>
    <updated>2015-10-29T06:08:46.478Z</updated>
    <content type="html"><![CDATA[<p>在刚开始使用github pages的时候,我用python写了一个爬虫,计划是从csdn和cnblogs等博客网站上,把自己之前写的博客爬取下来,然后再转换成hexo用的markdown格式,样就可以直接添加到我的github pages.</p>
<blockquote>
<p>项目主页: <a href="https://github.com/Jackroyal/blog2markdown" target="_blank" rel="external">https://github.com/Jackroyal/blog2markdown</a></p>
</blockquote>
<p>最近刚好在学习python,刚好就把它给优化了一下,顺便做了个跨平台(哈哈,win和ubuntu都可以跑哈),昨天遇到很蛋疼的问题,一它给了我很多思路帮助我定位问题,.直搞到凌晨两点才弄好.<br>非常非常感谢<a href="http://www.crifan.com/summary_python_2_x_common_string_encode_decode_error_reason_and_solution/" target="_blank" rel="external">【总结】Python 2.x中常见字符编码和解码方面的错误及其解决办法</a><br>作者做了一个很好的总结,帮助我们定位问题.<br><a id="more"></a></p>
<h1 id="1_编码类型">1 编码类型</h1><p>首先确定好你的编码类型,比如一般推荐用utf-8.当确定编码类型后,就要保持统一,不要又弄些GBK的编码在里面.</p>
<ul>
<li>1.1  编辑器编码<ul>
<li>我们有时候会犯一个错误,我在py文件的头部声明当前文件是按照utf-8来编码.但是文件实际保存的编却不是utf-8,这样也会导致乱码.建议使用可以查看当前文件编码的编辑器,比如sublime text或者notepad++ 或者pycharm.<br>在sublime下如图所示<br><img src="http://ww2.sinaimg.cn/large/692869a3gw1eqmn535qb7j208u028t8k.jpg" alt="sublime显示当前文件编码"></li>
<li>文件编码声明,我们要在py文件的头部添加一行<code># -*- coding: utf-8 -*-</code>,表明我接下来要使用utf-8编码</li>
</ul>
</li>
<li>1.2  python解释器<ul>
<li>如果是Python的IDLE，如果你没修改defaultencoding，那么就使用默认的字符编码可以通过sys.getdefaultencoding()而获得，比如此处获得是：ascii<br><img src="http://ww4.sinaimg.cn/large/692869a3gw1eqmnd8fgrjj20b205kabi.jpg" alt="win中python解释器编码"><br><img src="http://ww3.sinaimg.cn/large/692869a3gw1eqmnfd29u7j20k5047wfv.jpg" alt="ubuntu终端解释器的编码"></li>
</ul>
</li>
<li>1.3  执行python代码<ul>
<li>其中，很常见的几种动作是：<ul>
<li>打印print对应的所获得的字符<ul>
<li>对于字符串打印,Python的逻辑:<ul>
<li>如果是Unicode字符串,则可以,自动地,编码为对应的终端所用编码,然后正确的显示出来</li>
<li>比如unicode的字符串,输出到windows的默认编码为GBK的cmd中,则Python可以自动将Unicode编码为GBK,然后输出到cmd中</li>
<li>个别特殊情况,也会出错:<ul>
<li>当此unicode字符串中包含某特殊字符,而目标终端的编码集合中,没有此字符,则很明显也是无法实现将Unicode编码为对应的特定编码的字符串,无法正确显示的</li>
</ul>
</li>
<li>如果是某种编码类型的str,则需要该str的编码类型,和目标终端编码匹配<ul>
<li>比如GBK的字符串,输出到windows的默认编码为GBK的cmd,则是可以正常输出的</li>
<li>此处后来经过代码测试，就发现一个有趣或者说诡异的问题，虽然我们python文件声明的UTF-8编码，但是实际上实际上是用GBK编码，而此时，文件中的字符串，很明显是用GBK存储的，所以，将此GBK字符，输出到GBK的cmd中，是可以正常输出的。即，此处字符串的类型，很明显只和文件所用的实际编码有关，而和文件所声明的代码无关。</li>
</ul>
</li>
<li>如果是UTF-8的字符串,输出到windows的默认编码为GBK的cmd,就会出错<ul>
<li>对相应的字符，进行编码（为某种特定类型的字符str），或解码（为对应的unicode类型的字符）</li>
<li>比如将当前的某种编码的字符串，解码为Unicode字符串<ul>
<li>很明显，也是要保证，你字符串本身的编码和所指定的编码，两者之间要一致的</li>
<li>比如：decodedUnicode = someUtf8Str.decode(“UTF-8”)</li>
<li>而如果用这样的：decodedUnicode = someGbkStr.decode(“UTF-8”)，那就会出现错误</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="2_常用方法">2 常用方法</h1><h3 id="2-1_encode和decode">2.1 encode和decode</h3><p>encode()  unicode编码-&gt;其他编码</p>
<p>decode()  其他编码-&gt;unicode编码</p>
<p>使用这两个方法的前提是,你要知道当前是什么编码.然后用对应的编码去进行解码<br>比如对于s字符串可以用<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.encode(<span class="string">'utf-8'</span>) <span class="preprocessor"># 将s由unicode转码成utf-8</span></span><br><span class="line">s.decode(<span class="string">'GBK'</span>) <span class="preprocessor"># s是GBK编码,将s转换成unicode</span></span><br></pre></td></tr></table></figure></p>
<h3 id="2-2_isinstance()">2.2 isinstance()</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">isinstance(s , unicode) <span class="preprocessor"># 检测s是否是unicode编码</span></span><br><span class="line"></span><br><span class="line">isinstance(s , <span class="keyword">str</span>) <span class="preprocessor"># 检测s是否是str格式</span></span><br></pre></td></tr></table></figure>
<h1 id="3_beautifulsoup编码问题">3 beautifulsoup编码问题</h1><h3 id="Beautiful_Soup_会按顺序尝试不同的编码将你的文档转换为Unicode：">Beautiful Soup 会按顺序尝试不同的编码将你的文档转换为Unicode：</h3><ul>
<li>可以通过from_encoding参数传递编码类型给soup的构造器</li>
<li>通过文档本身找到编码类型：例如XML的声明或者HTML文档http-equiv的META标签。 </li>
<li>如果Beautiful Soup在文档中发现编码类型，它试着使用找到的类型转换文档。 +</li>
<li>但是，如果你明显的指定一个编码类型， </li>
<li>并且成功使用了编码：这时它会忽略任何它在文档中发现的编码类型。</li>
<li>通过嗅探文件开头的一下数据，判断编码。如果编码类型可以被检测到，</li>
<li>它将是这些中的一个：UTF-*编码，EBCDIC或者ASCII。</li>
<li>通过chardet库,嗅探编码，如果你安装了这个库。</li>
<li>UTF-8</li>
<li>Windows-1252</li>
</ul>
<p>一般来说,bs的自动识别,是不会有问题的,但是在我这里除了问题,具体原因不太清楚<br>我的网页上已经声明了是<code>utf-8</code>编码<br>原来代码如下<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># 这是原来的编码,在win下面乱码</span></span><br><span class="line"><span class="variable">self</span>.soup = bs((response.read()))</span><br><span class="line"><span class="built_in">print</span> <span class="variable">self</span>.soup.originalEncoding<span class="preprocessor">   # 此处结果竟然返回Windows-1252</span></span><br></pre></td></tr></table></figure></p>
<p>修改后代码如下<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># win下乱码的关键在这里,beautifulsoup解析的编码不对,我们这里直接指定编码</span></span><br><span class="line"><span class="keyword">self</span>.soup = bs((response.read()), from_encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="keyword">self</span>.soup.originalEncoding   <span class="comment"># 修正后代码正确返回'utf-8'</span></span><br></pre></td></tr></table></figure></p>
<p>看来beautifulsoup的自动识别编码不能全部依赖.<br>好不容易才定位到这里的问题,折腾了一天啊<br>这里用了一个方法来检测编码.就是soup.iriginalEncoding属性<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> <span class="variable">self</span>.soup.originalEncoding<span class="preprocessor">   # 修正后代码正确返回'utf-8'</span></span><br></pre></td></tr></table></figure></p>
<p>这篇博客好水,毕竟不是很懂,所以说不出来</p>
<p>update:2015-03-30</p>
<h1 id="4_新技能get">4 新技能get</h1><p>之前都没好好理解原作者的博客,觉得没办法一个程序在win和ubuntu中不更改正常运行,现在发现,如果把编码改为unicode格式输出,那么系统会自动转换,这样就不存在utf-8编码在windows下cmd乱码了.</p>
<h1 id="参考文献">参考文献</h1><p>1 <a href="http://www.crifan.com/summary_python_2_x_common_string_encode_decode_error_reason_and_solution/" target="_blank" rel="external">【总结】Python 2.x中常见字符编码和解码方面的错误及其解决办法</a><br>2 <a href="http://www.crifan.com/resolved_python_garbled_chinese_characters_gb2312_gbk_gb18030-related_issues/" target="_blank" rel="external">【已解决】python中文字符乱码（GB2312，GBK，GB18030相关的问题）</a><br>参考资料太多,贴不过来啊,主要都是cifan的博客,里面资料很多,一步一步都有过程,非常好用,谢谢cifan作者</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在刚开始使用github pages的时候,我用python写了一个爬虫,计划是从csdn和cnblogs等博客网站上,把自己之前写的博客爬取下来,然后再转换成hexo用的markdown格式,样就可以直接添加到我的github pages.</p>
<blockquote>
<p>项目主页: <a href="https://github.com/Jackroyal/blog2markdown">https://github.com/Jackroyal/blog2markdown</a></p>
</blockquote>
<p>最近刚好在学习python,刚好就把它给优化了一下,顺便做了个跨平台(哈哈,win和ubuntu都可以跑哈),昨天遇到很蛋疼的问题,一它给了我很多思路帮助我定位问题,.直搞到凌晨两点才弄好.<br>非常非常感谢<a href="http://www.crifan.com/summary_python_2_x_common_string_encode_decode_error_reason_and_solution/">【总结】Python 2.x中常见字符编码和解码方面的错误及其解决办法</a><br>作者做了一个很好的总结,帮助我们定位问题.<br>]]>
    
    </summary>
    
      <category term="python" scheme="http://jackroyal.github.io/tags/python/"/>
    
      <category term="爬虫" scheme="http://jackroyal.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="python学习笔记" scheme="http://jackroyal.github.io/categories/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python学习笔记--一个简单聊天室的实现]]></title>
    <link href="http://jackroyal.github.io/2015/03/26/python-im/"/>
    <id>http://jackroyal.github.io/2015/03/26/python-im/</id>
    <published>2015-03-26T13:33:35.000Z</published>
    <updated>2015-10-29T06:08:46.091Z</updated>
    <content type="html"><![CDATA[<p>最近项目真多,一个接一个的失之交臂,全部都错过了.最近状态有些不好,容易胡思乱想.<br>这是来自书上的一个python聊天程序,我照着敲了一遍,然后给扩展了一下,加了多个房间和创建选择房间的功能,写了好久好久,感觉都拖了一个星期了.<br>下一步是做一个gui,恩,那将是我的第一个gui程序.<br><a id="more"></a></p>
<h1 id="先贴一下代码_server5-py">先贴一下代码 server5.py</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8-*-</span></span><br><span class="line">__author__ = <span class="string">'chen'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> asyncore <span class="keyword">import</span>  dispatcher</span><br><span class="line"><span class="keyword">from</span>  asynchat <span class="keyword">import</span> async_chat</span><br><span class="line"><span class="keyword">import</span> socket,asyncore</span><br><span class="line"></span><br><span class="line">PORT = <span class="number">5005</span>  <span class="comment"># 设定程序的端口号</span></span><br><span class="line">NAME = <span class="string">'testchat'</span>  <span class="comment"># 给服务器一个名称</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EndSession</span><span class="params">(Exception)</span>:</span><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommandHandler</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    类似标准库中cmd.Cmd的简单命令处理程序</span><br><span class="line">    """</span></span><br><span class="line">    <span class="comment"># 如果输入的命令,那么就返回unknown命令</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unknown</span><span class="params">(self, session, cmd)</span>:</span></span><br><span class="line">        session.push(<span class="string">'Unknown command: %s \r\n'</span> % cmd)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self, session, line)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line.strip():</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        parts = line.split(<span class="string">' '</span>, <span class="number">1</span>)</span><br><span class="line">        cmd = parts[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            line = parts[<span class="number">1</span>].strip()</span><br><span class="line">        <span class="keyword">except</span> IndexError:line = <span class="string">''</span></span><br><span class="line">        meth = getattr(self, <span class="string">'do_'</span> + cmd, <span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            meth(session, line)</span><br><span class="line">        <span class="keyword">except</span> TypeError:</span><br><span class="line">            self.unknown(session, cmd)</span><br><span class="line"><span class="comment"># 这个类是聊天房间的类,继承上面的类是为了继承执行命令的功能</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatRoom</span><span class="params">(CommandHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, server)</span>:</span></span><br><span class="line">        self.server = server</span><br><span class="line">        self.name = name</span><br><span class="line">        self.sessions = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, session)</span>:</span></span><br><span class="line">        self.broadcast(session.name + <span class="string">' has entered the room %s\r\n'</span> % self.name)</span><br><span class="line">        session.push(<span class="string">'you can type "h" for help\r\n'</span>)</span><br><span class="line">        <span class="comment">## 因为后面要将用户挪动房间,所以必须保存每个用户的session,这样才能挪动和删除</span></span><br><span class="line">        self.server.users[session.name] = session</span><br><span class="line">        self.sessions.append(session)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, session)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.sessions.remove(session)</span><br><span class="line">        <span class="keyword">except</span>: <span class="keyword">pass</span> <span class="comment"># 如果此处的sessions为空或者已经不存在,会出错,此处不上报</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">broadcast</span><span class="params">(self, line)</span>:</span></span><br><span class="line">        <span class="comment"># 广播,只广播到当前房间</span></span><br><span class="line">        <span class="keyword">for</span> session <span class="keyword">in</span> self.sessions:</span><br><span class="line">            session.push(line)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_say</span><span class="params">(self, session, line)</span>:</span></span><br><span class="line">        <span class="comment"># 说话</span></span><br><span class="line">        self.broadcast(session.name + <span class="string">":"</span> + line + <span class="string">'\r\n'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_login</span><span class="params">(self, session, line)</span>:</span></span><br><span class="line">        <span class="comment"># login,其实是实现改名字的功能,懒得去改函数名了</span></span><br><span class="line">        name = line.strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name:</span><br><span class="line">            session.push(<span class="string">'please enter a name\r\n'</span>)</span><br><span class="line">        <span class="keyword">elif</span> name <span class="keyword">in</span> self.server.users.keys():</span><br><span class="line">            session.push(<span class="string">'The name %s is taken\r\n'</span> % name)</span><br><span class="line">            session.push(<span class="string">'please try again\r\n'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            session.server.users[name] = session.server.users.pop(session.name)</span><br><span class="line">            session.name = name</span><br><span class="line">            session.enter(self)</span><br><span class="line">            self.do_list(session, <span class="string">''</span>)</span><br><span class="line">            session.push(<span class="string">'type "select name" to choose one room\r\n'</span>)</span><br><span class="line">    <span class="comment"># 查看当前房间有哪些人</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_look</span><span class="params">(self, session, line)</span>:</span></span><br><span class="line">        session.push(<span class="string">'the following are in this room:\r\n'</span>)</span><br><span class="line">        <span class="keyword">for</span> other <span class="keyword">in</span> self.sessions:</span><br><span class="line">            session.push(other.name + <span class="string">"\r\n"</span>)</span><br><span class="line">    <span class="comment"># 查看当前在线的用户,所有房间的用户</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_who</span><span class="params">(self, session, line)</span>:</span></span><br><span class="line">        session.push(<span class="string">'the following are logged in:\r\n'</span>)</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> self.server.users:</span><br><span class="line">            session.push(name + <span class="string">'\r\n'</span>)</span><br><span class="line">    <span class="comment"># 查看当前所有的房间</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_list</span><span class="params">(self, session, line)</span>:</span></span><br><span class="line">        session.push(<span class="string">'the room list is below\r\n'</span>)</span><br><span class="line">        session.push(<span class="string">'   '</span>.join(self.server.rooms) + <span class="string">'\r\n'</span>)</span><br><span class="line">    <span class="comment"># 选择房间</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_select</span><span class="params">(self, session, line)</span>:</span></span><br><span class="line">        name = line.strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name:</span><br><span class="line">            session.push(<span class="string">'please enter a room name\r\n'</span>)</span><br><span class="line">        <span class="keyword">elif</span> name <span class="keyword">in</span> self.server.rooms.keys():</span><br><span class="line">            session.enter(self.server.rooms[name])</span><br><span class="line">            self.broadcast(<span class="string">' %s ,welcome to join %s\r\n'</span>% (session.name, name))</span><br><span class="line">    <span class="comment"># 输出帮助</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_h</span><span class="params">(self, session, line)</span>:</span></span><br><span class="line">        session.push(<span class="string">'you can use this commands:\r\n1,who to see who is on this server(online and offline)\r\n2,'</span></span><br><span class="line">        <span class="string">'list to see how many room are avaliable\r\n3,look to see who are in this room\r\n4,login to login online and '</span></span><br><span class="line">        <span class="string">'change a name\r\n5,create to create a new room'</span>)</span><br><span class="line">    <span class="comment"># 创建新房间</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_create</span><span class="params">(self, session, line)</span>:</span></span><br><span class="line">        name = line.strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name:</span><br><span class="line">            session.push(<span class="string">'please enter a name\r\n'</span>)</span><br><span class="line">        <span class="keyword">elif</span> name <span class="keyword">in</span> self.server.rooms.keys():</span><br><span class="line">            session.push(<span class="string">'The room name %s is taken\r\n'</span> % name)</span><br><span class="line">            session.push(<span class="string">'please try again\r\n'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ChatRoom(name, self.server)</span><br><span class="line">            session.server.rooms[name] = ChatRoom(name, self.server)</span><br><span class="line">            session.push(<span class="string">"the room %s create successful\r\n"</span> % name)</span><br><span class="line">            session.enter(session.server.rooms[name])</span><br><span class="line"><span class="comment"># 每个用户回话,这个是重点类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatSession</span><span class="params">(async_chat)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, server, sock)</span>:</span></span><br><span class="line">        async_chat.__init__(self, sock)</span><br><span class="line">        self.server = server</span><br><span class="line">        self.set_terminator(<span class="string">'\r\n'</span>)</span><br><span class="line">        self.data = []</span><br><span class="line">        self.name = <span class="string">'visitor'</span> + str(len(server.users))<span class="comment"># 初始化用户名,用visitor1之类来表示</span></span><br><span class="line">        self.room = self.server.main_room</span><br><span class="line">        self.enter(self.server.main_room)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enter</span><span class="params">(self, room)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cur = self.room</span><br><span class="line">        <span class="keyword">except</span> AttributeError: <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>: cur.remove(self)</span><br><span class="line">        self.room = room</span><br><span class="line">        room.add(self)</span><br><span class="line">    <span class="comment"># 当用户有输入的时候</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">collect_incoming_data</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        self.data.append(data)</span><br><span class="line">    <span class="comment"># 当用户输入终止符的时候</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">found_terminator</span><span class="params">(self)</span>:</span></span><br><span class="line">        line = <span class="string">''</span>.join(self.data)</span><br><span class="line">        self.data = []</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.room.handle(self, line)</span><br><span class="line">        <span class="keyword">except</span> EndSession:</span><br><span class="line">            self.handle_close()</span><br><span class="line">    <span class="comment"># 关闭用户回话</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_close</span><span class="params">(self)</span>:</span></span><br><span class="line">        async_chat.handle_close(self)</span><br><span class="line">        <span class="comment"># self.enter()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器类,这个也是重点类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatServer</span><span class="params">(dispatcher)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, port, name)</span>:</span></span><br><span class="line">        dispatcher.__init__(self)</span><br><span class="line">        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        <span class="comment"># 端口复用</span></span><br><span class="line">        self.set_reuse_addr()</span><br><span class="line">        self.bind((<span class="string">''</span>, port))</span><br><span class="line">        self.listen(<span class="number">5</span>)</span><br><span class="line">        self.sessions = &#123;&#125;</span><br><span class="line">        self.name = name</span><br><span class="line">        self.users = &#123;&#125;</span><br><span class="line">        self.rooms = &#123;&#125;</span><br><span class="line">        <span class="comment"># 新建一个房间hall,因为每个初始登陆的用户没有房间,但是操作是依赖与ChatRoom类的,所以给一个初始默认的房间</span></span><br><span class="line">        self.main_room = ChatRoom(<span class="string">'hall'</span>, self)</span><br><span class="line">        self.rooms[self.main_room.name] = self.main_room</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_accept</span><span class="params">(self)</span>:</span></span><br><span class="line">        conn,addr = self.accept()</span><br><span class="line">        ChatSession(self, conn)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'connection attempt from '</span>, addr[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'server start'</span></span><br><span class="line">    s = ChatServer(PORT, NAME)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        asyncore.loop()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt: <span class="keyword">print</span></span><br></pre></td></tr></table></figure>
<p>效果如图所示<br><img src="http://ww3.sinaimg.cn/large/692869a3gw1eqjhaekoz0j20ii0h5q62.jpg" alt="运行效果"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近项目真多,一个接一个的失之交臂,全部都错过了.最近状态有些不好,容易胡思乱想.<br>这是来自书上的一个python聊天程序,我照着敲了一遍,然后给扩展了一下,加了多个房间和创建选择房间的功能,写了好久好久,感觉都拖了一个星期了.<br>下一步是做一个gui,恩,那将是我的第一个gui程序.<br>]]>
    
    </summary>
    
      <category term="python" scheme="http://jackroyal.github.io/tags/python/"/>
    
      <category term="socket" scheme="http://jackroyal.github.io/tags/socket/"/>
    
      <category term="python学习笔记" scheme="http://jackroyal.github.io/categories/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python学习笔记--socket编程端口复用]]></title>
    <link href="http://jackroyal.github.io/2015/03/18/python-socket-port-reuse/"/>
    <id>http://jackroyal.github.io/2015/03/18/python-socket-port-reuse/</id>
    <published>2015-03-18T00:47:02.000Z</published>
    <updated>2015-10-29T06:08:45.367Z</updated>
    <content type="html"><![CDATA[<p>最近在学习socket编程,遇到一个问题:<br>我先bind一个端口后,如果通过ctr+c关闭进程.接下来执行程序的时候,就会提示<code>socket.error: Address already in use</code>.<br><a id="more"></a><br>照例google一番,找到<a href="http://blog.csdn.net/xl_xunzhao/article/details/3130037" target="_blank" rel="external">这个</a>.博主说的情况和我的一样.<br>我还在stackoverflow上找到<a href="http://stackoverflow.com/questions/4465959/python-errno-98-address-already-in-use" target="_blank" rel="external">这个</a>.<br>修改后代码如下:<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server_socket = <span class="keyword">socket</span>.<span class="keyword">socket</span>(<span class="keyword">socket</span>.AF_INET, <span class="keyword">socket</span>.SOCK_STREAM)</span><br><span class="line"><span class="comment"># 下面这行是关健</span></span><br><span class="line">server_socket.<span class="keyword">setsockopt</span>(<span class="keyword">socket</span>.SOL_SOCKET, <span class="keyword">socket</span>.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">server_socket.<span class="keyword">bind</span>((<span class="string">''</span>, PORT))</span><br><span class="line">server_socket.<span class="keyword">listen</span>(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></p>
<p>然后就搞定了.</p>
<p>下面的代码是socket编程敲得两个小例子,基于socket的聊天小程序都是别人的东西,只是练习一下,源地址在本文最后.</p>
<h2 id="多线程版本服务器端程序server2-py">多线程版本服务器端程序server2.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8-*-</span></span><br><span class="line">__author__ = <span class="string">'chen'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket,sys</span><br><span class="line"><span class="keyword">from</span> thread <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">''</span></span><br><span class="line">PORT = <span class="number">8888</span></span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'socket created'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    s.bind((HOST, PORT))</span><br><span class="line"><span class="keyword">except</span> socket.error, msg:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'bind failed.Error code: |||%S Message: %s'</span> %(str(msg[<span class="number">0</span>]), msg[<span class="number">1</span>])</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'socket bind complete'</span></span><br><span class="line"></span><br><span class="line">s.listen(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'socket now listening'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clientthread</span><span class="params">(conn)</span>:</span></span><br><span class="line">    conn.send(<span class="string">'welcome to the server.Type something and hit enter\n'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">        reply = <span class="string">'ok...'</span> + data</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        conn.sendall(reply)</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    conn, addr = s.accept()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'connected with %s : %s'</span> %(addr[<span class="number">0</span>],str(addr[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    start_new_thread(clientthread, (conn,))</span><br><span class="line"></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure>
<p>直接telnet连接socket,就可以调试<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet localhost <span class="number">8888</span></span><br></pre></td></tr></table></figure></p>
<h2 id="改良版,带广播的聊天室程序server3-py">改良版,带广播的聊天室程序server3.py</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8-*-</span></span><br><span class="line">__author_<span class="number">_</span> = <span class="string">'chen'</span></span><br><span class="line"></span><br><span class="line">import <span class="keyword">socket</span>, <span class="keyword">select</span></span><br><span class="line"></span><br><span class="line">def broadcast_data(sock, message):</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">socket</span> in CONNECTION_LIST:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">socket</span> != server_socket != sock:</span><br><span class="line">            try:</span><br><span class="line">                <span class="keyword">socket</span>.<span class="keyword">send</span>(message)</span><br><span class="line">            except msg:</span><br><span class="line">                <span class="keyword">socket</span>.<span class="keyword">close</span>()</span><br><span class="line">                CONNECTION_LIST.remove(<span class="keyword">socket</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">"__main__"</span>:</span><br><span class="line">    CONNECTION_LIST = []</span><br><span class="line">    RECV_BUFFER = <span class="number">4096</span></span><br><span class="line">    PORT = <span class="number">5000</span></span><br><span class="line">    server_socket = <span class="keyword">socket</span>.<span class="keyword">socket</span>(<span class="keyword">socket</span>.AF_INET, <span class="keyword">socket</span>.SOCK_STREAM)</span><br><span class="line">    server_socket.<span class="keyword">setsockopt</span>(<span class="keyword">socket</span>.SOL_SOCKET, <span class="keyword">socket</span>.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">    server_socket.<span class="keyword">bind</span>((<span class="string">''</span>, PORT))</span><br><span class="line">    server_socket.<span class="keyword">listen</span>(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    CONNECTION_LIST.append(server_socket)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"chat server started on port <span class="variable">%s</span>"</span> % str(PORT)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        read_sockets, write_sockets,error_sockets = <span class="keyword">select</span>.<span class="keyword">select</span>(CONNECTION_LIST, [], [])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> sock in read_sockets:</span><br><span class="line">            <span class="keyword">if</span> sock == server_socket:</span><br><span class="line">                sockfd,addr = server_socket.<span class="keyword">accept</span>()</span><br><span class="line">                CONNECTION_LIST.append(sockfd)</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"client (<span class="variable">%s</span>, <span class="variable">%s</span>) connected"</span> % addr</span><br><span class="line"></span><br><span class="line">                broadcast_data(sockfd, <span class="string">"[<span class="variable">%s</span>:<span class="variable">%s</span>] entered room\n"</span> % addr)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                try:</span><br><span class="line">                    data = sock.<span class="keyword">recv</span>(RECV_BUFFER)</span><br><span class="line">                    <span class="keyword">if</span> data:</span><br><span class="line">                        <span class="keyword">print</span>  <span class="string">"[<span class="variable">%s</span>:<span class="variable">%s</span>]"</span> % (str(sock.<span class="keyword">getpeername</span>()), data)</span><br><span class="line">                        broadcast_data(sock, <span class="string">"[<span class="variable">%s</span>:<span class="variable">%s</span>]"</span> % (str(sock.<span class="keyword">getpeername</span>()), data))</span><br><span class="line">                except msg:</span><br><span class="line">                    <span class="keyword">print</span> msg</span><br><span class="line">                    broadcast_data(sock, <span class="string">"client (<span class="variable">%s</span>, <span class="variable">%s</span>) is offline "</span>% addr)</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"client (<span class="variable">%s</span>,<span class="variable">%s</span>) is offline "</span> % addr</span><br><span class="line">                    sock.<span class="keyword">close</span>()</span><br><span class="line">                    CONNECTION_LIST.remove(sock)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">    server_socket.<span class="keyword">close</span>()</span><br></pre></td></tr></table></figure>
<h2 id="客户端程序client3-py">客户端程序client3.py</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8-*-</span></span><br><span class="line">__author_<span class="number">_</span> = <span class="string">'chen'</span></span><br><span class="line"></span><br><span class="line">import <span class="keyword">socket</span>,<span class="keyword">select</span>,string,sys</span><br><span class="line"></span><br><span class="line">def prompt():</span><br><span class="line">    sys.stdout.<span class="keyword">write</span>(<span class="string">'[you]'</span>)</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">if</span>(len(sys.argv)&lt;<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'usage: python client3.py hostname port'</span></span><br><span class="line">        sys.<span class="keyword">exit</span>()</span><br><span class="line"></span><br><span class="line">    host = sys.argv[<span class="number">1</span>]</span><br><span class="line">    port = <span class="keyword">int</span>(sys.argv[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">s</span> = <span class="keyword">socket</span>.<span class="keyword">socket</span>(<span class="keyword">socket</span>.AF_INET, <span class="keyword">socket</span>.SOCK_STREAM)</span><br><span class="line">    <span class="keyword">s</span>.settimeout(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        <span class="keyword">s</span>.<span class="keyword">connect</span>((host, port))</span><br><span class="line">    except:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'unable to connect'</span></span><br><span class="line">        sys.<span class="keyword">exit</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'connected to remote host. start sending messages'</span></span><br><span class="line">    prompt()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        rlist = [sys.stdin, <span class="keyword">s</span>]</span><br><span class="line"></span><br><span class="line">        read_list, write_list, error_list = <span class="keyword">select</span>.<span class="keyword">select</span>(rlist, [], [])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> sock in read_list:</span><br><span class="line">            <span class="keyword">if</span> sock == <span class="keyword">s</span>:</span><br><span class="line">                data = sock.<span class="keyword">recv</span>(<span class="number">4096</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'\nDisconnected from chat server'</span></span><br><span class="line">                    sys.<span class="keyword">exit</span>()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    sys.stdout.<span class="keyword">write</span>(data)</span><br><span class="line">                    prompt()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                msg = sys.stdin.<span class="keyword">readline</span>()</span><br><span class="line">                <span class="keyword">s</span>.<span class="keyword">send</span>(msg)</span><br><span class="line">                prompt()</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="参考文献">参考文献</h1><p>1 <a href="http://www.cnblogs.com/hazir/p/python_socket_programming.html" target="_blank" rel="external">Python Socket 网络编程</a><br>2 <a href="http://www.cnblogs.com/hazir/p/python_chat_room.html" target="_blank" rel="external">Python Socket 编程——聊天室示例程序</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在学习socket编程,遇到一个问题:<br>我先bind一个端口后,如果通过ctr+c关闭进程.接下来执行程序的时候,就会提示<code>socket.error: Address already in use</code>.<br>]]>
    
    </summary>
    
      <category term="Linux" scheme="http://jackroyal.github.io/tags/Linux/"/>
    
      <category term="python" scheme="http://jackroyal.github.io/tags/python/"/>
    
      <category term="socket" scheme="http://jackroyal.github.io/tags/socket/"/>
    
      <category term="python学习笔记" scheme="http://jackroyal.github.io/categories/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
