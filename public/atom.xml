<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[搁浅St的blog]]></title>
  <subtitle><![CDATA[我最喜欢笨笨]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://bblove.me/"/>
  <updated>2016-03-06T10:23:45.542Z</updated>
  <id>http://bblove.me/</id>
  
  <author>
    <name><![CDATA[jackroyal]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[解决 Github Pages 禁止百度爬虫的方法2--从gitcafe迁移到coding.net]]></title>
    <link href="http://bblove.me/2016/03/06/migrate-pages-from-gitcafe-to-coding/"/>
    <id>http://bblove.me/2016/03/06/migrate-pages-from-gitcafe-to-coding/</id>
    <published>2016-03-06T07:50:46.000Z</published>
    <updated>2016-03-06T10:23:45.542Z</updated>
    <content type="html"><![CDATA[<p>上一篇文章<a href="http://jackroyal.github.io/2015/11/25/how-to-solve-the-problem-that-github-blocks-the-baidu-spider/" target="_blank" rel="external">解决 Github Pages 禁止百度爬虫的方法</a>,提到了解决百度爬虫被github禁用掉的方法.<br><code>把博客同时发布到github pages和gitcafe pages.然后使用dnspod设置域名解析,国内线路解析到gitcafe,国外线路解析到github.</code><br>然后今天去上gitcafe,偶然看到这个<br><img src="http://ww4.sinaimg.cn/large/692869a3gw1f1n79skvt3j20zl0m7k07.jpg" alt="GitCafe 项目迁移至 Coding.net 公告"><br>额(⊙o⊙)…,holly shit.不过没办法,人家都被收购了,我们只能改变策略了.<br>话说,两家都是做代码托管的,这也是顺(bao)应(tuan)潮(qu)流(nuan)咩?<br><a id="more"></a><br>思路跟原来差不多,就是我们把其中的gitcafe内容替换成coding.net就好,以下简称coding.<br><code>把博客同时发布到github pages和coding pages.然后使用dnspod设置域名解析,国内线路解析到coding.net,国外线路解析到github.</code></p>
<ol>
<li>注册coding账号</li>
<li>新建一个项目,名字与你的用户名相同,比如我的名字是<code>Jackroyal</code>,新建一个项目名为<code>Jackroyal</code></li>
<li>添加ssh公钥</li>
<li>新建coding-pages分支</li>
<li>开启pages服务</li>
<li>修改hexo配置</li>
<li>修改dns设置<h1 id="1_注册coding账号">1 注册coding账号</h1>这个很简单不必说,注册需要填写用户名,邮箱和密码,比如我的用户名就是<code>Jackroyal</code><h1 id="2_新建和用户名同名的项目">2 新建和用户名同名的项目</h1>在注册好账号以后,我们就去新建一个项目,方法和gitcafe不同和gihub类似,就是和用户名同名,一模一样的就行.我的项目名是<code>Jackroyal</code>,项目属性<code>公开</code><br><img src="http://ww4.sinaimg.cn/large/692869a3gw1f1n8d42xljj20qb0hbmzc.jpg" alt="新建同名项目"><h1 id="3_添加ssh公钥">3 添加<code>ssh</code>公钥</h1>首先,我们提交代码库有两种方式,一种是https,一种是ssh,两种方式都可以,但是因为我们使用hexo来发布博客的时候是没有地方输入密码的,所以我们才考虑使用<code>ssh</code>方式,不过也不一定,我们还是可以使用https方式来提交hexo的.<h2 id="3-1_使用ssh方式发布博客">3.1 使用ssh方式发布博客</h2>我们只需要找到本地的ssh公钥,然后上传到coding上去就行,点击<a href="https://coding.net/user/account/setting/keys" target="_blank" rel="external">这里</a>设置.查看本地ssh公钥的方法和上篇博客一样.<br><img src="http://ww2.sinaimg.cn/large/692869a3gw1eye75djqo9j20gj09475k.jpg" alt="使用git客户端查看ssh公钥私钥"><br><img src="http://ww3.sinaimg.cn/large/692869a3gw1eye7c2xpavj20if06dt9w.jpg" alt="查看公钥"><br>复制那一段,然后在coding上添加上去就行<h2 id="3-2_使用https方式发布">3.2 使用https方式发布</h2>如果非要使用https方式,也是可以的,核心思路就是在本地做一次<code>push</code>操作就行.</li>
<li>我们先<code>git clone</code>命令,我的项目就是<code>git clone https://git.coding.net/Jackroyal/Jackroyal.git</code>得到coding上刚才新建的项目.</li>
<li>克隆完成后,接着我们进到项目目录,我们新建一个文件或者修改一个文件</li>
<li><code>git add .</code>,把修改提交到暂存区</li>
<li><code>git commit -m &quot;测试提交&quot;</code>,将修改提交到本地仓库</li>
<li><code>git push</code>,将修改提交到远程仓库</li>
<li>接下来,会让你输入用户名和密码,你输入</li>
<li>然后项目就会提交,因为这个状态会保留下来,你下次在提交就可以不用输入用户名和密码了,这样为我们使用hexo发布代码提供条件<br>ps:这种方式,可能过一段时间又不行了,报错<code>could not read Username for &#39;https://git.coding.net&#39;: Invalid argument</code>,你再做一次上面的操作就行<h1 id="4_新建coding-pages分支">4 新建coding-pages分支</h1>当我们可以提交代码的时候,我们先来新建分支,和gitcafe差不多,它需要一个特别的分支名字,而不是像github默认的master分支,名字是<code>coding-pages</code>,如下图所示<br><img src="http://ww4.sinaimg.cn/large/692869a3gw1f1n965hcj0j210r0g3jvk.jpg" alt="新建coding分支"><br>我们把它设为默认分支<h1 id="5_开启pages服务">5 开启pages服务</h1>接下来我们需要手动去开启pages服务.在项目主页的<code>pages</code>选项卡,点击开启服务,同时我们,添加域名绑定<br><img src="http://ww3.sinaimg.cn/large/692869a3gw1f1n98oezpej20sv0kxtdb.jpg" alt="开启pages服务"><br>域名绑定我们还要去修改dns解析,我们先用它分配给我们的域名去访问<a href="http://jackroyal.coding.me/" target="_blank" rel="external">http://jackroyal.coding.me/</a>,看看能不能正常访问<h1 id="5_修改hexo配置">5 修改hexo配置</h1>前面的准备工作做得差不多,我们修改博客的配置信息,打开博客根目录的<code>_config.yml</code>文件,格式和之前github的差不多:<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">- <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: <span class="string">'https://github.com/Jackroyal/Jackroyal.github.io.git'</span></span><br><span class="line">  <span class="attribute">branch</span>: master</span><br><span class="line">- <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: <span class="string">'https://git.coding.net/Jackroyal/Jackroyal.git'</span></span><br><span class="line">  <span class="attribute">branch</span>: coding-pages</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>尤其注意在配置的时候注意留空格,这种键值对,比如<code>type: git</code>,其中的冒号后面到git,有个空格的,不然配置文件就会读取错误.<br>还要注意branch名称,分支必须是<code>coding-pages</code><br><strong>PS:如上面所说,我选择的是https方式发布,所以我的repo是https的,如果你选择ssh方式去认证,那么你的地址应该是类似这样的<code>git@git.coding.net:Jackroyal/Jackroyal.git</code>
</strong></p>
<p><img src="http://ww4.sinaimg.cn/large/692869a3gw1f1n9byao2wj20o00gqn0e.jpg" alt="添加coding的repo信息"></p>
<h1 id="7_修改dns设置">7 修改dns设置</h1><p>就像第5步页面提示的,我们要绑定自己的域名,需要去修改dns解析记录,只需要添加一条CNAME指向你的<code>jackroyal.coding.me</code>即可.<br>注意后面加个点,也就是正确的填法是<code>jackroyal.coding.me.</code>,如下图所示.修改完成后大概等几分钟才能生效<br><img src="http://ww4.sinaimg.cn/large/692869a3gw1f1n9m6me2ej20nv09c0us.jpg" alt="修改dns设置"></p>
<h1 id="8_从gitcafe迁移">8 从gitcafe迁移</h1><p>如果我们选择从gitcafe迁移的话,他会把我们原来的博客迁移过来.为了适应coding,你只需要从上面第二步开始就好,尤其注意的是,<code>新建coding-pages分支</code>,<code>新建coding-pages分支</code>,<code>新建coding-pages分支</code>,重要的事情说三遍,因为你迁移过来的分支名称是<code>gitcafe-pages</code>.<br>也就是核心问题,必须有个和用户名同名的项目,项目必须有个分支是<code>coding-pages</code></p>
<p>其他没提的事情和上一篇是一样的.<br>最后执行<code>hexo d -g</code>,打完收工</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>上一篇文章<a href="http://jackroyal.github.io/2015/11/25/how-to-solve-the-problem-that-github-blocks-the-baidu-spider/">解决 Github Pages 禁止百度爬虫的方法</a>,提到了解决百度爬虫被github禁用掉的方法.<br><code>把博客同时发布到github pages和gitcafe pages.然后使用dnspod设置域名解析,国内线路解析到gitcafe,国外线路解析到github.</code><br>然后今天去上gitcafe,偶然看到这个<br><img src="http://ww4.sinaimg.cn/large/692869a3gw1f1n79skvt3j20zl0m7k07.jpg" alt="GitCafe 项目迁移至 Coding.net 公告"><br>额(⊙o⊙)…,holly shit.不过没办法,人家都被收购了,我们只能改变策略了.<br>话说,两家都是做代码托管的,这也是顺(bao)应(tuan)潮(qu)流(nuan)咩?<br>]]>
    
    </summary>
    
      <category term="baidu" scheme="http://bblove.me/tags/baidu/"/>
    
      <category term="git" scheme="http://bblove.me/tags/git/"/>
    
      <category term="github" scheme="http://bblove.me/tags/github/"/>
    
      <category term="hexo" scheme="http://bblove.me/tags/hexo/"/>
    
      <category term="hexo" scheme="http://bblove.me/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[php学习笔记(3.5)--关于引用赋值和一般赋值]]></title>
    <link href="http://bblove.me/2016/03/05/php-learn-note-3-5/"/>
    <id>http://bblove.me/2016/03/05/php-learn-note-3-5/</id>
    <published>2016-03-05T05:52:28.000Z</published>
    <updated>2016-03-05T09:33:12.438Z</updated>
    <content type="html"><![CDATA[<p>上一篇提到了,对象赋值的时候有两种赋值方式,一种是直接<code>$a=$b</code>,第二种是引用赋值<code>$a=&amp;$b</code>.<br>不仅对象赋值的时候会有这两种情况,普通变量赋值也会有这两种情况,为了简单说明,我们先使用简单的普通变量来做说明.<br><a id="more"></a></p>
<h1 id="1_普通变量的结构">1 普通变量的结构</h1><p>在PHP中,所有的变量都是用一个结构zval来保存的,zval大概的结构如下所示:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> _zval_struct &#123;</span><br><span class="line">        <span class="comment">/* Variable information */</span></span><br><span class="line">        zvalue_value value;             <span class="comment">/* value */</span></span><br><span class="line">        zend_uint refcount;</span><br><span class="line">        zend_uchar type;        <span class="comment">/* active type */</span></span><br><span class="line">        zend_uchar is_ref;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>我们这里主要用到的是两个变量,一个是refcount,即是引用计数,一个是is_ref,用来标记是否是引用.</p>
<h1 id="2_php环境的设置">2 php环境的设置</h1><p>我们在实验过程中,需要去查看refcount和is_ref的变化,所以需要使用php的<br><code>xdebug_debug_zval</code>函数,你的环境可能默认没有开启这个配置,你需要修改<code>php.ini</code>文件开启这个配置.<br><img src="http://ww4.sinaimg.cn/large/692869a3gw1f1m1ximwj1j20wn098dj6.jpg" alt="修改php.ini文件"></p>
<h1 id="3_refcount和is_ref">3 refcount和is_ref</h1><p>我们通常的赋值方式:一般赋值和引用赋值.</p>
<h1 id="3-1_一般赋值">3.1 一般赋值</h1><p>当使用一般给新变量赋值的时候,php的内存策略,并不是重新申请一个新的空间,而是把原来的那个recount+1.比如下面的例子:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="string">'aaa'</span>;<span class="comment">//此时$a的recount=1,ref=0</span></span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$a</span>;<span class="comment">//赋值过后,$a的recount=2,ref=0,$b因为指向和$a一样,所以结果和$a一样</span></span><br><span class="line">xdebug_debug_zval(<span class="string">'a'</span>,<span class="string">'b'</span>);</span><br></pre></td></tr></table></figure></p>
<p>输出结果如下<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(refcount=<span class="number">2</span>, is_ref=<span class="number">0</span>),<span class="keyword">string</span> <span class="string">'aaa'</span> (<span class="built_in">length</span>=<span class="number">3</span>)</span><br></pre></td></tr></table></figure></p>
<h1 id="3-2_引用赋值">3.2 引用赋值</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="string">'aaa'</span>;<span class="comment">//此时$a的recount=1,ref=0</span></span><br><span class="line"><span class="variable">$c</span>=&amp;<span class="variable">$a</span>;<span class="comment">//赋值过后,$a的recount=2,ref=0,$b因为指向和$a一样,所以结果和$a一样</span></span><br><span class="line">xdebug_debug_zval(<span class="string">'a'</span>,<span class="string">'b'</span>);<span class="comment">//</span></span><br></pre></td></tr></table></figure>
<p>输出结果如下<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(refcount=<span class="number">2</span>, is_ref=<span class="number">1</span>),<span class="keyword">string</span> <span class="string">'aaa'</span> (<span class="built_in">length</span>=<span class="number">3</span>)</span><br></pre></td></tr></table></figure></p>
<p>由上面可知,也就是每次进行赋值的时候,refcount都会+1,如果是引用赋值,is_ref就会被置为一.</p>
<h1 id="3-3_两种赋值方式混合">3.3 两种赋值方式混合</h1><p>那如果我们混合上面的两种赋值方式呢?比如下面的代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="string">'aaa'</span>;</span><br><span class="line"><span class="variable">$b</span>=&amp;<span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$a</span>;</span><br><span class="line">xdebug_debug_zval(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>);</span><br></pre></td></tr></table></figure></p>
<p>你猜输出结果是什么?<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">a</span>: (refcount=<span class="number">2</span>, is_ref=<span class="number">1</span>),<span class="keyword">string</span> <span class="string">'aaa'</span> (<span class="built_in">length</span>=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">b: (refcount=<span class="number">2</span>, is_ref=<span class="number">1</span>),<span class="keyword">string</span> <span class="string">'aaa'</span> (<span class="built_in">length</span>=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">c: (refcount=<span class="number">1</span>, is_ref=<span class="number">0</span>),<span class="keyword">string</span> <span class="string">'aaa'</span> (<span class="built_in">length</span>=<span class="number">3</span>)</span><br></pre></td></tr></table></figure></p>
<p>为什么会这样呢?<br>我们一行一行的分析.</p>
<ol>
<li>首先第一行代码执行完以后,$a的结果应该是<code>(refcount=1, is_ref=0),string &#39;aaa&#39; (length=3)</code></li>
<li>第二行代码执行引用赋值,因为refcount=1,所以$a的refcount直接+1,is_ref变成1,输出即是`(refcount=2, is_ref=1),string ‘aaa’ </li>
<li>第三行代码执行一般赋值,那我们是不是再把refcount+1呢?不是的,因为此时的refcount&gt;1并且is_ref不为0,所以不能执行那个操作,而是直接把$a复制了另外一份,而不是修改$a的计数器.<br>所以,最后的输出结果,$c的refcount是1,因为它完全另外申请了一个副本</li>
</ol>
<p>我们把上面的代码换个位置<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="string">'aaa'</span>;</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$b</span>=&amp;<span class="variable">$a</span>;</span><br><span class="line">xdebug_debug_zval(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>);</span><br></pre></td></tr></table></figure></p>
<p>你再猜猜输出结果是什么?<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">a</span>: (refcount=<span class="number">2</span>, is_ref=<span class="number">1</span>),<span class="keyword">string</span> <span class="string">'aaa'</span> (<span class="built_in">length</span>=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">b: (refcount=<span class="number">2</span>, is_ref=<span class="number">1</span>),<span class="keyword">string</span> <span class="string">'aaa'</span> (<span class="built_in">length</span>=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">c: (refcount=<span class="number">1</span>, is_ref=<span class="number">0</span>),<span class="keyword">string</span> <span class="string">'aaa'</span> (<span class="built_in">length</span>=<span class="number">3</span>)</span><br></pre></td></tr></table></figure></p>
<p>咦?结果是一样的哈?<br>对的,结果是一样的,不过执行的过程却是不同的,我们再来一行一行的分析下</p>
<ol>
<li>首先第一行代码执行完以后,$a的结果应该是<code>(refcount=1, is_ref=0),string &#39;aaa&#39; (length=3)</code></li>
<li>第二行代码执行一般赋值,同理,因为refcount=1,所以$a的refcount直接+1,is_ref不变,输出即是`(refcount=2, is_ref=0),string ‘aaa’ </li>
<li>第三行代码执行引用赋值,跟上面一样,因为refcount=2了,所以不能直接进行计数器+1,我们先检查is_ref,发现是0.这时,php首先做一个分离操作,也就是把上面一般赋值的那个值,给分离出去,分离后,$a的refcount减去1,也就是$c独立了,那么此时$a和$c的输出结果应该是<code>(refcount=1, is_ref=0),string &#39;aaa&#39; (length=3)</code>.在分离操作完成后,再做引用赋值的问题,这时候就简单了,因为$a的refcount是1,所以我们直接refcount+1,is_ref=1就搞定</li>
<li>最后输出结果就是上面的结果了</li>
</ol>
<p><strong>php把上面的过程叫做写时复制(copy on write),也就是说,一般赋值$c=$a时候,php并不是立即去申请一个新的变量空间.,而是等到执行引用赋值或者其他写操作的时候(比如这个时候修改$c的值),php才会去开辟一个新的空间给赋值后的变量,也就是分离操作.</strong></p>
<h1 id="4_推广到对象">4 推广到对象</h1><p>上面普通变量的赋值,应该说清楚了哈.<br>其实对象的赋值和普通变量赋值是同一个道理.下面直接贴代码,不在赘述<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$aa</span>=<span class="string">'我是类属性'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'刚执行完$a定义&lt;br&gt;'</span>;</span><br><span class="line">xdebug_debug_zval(<span class="string">'a'</span>);</span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'刚执行完$b赋值&lt;br&gt;'</span>;</span><br><span class="line">xdebug_debug_zval(<span class="string">'b'</span>);</span><br><span class="line"><span class="variable">$c</span>=&amp;<span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'刚执行完$c赋值&lt;br&gt;'</span>;</span><br><span class="line">xdebug_debug_zval(<span class="string">'c'</span>);</span><br><span class="line"><span class="variable">$d</span>=<span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'刚执行完$d赋值&lt;br&gt;'</span>;</span><br><span class="line">xdebug_debug_zval(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>);</span><br></pre></td></tr></table></figure></p>
<p>输出结果如下<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">刚执行完<span class="variable">$a</span>定义</span><br><span class="line"><span class="tag">a</span>: </span><br><span class="line">(refcount=<span class="number">1</span>, is_ref=<span class="number">0</span>),</span><br><span class="line"><span class="function"><span class="title">object</span><span class="params">(A)</span></span>[<span class="number">1</span>]</span><br><span class="line">  public <span class="string">'aa'</span> =&gt; (refcount=<span class="number">1</span>, is_ref=<span class="number">0</span>),string <span class="string">'我是类属性'</span> (length=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">刚执行完<span class="variable">$b</span>赋值</span><br><span class="line"><span class="tag">b</span>: </span><br><span class="line">(refcount=<span class="number">2</span>, is_ref=<span class="number">0</span>),</span><br><span class="line"><span class="function"><span class="title">object</span><span class="params">(A)</span></span>[<span class="number">1</span>]</span><br><span class="line">  public <span class="string">'aa'</span> =&gt; (refcount=<span class="number">1</span>, is_ref=<span class="number">0</span>),string <span class="string">'我是类属性'</span> (length=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">刚执行完<span class="variable">$c</span>赋值</span><br><span class="line">c: </span><br><span class="line">(refcount=<span class="number">2</span>, is_ref=<span class="number">1</span>),</span><br><span class="line"><span class="function"><span class="title">object</span><span class="params">(A)</span></span>[<span class="number">1</span>]</span><br><span class="line">  public <span class="string">'aa'</span> =&gt; (refcount=<span class="number">1</span>, is_ref=<span class="number">0</span>),string <span class="string">'我是类属性'</span> (length=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">刚执行完<span class="variable">$d</span>赋值</span><br><span class="line"><span class="tag">a</span>: </span><br><span class="line">(refcount=<span class="number">2</span>, is_ref=<span class="number">1</span>),</span><br><span class="line"><span class="function"><span class="title">object</span><span class="params">(A)</span></span>[<span class="number">1</span>]</span><br><span class="line">  public <span class="string">'aa'</span> =&gt; (refcount=<span class="number">1</span>, is_ref=<span class="number">0</span>),string <span class="string">'我是类属性'</span> (length=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="tag">b</span>: </span><br><span class="line">(refcount=<span class="number">2</span>, is_ref=<span class="number">0</span>),</span><br><span class="line"><span class="function"><span class="title">object</span><span class="params">(A)</span></span>[<span class="number">1</span>]</span><br><span class="line">  public <span class="string">'aa'</span> =&gt; (refcount=<span class="number">1</span>, is_ref=<span class="number">0</span>),string <span class="string">'我是类属性'</span> (length=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">c: </span><br><span class="line">(refcount=<span class="number">2</span>, is_ref=<span class="number">1</span>),</span><br><span class="line"><span class="function"><span class="title">object</span><span class="params">(A)</span></span>[<span class="number">1</span>]</span><br><span class="line">  public <span class="string">'aa'</span> =&gt; (refcount=<span class="number">1</span>, is_ref=<span class="number">0</span>),string <span class="string">'我是类属性'</span> (length=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">d: </span><br><span class="line">(refcount=<span class="number">2</span>, is_ref=<span class="number">0</span>),</span><br><span class="line"><span class="function"><span class="title">object</span><span class="params">(A)</span></span>[<span class="number">1</span>]</span><br><span class="line">  public <span class="string">'aa'</span> =&gt; (refcount=<span class="number">1</span>, is_ref=<span class="number">0</span>),string <span class="string">'我是类属性'</span> (length=<span class="number">15</span>)</span><br></pre></td></tr></table></figure></p>
<h1 id="5_关于debug_zval_dump函数">5 关于debug_zval_dump函数</h1><p>php中还有个关于计数的函数叫做<code>debug_zval_dump</code>,它只返回refcount,不过这个函数好奇葩,输出的数据有时候跟想的都不一样.<br>比如:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">'aaa'</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$a</span>;</span><br><span class="line">debug_zval_dump(<span class="variable">$a</span>);<span class="comment">//输出3</span></span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>原因是:执行<code>debug_zval_dump</code>相当于执行了一次一般赋值操作,所以,refcount会再加1<br>再比如<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="string">'aaa'</span>;</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$c</span>=<span class="string">'bbb'</span>;</span><br><span class="line">debug_zval_dump(<span class="variable">$a</span>,<span class="variable">$c</span>);<span class="comment">//输出refcount=2,refcount=2</span></span><br><span class="line">xdebug_debug_zval(<span class="string">'a'</span>,<span class="string">'c'</span>);<span class="comment">//两个值完全相同,都是refcount=1, is_ref=0),string 'bbb' (length=3)</span></span><br></pre></td></tr></table></figure></p>
<p>额,这是不是很奇葩?再来一波<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="string">'aaa'</span>;</span><br><span class="line"><span class="variable">$b</span>=&amp;<span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$a</span>;</span><br><span class="line">debug_zval_dump(<span class="variable">$a</span>,<span class="variable">$b</span>,<span class="variable">$c</span>);<span class="comment">//refcount分别是1,1,2</span></span><br><span class="line">xdebug_debug_zval(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>);<span class="comment">//refcount和is_ref分别是(2,1),(2,1),(1,0)</span></span><br></pre></td></tr></table></figure></p>
<p>这是什么鬼?我表示都看不懂<br>稍微总结了下,<code>debug_zval_dump</code>这个函数,如果只是一般赋值,那么还比较正常,赋值一次就是refcount+1操作,最后调用<code>debug_zval_dump</code>的再+1就好了<br>但是一旦涉及到引用赋值,这货就全变成1了,(引用赋值不+1就算了,说好的调用<code>debug_zval_dump</code>的+1呢?被狗吃了?),完全搞不懂是在搞啥,还是<code>xdebug_debug_zval</code>函数好.<br>打完收工<br>ps:其实我在知乎提了个问题,不过没人回答还<a href="http://www.zhihu.com/question/41044486" target="_blank" rel="external">debug_zval_dump的计数问题?</a></p>
<h1 id="参考文献">参考文献</h1><p>1 <a href="http://www.laruence.com/2008/09/19/520.html" target="_blank" rel="external">鸟哥的博客–深入理解PHP原理之变量分离/引用</a><br>2 <a href="http://weizhifeng.net/write-php-extension-part2-2.html" target="_blank" rel="external">PHP扩展编写第二步：参数，数组，以及ZVAL「续」</a><br>3 <a href="http://php.net/manual/zh/function.debug-zval-dump.php" target="_blank" rel="external">php官方文档–debug_zval_dump函数</a><br>4 <a href="https://derickrethans.nl/talks/phparch-php-variables-article.pdf" target="_blank" rel="external">英文文档–php变量</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>上一篇提到了,对象赋值的时候有两种赋值方式,一种是直接<code>$a=$b</code>,第二种是引用赋值<code>$a=&amp;$b</code>.<br>不仅对象赋值的时候会有这两种情况,普通变量赋值也会有这两种情况,为了简单说明,我们先使用简单的普通变量来做说明.<br>]]>
    
    </summary>
    
      <category term="php" scheme="http://bblove.me/tags/php/"/>
    
      <category term="php学习笔记" scheme="http://bblove.me/categories/php%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[php学习笔记(3)]]></title>
    <link href="http://bblove.me/2016/03/04/php-learn-note-3/"/>
    <id>http://bblove.me/2016/03/04/php-learn-note-3/</id>
    <published>2016-03-04T02:06:40.000Z</published>
    <updated>2016-03-05T09:35:45.765Z</updated>
    <content type="html"><![CDATA[<p>今天开始学习类和面向对象了.<br><a id="more"></a></p>
<h1 id="1_对象实例化">1 对象实例化</h1><p>在实例化对象的时候,必须使用<code>new</code>关键字.如果该类属于一个名字空间,则必须使用其完整名称.<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="variable">$instance</span> = <span class="keyword">new</span> SimpleClass();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以这样做：</span></span><br><span class="line"><span class="variable">$className</span> = <span class="string">'Foo'</span>;</span><br><span class="line"><span class="variable">$instance</span> = <span class="keyword">new</span> <span class="variable">$className</span>(); <span class="comment">// Foo()</span></span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="1-1_对象赋值">1.1 对象赋值</h2><p>我们创建一个对象的实例后,后面进行赋值的时候有两种赋值.<br>第一种是直接<code>$a=$b</code>,第二种是引用赋值<code>$a=&amp;$b</code>.<br>这两个有什么区别呢?问题可深了,所以我决定单独写一篇文章来说这个问题.<br><a href="http://jackroyal.github.io/2015/12/10/php-learn-note-1/" target="_blank" rel="external">php学习笔记(3.5)–关于引用赋值和一般赋值</a></p>
<h2 id="1-2_extends关键字">1.2 extends关键字</h2><p>一个类可以在声明中用 extends 关键字继承另一个类的方法和属性.<em>PHP不支持多重继承,一个类只能继承一个基类.</em><br>被继承的方法和属性可以通过用同样的名字重新声明被覆盖.但是如果父类定义方法时使用了 final,则该方法不可被覆盖.可以通过 parent:: 来访问被覆盖的方法或属性.<br>当覆盖方法时,参数必须保持一致否则 PHP 将发出 E_STRICT 级别的错误信息.但构造函数例外,构造函数可在被覆盖时使用不同的参数.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天开始学习类和面向对象了.<br>]]>
    
    </summary>
    
      <category term="php" scheme="http://bblove.me/tags/php/"/>
    
      <category term="php学习笔记" scheme="http://bblove.me/categories/php%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[php学习笔记(2)]]></title>
    <link href="http://bblove.me/2016/02/25/php-learn-note-2/"/>
    <id>http://bblove.me/2016/02/25/php-learn-note-2/</id>
    <published>2016-02-25T06:36:20.000Z</published>
    <updated>2016-03-05T09:33:43.365Z</updated>
    <content type="html"><![CDATA[<p>今天看的是最基础的变量.<br><a id="more"></a></p>
<h1 id="1_php变量">1 php变量</h1><p>和其他语言类似,php中一个有效的变量名由字母或者下划线开头,后面跟上任意数量的字母,数字,或者下划线.按照正常的正则表达式,它将被表述为：’[a-zA-Z<em>\x7f-\xff][a-zA-Z0-9</em>\x7f-\xff]*’.<br>赋值的时候,变量默认总是<code>传值赋值</code>.<br>在php中也可以用<code>引用赋值</code>,也就是改动新的变量也会因想到原始变量,反之亦然.<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="variable">$foo</span> = <span class="string">'Bob'</span>;              <span class="comment">// 将 'Bob' 赋给 $foo</span></span><br><span class="line"><span class="variable">$bar</span> = &amp;<span class="variable">$foo</span>;              <span class="comment">// 通过 $bar 引用 $foo</span></span><br><span class="line"><span class="variable">$bar</span> = <span class="string">"My name is $bar"</span>;  <span class="comment">// 修改 $bar 变量</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$bar</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$foo</span>;                 <span class="comment">// $foo 的值也被修改</span></span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>ps:只有有名字的变量才可以使用引用赋值,也就是无法对一个表达式使用引用赋值.<br>使用<code>isset()</code>来检测变量是否被初始化.</p>
<h1 id="2_预定义变量">2 预定义变量</h1><p>php会自动用下划线来替换所有的传入变量中的<code>.</code>号,例子如下所示<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line">example.com/page.php?chuck.norris=nevercries</span><br><span class="line"></span><br><span class="line">you can not reference them by the name used in the URI:</span><br><span class="line"><span class="comment">//INCORRECT</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">'chuck.norris'</span>];</span><br><span class="line"></span><br><span class="line">instead you must <span class="keyword">use</span>:</span><br><span class="line">//<span class="title">CORRECT</span></span><br><span class="line"><span class="title">echo</span> $<span class="title">_GET</span>['<span class="title">chuck_norris</span>'];</span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="3_变量范围">3 变量范围</h1><p>变量的范围即它定义的上下文背景（也就是它的生效范围）.大部分的 PHP 变量只有一个单独的范围.这个单独的范围跨度同样包含了 include 和 require 引入的文件.例如：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">'b.inc'</span>;</span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这里变量 $a 将会在包含文件 b.inc 中生效.但是,在用户自定义函数中,一个局部函数范围将被引入.任何用于函数内部的变量按缺省情况将被限制在局部函数范围内.例如：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">1</span>; <span class="comment">/* global scope */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$a</span>; <span class="comment">/* reference to local scope variable */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test();</span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这个脚本不会有任何输出,因为 <code>echo</code>语句引用了一个局部版本的变量$a,而且在这个范围内,它并没有被赋值.你可能注意到 PHP 的全局变量和 C 语言有一点点不同,在 C 语言中,全局变量在函数中自动生效,除非被局部变量覆盖.这可能引起一些问题,有些人可能不小心就改变了一个全局变量.PHP 中全局变量在函数中使用时必须声明为 <code>global</code>.<br>PS:此处需要注意的是,php不存在类似C和java的块级作用域.比如你在循环中定义的一个变量,在循环外还是可以访问的<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span>&lt;<span class="number">3</span>; <span class="variable">$j</span>++)</span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">if</span>(<span class="variable">$j</span> == <span class="number">1</span>)</span><br><span class="line">        <span class="variable">$a</span> = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;<span class="comment">//此处将会输出4</span></span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="3-2_静态变量">3.2 静态变量</h2><p>php还支持静态变量,静态变量<code>仅在局部函数域中</code>存在,但当程序执行离开此作用域时,其值并不丢失.<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="variable">$a</span>++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="4_来自PHP之外的变量">4 来自PHP之外的变量</h1><p>此处主要指的是通过表单提交的变量,从cookie读取的变量</p>
<h2 id="4-1_图片提交表单">4.1 图片提交表单</h2><p>除了常用的通过表单按钮提交表单,我们还可以使用图片的形式提交表单,代码如下:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"image"</span> src=<span class="string">"image.gif"</span> name=<span class="string">"sub"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>这样在后端接收的时候,还会受到一个叫做<code>sub_x</code>和<code>sub_y</code>的变量,它包含了用户点击图片的坐标.此处如果你不定义<code>name</code>为<code>sub</code>,那么后端接收变量就是<code>x</code>和<code>y</code>.</p>
<h1 id="4-2_PHP自动转换变量名">4.2 PHP自动转换变量名</h1><p>当我们通过表单提交变量的时候,如果表单项的名称包含空格,点号,左中括号,php就会自动把他们转换成下划线.<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> name= <span class="string">"userName.a"</span>/&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> name= <span class="string">"passWor[d"</span>/&gt;</span><br><span class="line"><span class="comment">//输出[userName_a] =&gt; [passWor_d] =&gt; </span></span><br><span class="line"><span class="comment">//都被转化成下划线了</span></span><br></pre></td></tr></table></figure></p>
<p>chr(32) ( ) (space)<br>chr(46) (.) (dot)<br>chr(91) ([) (open square bracket)</p>
<p>ps:ascll码值在128-159的字符是合法字符,所以并不会被转义成下划线</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天看的是最基础的变量.<br>]]>
    
    </summary>
    
      <category term="php" scheme="http://bblove.me/tags/php/"/>
    
      <category term="php学习笔记" scheme="http://bblove.me/categories/php%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[digitalocean下ubuntu切换内核,使用锐速]]></title>
    <link href="http://bblove.me/2016/01/28/digitalocean-switch-kernel/"/>
    <id>http://bblove.me/2016/01/28/digitalocean-switch-kernel/</id>
    <published>2016-01-28T08:59:10.000Z</published>
    <updated>2016-01-28T09:25:24.522Z</updated>
    <content type="html"><![CDATA[<p>最近在网上看到,锐速可以用来给服务器加速,然后有人用这个软件来给翻墙服务器加速,据说效果还不错,今天就折腾一下.<br><a id="more"></a><br>我去锐速官网注册了账号,可惜,在官方支持的linux版本中并没有我这个内核版本.我用的是<code>3.13.0-37-generic</code>的<code>32</code>位版本,锐速官网并没有支持.<code>32</code>位版本支持的相对较少,支持的最新版本是<code>3.13.0-29-generic</code>.<br><img src="http://ww3.sinaimg.cn/large/692869a3gw1f0fbk1mp65j213c0ozdru.jpg" alt="锐速官网linux支持列表"><br>所以没办法,只能把我的<code>ubuntu</code>降级回去,还是小折腾了一下.下面就来说下降级</p>
<h1 id="实验环境：">实验环境：</h1><p>digitalocean的云服务器<br>Linux OS:   Ubuntu<br>Version:    14.04<br>Kernel:     3.13.0-37-generic<br>Bits:       32-bit</p>
<h1 id="实验步骤">实验步骤</h1><p>ssh登录服务器,然后安装新内核,blablabla…<br>你要是这样想就跟我一样,想错了.<br>因为我们使用的是<code>digitalocean</code>的云服务器,不是普通的个人单机,所以那套方法不顶用,我照着那个方法,安装了新的内核,然后更新<code>grub</code>,怎么弄都没用,最后才找到答案.<br><strong>争取的做法:</strong><br>1 登录你的<code>digitalocean</code>控制台<br>2 点击<code>setting-&gt;kernel</code>,效果如下图<br><img src="http://ww2.sinaimg.cn/large/692869a3gw1f0fbvo209sj20vd0kkdkf.jpg" alt="控制台的kernel页面"><br>3 点击下拉列表,找到你要的<code>kernel</code>,比如我要的是<code>Ubuntu 14.04 x32 vmlinuz-3.13.0-29-generic</code>,然后点击<code>change</code>,等一会儿,页面会自动刷新,内核更新就成功了<br>4 重要的一步,我就是这步有点问题,又浪费了点时间.更新完内核,我们发现自己的服务器查看内核的时候并没有变化,我们首先想到的是重启服务器.我们直接在终端<code>sudo reboot</code>.但是启动以后,你会发现还是没有变化,什么鬼?<br>真正的答案是,我们现在终端关机,也即是执行<code>sudo poweroff</code>,先关机.然后我们在控制台的power选项卡中,有个<code>power on</code>的按钮,我们启动服务器,就发现内核已经更新了.<br>ok 打完收工</p>
<h1 id="参考文献">参考文献</h1><p>1 <a href="https://www.digitalocean.com/community/tutorials/how-to-upgrade-ubuntu-12-04-lts-to-ubuntu-14-04-lts" target="_blank" rel="external">How to Upgrade Ubuntu 12.04 LTS to Ubuntu 14.04 LTS</a><br>2 <a href="https://www.digitalocean.com/community/tutorials/how-to-update-a-digitalocean-server-s-kernel" target="_blank" rel="external">How To Update a DigitalOcean Server’s Kernel</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在网上看到,锐速可以用来给服务器加速,然后有人用这个软件来给翻墙服务器加速,据说效果还不错,今天就折腾一下.<br>]]>
    
    </summary>
    
      <category term="Linux" scheme="http://bblove.me/tags/Linux/"/>
    
      <category term="digitalocean" scheme="http://bblove.me/tags/digitalocean/"/>
    
      <category term="服务器" scheme="http://bblove.me/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[php学习笔记(1)]]></title>
    <link href="http://bblove.me/2015/12/10/php-learn-note-1/"/>
    <id>http://bblove.me/2015/12/10/php-learn-note-1/</id>
    <published>2015-12-10T07:46:03.000Z</published>
    <updated>2015-12-10T14:17:44.285Z</updated>
    <content type="html"><![CDATA[<p>php文档学习笔记,正式开始连载了哈,终于开始学习了.<br><a id="more"></a></p>
<h1 id="布尔值">布尔值</h1><p>要明确地将一个值转换成 boolean，用 (bool) 或者 (boolean) 来强制转换。但是很多情况下不需要用强制转换，因为当运算符，函数或者流程控制结构需要一个 boolean 参数时，该值会被自动转换。<br>当转换为 boolean 时，以下值被认为是 FALSE：</p>
<ul>
<li>布尔值 <strong>FALSE</strong> 本身</li>
<li>整型值 <strong>0</strong>（零）</li>
<li>浮点型值 <strong>0.0</strong>（零）</li>
<li>空字符串，以及字符串 <strong>“0”</strong></li>
<li>不包括任何元素的数组</li>
<li>不包括任何成员变量的对象（仅 PHP 4.0 适用）</li>
<li>特殊类型 <strong>NULL</strong>（包括尚未赋值的变量）</li>
<li>从空标记生成的 <strong>SimpleXML</strong> 对象</li>
<li>所有其它值都被认为是 <strong>TRUE</strong>（包括任何资源）。</li>
</ul>
<p><strong>PS:</strong><br>-1 和其它非零值（不论正负）一样，被认为是 <strong>TRUE</strong>！<br>接下来我们可以试试,自己写一些常见的布尔值<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var_dump((bool)<span class="string">'0'</span>);        <span class="comment">//false</span></span><br><span class="line">var_dump((bool)<span class="string">'0.0'</span>);      <span class="comment">//true</span></span><br><span class="line">var_dump((bool)<span class="string">'0.1'</span>);      <span class="comment">//true</span></span><br><span class="line">var_dump((bool)<span class="keyword">array</span>());    <span class="comment">//false</span></span><br><span class="line">var_dump((bool)<span class="string">"false"</span>);    <span class="comment">//true,因为这个字符串不为空,所以为true</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>php文档学习笔记,正式开始连载了哈,终于开始学习了.<br>]]>
    
    </summary>
    
      <category term="php" scheme="http://bblove.me/tags/php/"/>
    
      <category term="php学习笔记" scheme="http://bblove.me/categories/php%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[那些年,我们玩过的离线安装]]></title>
    <link href="http://bblove.me/2015/11/26/offline-install/"/>
    <id>http://bblove.me/2015/11/26/offline-install/</id>
    <published>2015-11-26T05:34:46.000Z</published>
    <updated>2015-12-18T02:29:39.358Z</updated>
    <content type="html"><![CDATA[<p>由于有些软件,都是下载一个安装器,然后在线安装,由于网速的原因,这种方式一旦失败,就只能重新安装,所以很坑,就找了些离线安装的方法<br><a id="more"></a></p>
<h1 id="1_Adobe_reader离线安装">1 Adobe reader离线安装</h1><p>下载离线安装版adobe reader<br><a href="https://get.adobe.com/cn/reader/enterprise/" target="_blank" rel="external">https://get.adobe.com/cn/reader/enterprise/</a></p>
<h1 id="2_chrome离线安装">2 chrome离线安装</h1><p>Windows平台：</p>
<p>Chrome 离线安装包（仅 Windows 可用）：<br>最新稳定版（Stable Channel）：<br>【<a href="http://www.google.com/chrome/eula.html?hl=zh-CN&amp;standalone=1】" target="_blank" rel="external">http://www.google.com/chrome/eula.html?hl=zh-CN&amp;standalone=1】</a></p>
<p>最新测试版（Beta Channel）：<br>【<a href="http://www.google.com/chrome/eula.html?hl=zh-CN&amp;standalone=1&amp;extra=betachannel】" target="_blank" rel="external">http://www.google.com/chrome/eula.html?hl=zh-CN&amp;standalone=1&amp;extra=betachannel】</a></p>
<p>最新开发版（Dev Channel）：<br>【<a href="http://www.google.com/chrome/eula.html?hl=zh-CN&amp;standalone=1&amp;extra=devchannel】" target="_blank" rel="external">http://www.google.com/chrome/eula.html?hl=zh-CN&amp;standalone=1&amp;extra=devchannel】</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>由于有些软件,都是下载一个安装器,然后在线安装,由于网速的原因,这种方式一旦失败,就只能重新安装,所以很坑,就找了些离线安装的方法<br>]]>
    
    </summary>
    
      <category term="chrome" scheme="http://bblove.me/tags/chrome/"/>
    
      <category term="flash" scheme="http://bblove.me/tags/flash/"/>
    
      <category term="离线安装" scheme="http://bblove.me/tags/%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/"/>
    
      <category term="软件安装与技巧" scheme="http://bblove.me/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[解决 Github Pages 禁止百度爬虫的方法]]></title>
    <link href="http://bblove.me/2015/11/25/how-to-solve-the-problem-that-github-blocks-the-baidu-spider/"/>
    <id>http://bblove.me/2015/11/25/how-to-solve-the-problem-that-github-blocks-the-baidu-spider/</id>
    <published>2015-11-25T03:06:50.000Z</published>
    <updated>2016-03-06T10:23:26.440Z</updated>
    <content type="html"><![CDATA[<p><em>update</em>:因为gitcafe在5月31号就关闭了,所以要将文章中的gitcafe换掉,我重新写了一篇,在这里<a href="http://jackroyal.github.io/2016/03/06/migrate-pages-from-gitcafe-to-coding/" target="_blank" rel="external">解决 Github Pages 禁止百度爬虫的方法2–从gitcafe迁移到coding.net</a></p>
<p>最近,我的github student package里面送的一个namecheap域名终于下来了.That is to say:我终于有自己的域名了,这就是我的域名<a href="http://bblove.me">http://bblove.me</a>,欢迎来访.<br><a id="more"></a><br>有域名以后,就在想办法解决百度爬虫的问题.<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Hi Jackroyal,</span><br><span class="line"></span><br><span class="line">We are currently blocking <span class="operator">the</span> Baidu user agent <span class="built_in">from</span> crawling GitHub Pages</span><br><span class="line">sites <span class="operator">in</span> response <span class="built_in">to</span> this user agent being responsible <span class="keyword">for</span> <span class="operator">an</span> excessive amount</span><br><span class="line"><span class="operator">of</span> requests, which was causing availability issues <span class="keyword">for</span> other GitHub customers.</span><br><span class="line">This is unlikely <span class="built_in">to</span> change <span class="keyword">any</span> <span class="built_in">time</span> soon, so <span class="keyword">if</span> you need <span class="operator">the</span> Baidu user agent</span><br><span class="line"><span class="built_in">to</span> be able <span class="built_in">to</span> crawl your site you will need <span class="built_in">to</span> host <span class="keyword">it</span> elsewhere.</span><br><span class="line"></span><br><span class="line">Cheers,</span><br><span class="line">Scott</span><br></pre></td></tr></table></figure></p>
<p>这是我之前跟github反映百度spider无法抓取我的github pages,他们给我的回复邮件.也就是说他们把百度spider给禁掉了,桑不起.<br>直接说解决方法:<br><code>把博客同时发布到github pages和gitcafe pages.然后使用dnspod设置域名解析,国内线路解析到gitcafe,国外线路解析到github.</code></p>
<h1 id="实现方法">实现方法</h1><h1 id="1_准备条件">1 准备条件</h1><p>一共需要一下这几个东西:</p>
<ul>
<li>一个github账户</li>
<li>一个gitcafe账户</li>
<li>一个dnspod账号</li>
<li>一个域名</li>
<li>github for windows(或者git客户端也行)<br>没了,就这么多就行.</li>
</ul>
<h1 id="2_初始操作">2 初始操作</h1><p>我们在github和gitcafe上面把自己的博客搭建起来,首先要建仓库.<br><strong>github</strong>:<br>    首先登录你的github,然后新建一个公共仓库,仓库名是你的用户名加上<code>yourname.github.io</code>,如下图所示,我的用户名是<code>Jackroyal</code><br>    <img src="http://ww1.sinaimg.cn/large/692869a3gw1eye6fpc3w8j20ue0idjv0.jpg" alt="github新建仓库"></p>
<p><strong>gitcafe</strong>:<br>    操作方法差不多,不过有点区别是,gitcafe新建的公开项目,是和用户名一致的,比如我的用户名是<code>Jackroyal</code>,那我新建的仓库名就是<code>Jackroyal</code></p>
<p>仓库新建成功后,你获取到的链接应该是类似下面的<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">https:</span><span class="comment">//github.com/Jackroyal/Jackroyal.github.io.git</span></span><br><span class="line"><span class="string">https:</span><span class="comment">//gitcafe.com/Jackroyal/Jackroyal.git</span></span><br></pre></td></tr></table></figure></p>
<p>这就是你的两个page对应的仓库.</p>
<h1 id="3_搭建博客">3 搭建博客</h1><h2 id="3-1_搭建github_pages">3.1 搭建github pages</h2><p>当你的仓库建好了,我们就开始搭建博客,因为之前的博客有写,具体过程就不赘述<a href="http://jackroyal.github.io/2015/06/16/hexo-3-0-update/" target="_blank" rel="external">安装和配置hexo 3.0</a>.</p>
<p>按照上面的教程一步一步,就能搭建好博客,然后你就可以访问你的gihub pages了,访问链接就是<code>http://yourname.github.io</code>,比如我的即使<code>http://jackroyal.github.io</code>.<br>现在我们开始搭建gitcafe上面的pages了.由于hexo现在已经支持多发布,所以很简单,我们只需要配置deploy的信息,修改<code>_config.yml</code>.添加gitcafe的仓库信息.我的修改结果如下,<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">- <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: <span class="string">'https://github.com/Jackroyal/Jackroyal.github.io.git'</span></span><br><span class="line">  <span class="attribute">branch</span>: master</span><br><span class="line">- <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: <span class="string">'https://gitcafe.com/Jackroyal/Jackroyal.git'</span></span><br><span class="line">  <span class="attribute">branch</span>: gitcafe-pages</span><br></pre></td></tr></table></figure></p>
<p>尤其需要注意的是,两个的branch是不同的,<code>github</code>默认分支是<code>master</code>,<code>gitcafe</code>默认分支是<code>gitcafe-pages</code>.</p>
<h2 id="3-2_添加gitcafe的ssh公钥">3.2 添加gitcafe的ssh公钥</h2><p>由于我使用的是<code>github for windows</code>的终端界面,也就是github官方提供的客户端,他的好处是,我使用github的时候,不需要配置ssh公钥,密钥之类的东西.如果你用的不是这个,用的是git的客户端,那就需要配置ssh公钥,参考这里<a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="external">github配置公钥</a>.<br>对的,你猜到了,我们现在需要配置gitcafe的ssh公钥,因为<code>github for windows</code>会自动帮我们上传公钥,gitcafe就只能手动了.</p>
<h3 id="3-2-1_查看本地公钥">3.2.1 查看本地公钥</h3><p>我们打开你使用的git终端,首先切回用户目录,然后进入<code>.ssh</code>目录,里面就有公钥和私钥,如下图所示<br><img src="http://ww2.sinaimg.cn/large/692869a3gw1eye75djqo9j20gj09475k.jpg" alt="使用git客户端查看ssh公钥私钥"><br><img src="http://ww2.sinaimg.cn/large/692869a3gw1eye78gs0hvj20it0ca761.jpg" alt="使用github for windows查看ssh公钥私钥"><br>我们就是要读取后缀是<code>.pub</code>的那个文件,比如我的读取命令就是<code>cat github_rsa.pub</code>,执行结果如下<br><img src="http://ww3.sinaimg.cn/large/692869a3gw1eye7c2xpavj20if06dt9w.jpg" alt="查看公钥"></p>
<h3 id="3-2-2_添加公钥到gitcafe">3.2.2 添加公钥到gitcafe</h3><p>我们在<a href="https://gitcafe.com/account/public_keys" target="_blank" rel="external">这里</a>来设置gitcafe的公钥.<br><em>PS:需要注意的是,公钥后面的chen@chen-pc是不需要的,我的带上以后,gitcafe说是公钥非法,不过不怕,gitcafe会帮你正确格式化</em><br><img src="http://ww1.sinaimg.cn/large/692869a3gw1eye7h4ha7dj20v105n0ve.jpg" alt="正确的ssh格式"><br>反正就是把公钥加上去,就ok了</p>
<h2 id="3-4_同步博客到gitcafe">3.4 同步博客到gitcafe</h2><p>上面的配置好了以后,我们就可以把博客内容同步到gitcafe了,方法很简单,执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure></p>
<p>然后就可以啦.</p>
<h1 id="4_配置域名">4 配置域名</h1><p>首先你得有个域名,像我一样,哈哈.</p>
<h2 id="4-1_修改域名注册的解析服务器">4.1 修改域名注册的解析服务器</h2><p>我们在要把域名解析服务,设置到dnspod,因为他是国内的,而且服务很好.我们登录自己的域名管理后台,选择对应的域名进行管理,然后找到<code>nameservers</code>的设置,如图所示<br><img src="http://ww3.sinaimg.cn/large/692869a3gw1eye7orkymjj210j0i7tde.jpg" alt="修改nameservers的设置"><br>修改的值是<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f1g1ns1<span class="class">.dnspod</span><span class="class">.net</span></span><br><span class="line">f1g1ns2<span class="class">.dnspod</span><span class="class">.net</span></span><br></pre></td></tr></table></figure></p>
<p>常见的域名注册商修改到dnspod,官方提供了教程,看<a href="https://support.dnspod.cn/Kb/guide/" target="_blank" rel="external">这里</a>-<br>改完以后可能要等一段时间才能生效,最多72小时<br>ok,改完以后,这边就完了,我们登录dnspod</p>
<h2 id="4-2_修改dnspod解析记录">4.2 修改dnspod解析记录</h2><p>我们登录dnspod,然后添加域名<br>如果4.1中的设置生效了,你的域名就会添加成功了,我们直接进行下一步,修改解析记录,上图<br><img src="http://ww2.sinaimg.cn/large/692869a3gw1eye9mfkri4j20mt0efad6.jpg" alt="dns解析记录"><br>我们一共添加了5条记录,其中一条泛解析和www解析是针对国内的,所以执行gitcafe;2条泛解析和www解析是针对国外的,所以指向github.<br>就是添加<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@       <span class="keyword">A</span>      默认  <span class="number">192.30.252.153</span></span><br><span class="line">@       <span class="keyword">A</span>      默认  <span class="number">192.30.252.154</span></span><br><span class="line">@       <span class="keyword">CNAME</span>  国内  gitcafe.io.</span><br><span class="line">www     <span class="keyword">CNAME</span>  默认  jackroyal.github.io.</span><br><span class="line">www     <span class="keyword">CNAME</span>  国内  gitcafe.io.</span><br></pre></td></tr></table></figure></p>
<p>其他设置项目默认就行了,上面的配置完了,如果你走国外ip访问你的域名的话,会出现404,因为我们还差一步.走国内线路访问一样会出错,都是没绑定的结果.</p>
<h2 id="4-3_添加github的CNAME文件,添加gitcafe自定义域名">4.3 添加github的CNAME文件,添加gitcafe自定义域名</h2><p>现在只差最后一步了,我们先来配置github的CNAME文件,官网有个教程<a href="https://help.github.com/articles/adding-a-cname-file-to-your-repository/" target="_blank" rel="external">配置CNAME文件</a>.说白了,就是在你的网站根目录,添加一个名为<code>CNAME</code>的文件,里面的内容就是你的域名<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bblove.<span class="keyword">me</span></span><br></pre></td></tr></table></figure></p>
<p>没有任何多余的信息,如下图<br><img src="http://ww1.sinaimg.cn/large/692869a3gw1eyea41g3amj20uz0a4jtg.jpg" alt="配置github的CNAME"><br>上面的配置现在访问没问题,但是你一重新发布博客,就需要重新手动添加<code>CNAME</code>文件,太麻烦.<br>一劳永逸的方法,在你的<code>hexo</code>目录下的<code>source</code>目录中,新建一个<code>CNAME</code>文件夹,然后他每次在你发布博客的时候,都会在你的网站根目录生成一个<code>CNAME</code>文件.<br><img src="http://ww2.sinaimg.cn/large/692869a3gw1eyea9pgd8cj20ko06ct9v.jpg" alt="添加CNAME的目录结构"><br>现在github的配置彻底结束.</p>
<p>接下来配置gitcafe:<br>1 我们在gitcafe的项目主页,点击<code>项目设置</code>,如下图(之所以截图,是因为我找半天才看到…)<br><img src="http://ww1.sinaimg.cn/large/692869a3gw1eyeadedmh1j20z508eadm.jpg" alt="gitcafe点击&#39;项目设置&#39;"><br>2 然后我们点击<code>pages服务</code>标签,然后添加自己的域名,这些域名是我们之前在dnspod中设置了解析的<br><img src="http://ww3.sinaimg.cn/large/692869a3gw1eyeaftjlagj20sp0dvn1i.jpg" alt="gitcafe配置自定义域名"></p>
<p>彻底打完收工了</p>
<h1 id="5_总结">5 总结</h1><p>总算写完了,写到这里,我一共写了,141行了,写了个把小时.这次主要参考了下面的几篇文章,都写在友情链接里面了.参考了他们的思路,因为他们的方法里面需要自己单独购买vps或者购买CDN,共同的问题是增加了开销,买vps会导致你每次写博客都需要单独发布一次到vps上太麻烦.我后来在网上看到gitcafe也有<code>gitcafe pages</code>服务,如果用这个来处理的话,一来,不会增加多余的开销,他们都是免费的;二来,由于hexo对于多部署的支持,多部署很简单,一次配置,以后就可以不用理会了.<br>ok,收工</p>
<h1 id="友情链接">友情链接</h1><p>1 <a href="http://jerryzou.com/posts/feasibility-of-allowing-baiduSpider-for-Github-Pages/" target="_blank" rel="external">解决 Github Pages 禁止百度爬虫的方法与可行性分析</a><br>2 <a href="http://www.dozer.cc/2015/06/github-pages-and-cdn.html" target="_blank" rel="external">利用 CDN 解决百度爬虫被 Github Pages 拒绝的问题</a><br>3 <a href="https://help.gitcafe.com/manuals/help/pages-services" target="_blank" rel="external">gitcafe官方文档–pages服务</a><br>4 <a href="https://help.gitcafe.com/manuals/help/ssh-key" target="_blank" rel="external">gitcafe官方文档–配置ssh公钥</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><em>update</em>:因为gitcafe在5月31号就关闭了,所以要将文章中的gitcafe换掉,我重新写了一篇,在这里<a href="http://jackroyal.github.io/2016/03/06/migrate-pages-from-gitcafe-to-coding/">解决 Github Pages 禁止百度爬虫的方法2–从gitcafe迁移到coding.net</a></p>
<p>最近,我的github student package里面送的一个namecheap域名终于下来了.That is to say:我终于有自己的域名了,这就是我的域名<a href="http://bblove.me">http://bblove.me</a>,欢迎来访.<br>]]>
    
    </summary>
    
      <category term="baidu" scheme="http://bblove.me/tags/baidu/"/>
    
      <category term="github" scheme="http://bblove.me/tags/github/"/>
    
      <category term="hexo" scheme="http://bblove.me/tags/hexo/"/>
    
      <category term="hexo" scheme="http://bblove.me/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git使用笔记(2)]]></title>
    <link href="http://bblove.me/2015/11/04/my-git-note2/"/>
    <id>http://bblove.me/2015/11/04/my-git-note2/</id>
    <published>2015-11-04T08:52:25.000Z</published>
    <updated>2015-11-05T01:03:48.157Z</updated>
    <content type="html"><![CDATA[<p>上一篇笔记,只写了些git的基础操作,这篇写一下稍微高阶一点的操作,实际项目的时候可能经常会用到.<br><a id="more"></a></p>
<h1 id="撤销操作">撤销操作</h1><p>撤销操作,我经常会用到,有时候写的代码没有考虑周全,或者有疏漏,需要重新提交什么的.</p>
<h1 id="1_撤销工作空间最近的修改">1 撤销工作空间最近的修改</h1><p>应用场景:比如上次push以后的完整干净的目录,工作空间没有任何修改,暂存区也没有任何修改,如下图:<br><img src="http://ww2.sinaimg.cn/large/692869a3gw1exp9lmtz38j20cl0383yn.jpg" alt="上一次提交后干净的工作目录"><br>这时候,你手贱,改了一下其中的一个文件,但是这次更改是没有意义的.我们继续使用<code>git status</code>来查看<br><img src="http://ww4.sinaimg.cn/large/692869a3gw1exp9ngk82jj20it07i75f.jpg" alt="修改一个文件后执行git status的结果"><br>我们现在想撤销这次修改.<br>解决方法:现在这个修改只是工作区的修改,我们要撤销很简单执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout a.txt</span><br></pre></td></tr></table></figure></p>
<p>搞定</p>
<h1 id="2_撤销暂存区最近的修改">2 撤销暂存区最近的修改</h1><p>应用场景:假如在上面说的那种情况下,你手贱改错了文件,而且你没有撤销,你还执行<code>git add a.txt</code>,将修改提交到暂存区了.具体情况如下图<br><img src="http://ww2.sinaimg.cn/large/692869a3gw1expa1cbny2j20ge0790td.jpg" alt="错误的修改被提交到了暂存区"><br>现在我们要从暂存区撤回那个修改<br>解决办法:我们使用<code>git reset HEAD a.txt</code>,将文件从暂存区撤出来,又回到上面的工作空间被修改的状态,如图<br><img src="http://ww2.sinaimg.cn/large/692869a3gw1expa3azt15j20hg09twft.jpg" alt="从暂存区撤回"><br>ps:上面的命令也可以用下面的命令,语法格式是<code>git reset &lt;path&gt;</code>,括号中填路径<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset a.txt</span><br></pre></td></tr></table></figure></p>
<p>总的来说,<code>git reset &lt;path&gt;</code>就是<code>git add &lt;path&gt;</code>的反向操作</p>
<h1 id="3_撤销提交到本地仓库的修改">3 撤销提交到本地仓库的修改</h1><p>应用场景:假如你在<code>1.2</code>还没有回头,一路手贱下去,将暂存区的修改<code>commit</code>到本地仓库了<br><img src="http://ww4.sinaimg.cn/large/692869a3gw1expa8o47yvj20fi087gmv.jpg" alt="错误的修改被提交到本地仓库"><br>我们现在要从仓库撤销这次没用的提交<br>解决方法:</p>
<h4 id="1-3-1_方案一_再新建一次提交">1.3.1 方案一  再新建一次提交</h4><p>我们可以新建一次提交,然后让所修改的文件回到之前的状态,执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert HEAD</span><br></pre></td></tr></table></figure></p>
<p>含义很简单,逆转,这样你的<code>log</code>里面会多一次提交,然后文件也回到的之前的状态<br><img src="http://ww4.sinaimg.cn/large/692869a3gw1expb97iondj20it0catb7.jpg" alt="执行git revert 后的log"></p>
<p>#3.2 方案二  干净的撤销上一次commit<br>上面的方案一对于一个强迫症来说,不能忍啊,本来就是一次错误的提交,为了弥补这个错误,我却还要多提交一次,完全不能忍受.<br>方案二,我们使用<code>git reset</code>命令.我们执行<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="operator"><span class="keyword">reset</span> <span class="keyword">HEAD</span>^</span></span><br></pre></td></tr></table></figure></p>
<p>这个命令表示重置HEAD指针,我们要指向上一次提交(也就是取消最近的一次,HEAD表示当前指针,HEAD^是上一次,HEAD^^是上上次,HEAD^^^是上三次),<code>git reset</code>命令可以添加<code>--mixed</code>,<code>--soft</code>,<code>--hard</code>三种参数,<code>--soft</code>程度最轻,只会撤销提交,对当前暂存区和当前工作空间不会有任何更改,默认的参数是<code>--mixed</code>,他会将暂存区的文件撤销<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="operator"><span class="keyword">reset</span> <span class="comment">--soft :取消了commit  </span></span><br><span class="line"></span><br><span class="line">git <span class="keyword">reset</span> <span class="comment">--mixed（默认） :取消了commit ，取消了add</span></span><br><span class="line"></span><br><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard :取消了commit ，取消了add，取消源文件修改</span></span></span><br></pre></td></tr></table></figure></p>
<h1 id="3-3_方案三_修改最后一次提交">3.3 方案三  修改最后一次提交</h1><p><strong>首先强调,下面说的实在本地仓库的操作.</strong><br>应用场景:对于上面提到的错误的提交,我们还可以修改他的内容,删除我们错误的修改,将它恢复到原来的样子,我们可以使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure></p>
<p>这个方法是将当前暂存区快照提交,也就是你后面的修改合在一起,然后再提交.最后查看<code>log</code>的时候,会只有一次提交,前面的一次提交就被删除,在<code>log</code>中只看到这次提交.<br>用具体例子来说.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"这是第一次提交"</span></span><br><span class="line"><span class="comment">#commit完,我们修改工作空间的内容,然后再执行</span></span><br><span class="line">git add b.txt</span><br><span class="line">git commit --amend</span><br><span class="line"><span class="comment">#这条命令会弹出一个编辑窗口,你可以修改提交信息</span></span><br><span class="line"><span class="comment">#假设我们将提交信息修改为"这是第二次提交"</span></span><br></pre></td></tr></table></figure></p>
<p>接着当我们使用<code>git log</code>来查看的时候,你只会看到提交信息是”这是第二次提交”.<br>解决方法:<br>我们先将文件内容恢复到上一次(当前是HEAD,上一次就是HEAD^)提交时候的样子,然后执行<code>git commit --amend</code>,看到如下错误提示,就是说这次文件没有任何修改(废话,我已经恢复正确的样子了,当然一模一样了),默认是不允许空提交的,你只有强制使用<code>--allow-empty</code>才行,或者执行方案二<br><img src="http://ww1.sinaimg.cn/large/692869a3gw1expt5luwo4j20io06cq3w.jpg" alt="执行git commit --amend内容没有变化的错误提示"></p>
<h1 id="4_总结">4 总结</h1><p>盗图一张,总结上面说的内容<br><img src="http://ww2.sinaimg.cn/large/692869a3gw1exptkjlw1fj20jg09fq3k.jpg" alt="工作空间,暂存区,本地仓库之间的关机和转换"><br>打完收工</p>
<h3 id="附言">附言</h3><p><strong>PS</strong>:现在再来解释开头说的,这是本地仓库的操作.<br>因为,我们本地仓库执行了<code>git commit</code>后,所做的更改只会在本地,如果接着执行了<code>git push</code>那么,所做的更改就会被提交到<code>git</code>,在上面的例子中那么首先提交到github的就是<code>&quot;这是第一次提交&quot;</code>.这时候,当你执行完<code>git commit --amend</code>的时候,本地仓库的上次提交会被删除,也就是不存在提示信息为<code>&quot;这是第一次提交&quot;</code>,此时本地仓库完成了修改,你想提交到github,就会报错了.如图所示<br><img src="http://ww1.sinaimg.cn/large/692869a3gw1exp93i04qtj20it0cajua.jpg" alt="本地执行--amend操作后直接提交到github报错"><br>解决方法就是,<strong>Force</strong><br>没错,强制提交<code>git push -f</code>,这样他就会像本地一样,删除上一次提交,添加这一次提交</p>
<h1 id="友情链接">友情链接</h1><p>1 <a href="https://help.github.com/articles/changing-a-commit-message/" target="_blank" rel="external">修改提交信息</a><br>2 <a href="https://github.com/blog/2019-how-to-undo-almost-anything-with-git" target="_blank" rel="external">如何撤销在git上的各种修改,好文</a><br>3 <a href="http://my.oschina.net/MinGKai/blog/144932" target="_blank" rel="external">git revert和git reset的区别</a><br>4 <a href="https://marklodato.github.io/visual-git-guide/index-zh-cn.html" target="_blank" rel="external">git常用命令介绍,带效果图的</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>上一篇笔记,只写了些git的基础操作,这篇写一下稍微高阶一点的操作,实际项目的时候可能经常会用到.<br>]]>
    
    </summary>
    
      <category term="Linux" scheme="http://bblove.me/tags/Linux/"/>
    
      <category term="git" scheme="http://bblove.me/tags/git/"/>
    
      <category term="github" scheme="http://bblove.me/tags/github/"/>
    
      <category term="Linux" scheme="http://bblove.me/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git使用笔记(1)]]></title>
    <link href="http://bblove.me/2015/11/04/my-git-note1/"/>
    <id>http://bblove.me/2015/11/04/my-git-note1/</id>
    <published>2015-11-04T04:17:04.000Z</published>
    <updated>2015-11-04T13:38:41.225Z</updated>
    <content type="html"><![CDATA[<p>git也用了一段时间了,还是写点笔记,记录一下.<br><a id="more"></a></p>
<h1 id="准备条件">准备条件</h1><p>首先假装你已经安装好了git</p>
<ul>
<li>在Linux下<br>  我用的是<code>ubuntu</code>,安装非常easy,使用<code>sudo apt-get install git</code></li>
<li>在windows下<br>  在windows下安装,就使用<a href="https://git-scm.com/downloads" target="_blank" rel="external">git-downloads</a>,点击下载,安装,就ok.<br>ps:如果你足够幸运,可以试试<a href="https://desktop.github.com/" target="_blank" rel="external">github的windows版</a>,这个的好处是,带有图形化界面.</li>
</ul>
<h1 id="1_初始化git设置">1 初始化git设置</h1><p>新装好git后,我们先配置个人的用户名和email,这两条配置很重要,因为在git的日志中,都会带上这两条信息.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"John Doe"</span></span><br><span class="line">$ git config --global user.email johndoe@example.com</span><br></pre></td></tr></table></figure></p>
<p>如果用了<code>--global</code>选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉<code>--global</code>选项重新配置即可，新的设定保存在当前项目的<code>.git/config</code>文件里。</p>
<h1 id="2_新建第一个仓库">2 新建第一个仓库</h1><p>建立第一个仓库有两种方式,一种是完全新建一个仓库,第二种是克隆一个现有仓库.</p>
<h4 id="2-1_完全新建一个仓库">2.1 完全新建一个仓库</h4><p>你先切换到你想建项目的地方,比如<code>f:/blog/</code>,然后执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></p>
<p>初始化后再在当前目录新建一个名为<code>.git</code>的目录,git所有的东西都存在这里面.当然我们不用管.</p>
<h4 id="2-2_克隆一个现有仓库">2.2 克隆一个现有仓库</h4><p>这个也是很easy,直接一条命令搞定<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Jackroyal/blog.git</span><br></pre></td></tr></table></figure></p>
<p>他会在你的当前目录新建一个<code>blog</code>文件夹,在<code>blog</code>文件夹里面他会把相关的文件都下载下来,就可以用了.</p>
<h1 id="3_提交更新">3 提交更新</h1><h4 id="3-1_提交工作空间文件到暂存区">3.1 提交工作空间文件到暂存区</h4><p>执行<code>touch a.txt</code>,我们在目录中新建一个文件名叫<code>a.txt</code>,然后我们修改它的内容.<br>接下来,我们来查看下状态<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></p>
<p>执行结果如下图:<br><img src="http://ww1.sinaimg.cn/large/692869a3gw1exoxiu5jyij20it0933zl.jpg" alt="执行git status查看工作区文件状态"><br>就像图片中提示的,我们新加的<code>a.txt</code>是未跟踪文件,我们执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add a.txt</span><br></pre></td></tr></table></figure></p>
<p>我们把<code>a.txt</code>添加到暂存区,再次执行<code>git status</code>,查看状态,执行结果如图所示<br><img src="http://ww2.sinaimg.cn/large/692869a3gw1exoxp6duu1j20it07o0th.jpg" alt="添加到暂存区后再次执行git status"></p>
<h4 id="3-2_将暂存区文件保存到本地仓库">3.2 将暂存区文件保存到本地仓库</h4><p>假如你要做的修改已经改完,已经保存到暂存区了,我们准备提交到本地仓库.执行<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="operator"><span class="keyword">commit</span> -<span class="keyword">m</span> <span class="string">"这是提交内容"</span></span></span><br></pre></td></tr></table></figure></p>
<p>参数<code>-m</code>,就是添加说明,方便以后查看,你就可以知道自己做了哪些更改</p>
<h4 id="3-3_将本地仓库内容提交到远程仓库">3.3 将本地仓库内容提交到远程仓库</h4><p>上面的步骤都弄好以后,我们提交到远程仓库<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">git</span> <span class="keyword">push </span>origin master</span><br></pre></td></tr></table></figure></p>
<p>然后就行了,一个基本的流程就是这样.<br>推荐看看下面友情链接里面的那本书,pro git<br><img src="http://ww1.sinaimg.cn/large/692869a3gw1exp17u1ltjj208r0boq38.jpg" alt="pro git封面"></p>
<h1 id="友情链接">友情链接</h1><p>1 <a href="http://iissnan.com/progit/" target="_blank" rel="external">pro git中文书籍在线版</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>git也用了一段时间了,还是写点笔记,记录一下.<br>]]>
    
    </summary>
    
      <category term="Linux" scheme="http://bblove.me/tags/Linux/"/>
    
      <category term="git" scheme="http://bblove.me/tags/git/"/>
    
      <category term="github" scheme="http://bblove.me/tags/github/"/>
    
      <category term="Linux" scheme="http://bblove.me/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[微信支付app支付3.0接口开发]]></title>
    <link href="http://bblove.me/2015/10/25/weixin-app-pay-v3-0/"/>
    <id>http://bblove.me/2015/10/25/weixin-app-pay-v3-0/</id>
    <published>2015-10-25T13:30:03.000Z</published>
    <updated>2015-10-29T06:12:58.325Z</updated>
    <content type="html"><![CDATA[<p>最近在做微信支付,因为前段时间做了微信的公众账号支付,我以为是一个东西,结果发现不是,我真是醉了,竟然是独立的两套东西.<br><a id="more"></a><br><img src="http://ww4.sinaimg.cn/large/692869a3gw1exdqakso33j20ny0dptbi.jpg" alt="微信支付架构图"><br>整个微信支付,分为三大平台,公众平台(就是公众账号那个),开发平台(主要针对app这块),商户平台(所有微信支付的结算,最终在这里).三个平台的账号都不同,而且必须不同,不然不让你注册.<br>其中,需要用户注册的是公众平台和开放平台,当你审核通过以后,就会给你分配一个对应的商户号.也就是说,你一个公司,申请一个公众号和一个开放平台账号,分别给你一个商户号,你就一共有两个商户号.这两个商户号不同,我之前就是拿着公众账号对应的商户号(客户给错了),去做app支付,一直说不对应.<br>下面进入正文,看看怎么开发</p>
<h1 id="准备工作">准备工作</h1><p>首先你需要注册<a href="https://open.weixin.qq.com/" target="_blank" rel="external">开放平台</a>账号,然后添加一个app应用(里面包含你的appid和appkey),并且进行认证,然后就会收到一封邮件,里面包含了你分到的商户号.</p>
<h1 id="1_流程图">1 流程图</h1><p>接下来,我们需要搞清楚微信app支付开发的流程,如下图所示.<br><img src="http://ww1.sinaimg.cn/large/692869a3gw1exgxrb07bfj20ou0sy453.jpg" alt="微信app支付流程图"><br>其中,红色的部分是需要我们做的,具体分下来,客户端要做的事就比较少,生成预支付订单,返回签名的package这些都是服务端做的(开发客户端真爽),当然从另外一个角度来说,这些事情也确实应该放在服务器端来做,因为涉及到一些key和密钥之类的东西,放在客户端app中不安全,如果app被反编译就暴露了这些信息.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">商户系统和微信支付系统主要交互说明：</span><br><span class="line">步骤<span class="number">1</span>：用户在商户APP中选择商品，提交订单，选择微信支付。</span><br><span class="line">步骤<span class="number">2</span>：商户后台收到用户支付单，调用微信支付统一下单接口。参见【统一下单API】。</span><br><span class="line">步骤<span class="number">3</span>：统一下单接口返回正常的prepay_id，再按签名规范重新生成签名后，将数据传输给APP。参与签名的字段名为appId，partnerId，prepayId，nonceStr，timeStamp，package。注意：package的值格式为Sign=WXPay</span><br><span class="line">步骤<span class="number">4</span>：商户APP调起微信支付。api参见本章节【app端开发步骤说明】</span><br><span class="line">步骤<span class="number">5</span>：商户后台接收支付通知。api参见【支付结果通知API】</span><br><span class="line">步骤<span class="number">6</span>：商户后台查询支付结果。，api参见【查询订单API】</span><br></pre></td></tr></table></figure></p>
<p>服务端要做的,就是步骤1235,客户端做步骤4就行了,步骤6看自己的需求,我们没有做.<br>首先,生成商户服务器订单,这个自不必说,只有生成订单,才有订单号,才能做后面的工作.<br>我们重点看下步骤2和步骤3</p>
<h1 id="2_调用统一下单接口">2  调用统一下单接口</h1><p>首先,我们需要看一下<a href="https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=9_1" target="_blank" rel="external">统一下单接口</a>文档,里面包含了请求的地址和要传的参数,顾名思义,那些必填字段是必须要填写的,这是我的请求参数列表<code>out_trade_no</code>,<code>body</code>,<code>total_fee</code>,<code>time_start</code>,<code>time_expire</code>,<code>spbill_create_ip</code>,<code>notify_url</code>,<code>trade_type</code>还有一个签名<code>sign</code>,这就是所有的请求字段.</p>
<h2 id="签名">签名</h2><p>签名的思路是,把所有得除<code>sign</code>字段以外的字段,按照参数名ASCII码从小到大排序,使用URL键值对的格式（即key1=value1&amp;key2=value2…）拼接成字符串stringA。在stringA最后拼接上key得到stringSignTemp字符串，并对stringSignTemp进行MD5运算，再将得到的字符串所有字符转换为大写，得到sign值signValue。<a href="https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_3" target="_blank" rel="external">官方文档</a>.</p>
<p>签名可能有点蛋疼,你可以看<a href="https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_3" target="_blank" rel="external">这个</a>文档.微信也提供了签名的<a href="https://pay.weixin.qq.com/wiki/tools/signverify/" target="_blank" rel="external">在线调试工具</a>,你把参数填进去,看看签名拿到的值是否和你签名的结果一样.</p>
<h2 id="调用unifiedOrder">调用unifiedOrder</h2><p>由于统一下单接口,所有的支付方式都会调用,包括公众账号的几种支付方式,而且官方没有app支付的sdk代码,所以我们直接用公众号支付的js sdk代码.<br>sdk里面已经封装好了对统一下单接口的调用,包括签名,所以我们只需要调用这个就好了.</p>
<h2 id="整理参数">整理参数</h2><p>调用统一下单接口后,会返回很多数据,我们还是调用js sdk里面的处理函数,因为返回的是xml的内容,有些数据我们不要,(下面的结果是js api的,结果跟app除了trade_type不同,其他都是一样的)<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">xml</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">return_code</span>&gt;</span><span class="cdata">&lt;![CDATA[SUCCESS]]&gt;</span><span class="tag">&lt;/<span class="title">return_code</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">return_msg</span>&gt;</span><span class="cdata">&lt;![CDATA[OK]]&gt;</span><span class="tag">&lt;/<span class="title">return_msg</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">appid</span>&gt;</span><span class="cdata">&lt;![CDATA[wx2421b1c4370ec43b]]&gt;</span><span class="tag">&lt;/<span class="title">appid</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">mch_id</span>&gt;</span><span class="cdata">&lt;![CDATA[10000100]]&gt;</span><span class="tag">&lt;/<span class="title">mch_id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">nonce_str</span>&gt;</span><span class="cdata">&lt;![CDATA[IITRi8Iabbblz1Jc]]&gt;</span><span class="tag">&lt;/<span class="title">nonce_str</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">sign</span>&gt;</span><span class="cdata">&lt;![CDATA[7921E432F65EB8ED0CE9755F0E86D72F]]&gt;</span><span class="tag">&lt;/<span class="title">sign</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">result_code</span>&gt;</span><span class="cdata">&lt;![CDATA[SUCCESS]]&gt;</span><span class="tag">&lt;/<span class="title">result_code</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">prepay_id</span>&gt;</span><span class="cdata">&lt;![CDATA[wx201411101639507cbf6ffd8b0779950874]]&gt;</span><span class="tag">&lt;/<span class="title">prepay_id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">trade_type</span>&gt;</span><span class="cdata">&lt;![CDATA[JSAPI]]&gt;</span><span class="tag">&lt;/<span class="title">trade_type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">xml</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>上面的参数中,我们需要appid(就是你配置中的那个appid),prepay_id(预支付id,之前都是为了它),partnerid(就是你配置的商户号mch_id),其他的就没啥用了,我们接下来要给客户端返回一个数据包,全部的数据如下<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;"<span class="attribute">appid</span>":<span class="value"><span class="string">"wx8c965dd8b4794241"</span></span>,"<span class="attribute">noncestr</span>":<span class="value"><span class="string">"oxh4g98rfgbmugwbmxfg72ay6qpvieos"</span></span>,"<span class="attribute">package</span>":<span class="value"><span class="string">"Sign=WXpay"</span></span>,"<span class="attribute">partnerid</span>":<span class="value"><span class="string">"1277670101"</span></span>,"<span class="attribute">prepayid</span>":<span class="value"><span class="string">"wx2015102014523449175fc2fd0939076028"</span></span>,"<span class="attribute">timestamp</span>":<span class="value"><span class="string">"1445323951"</span></span>,"<span class="attribute">sign</span>":<span class="value"><span class="string">"7F84997FDW40F6F15DD1C28A9E313122"</span></span>&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>noncestr</code>是重新生成的,<code>package</code>是固定写法,里面的内容必须写<code>&quot;Sign=WXpay&quot;</code>,<code>timestamp</code>也是重新生成的,<code>sign</code>是重新签名后的结果.<br>然后把数据返回给客户端就行了,客户端调起支付.</p>
<h1 id="3_支付回调">3  支付回调</h1><p>和支付宝原理一样,不过微信返回的数据不是标准的<code>post</code>,所以你没法通过<code>$_POST[&#39;out_trade_no&#39;]</code>这样来获取数据.<br>所以,我的做法还是调用js sdk里面的回调方法,把那个回调类继承了一下,我们只需要重写<code>NotifyProcess</code>函数就行了,在这里面加入自己的逻辑,比如判断订单是否存在,订单是否已经处理过之类的.<br>至此,大流程已经走通了.</p>
<h1 id="4_优化">4  优化</h1><p>在调试过程中,我发现同一个订单号不能重复的去获取预支付的prepay_id,所以,我们在整理参数那一步后,需要将返回参数存到数据库,下次申请支付的时候,先去数据库查一下,有的话,就不用给微信服务器请求了</p>
<p>打完收工.</p>
<h1 id="参考文献">参考文献</h1><p>1 <a href="https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=11_1" target="_blank" rel="external">微信官方sdk下载</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在做微信支付,因为前段时间做了微信的公众账号支付,我以为是一个东西,结果发现不是,我真是醉了,竟然是独立的两套东西.<br>]]>
    
    </summary>
    
      <category term="api" scheme="http://bblove.me/tags/api/"/>
    
      <category term="微信支付" scheme="http://bblove.me/tags/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/"/>
    
      <category term="php" scheme="http://bblove.me/categories/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ubuntu下设置apache的目录映射]]></title>
    <link href="http://bblove.me/2015/10/15/ubuntu-lamp-alias-setting/"/>
    <id>http://bblove.me/2015/10/15/ubuntu-lamp-alias-setting/</id>
    <published>2015-10-15T14:12:37.000Z</published>
    <updated>2015-10-29T06:08:43.994Z</updated>
    <content type="html"><![CDATA[<p>好吧,我的博客一不小心又荒废下来了,话不多说,进入正文.<br><a id="more"></a><br>最近的项目一直在忙,发布代码的时候遇到一个麻烦事,由于所有项目代码都放在服务器的根目录,也就是<code>/var/www/html</code>下;然后还有一个api的页面,我放在一个<code>api</code>文件夹中,然后把整个<code>api</code>文件夹放在<code>html</code>目录下.由于每次发布代码都是替换整个根目录<code>html</code>下的文件,你懂的,我每次发布项目代码后,<code>api</code>就没了,需要我单独解压,再复制,blablabla,总之一个字,<strong>  烦  </strong>.<br>我突然想起来,phpmyadmin安装后就不在网站的根目录,但是访问的时候我却还是直接在ip后面跟目录,比如<code>http://127.0.0.1/phpmyadmin</code>,这货应该是用了一个映射,我照着这个样子搞一个,不就行了,说干就干.</p>
<h1 id="1_使用的命令">1 使用的命令</h1><p><code>Alias</code> 这个是这次主要使用的命令,使用的方法很简单,如下所示<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Alias /api /home/ch/api</span><br></pre></td></tr></table></figure></p>
<p>意思就是如果你在ip后面添加<code>/api</code>后缀,也就是你在浏览器访问<code>http://127.0.0.1/api</code>,那么实际就会访问到<code>/home/ch/api</code>目录下</p>
<h1 id="2_使用方法">2 使用方法</h1><h3 id="Linux下">Linux下</h3><p>由于我用的是ubuntu,所以具体说下ubuntu下怎么用.<br>根据<a href="http://huirong.github.io/2015/04/01/installLamp/" target="_blank" rel="external">在Ubuntu上安装LAMP服务器并简单配置</a>,这篇文章中关于<code>phpmyadmin</code>的设置部分,以下为摘抄<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">配置Apache服务器</span><br><span class="line">如果此时在浏览器中输入<span class="string">http:</span><span class="comment">//localhost/phpmyadmin，会提示404错误</span></span><br><span class="line">此时应该进行简单的配置，将phpMyAdmin的配置文件，复制到Apache2下</span><br><span class="line"></span><br><span class="line">cp <span class="regexp">/etc/</span>phpmyadmin<span class="regexp">/apache.conf /</span>etc<span class="regexp">/apache2/</span>conf-enabled/phpmyadmin.conf</span><br><span class="line">然后重启Apache服务器</span><br><span class="line"></span><br><span class="line">service apache2 restart</span><br></pre></td></tr></table></figure></p>
<p>我们得到启发,本来phpmyadmin也是不在<code>html</code>根目录下的,上面的操作做了什么呢?<br>我们打开<code>/etc/apache2/conf-enabled/phpmyadmin.conf</code>这个文件看看<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># phpMyAdmin default Apache configuration</span></span><br><span class="line"></span><br><span class="line"><span class="constant">Alias</span> /phpmyadmin /usr/share/phpmyadmin</span><br><span class="line"></span><br><span class="line">&lt;<span class="constant">Directory</span> /usr/share/phpmyadmin&gt;</span><br><span class="line">    <span class="constant">Options</span> <span class="constant">FollowSymLinks</span></span><br><span class="line">    <span class="constant">DirectoryIndex</span> index.php</span><br><span class="line"></span><br><span class="line">    &lt;<span class="constant">IfModule</span> mod_php5.c&gt;</span><br><span class="line">        <span class="constant">AddType</span> application/x-httpd-php .php</span><br><span class="line"></span><br><span class="line">        php_flag magic_quotes_gpc <span class="constant">Off</span></span><br><span class="line">        php_flag track_vars <span class="constant">On</span></span><br><span class="line">        php_flag register_globals <span class="constant">Off</span></span><br><span class="line">        php_admin_flag allow_url_fopen <span class="constant">Off</span></span><br><span class="line">        php_value include_path .</span><br><span class="line">        php_admin_value upload_tmp_dir /var/<span class="class"><span class="keyword">lib</span>/<span class="title">phpmyadmin</span>/<span class="title">tmp</span></span></span><br><span class="line">        php_admin_value open_basedir /usr/share/phpmyadmin/<span class="symbol">:/etc/phpmyadmin/</span><span class="symbol">:/var/lib/phpmyadmin/</span><span class="symbol">:/usr/share/php/php-gettext/</span><span class="symbol">:/usr/share/javascript/</span></span><br><span class="line">    &lt;<span class="regexp">/IfModule&gt;</span><br><span class="line"></span><br><span class="line">&lt;/</span><span class="constant">Directory</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Authorize for setup</span></span><br><span class="line">&lt;<span class="constant">Directory</span> /usr/share/phpmyadmin/setup&gt;</span><br><span class="line">    &lt;<span class="constant">IfModule</span> mod_authn_file.c&gt;</span><br><span class="line">    <span class="constant">AuthType</span> <span class="constant">Basic</span></span><br><span class="line">    <span class="constant">AuthName</span> <span class="string">"phpMyAdmin Setup"</span></span><br><span class="line">    <span class="constant">AuthUserFile</span> /etc/phpmyadmin/htpasswd.setup</span><br><span class="line">    &lt;<span class="regexp">/IfModule&gt;</span><br><span class="line">    Require valid-user</span><br><span class="line">&lt;/</span><span class="constant">Directory</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Disallow web access to directories that don't need it</span></span><br><span class="line">&lt;<span class="constant">Directory</span> /usr/share/phpmyadmin/libraries&gt;</span><br><span class="line">    <span class="constant">Order</span> <span class="constant">Deny</span>,<span class="constant">Allow</span></span><br><span class="line">    <span class="constant">Deny</span> from <span class="constant">All</span></span><br><span class="line">&lt;<span class="regexp">/Directory&gt;</span><br><span class="line">&lt;Directory /usr</span><span class="regexp">/share/phpmyadmin</span><span class="regexp">/setup/lib</span>&gt;</span><br><span class="line">    <span class="constant">Order</span> <span class="constant">Deny</span>,<span class="constant">Allow</span></span><br><span class="line">    <span class="constant">Deny</span> from <span class="constant">All</span></span><br><span class="line">&lt;<span class="regexp">/Directory&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>看看这个文件的第一行,soga,原来他用的也是<code>Alias</code>命令,接下来我们继续往下走,下面的代码是什么意思呢?下面的代码是用来设置文件目录的权限的,就是<code>&lt;Directory&gt;</code>标签里面的内容.<br>关于这里的设置,我们可以参考<a href="https://httpd.apache.org/docs/2.2/mod/mod_authz_host.html# order" target="_blank" rel="external">apache官网</a>上的描述.简而言之<br><code>Order Deny,Allow</code>其实是Allow优先,举个例子<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword"><span class="common">Order</span></span> Deny,Allow</span><br><span class="line"><span class="keyword"><span class="common">Allow</span></span> from <span class="literal">All</span></span><br><span class="line"><span class="keyword"><span class="common">Deny</span></span> from <span class="literal">All</span></span><br></pre></td></tr></table></figure></p>
<p>由于<code>Deny</code>规则在<code>Allow</code>之前(Order规定的),所以先Deny所有的请求,然后<code>Allow</code>规则在其后,最后的结果就是所有的人都可以随意访问.假设你要对访问进行限制,建议按照下面这样设置<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword"><span class="common">Order</span></span> Deny,Allow</span><br><span class="line"><span class="keyword"><span class="common">Allow</span></span> from 192.168.1.122</span><br><span class="line"><span class="keyword"><span class="common">Deny</span></span> from <span class="literal">All</span></span><br></pre></td></tr></table></figure></p>
<p>也就是指允许ip为<code>192.168.1.122</code>的用户去访问,其他的用户都会被<code>Deny</code></p>
<h1 id="3_最后的结果">3 最后的结果</h1><p>结合上面的分析,给出我最后的结果<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Alias</span> /api /var/www/api</span><br><span class="line"><span class="tag">&lt;Directory /var/www/api&gt;</span></span><br><span class="line"> <span class="keyword"><span class="common">Options</span></span> FollowSymLinks Includes -Indexes</span><br><span class="line"></span><br><span class="line">  <span class="keyword">AllowOverride</span> None</span><br><span class="line">  <span class="keyword"><span class="common">Order</span></span> allow,deny</span><br><span class="line">  <span class="keyword"><span class="common">allow</span></span> from <span class="literal">all</span></span><br><span class="line"><span class="tag">&lt;/Directory&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这里的<code>-Indexes</code>选项的意思是,不要列出目录<br>打完收工</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>好吧,我的博客一不小心又荒废下来了,话不多说,进入正文.<br>]]>
    
    </summary>
    
      <category term="apache" scheme="http://bblove.me/tags/apache/"/>
    
      <category term="ubuntu" scheme="http://bblove.me/tags/ubuntu/"/>
    
      <category term="服务器" scheme="http://bblove.me/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[php中的bool值和类型转换]]></title>
    <link href="http://bblove.me/2015/07/20/php-boolean-value/"/>
    <id>http://bblove.me/2015/07/20/php-boolean-value/</id>
    <published>2015-07-20T06:23:21.000Z</published>
    <updated>2015-10-29T06:08:46.797Z</updated>
    <content type="html"><![CDATA[<p>最近在写php,发现有个问题一直无法避免,那就是关于php的bool值和类型转换.<br>以前每次遇到要校验一个变量<code>$a</code>,是否为空,都是使用<code>$a==&#39;&#39;</code>去判断,感觉不是很懂,反正一直这样用,也没出太多纰漏,而没有理会什么NUll,’’,0之类的其他值.今天决定研究下,把它彻底搞清楚.<br><a id="more"></a></p>
<h1 id="1_php的数据类型">1 php的数据类型</h1><p>php支持原始的8总数据类型.<br>4总标量类型:</p>
<ul>
<li>boolean</li>
<li>integer</li>
<li>float(也称作double类型)</li>
<li>string<br>2种复合类型</li>
<li>array(数组)</li>
<li>object(对象)<br>2种特殊类型</li>
<li>resource(资源)</li>
<li>NULL(无类型)<br>实际上 double 和 float 是相同的，由于一些历史的原因，这两个名称同时存在。<br>变量的类型通常不是由程序员设定的，确切地说，是由PHP根据该变量使用的上下文在运行时决定的。<br>前面几种类型很好理解,现在重点看一下resource类型和NULL类型</li>
</ul>
<ol>
<li><code>resource</code> 是一种特殊变量，保存了到外部资源的一个引用。资源是通过专门的函数来建立和使用的。由于资源类型变量保存有为打开文件、数据库连接、图形画布区域等的特殊句柄，因此将其它类型的值转换为资源没有意义。</li>
<li><code>NULL</code>,特殊的NULL值表示一个变量没有值。NULL类型唯一可能的值就是 NULL。在下列情况下一个变量被认为是NULL：</li>
</ol>
<ul>
<li>被赋值为 NULL。</li>
<li>尚未被赋值。</li>
<li>被 unset()。</li>
</ul>
<h1 id="2_常用的比较函数">2 常用的比较函数</h1><h3 id="empty()">empty()</h3><p>这个函数最近经常见到,它比较有特点.<br>如果 var 是非空或非零的值，则empty()返回<code>FALSE</code>。<br>换句话说，””、0、”0”、NULL、FALSE、array()、var $var以及没有任何属性的对象都将<br>被认为是空的，返回 TRUE。<br>如果变量没有赋值,empty()也不会报错.</p>
<h3 id="is_set()">is_set()</h3><p>这个函数和is_null()刚好相反,如果一个函数的is_null()返回<code>true</code>,那么它的is_set()则必定返回相反值,<code>false</code>.</p>
<h3 id="is_null()">is_null()</h3><p>所有的<code>is_</code>开头的函数,都不会进行类型转换,例如is_bool(‘0’),返回false,因为’0’不是一个布尔类型的值.<br>详细对比看下图<br><img src="http://ww4.sinaimg.cn/large/692869a3gw1euak04nwitj20nf0i2432.jpg" alt="使用 PHP 函数对变量 $x 进行比较"></p>
<p>更多更详细的比较,大家看这里<a href="http://php.net/manual/zh/types.comparisons.php" target="_blank" rel="external">php类型比较表</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在写php,发现有个问题一直无法避免,那就是关于php的bool值和类型转换.<br>以前每次遇到要校验一个变量<code>$a</code>,是否为空,都是使用<code>$a==&#39;&#39;</code>去判断,感觉不是很懂,反正一直这样用,也没出太多纰漏,而没有理会什么NUll,’’,0之类的其他值.今天决定研究下,把它彻底搞清楚.<br>]]>
    
    </summary>
    
      <category term="bool" scheme="http://bblove.me/tags/bool/"/>
    
      <category term="php" scheme="http://bblove.me/tags/php/"/>
    
      <category term="php" scheme="http://bblove.me/categories/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ubuntu 14.04配置thinkphp路由,隐藏index.php]]></title>
    <link href="http://bblove.me/2015/06/29/ubuntu-14-04-setting-about-thinkphp-url-rewrite/"/>
    <id>http://bblove.me/2015/06/29/ubuntu-14-04-setting-about-thinkphp-url-rewrite/</id>
    <published>2015-06-29T12:16:17.000Z</published>
    <updated>2015-10-29T06:08:44.831Z</updated>
    <content type="html"><![CDATA[<p>今天把代码发布到服务器上去,发现服务器的rewrite有问题,无法实现隐藏index.php的功能.<br><a id="more"></a></p>
<h1 id="环境">环境</h1><p>服务器:ubuntu 14.04 lts<br>apache:2.4.7<br>php:5.5.9-<br>mysql:5.5.43</p>
<h1 id="开启rewrite模块">开启rewrite模块</h1><p>在ubuntu中,开启很简单,执行以下bash命令即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo a2enmod rewrite</span><br></pre></td></tr></table></figure></p>
<h1 id="添加-htaccess支持">添加.htaccess支持</h1><p>默认apache会忽视所有的规则重写,即使添加了<code>.htaccess</code>文件,他不认.<br>在ubuntu 14.04中设置,跟其他版本的ubuntu有点不同<br>核心操作还是修改 <code>AllowOverride None</code>为<code>AllowOverride All</code>.<br>问题是这个文件到底在哪儿.<br>在网上找的教程中,有的说是在<code>/etc/apache2/sites-available/000-default.conf</code>中,在我这个版本的apache中,它不在这里.<br>他在<code>/etc/apache2/apache2.conf</code>中.<br>我们打开这个文件,大概在166行.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory /var/www/&gt;</span><br><span class="line">        Options Indexes FollowSymLinks</span><br><span class="line">        AllowOverride All</span><br><span class="line">        Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure></p>
<h1 id="重启apache服务器">重启apache服务器</h1><p>ok,都改完了,就剩一步,重启apache服务器.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure></p>
<p>搞定!<br><img src="http://ww3.sinaimg.cn/large/692869a3gw1etl9v3c6wzj20go09dmx6.jpg" alt="热疯了,空调房都热"></p>
<p><a href="http://www.dev-metal.com/enable-mod_rewrite-ubuntu-14-04-lts/" target="_blank" rel="external"></a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天把代码发布到服务器上去,发现服务器的rewrite有问题,无法实现隐藏index.php的功能.<br>]]>
    
    </summary>
    
      <category term="thinkphp" scheme="http://bblove.me/tags/thinkphp/"/>
    
      <category term="ubuntu" scheme="http://bblove.me/tags/ubuntu/"/>
    
      <category term="Linux" scheme="http://bblove.me/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[digitalocean配置ipv6]]></title>
    <link href="http://bblove.me/2015/06/16/digitalocean-support-google-scholar-by-ipv6/"/>
    <id>http://bblove.me/2015/06/16/digitalocean-support-google-scholar-by-ipv6/</id>
    <published>2015-06-16T14:24:18.000Z</published>
    <updated>2015-10-29T06:08:52.009Z</updated>
    <content type="html"><![CDATA[<p>之前配置了ubuntu的shadowsocks,用来做代理翻墙.不过,google scholar一直无解,因为digitalocean的ipv4的地址都被google scholar墙掉了.今天(其实离现在已经好多天了),看到一篇文章,很受启发,决定使用ipv6来试试.<br><a id="more"></a></p>
<h1 id="前提条件">前提条件</h1><p>首先你得有一台digitalocean的vps,建议选择洛杉矶的服务器,<br>选个5美元的就够了.</p>
<h1 id="1_新建droplet">1 新建droplet</h1><p>如果你以前没有搭建droplet,今天新建的话,比较简单,我们直接启用ipv6支持.<br><img src="http://ww3.sinaimg.cn/large/692869a3gw1etfo3h9svlj211h1tidny.jpg" alt="新建droplet,尤其注意勾选ipv6"><br>注意勾选ipv6,后面的步骤,请参考第3步</p>
<h1 id="2_修改droplet">2 修改droplet</h1><p>我的droplet已经搭建好了,所以只能修改,添加ipv6的支持.<br>你打开droplet的<code>setting</code>,在<code>network</code>中应该可以看到<code>enable ipv6</code><br><img src="http://ww1.sinaimg.cn/large/692869a3gw1etfosgf63kj207w05ujrn.jpg" alt="带有启用ipv6选项的页面"><br>启用后,稍后片刻,页面如下.<br><img src="http://ww4.sinaimg.cn/large/692869a3gw1etfohrljtmj20se0i2tb7.jpg" alt="在droplet的setting中启用ipv6后的页面"></p>
<h1 id="3_设置ipv6">3 设置ipv6</h1><p>当我们启用ipv6支持以后,还需要对服务器进行设置.</p>
<h2 id="第一步_我们把ipv6的地址添加到网卡中">第一步  我们把ipv6的地址添加到网卡中</h2><p>我们编辑<code>/etc/network/interfaces</code>这个文件,使用命令<code>sudo vi /etc/network/interfaces</code><br>修改后内容如下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># This file describes the network interfaces available on your</span></span><br><span class="line"><span class="preprocessor"># system and how to activate them. For more information, see</span></span><br><span class="line"><span class="preprocessor"># interfaces(<span class="number">5</span>).</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># The loopback network interface</span></span><br><span class="line"><span class="keyword">auto</span> lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># The primary network interface</span></span><br><span class="line"><span class="keyword">auto</span> eth0</span><br><span class="line">iface eth0 inet <span class="keyword">static</span></span><br><span class="line">        address 你的ipv4</span><br><span class="line">        netmask <span class="number">255.255</span><span class="number">.192</span><span class="number">.0</span></span><br><span class="line">        gateway 你的ipv4网关</span><br><span class="line">        dns-nameservers <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span> <span class="number">8.8</span><span class="number">.4</span><span class="number">.4</span></span><br><span class="line"><span class="preprocessor"># 以上内容不需要修改,只需要添加下面的部分</span></span><br><span class="line">iface eth0 inet6 <span class="keyword">static</span></span><br><span class="line">    address 上图中的ipv6地址</span><br><span class="line">    netmask <span class="number">64</span></span><br><span class="line">    gateway 网关地址</span><br><span class="line">    autoconf <span class="number">0</span></span><br><span class="line">    dns-nameservers <span class="number">2001</span>:<span class="number">4860</span>:<span class="number">4860</span>::<span class="number">8844</span> <span class="number">2001</span>:<span class="number">4860</span>:<span class="number">4860</span>::<span class="number">8888</span> <span class="number">209.244</span><span class="number">.0</span><span class="number">.3</span></span><br></pre></td></tr></table></figure></p>
<p>修改完成后,我们重启下服务器(因为我的重启网络服务没有效果,所以我重启了),<br>如果你看到如下图片,就表示你的ipv6配置好了,我们后面来测试一下<br><img src="http://ww2.sinaimg.cn/large/692869a3gw1etfp7pj65dj20hs04fzlv.jpg" alt="ipv6成功启用后"></p>
<h2 id="第二步_测试ipv6_是否配置成功">第二步 测试ipv6 是否配置成功</h2><p>我们使用ping命令来测试,ping是测试ipv4的,测试ipv6是用ping6,命令如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ping6 ipv6.google.com</span><br><span class="line"></span><br><span class="line">PING ipv6.google.com(nuq04s29-in-x0e.<span class="number">1</span>e100.net) <span class="number">56</span> data bytes</span><br><span class="line"><span class="number">64</span> bytes from nuq04s29-in-x0e.<span class="number">1</span>e100.net: icmp_seq=<span class="number">1</span> ttl=<span class="number">57</span> time=<span class="number">2.23</span> ms</span><br><span class="line"><span class="number">64</span> bytes from nuq04s29-in-x0e.<span class="number">1</span>e100.net: icmp_seq=<span class="number">2</span> ttl=<span class="number">57</span> time=<span class="number">1.97</span> ms</span><br><span class="line"><span class="number">64</span> bytes from nuq04s29-in-x0e.<span class="number">1</span>e100.net: icmp_seq=<span class="number">3</span> ttl=<span class="number">57</span> time=<span class="number">1.95</span> ms</span><br><span class="line"><span class="number">64</span> bytes from nuq04s29-in-x0e.<span class="number">1</span>e100.net: icmp_seq=<span class="number">4</span> ttl=<span class="number">57</span> time=<span class="number">2.14</span> ms</span><br><span class="line"><span class="number">64</span> bytes from nuq04s29-in-x0e.<span class="number">1</span>e100.net: icmp_seq=<span class="number">5</span> ttl=<span class="number">57</span> time=<span class="number">1.93</span> ms</span><br></pre></td></tr></table></figure></p>
<p>如果发包成功,那就可以进行下一步了</p>
<h1 id="4_修改hosts">4 修改hosts</h1><p>因为ipv4无法访问google scholar,所以我们配置下hosts,让所有对访问google学术的,都使用ipv6去访问.执行命令如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/hosts</span><br></pre></td></tr></table></figure></p>
<p>我们在hosts文件的后面,添加如下内容:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2607<span class="pseudo">:f8b0</span><span class="pseudo">:4007</span><span class="pseudo">:805</span><span class="pseudo">::100f</span> <span class="tag">scholar</span><span class="class">.google</span><span class="class">.cn</span></span><br><span class="line">2607<span class="pseudo">:f8b0</span><span class="pseudo">:4007</span><span class="pseudo">:805</span><span class="pseudo">::100f</span> <span class="tag">scholar</span><span class="class">.google</span><span class="class">.com</span></span><br><span class="line">2607<span class="pseudo">:f8b0</span><span class="pseudo">:4007</span><span class="pseudo">:805</span><span class="pseudo">::100f</span> <span class="tag">scholar</span><span class="class">.google</span><span class="class">.com</span><span class="class">.hk</span></span><br><span class="line">2607<span class="pseudo">:f8b0</span><span class="pseudo">:4007</span><span class="pseudo">:805</span><span class="pseudo">::100f</span> <span class="tag">scholar</span><span class="class">.l</span><span class="class">.google</span><span class="class">.com</span></span><br></pre></td></tr></table></figure></p>
<p>ok,打完收工,睡觉</p>
<h1 id="参考文献">参考文献</h1><p>1 <a href="https://www.v2ex.com/t/163133" target="_blank" rel="external">一个解决 Google Scholar block DigitalOcean SFO IP 的方法</a><br>2 <a href="https://www.digitalocean.com/community/tutorials/how-to-enable-ipv6-for-digitalocean-droplets" target="_blank" rel="external">How To Enable IPv6 for DigitalOcean Droplets</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前配置了ubuntu的shadowsocks,用来做代理翻墙.不过,google scholar一直无解,因为digitalocean的ipv4的地址都被google scholar墙掉了.今天(其实离现在已经好多天了),看到一篇文章,很受启发,决定使用ipv6来试试.<br>]]>
    
    </summary>
    
      <category term="digitalocean" scheme="http://bblove.me/tags/digitalocean/"/>
    
      <category term="ipv6" scheme="http://bblove.me/tags/ipv6/"/>
    
      <category term="shadowsocks" scheme="http://bblove.me/tags/shadowsocks/"/>
    
      <category term="ubuntu" scheme="http://bblove.me/tags/ubuntu/"/>
    
      <category term="Linux" scheme="http://bblove.me/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[安装和配置hexo 3.0]]></title>
    <link href="http://bblove.me/2015/06/16/hexo-3-0-update/"/>
    <id>http://bblove.me/2015/06/16/hexo-3-0-update/</id>
    <published>2015-06-16T14:22:43.000Z</published>
    <updated>2015-10-29T06:08:50.371Z</updated>
    <content type="html"><![CDATA[<p>update：2015-06-24 16:56<br>额，谁会相信，其实这篇文章是拖了一周之后才写的。</p>
<p>因为最近换回了win7，所以之前搭建的hexo环境都没了，需要重新搭建。在网上看到hexo 3.0 还可以，而且，我妹子也换3.0了，so  我也换成hexo 3.0的。<br><a id="more"></a></p>
<h1 id="安装环境">安装环境</h1><p><strong>操作系统</strong>：win7<br><strong>相关版本</strong>：<br>            hexo-cli: 0.1.7<br>            os: Windows_NT 6.1.7601 win32 x64<br>            node: 0.12.4</p>
<h1 id="安装过程">安装过程</h1><h1 id="#_1-_安装Github_for_windows"># 1. 安装Github for windows</h1><p>因为我之前就在用Github,所以早就安装了这个.已经装过的同学请忽略这一段.<br>下载 <a href="https://windows.github.com/" title="Github for windows" target="_blank" rel="external">Github for windows</a> 并执行即可完成安装(<em>在线安装,会有点慢</em>)。这个软件的的好处是有一个带GUI的界面,还有一个终端界面.如图所示<br><img src="http://ww2.sinaimg.cn/large/692869a3jw1emplp1lz31j204w033mx0.jpg" alt="Github for windows"><br><img src="http://ww2.sinaimg.cn/large/692869a3gw1empluh6hvej210b0j741r.jpg" alt="GUI and Bash"></p>
<h1 id="#_2-_安装Node-js"># 2. 安装Node.js</h1><p>在 Windows 环境下安装 <a href="http://nodejs.org/" title="Node.js 官网" target="_blank" rel="external">Node.js</a> 非常简单，仅须下载安装文件并执行即可完成安装。（win下建议下载msi格式的，因为这样可以不用配置环境变量之类的）</p>
<h1 id="#_3-_测试node-js是否安装"># 3. 测试node.js是否安装</h1><p>在任何控制台输入(可以按windows键+R,输入cmd,然后输入npm,一般来说不会有问题)<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span></span><br></pre></td></tr></table></figure></p>
<p>返回值如下<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Usage</span>: <span class="string">npm &lt;command&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="stata">where &lt;command&gt; is <span class="keyword">one</span> of:</span><br><span class="line">    add-user, adduser, apihelp, author, bin, bugs, c, cache,</span><br><span class="line">    completion, config, ddp, dedupe, deprecate, docs, <span class="keyword">edit</span>,</span><br><span class="line">    explore, faq, find, find-dupes, get, <span class="keyword">help</span>, <span class="keyword">help</span>-<span class="keyword">search</span>,</span><br><span class="line">    home, i, info, init, install, isntall, issues, <span class="keyword">la</span>, link,</span><br><span class="line">    <span class="keyword">list</span>, ll, ln, login, <span class="keyword">ls</span>, outdated, owner, pack, prefix,</span><br><span class="line">    prune, publish, r, rb, rebuild, remove, repo, restart, <span class="keyword">rm</span>,</span><br><span class="line">    root, <span class="keyword">run</span>-script, s, <span class="keyword">se</span>, <span class="keyword">search</span>, <span class="keyword">set</span>, show, shrinkwrap,</span><br><span class="line">    star, stars, start, stop, submodule, t, tag, <span class="keyword">test</span>, tst, un,</span><br><span class="line">    uninstall, unlink, unpublish, unstar, up, <span class="keyword">update</span>, v,</span><br><span class="line">    <span class="keyword">version</span>, <span class="keyword">view</span>, whoami</span><br><span class="line"></span><br><span class="line">npm &lt;cmd&gt; -<span class="keyword">h</span>     quick <span class="keyword">help</span> <span class="keyword">on</span> &lt;cmd&gt;</span><br><span class="line">npm -<span class="keyword">l</span>           <span class="keyword">display</span> full usage info</span><br><span class="line">npm faq          commonly asked questions</span><br><span class="line">npm <span class="keyword">help</span> &lt;term&gt;  <span class="keyword">search</span> <span class="keyword">for</span> <span class="keyword">help</span> <span class="keyword">on</span> &lt;term&gt;</span><br><span class="line">npm <span class="keyword">help</span> npm     involved overview</span><br><span class="line"></span><br><span class="line">Specify configs <span class="keyword">in</span> the ini-formatted <span class="keyword">file</span>:</span><br><span class="line">    C:\Users\chenhao\.npmrc</span><br><span class="line">or <span class="keyword">on</span> the command <span class="keyword">line</span> via: npm &lt;command&gt; --key value</span><br><span class="line">Config info can be viewed via: npm <span class="keyword">help</span> config</span><br><span class="line"></span><br><span class="line">npm@1.4.28 <span class="keyword">D</span>:\<span class="keyword">Program</span> Files (x86)\nodejs\node_modules\npm</span></span><br></pre></td></tr></table></figure></p>
<p>看到这个结果,就表示你的node.js已经安装上去了<br><em>感谢我们家笨笨的反馈：</em>此处如果npm无效，首先确定win下你采用的是msi格式的安装文件，然后<strong>重启</strong>下电脑，应该就正常了。</p>
<h1 id="#_4-_安装hexo"># 4. 安装hexo</h1><p>接下来的操作我都是用<strong>Github for windows</strong>自带的Bash来完成的,因为后面会涉及到SSH,用<strong>Github for windows</strong>,就可以避免这个问题.</p>
<ul>
<li><p>在Bash中输入以下命令</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> hexo-cli -<span class="keyword">g</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建hexo文件夹<br>创建你hexo放置的文件夹,先用Bash进入到目标文件夹,比如我的是F:/blog/,接下来初始化hexo,自动生成相关的文件,在F:/blog/环境下,输入</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">cd</span> /f/<span class="keyword">blog </span> # 这个命令表示当前进入目录为f：/<span class="keyword">blog/</span><br><span class="line"></span><span class="label">hexo</span> init</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装依赖包</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>本地预览,做完以上操作,可以本地预览一下</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">g</span></span><br><span class="line">hexo <span class="literal">s</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>以上两条命令的意思是:<br>生成相关文件(就是生成目标html,静态博客嘛,就是很多html组成)<br>打开本地服务器预览(node.js就是干这事的,点击访问<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a>,就可以看到了)<br><strong>update-2015-09-29:</strong>在3.0版本中将<code>hexo server</code>(简写命令就是<code>hexo s</code>),独立成模块,需要手动安装,不然你执行<code>hexo s</code>,就会出现无法识别这个命令<br>安装方法和后面配置模块一样<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-server --save</span><br></pre></td></tr></table></figure></p>
<h2 id="ok,到这里,博客搭建基本完成,现在要做的就是把它发布到你的Github上去"><strong>ok</strong>,到这里,博客搭建基本完成,现在要做的就是把它发布到你的Github上去</h2><p>接下来,教你怎么发布到Github上去</p>
<h1 id="注册Github">注册Github</h1><p>这一步没什么说的,如果你连简单的注册都不会,我也不会教你╮(╯▽╰)╭</p>
<h1 id="创建公共库">创建公共库</h1><p>在自己Github主页右下角，创建一个新的repository(<a href="https://github.com/new" title="点我新建" target="_blank" rel="external">点这里</a>)。比如我的Github账号是Jackroyal，那么我应该创建的repository名字应该是Jackroyal.github.io(注意你的repository名字就是Jackroyal.github.io,我之前用的是Jackroyal怎么尝试都不行)。</p>
<blockquote>
<p>PS:有个大小写的问题其实我注册的是Jackroyal,大写的J,但是我访问的时候特别是带https的链接,他会自动转为小写访问.怎么说呢?简单点,你就按照你的用户名来,该大写大写,该小写小写</p>
</blockquote>
<h1 id="部署">部署</h1><p>现在万事俱备,只差部署了.<br>hexo3.0,跟2.0不同,deploy插件我们需要手动去安装,执行如下命令:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure></p>
<p>接下来,我们来配置deploy的信息,修改<code>_config.yml</code>.<br>这个文件在路径是F:/blog/_config.yml.<br>用编辑器把它打开,修改最后一段<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//github.com/Jackroyal/Jackroyal.github.io.git</span></span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure></p>
<p>照着我的这个格式修改就好了,把我里面的用户名替换成你的.<br>至此基本完成所有搭建步骤.</p>
<h1 id="上传">上传</h1><p>我们开始上传项目的代码,再重复一次,我一直以来用的工具都是<em>Github for windows</em>自带的Bash,所以我没有配置SSH,如果你用的windows自带的终端或者其他比如msysgit,可能需要配置SSH,不然无法使用Github(点击<a href="https://help.github.com/articles/generating-ssh-keys/" title="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="external"><code>这里</code></a>查看官方教程).<br>我们输入以下命令<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">g</span></span><br><span class="line">hexo <span class="literal">d</span></span><br></pre></td></tr></table></figure></p>
<p>或者偷个懒<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">d</span> -<span class="keyword">g</span></span><br></pre></td></tr></table></figure></p>
<p>ok,现在就可以去看看你的个人主页了,逼格满满有木有.<br>如果发布不成功,继续往下面看.</p>
<h1 id="配置hexo">配置hexo</h1><p>上面的内容和之前一样,接下来写,配置hexo 3.0的步骤.</p>
<h2 id="1_安装rss支持">1 安装rss支持</h2><p>执行如下命令:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> hexo-generator-feed <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure></p>
<p>我们接下来修改配置文件,编辑<code>_config.yml</code><br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">feed</span>:</span><br><span class="line">  <span class="attribute">type</span>: atom</span><br><span class="line">  <span class="attribute">path</span>: atom.xml</span><br><span class="line">  <span class="attribute">limit</span>: <span class="number">20</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2_安装sitemap支持">2 安装sitemap支持</h2><p>执行如下命令:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> hexo-generator-sitemap <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure></p>
<p>我们接下来修改配置文件,编辑<code>_config.yml</code><br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sitemap</span>:</span><br><span class="line">    <span class="attribute">path</span>: sitemap.xml</span><br></pre></td></tr></table></figure></p>
<p><strong>PS:类似的,还可以安装其他的插件,尤其注意<code>hexo-deployer-git</code>这个插件,如果你发布不成功,可能是这个插件没有装</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> hexo-generator-<span class="keyword">index</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">archive</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">category</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-tag <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="3_最终修改后的配置文件">3 最终修改后的配置文件</h2><p>我把我的配置文件分享出来给大家参考下:<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># Hexo Configuration</span></span><br><span class="line"><span class="preprocessor"># # Docs: http://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="preprocessor"># # Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Site</span></span><br><span class="line"><span class="label">title:</span> 搁浅<span class="keyword">St</span>的blog</span><br><span class="line"><span class="label">subtitle:</span> 我最喜欢笨笨</span><br><span class="line"><span class="label">description:</span> jackroyal 博客 搁浅<span class="keyword">St</span> 笨笨</span><br><span class="line"><span class="label">author:</span> 搁浅<span class="keyword">St</span></span><br><span class="line"><span class="label">author:</span> John Doe</span><br><span class="line"><span class="label">language:</span> <span class="built_in">zh</span>-CN</span><br><span class="line"><span class="label">timezone:</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># URL</span></span><br><span class="line"><span class="preprocessor"># # If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="label">url:</span> http://jackroyal.github.io</span><br><span class="line"><span class="label">root:</span> /</span><br><span class="line"><span class="label">permalink:</span> :year/:month/:day/:title/</span><br><span class="line"><span class="label">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Directory</span></span><br><span class="line"><span class="label">source_dir:</span> source</span><br><span class="line"><span class="label">public_dir:</span> public</span><br><span class="line"><span class="label">tag_dir:</span> tags</span><br><span class="line"><span class="label">archive_dir:</span> archives</span><br><span class="line"><span class="label">category_dir:</span> categories</span><br><span class="line"><span class="label">code_dir:</span> downloads/code</span><br><span class="line"><span class="label">i18n_dir:</span> :lang</span><br><span class="line"><span class="label">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Writing</span></span><br><span class="line"><span class="label">new_post_name:</span> :title.md <span class="preprocessor"># File name of new posts</span></span><br><span class="line"><span class="label">default_layout:</span> post</span><br><span class="line"><span class="label">titlecase:</span> false <span class="preprocessor"># Transform title into titlecase</span></span><br><span class="line"><span class="label">external_link:</span> true <span class="preprocessor"># Open external links in new tab</span></span><br><span class="line"><span class="label">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="label">render_drafts:</span> false</span><br><span class="line"><span class="label">post_asset_folder:</span> false</span><br><span class="line"><span class="label">relative_link:</span> false</span><br><span class="line"><span class="label">future:</span> true</span><br><span class="line"><span class="label">highlight:</span></span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: true</span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Category &amp; Tag</span></span><br><span class="line"><span class="label">default_category:</span> uncategorized</span><br><span class="line"><span class="label">category_map:</span></span><br><span class="line"><span class="label">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Date / Time format</span></span><br><span class="line"><span class="preprocessor"># # Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="preprocessor"># # You can customize the date format as defined in</span></span><br><span class="line"><span class="preprocessor"># # http://momentjs.com/docs/# /displaying/format/</span></span><br><span class="line"><span class="label">date_format:</span> YYYY-MM-DD</span><br><span class="line"><span class="label">time_format:</span> HH:mm:ss</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Pagination</span></span><br><span class="line"><span class="preprocessor"># # Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="label">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="label">pagination_dir:</span> page</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Extensions</span></span><br><span class="line"><span class="preprocessor"># # Plugins: http://hexo.io/plugins/</span></span><br><span class="line"></span><br><span class="line"><span class="label">index_generator:</span></span><br><span class="line">  per_page: <span class="number">10</span> <span class="preprocessor">## 首页默认10篇文章标题 如果值为0不分页</span></span><br><span class="line"></span><br><span class="line"><span class="label">archive_generator:</span></span><br><span class="line">    per_page: <span class="number">10</span> <span class="preprocessor">## 归档页面默认10篇文章标题</span></span><br><span class="line">    yearly: true  <span class="preprocessor">## 生成年视图</span></span><br><span class="line">    monthly: true <span class="preprocessor">## 生成月视图</span></span><br><span class="line"></span><br><span class="line"><span class="label">tag_generator:</span></span><br><span class="line">    per_page: <span class="number">10</span> <span class="preprocessor">## 标签分类页面默认10篇文章</span></span><br><span class="line"></span><br><span class="line"><span class="label">category_generator:</span></span><br><span class="line">    per_page: <span class="number">10</span> <span class="preprocessor">### 分类页面默认10篇文章</span></span><br><span class="line"></span><br><span class="line"><span class="label">sitemap:</span></span><br><span class="line">    path: sitemap.xml</span><br><span class="line"></span><br><span class="line"><span class="label">feed:</span></span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="label">duoshuo_shortname:</span> jackroyal  <span class="preprocessor">## 这里填写你的多说的短网址</span></span><br><span class="line"><span class="preprocessor"># # Themes: http://hexo.io/themes/</span></span><br><span class="line"><span class="label">theme:</span> light   <span class="preprocessor">## 主题的名称,我用的是light,默认的是landscape</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># Deployment</span></span><br><span class="line"><span class="preprocessor"># # Docs: http://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="label">deploy:</span></span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/Jackroyal/Jackroyal.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p>
<p>hexo 3.0有一些新的特性,插件的封装更好了,插件安装和管理很方便.<br>hexo还支持多发布,可以同时发布到github和gitcafe.</p>
<h1 id="参考文献">参考文献</h1><p>1 <a href="https://hexo.io/zh-cn/docs/server.html" target="_blank" rel="external">hexo 服务器</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>update：2015-06-24 16:56<br>额，谁会相信，其实这篇文章是拖了一周之后才写的。</p>
<p>因为最近换回了win7，所以之前搭建的hexo环境都没了，需要重新搭建。在网上看到hexo 3.0 还可以，而且，我妹子也换3.0了，so  我也换成hexo 3.0的。<br>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://bblove.me/tags/hexo/"/>
    
      <category term="hexo" scheme="http://bblove.me/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[给hexo配置上评论和访问量]]></title>
    <link href="http://bblove.me/2015/05/30/hexo-setting-with-comments-and-visitors/"/>
    <id>http://bblove.me/2015/05/30/hexo-setting-with-comments-and-visitors/</id>
    <published>2015-05-30T06:08:49.000Z</published>
    <updated>2015-10-29T06:08:49.539Z</updated>
    <content type="html"><![CDATA[<p>哈哈,我们家笨笨,绝对是我学习技术的很大很大很大大的动力.更开始用github pages的时候,就觉得没法看访问量和评论数量这事,很蛋疼,不过也没折腾.<br>今天上午,我们家笨笨说没有评论和访问量不好,都不知道多少人看了.妹子都发话了,果断要搞定.<br><a id="more"></a><br>google一番找到解决方法:</p>
<h4 id="1_关于评论数量的显示,我们可以直接使用多说官网提供的方法,很简单">1 关于评论数量的显示,我们可以直接使用多说官网提供的方法,很简单</h4><h4 id="2_关于访问量统计这事儿,不太好搞,我找到了这个不蒜子,这位非著名码农自己做的访问统计,哈哈,点个赞">2 关于访问量统计这事儿,不太好搞,我找到了这个<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="external">不蒜子</a>,这位非著名码农自己做的访问统计,哈哈,点个赞</h4><h4 id="3_今天还看到了font-awesome,可以显示一些小图标,为了显示效果更好,一并加上去">3 今天还看到了font-awesome,可以显示一些小图标,为了显示效果更好,一并加上去</h4><p>先展示一下最终的效果:<br><br><img src="http://ww1.sinaimg.cn/large/692869a3gw1esm9snxfcuj20su0ad74x.jpg" alt="页底关于整站访问量的显示"><br><img src="http://ww4.sinaimg.cn/large/692869a3gw1esm9tcczdij20r00doq4t.jpg" alt="文章页面关于访问量和评论数量的显示"></p>
<p>下面,开始动手</p>
<h1 id="1_配置评论数量的显示">1 配置评论数量的显示</h1><p>首先,确认你的评论系统用的是多说,如果不是,那就不用继续往下看了(参考<a href="http://localhost:4000/2014/11/28/custom-hexo/" target="_blank" rel="external">这里</a>配置多说).<br>我使用的主题是<code>light</code>,其他主题原理类似.我们打开<code>themes/light/layout/_partial/article.ejs</code>,我们在<code>header</code>标签的尾部添加上下面的代码:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">%</span> <span class="attribute">if</span> (<span class="attribute">item.excerpt</span> &amp;&amp; <span class="attribute">index</span>)&#123; %&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="title">%</span> &#125; <span class="attribute">else</span> &#123; %&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"busuanzi_container_page_pv"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"head-plus"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"fa fa-user"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span><span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"busuanzi_value_page_pv"</span>&gt;</span><span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"fa fa-spinner fa-spin"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>次访问</span><br><span class="line">   <span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"head-plus"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"fa fa-comments"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"ds-thread-count"</span> <span class="attribute">data-thread-key</span>=<span class="value">"&lt;%= page.layout %&gt;-&lt;%= page.slug %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"fa fa-spinner fa-spin"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>条评论</span><br><span class="line">   <span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="title">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>最终效果如图<br><br><img src="http://ww2.sinaimg.cn/large/692869a3gw1esmas5d58oj20x50jc46f.jpg" alt="修改后的article.ejs"><br>以上代码,是最终成型的代码,我加入了一些美化的东西,最核心的就是<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"ds-thread-count"</span> <span class="attribute">data-thread-key</span>=<span class="value">"&lt;%= page.layout %&gt;-&lt;%= page.slug %&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>尤其注意<code>data-thread-key</code>的设置,他和你之前配置多说的时候是一致的,每篇文章有一个独一无二的key,你可以去你的<code>themes/light/layout/_partial/comment.ejs</code>里找到关于data-thread-key的内容,直接复制过来即可.</p>
<p>Ps:这里我们可能还需要配置下数据显示的格式,在你的多说后台管理里面,进入设置界面如图<br><img src="http://ww3.sinaimg.cn/large/692869a3gw1esmayan2utj20w50mx0ya.jpg" alt="多说后台设置"><br>我们找到<code>暂无评论</code>,<code>1条评论</code>,<code>{num}条评论</code>,这几个设置,修改成自己要的格式,也可以参照我的修改,<code>0</code>,<code>1</code>,<code>{num}</code></p>
<h1 id="2_配置文章访问量的显示">2 配置文章访问量的显示</h1><p>这个更简单了,按照作者的说法,只需要引入一个js,再添加一个span就完成了.由于js一般放置在页面的最底部,所以我们找到<code>themes/light/layout/_partial/after_footer.ejs</code>,我们在最后添加上下面的代码:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>上面就完成了js文件的引入,我们再在要显示访问量的地方添加一个span就行了.比如我想显示在标题的下面,那就打开<code>themes/light/layout/_partial/article.ejs</code>,添加的代码,就是<code>第一步</code>里面添加的那个.如果你想简洁一点,也可以只添加下面核心代码就行:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">本站总访问量<span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"busuanzi_value_site_pv"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>次</span><br><span class="line">本站访客数<span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>人次</span><br><span class="line">本文总阅读量<span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"busuanzi_value_page_pv"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>次</span><br></pre></td></tr></table></figure></p>
<h1 id="3_经过美化后最终的代码">3  经过美化后最终的代码</h1><p>如果只用官方提供的代码,没有优化,很丑,我优化了下,分享一下.</p>
<p>1.修改<code>themes/light/layout/_partial/article.ejs</code>,在header标签的末尾添加以下代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">%</span> <span class="attribute">if</span> (<span class="attribute">item.excerpt</span> &amp;&amp; <span class="attribute">index</span>)&#123; %&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="title">%</span> &#125; <span class="attribute">else</span> &#123; %&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"busuanzi_container_page_pv"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"head-plus"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"fa fa-user"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span><span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"busuanzi_value_page_pv"</span>&gt;</span><span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"fa fa-spinner fa-spin"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>次访问</span><br><span class="line">   <span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"head-plus"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"fa fa-comments"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"ds-thread-count"</span> <span class="attribute">data-thread-key</span>=<span class="value">"&lt;%= page.layout %&gt;-&lt;%= page.slug %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"fa fa-spinner fa-spin"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>条评论</span><br><span class="line">   <span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="title">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://ww2.sinaimg.cn/large/692869a3gw1esmas5d58oj20x50jc46f.jpg" alt="修改后的article.ejs"><br>2.修改<code>themes/light/layout/_partial/footer.ejs</code>,下面是footer.ejs的<strong>全部代码</strong>:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"alignleft"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">%</span> <span class="attribute">if</span> (<span class="attribute">config.author</span>)&#123; %&gt;</span></span><br><span class="line">  &amp;copy; <span class="tag">&lt;<span class="title">%=</span> <span class="attribute">new</span> <span class="attribute">Date</span>()<span class="attribute">.getFullYear</span>() %&gt;</span> <span class="tag">&lt;<span class="title">%=</span> <span class="attribute">config.author</span> %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">%</span> &#125; <span class="attribute">else</span> &#123; %&gt;</span></span><br><span class="line">  &amp;copy; <span class="tag">&lt;<span class="title">%=</span> <span class="attribute">new</span> <span class="attribute">Date</span>()<span class="attribute">.getFullYear</span>() %&gt;</span> <span class="tag">&lt;<span class="title">%=</span> <span class="attribute">config.title</span> %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">%</span> &#125; %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"busuanzi_container_site_pv"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"fa fa-flag"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span>    你是第<span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"busuanzi_value_site_pv"</span>&gt;</span><span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"fa fa-spinner fa-spin"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>个到访的小伙伴</span><br><span class="line"><span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"clearfix"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><br>3.修改<code>themes/light/layout/_partial/after_footer.ejs</code>,我们在<strong>最后</strong>添加上下面的代码:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>4.修改<code>themes\light\source\css\_partial\article.styl</code>,我们在第124行,在<code>.entry</code>之前添加上以下代码,尤其注意与左右的间距,因为它是一个树形结构,它与左侧的距离,影响着它的层级.我们这里应该和entry平级,下面代码应该与<code>.entry</code>对齐<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.busuanzi_container_page_pv</span><br><span class="line">    margin:<span class="number">20</span>px <span class="number">0</span></span><br><span class="line">    color: <span class="preprocessor"># <span class="number">817</span>C7C</span></span><br><span class="line">    font-size: <span class="number">12</span>px</span><br><span class="line"><span class="preprocessor"># busuanzi_value_page_pv</span></span><br><span class="line">    padding-left:<span class="number">4</span>px</span><br><span class="line">.head-plus</span><br><span class="line">    padding-left:<span class="number">4</span>px</span><br><span class="line">.ds-thread-count</span><br><span class="line">    padding-left:<span class="number">4</span>px</span><br></pre></td></tr></table></figure></p>
<p>最终效果如图:<br><img src="http://ww4.sinaimg.cn/large/692869a3gw1esmajbsx38j20k30gwadu.jpg" alt="添加css,注意左对齐"><br>5.修改<code>themes\light\source\css\_partial\footer.styl</code>,在最后添加上以下代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># busuanzi_value_site_pv</span></span><br><span class="line">  color:black</span><br><span class="line">  padding:<span class="number">4</span>px</span><br><span class="line"><span class="preprocessor"># busuanzi_container_site_pv</span></span><br><span class="line">  padding-left:<span class="number">2</span>em</span><br></pre></td></tr></table></figure></p>
<p>6.修改<code>themes\light\source\css\_partial\variable.styl</code>,在最后添加以下代码<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="at_rule">@import</span> <span class="function"><span class="title">url</span><span class="params">(<span class="string">"http://libs.useso.com/js/font-awesome/4.2.0/css/font-awesome.min.css"</span>)</span></span></span><br></pre></td></tr></table></figure></p>
<p>ok  打完收工</p>
<h1 id="参考文献">参考文献</h1><p>1 博客访问技术工具–不蒜子 <a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="external">http://ibruce.info/2015/04/04/busuanzi/</a><br>2 <a href="http://dev.duoshuo.com/docs/5016427f77cf5fa30500000e" target="_blank" rel="external">多说-代码显示【文章评论数】方法</a></p>
<h1 id="致谢">致谢</h1><p>这里，要感谢我最亲爱的笨笨<a href="http://huirong.github.io" target="_blank" rel="external">http://huirong.github.io</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>哈哈,我们家笨笨,绝对是我学习技术的很大很大很大大的动力.更开始用github pages的时候,就觉得没法看访问量和评论数量这事,很蛋疼,不过也没折腾.<br>今天上午,我们家笨笨说没有评论和访问量不好,都不知道多少人看了.妹子都发话了,果断要搞定.<br>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://bblove.me/tags/hexo/"/>
    
      <category term="hexo" scheme="http://bblove.me/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于python的requests库，模拟登录csdn博客]]></title>
    <link href="http://bblove.me/2015/05/23/python-requests-login-csdn-blog/"/>
    <id>http://bblove.me/2015/05/23/python-requests-login-csdn-blog/</id>
    <published>2015-05-23T11:06:04.000Z</published>
    <updated>2015-10-29T06:08:45.707Z</updated>
    <content type="html"><![CDATA[<p>还是继续我的python学习。以前写的爬虫用的urllib2来实现，也用过scrapy的爬虫框架，这次试试requests，刚开始用，用起来确实比urllib2好，封装的更好一些，使用起来简单方便很多。<br><a id="more"></a></p>
<h1 id="安装requests库">安装requests库</h1><p>在ubuntu下面安装很简单<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure></p>
<p>就搞定了</p>
<h1 id="快速上手的小例子">快速上手的小例子</h1><p>下面给个快速入门，最简单的例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line"><span class="keyword">print</span> r.text</span><br></pre></td></tr></table></figure></p>
<p>这段代码，很简单。<br>第一行，引入requests库，这是必然的。<br>第二行，通过get方式获取baidu首页的内容。<br>第三行，把返回的response内容，输出出来</p>
<p>果然很简单，这样就可以发送一个get请求，同理，你还可以使用<br><code>requests.post</code>,<code>requests.put</code>,<code>requests.options</code>,<code>requests.head</code>，发送请求，没错就是这么简单，果然比urllib2好用。</p>
<h1 id="模拟登录csdn">模拟登录csdn</h1><p>我们需要其他的辅助工具</p>
<h3 id="浏览器：Firefox">浏览器：Firefox</h3><h3 id="浏览器插件：tamper_data，firebug">浏览器插件：tamper data，firebug</h3><p>我们需要tamper data来拦截请求，因为chrome没有这个功能的插件，所以这个只能使用firefox来做（除了拦截请求chrome没有，其他的工作都可以用chrome，看个人喜好吧）。</p>
<h1 id="分析登录过程">分析登录过程</h1><h2 id="1_打开登录页面">1 打开登录页面</h2><p>我们首先打开csdn的登录页面<code>https://passport.csdn.net/account/login?ref=toolbar</code><br>这个链接，前面部分是登录的网址，问号后面的参数，顾名思义，referer，就是你从哪里跳过来的，也许是一个页面跳转到登录的，toolbar就是我自己点击顶部导航栏，然后跳转到登录页面的。</p>
<h2 id="2_清除相关的cookie">2 清除相关的cookie</h2><p>为了排除不必要的干扰，我们先清除掉所有的相关的cookie，这样方便我们分析哪些参数是必须的。<br><img src="http://ww1.sinaimg.cn/large/692869a3gw1esegc1itw2j20qu075779.jpg" alt="firefox中，清除cookie"></p>
<h2 id="3_登录过程分析">3 登录过程分析</h2><p>清除了cookie后，我们刷新一下页面<code>https://passport.csdn.net/account/login?ref=toolbar</code>，重新获取对应的cookie。<br>然后我们就开始用tamper data来拦截请求。<br><img src="http://ww2.sinaimg.cn/large/692869a3gw1esegfztiz7j20s40ftdjw.jpg" alt="使用tamper data"><br>我们点击<code>start tamper</code>，在网页中填写用户名和密码。点击<code>登录</code>，会发出一个请求，然后tamper data会拦截下这个请求，询问我们是否拦截，点击tamper，我们可以在这个请求提交之前，查看请求的内容，还可以做删改。<br><img src="http://ww1.sinaimg.cn/large/692869a3gw1esegkslypyj20y20gntdt.jpg" alt="发出第一个登录请求前拦截下来，查看表单内容"><br>csdn的登录过程比较简单，发送一个登录表单过去，就登录成功了，不过记得修改headers，这是后话。</p>
<h2 id="4_开始模拟登录">4 开始模拟登录</h2><p>知道登录过程了，我们就开始写登录的代码。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 使用beautifulsoup来处理获取的html内容，这个库需要安装，还是使用pip install beautifulsoup4来安装</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"><span class="comment"># 这个函数使用来提取流水号的</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">toJson</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="string">'''</span><br><span class="line">    提取lt流水号，将数据化为一个字典</span><br><span class="line">    '''</span></span><br><span class="line">    soup = bs(str)</span><br><span class="line">    tt = &#123;&#125;</span><br><span class="line">    <span class="comment"># 提取form表单中所有的input标签，以字典的形式来保存name：value</span></span><br><span class="line">    <span class="keyword">for</span> inp <span class="keyword">in</span> soup.form.find_all(<span class="string">'input'</span>):</span><br><span class="line">        <span class="keyword">if</span> inp.get(<span class="string">'name'</span>) != <span class="keyword">None</span>:</span><br><span class="line">            tt[inp.get(<span class="string">'name'</span>)] =inp.get(<span class="string">'value'</span>)</span><br><span class="line">    <span class="keyword">return</span> tt</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 这行代码，是用来维持cookie的，你后续的操作都不用担心cookie，他会自动带上相应的cookie</span></span><br><span class="line">s = requests.Session()</span><br><span class="line"><span class="comment"># 我们需要带表单的参数,这里面有个参数lt,登录操作的流水号，我们需要从html页面中进行提取</span></span><br><span class="line">payload =&#123;<span class="string">'username'</span>:<span class="string">'jackroyal'</span>,<span class="string">'password'</span>:<span class="string">'123456'</span>,<span class="string">'lt'</span>:soup[<span class="string">"lt"</span>],<span class="string">'execution'</span>:<span class="string">'e1s1'</span>,<span class="string">'_eventId'</span>:<span class="string">'submit'</span>&#125;</span><br><span class="line">r = s.post(<span class="string">"http://passport.csdn.net/account/login"</span>,data=payload,headers=header)</span><br><span class="line"><span class="keyword">print</span> r.text</span><br></pre></td></tr></table></figure></p>
<p>ok，至此，登录就成功了</p>
<h2 id="5_优化">5 优化</h2><p>当你登录成功后，你会问，我怎么知道登录成功了呢？当你试图去抓取<code>http://write.blog.csdn.net/postlist</code>的内容的时候，你会发现一个403的错误，这是为啥呢？<br>很简单，<code>user agent</code>没有修改，我们用的是默认的<code>user agent</code>，这可不是一个正常的用户，所以被网站拒绝了。我们加上他就好了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">header = &#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:38.0) Gecko/20100101 Firefox/38.0'</span>&#125;</span><br><span class="line">r = s.post(<span class="string">"http://passport.csdn.net/account/login"</span>,data=payload,headers=header)</span><br><span class="line"><span class="keyword">print</span> r.text</span><br></pre></td></tr></table></figure></p>
<h1 id="后话">后话</h1><p>上面的代码还是太简单，我们都知道cookie是有有效期的，我在做调试的时候，没修改一次，就要模拟登录一次，这样不好，我们要保存cookie，这样下次就不需要重新发送登录请求了<br>分享出完整的代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"><span class="keyword">from</span> cookielib <span class="keyword">import</span> LWPCookieJar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">toJson</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="string">'''</span><br><span class="line">    提取lt流水号，将数据化为一个字典</span><br><span class="line">    '''</span></span><br><span class="line">    soup = bs(str)</span><br><span class="line">    tt = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> inp <span class="keyword">in</span> soup.form.find_all(<span class="string">'input'</span>):</span><br><span class="line">        <span class="keyword">if</span> inp.get(<span class="string">'name'</span>) != <span class="keyword">None</span>:</span><br><span class="line">            tt[inp.get(<span class="string">'name'</span>)] =inp.get(<span class="string">'value'</span>)</span><br><span class="line">    <span class="keyword">return</span> tt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># cookie setting</span></span><br><span class="line">s = requests.Session()</span><br><span class="line">s.cookies = LWPCookieJar(<span class="string">'cookiejar'</span>)</span><br><span class="line">header = &#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:38.0) Gecko/20100101 Firefox/38.0'</span>&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'cookiejar'</span>):</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"there is no cookie,setting"</span></span><br><span class="line">    r = s.get(<span class="string">"http://passport.csdn.net/account/login"</span>)</span><br><span class="line">    soup = toJson(r.text)</span><br><span class="line">    payload =&#123;<span class="string">'username'</span>:<span class="string">'jackroyal'</span>,<span class="string">'password'</span>:<span class="string">'123456'</span>,<span class="string">'lt'</span>:soup[<span class="string">"lt"</span>],<span class="string">'execution'</span>:<span class="string">'e1s1'</span>,<span class="string">'_eventId'</span>:<span class="string">'submit'</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> payload</span><br><span class="line">    r = s.post(<span class="string">"http://passport.csdn.net/account/login"</span>,data=payload,headers=header)</span><br><span class="line">    s.cookies.save(ignore_discard=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> r.text</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"cookie exists,restore"</span></span><br><span class="line">    s.cookies.load(ignore_discard=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># r = s.get("https://passport.csdn.net/content/loginbox/loginapi.js")</span></span><br><span class="line">r = s.get(<span class="string">"http://write.blog.csdn.net/postlist"</span>,headers=header)</span><br><span class="line"><span class="keyword">print</span> r.text</span><br></pre></td></tr></table></figure></p>
<h1 id="参考文献">参考文献</h1><p>1 <a href="http://requests-docs-cn.readthedocs.org/zh_CN/latest/user/quickstart.html" target="_blank" rel="external">requests官方文档快速上手——中文版</a><br>2 <a href="http://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="external">beautifuisoup官方文档</a><br>3 <a href="http://stackoverflow.com/questions/13030095/how-to-save-requests-python-cookies-to-a-file" target="_blank" rel="external">python的requests如何保存cookie到文件</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>还是继续我的python学习。以前写的爬虫用的urllib2来实现，也用过scrapy的爬虫框架，这次试试requests，刚开始用，用起来确实比urllib2好，封装的更好一些，使用起来简单方便很多。<br>]]>
    
    </summary>
    
      <category term="csdn" scheme="http://bblove.me/tags/csdn/"/>
    
      <category term="python" scheme="http://bblove.me/tags/python/"/>
    
      <category term="requests" scheme="http://bblove.me/tags/requests/"/>
    
      <category term="模拟登录" scheme="http://bblove.me/tags/%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/"/>
    
      <category term="python学习笔记" scheme="http://bblove.me/categories/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[html5在ie中遇到的那些坑]]></title>
    <link href="http://bblove.me/2015/05/15/holes-in-ie6-about-html5/"/>
    <id>http://bblove.me/2015/05/15/holes-in-ie6-about-html5/</id>
    <published>2015-05-15T15:19:43.000Z</published>
    <updated>2015-10-29T06:08:49.149Z</updated>
    <content type="html"><![CDATA[<p>这段时间,笨笨找了个活儿,做一个页面,能够适配所有的主流浏览器,包括pc,平板和手机等终端(这和当年某刘提的要求一样啊).<br>我第一个想到的是bootstrap,可惜这货太大了,我只是几个简单的页面,没必要用这么大体量的东西.<br>搜索一番以后,我找到了我的解决方案,media query,支付宝也是这么解决的.<br><a id="more"></a></p>
<h1 id="前提条件">前提条件</h1><p>以下所给出的例子,都是html5的页面,不合适html4.0的页面,也就是说你的头部必须是<br><code>&lt;!DOCTYPE html&gt;</code>才行,如果是<code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</code>,是不行的,要仔细看清楚哈.<br>下面就来罗列一下,这次经过的那些坑:</p>
<h1 id="1_自动适配终端屏幕宽度">1  自动适配终端屏幕宽度</h1><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta <span class="property">name</span>=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"</span>&gt;</span><br></pre></td></tr></table></figure>
<p>content属性值 :<br>     width:可视区域的宽度，值可为数字或关键词device-width<br>     height:同width<br>     intial-scale:页面首次被显示是可视区域的缩放级别，取值1.0则页面按实际尺寸显示，无任何缩放<br>     maximum-scale=1.0, minimum-scale=1.0;可视区域的缩放级别，<br>              maximum-scale用户可将页面放大的程序，1.0将禁止用户放大到实际尺寸之上。<br>     user-scalable:是否可对页面进行缩放，no 禁止缩放</p>
<h1 id="2_使ie6-8支持html5的元素">2  使ie6-8支持html5的元素</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML5 shim, for IE6-8 support of HTML5 elements --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span><br><span class="line">&lt;script src="http://html5shim.googlecode.com/svn/trunk/html5.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>
<p>以上代码,顾名思义,当ie的版本是9一下的时候,加载html5.js这个文件(建议最好下载下来在本地调用),他是用来帮助ie6-8支持html元素的.</p>
<h1 id="3_ie10以下的版本不支持placeholder(不完美解决)">3  ie10以下的版本不支持placeholder(不完美解决)</h1><p>placeholder是html5里面才有的东东,ie8不支持就算了,ie9都不支持,伤不起.这个没办法,只能用js去写,网上有很多类似的东西,不过不是很好用,我找到的都不完美.<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">function</span><span class="list">($)</span> <span class="collection">&#123;</span><br><span class="line">  /**</span><br><span class="line">   * 没有开花的树</span><br><span class="line">   * http://blog.csdn.net/mycwq/</span><br><span class="line">   * <span class="number">2012</span>/<span class="number">11</span>/<span class="number">28</span> <span class="number">15</span>:<span class="number">12</span></span><br><span class="line">   */</span><br><span class="line"></span><br><span class="line">  var placeholderfriend = <span class="collection">&#123;</span><br><span class="line">    focus: function<span class="list">(<span class="keyword">s</span>)</span> <span class="collection">&#123;</span><br><span class="line">      s = $<span class="list">(<span class="keyword">s</span>)</span>.hide<span class="list">()</span>.prev<span class="list">()</span>.show<span class="list">()</span>.focus<span class="list">()</span><span class="comment">;</span></span><br><span class="line">      var idValue = s.attr<span class="list">(<span class="string">"id"</span>)</span><span class="comment">;</span></span><br><span class="line">      if <span class="list">(<span class="keyword">idValue</span>)</span> <span class="collection">&#123;</span><br><span class="line">        s.attr<span class="list">(<span class="string">"id"</span>, idValue.replace<span class="list">(<span class="string">"placeholderfriend"</span>, <span class="string">""</span>)</span>)</span><span class="comment">;</span></span><br><span class="line">      &#125;</span></span><br><span class="line">      var clsValue = s.attr<span class="list">(<span class="string">"class"</span>)</span><span class="comment">;</span></span><br><span class="line">      if <span class="list">(<span class="keyword">clsValue</span>)</span> <span class="collection">&#123;</span><br><span class="line">        s.attr<span class="list">(<span class="string">"class"</span>, clsValue.replace<span class="list">(<span class="string">"placeholderfriend"</span>, <span class="string">""</span>)</span>)</span><span class="comment">;</span></span><br><span class="line">      &#125;</span></span><br><span class="line">    &#125;</span></span><br><span class="line">  &#125;</span></span><br><span class="line"></span><br><span class="line">  //判断是否支持placeholder</span><br><span class="line">  function isPlaceholer<span class="list">()</span> <span class="collection">&#123;</span><br><span class="line">    var input = document.createElement<span class="list">(<span class="keyword">'input'</span>)</span><span class="comment">;</span></span><br><span class="line">    return <span class="string">"placeholder"</span> in input;</span><br><span class="line">  &#125;</span></span><br><span class="line">  //不支持的代码</span><br><span class="line">  if <span class="list">(<span class="keyword">!isPlaceholer</span><span class="list">()</span>)</span> <span class="collection">&#123;</span><br><span class="line">    $<span class="list">(<span class="keyword">function</span><span class="list">()</span> <span class="collection">&#123;</span><br><span class="line"></span><br><span class="line">      var form = $<span class="list">(<span class="keyword">this</span>)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">      //遍历所有文本框，添加placeholder模拟事件</span><br><span class="line">      var elements = form.find<span class="list">(<span class="string">"input[type='text'][placeholder]"</span>)</span><span class="comment">;</span></span><br><span class="line">      elements.each<span class="list">(<span class="keyword">function</span><span class="list">()</span> <span class="collection">&#123;</span><br><span class="line">        var s = $<span class="list">(<span class="keyword">this</span>)</span><span class="comment">;</span></span><br><span class="line">        var pValue = s.attr<span class="list">(<span class="string">"placeholder"</span>)</span><span class="comment">;</span></span><br><span class="line">        var sValue = s.val<span class="list">()</span><span class="comment">;</span></span><br><span class="line">        if <span class="list">(<span class="keyword">pValue</span>)</span> <span class="collection">&#123;</span><br><span class="line">          if <span class="list">(<span class="keyword">sValue</span> == '')</span> <span class="collection">&#123;</span><br><span class="line">            s.val<span class="list">(<span class="keyword">pValue</span>)</span><span class="comment">;</span></span><br><span class="line">          &#125;</span></span><br><span class="line">        &#125;</span></span><br><span class="line">      &#125;</span>)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">      elements.focus<span class="list">(<span class="keyword">function</span><span class="list">()</span> <span class="collection">&#123;</span><br><span class="line">        var s = $<span class="list">(<span class="keyword">this</span>)</span><span class="comment">;</span></span><br><span class="line">        var pValue = s.attr<span class="list">(<span class="string">"placeholder"</span>)</span><span class="comment">;</span></span><br><span class="line">        var sValue = s.val<span class="list">()</span><span class="comment">;</span></span><br><span class="line">        if <span class="list">(<span class="keyword">sValue</span> &amp;&amp; pValue)</span> <span class="collection">&#123;</span><br><span class="line">          if <span class="list">(<span class="keyword">sValue</span> == pValue)</span> <span class="collection">&#123;</span><br><span class="line">            s.val<span class="list">(<span class="keyword">''</span>)</span><span class="comment">;</span></span><br><span class="line">          &#125;</span></span><br><span class="line">        &#125;</span></span><br><span class="line">      &#125;</span>)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">      elements.blur<span class="list">(<span class="keyword">function</span><span class="list">()</span> <span class="collection">&#123;</span><br><span class="line">        var s = $<span class="list">(<span class="keyword">this</span>)</span><span class="comment">;</span></span><br><span class="line">        var pValue = s.attr<span class="list">(<span class="string">"placeholder"</span>)</span><span class="comment">;</span></span><br><span class="line">        var sValue = s.val<span class="list">()</span><span class="comment">;</span></span><br><span class="line">        if <span class="list">(<span class="keyword">!sValue</span>)</span> <span class="collection">&#123;</span><br><span class="line">          s.val<span class="list">(<span class="keyword">pValue</span>)</span><span class="comment">;</span></span><br><span class="line">        &#125;</span></span><br><span class="line">      &#125;</span>)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">      //遍历所有密码框，添加placeholder模拟事件</span><br><span class="line">      var elementsPass = form.find<span class="list">(<span class="string">"input[type='password'][placeholder]"</span>)</span><span class="comment">;</span></span><br><span class="line">      elementsPass.each<span class="list">(<span class="keyword">function</span><span class="list">(<span class="keyword">i</span>)</span> <span class="collection">&#123;</span><br><span class="line">        var s = $<span class="list">(<span class="keyword">this</span>)</span><span class="comment">;</span></span><br><span class="line">        var pValue = s.attr<span class="list">(<span class="string">"placeholder"</span>)</span><span class="comment">;</span></span><br><span class="line">        var sValue = s.val<span class="list">()</span><span class="comment">;</span></span><br><span class="line">        if <span class="list">(<span class="keyword">pValue</span>)</span> <span class="collection">&#123;</span><br><span class="line">          if <span class="list">(<span class="keyword">sValue</span> == '')</span> <span class="collection">&#123;</span><br><span class="line">            //DOM不支持type的修改，需要复制密码框属性，生成新的DOM</span><br><span class="line">            var html = this.outerHTML || <span class="string">""</span><span class="comment">;</span></span><br><span class="line">            html = html.replace<span class="list">(/\s*type=<span class="list">(<span class="collection">['<span class="string">"])?password\1/gi, "</span> type=text placeholderfriend<span class="string">")</span><br><span class="line">              .replace(/\s*(?:value|on[a-z]+|name)(=(['"</span>]</span>)</span>?\S*\<span class="number">1</span>)</span>?/gi, <span class="string">" "</span>)</span><br><span class="line">              .replace<span class="list">(/\s*placeholderfriend/, <span class="string">" placeholderfriend value='"</span> + pValue</span><br><span class="line">              + <span class="string">"' "</span> + <span class="string">"onfocus='placeholderfriendfocus(this);' "</span>)</span><span class="comment">;</span></span><br><span class="line">            var idValue = s.attr<span class="list">(<span class="string">"id"</span>)</span><span class="comment">;</span></span><br><span class="line">            if <span class="list">(<span class="keyword">idValue</span>)</span> <span class="collection">&#123;</span><br><span class="line">              s.attr<span class="list">(<span class="string">"id"</span>, idValue + <span class="string">"placeholderfriend"</span>)</span><span class="comment">;</span></span><br><span class="line">            &#125;</span></span><br><span class="line">            var clsValue = s.attr<span class="list">(<span class="string">"class"</span>)</span><span class="comment">;</span></span><br><span class="line">            if <span class="list">(<span class="keyword">clsValue</span>)</span> <span class="collection">&#123;</span><br><span class="line">              s.attr<span class="list">(<span class="string">"class"</span>, clsValue + <span class="string">"placeholderfriend"</span>)</span><span class="comment">;</span></span><br><span class="line">            &#125;</span></span><br><span class="line">            s.hide<span class="list">()</span><span class="comment">;</span></span><br><span class="line">            s.after<span class="list">(<span class="keyword">html</span>)</span><span class="comment">;</span></span><br><span class="line">          &#125;</span></span><br><span class="line">        &#125;</span></span><br><span class="line">      &#125;</span>)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">      elementsPass.blur<span class="list">(<span class="keyword">function</span><span class="list">()</span> <span class="collection">&#123;</span><br><span class="line">        var s = $<span class="list">(<span class="keyword">this</span>)</span><span class="comment">;</span></span><br><span class="line">        var sValue = s.val<span class="list">()</span><span class="comment">;</span></span><br><span class="line">        if <span class="list">(<span class="keyword">sValue</span> == '')</span> <span class="collection">&#123;</span><br><span class="line">          var idValue = s.attr<span class="list">(<span class="string">"id"</span>)</span><span class="comment">;</span></span><br><span class="line">          if <span class="list">(<span class="keyword">idValue</span>)</span> <span class="collection">&#123;</span><br><span class="line">            s.attr<span class="list">(<span class="string">"id"</span>, idValue + <span class="string">"placeholderfriend"</span>)</span><span class="comment">;</span></span><br><span class="line">          &#125;</span></span><br><span class="line">          var clsValue = s.attr<span class="list">(<span class="string">"class"</span>)</span><span class="comment">;</span></span><br><span class="line">          if <span class="list">(<span class="keyword">clsValue</span>)</span> <span class="collection">&#123;</span><br><span class="line">            s.attr<span class="list">(<span class="string">"class"</span>, clsValue + <span class="string">"placeholderfriend"</span>)</span><span class="comment">;</span></span><br><span class="line">          &#125;</span></span><br><span class="line">          s.hide<span class="list">()</span>.next<span class="list">()</span>.show<span class="list">()</span><span class="comment">;</span></span><br><span class="line">        &#125;</span></span><br><span class="line">      &#125;</span>)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span>)</span><span class="comment">;</span></span><br><span class="line">  &#125;</span></span><br><span class="line">  window.placeholderfriendfocus = placeholderfriend.focus;</span><br><span class="line">&#125;</span>)</span><span class="list">(<span class="keyword">jQuery</span>)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>我最终选择这段代码,他能够在ie的各版本中正常运行,支持<code>text</code>和<code>password</code>标签.<br>唯一的不足是,你直接点提交,你的text里面会有内容,内容就是placeholder中设置的提示内容.</p>
<h1 id="4_background-size在ie9一下不支持">4  background-size在ie9一下不支持</h1><p>background-size属性是用来让背景图片平铺的.不过ie9一下并不支持这个属性,我们使用滤镜来实现平铺的效果,示例代码如下.<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background-size</span>:<span class="value"> cover</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">filter</span>:<span class="value">progid:DXImageTransform.Microsoft.<span class="function">AlphaImageLoader</span>(src=<span class="string">'./assets/images/01.png'</span>, sizingMethod=<span class="string">'scale'</span>)\<span class="number">9</span></span></span>;</span><br></pre></td></tr></table></figure></p>
<p>需要注意的是,这里的图片路径是相对于html文件的,不是css的路径,如果设置了没效果,先检查下你的路径.</p>
<h1 id="5_input输入框_光标不居中">5  input输入框 光标不居中</h1><p>这个问题来自于魅族手机,还有老大难的ie6-8的测试中.<br>解决方法是设置<code>height</code>和<code>line-height</code>等高,没那么简单,这里有技巧的<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">line-height</span>:<span class="value"> normal</span></span>;<span class="comment">/*这行代码解决了魅族手机中的不居中问题*/</span></span><br><span class="line"><span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">42px</span>\<span class="number">9</span></span></span>;<span class="comment">/*这行css代码的含义是ie9以下设置line-height为42px*/</span></span><br></pre></td></tr></table></figure></p>
<h1 id="6_opacity的继承问题">6  opacity的继承问题</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id='a' style=""&gt;</span><br><span class="line">    &lt;div id='b'&gt;</span><br><span class="line">    hello moto</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>如果我们给父div设置了一个<code>opacity</code>为0.1,即使我们给子div设置<code>opacity</code>为1,也是不管用的,如图<br><img src="http://ww1.sinaimg.cn/large/692869a3gw1es5fm0jafhj20iv0ecq46.jpg" alt="未设置父div的opacity之前"><br>设置父div的<code>opacity</code>之后<br><img src="http://ww4.sinaimg.cn/large/692869a3gw1es5fnsk3pvj20hy0fdwfm.jpg" alt="设置父div的opacity之后"><br>我们可以清楚看到子div受到了影响.<br>解决办法:解除父子关系,把子div从父div中挪出来</p>
<h1 id="7_border-radius在ie9以下不支持">7  border-radius在ie9以下不支持</h1><p>输入框等其他地方用到圆角的话,在老版本ie中果断是没有支持的.<br>我们需要用hack的方式<a href="http://css3pie.com/" target="_blank" rel="external">pie</a>,去实现border-radius和box-shadow等功能.加入pie以后的css代码如下:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">-moz-border-radius</span>:<span class="value"> <span class="number">6px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">-webkit-border-radius</span>:<span class="value"> <span class="number">6px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">6px</span></span></span>;</span><br><span class="line"><span class="rule"><span class="attribute">behavior</span>:<span class="value"> <span class="function">url</span>(assets/css/pie.htc)</span></span>;<span class="comment">/*这一行是核心*/</span></span><br></pre></td></tr></table></figure></p>
<p>缺点:设置的border-radius四角的设置值都是相同的</p>
<h1 id="8_css递进关系">8 css递进关系</h1><p>挖坑,以后填</p>
<p>ps:晚安,亲爱的</p>
<h1 id="参考文献">参考文献</h1><p>1 <a href="http://www.cnblogs.com/yuzhongwusan/p/4184923.html" target="_blank" rel="external">meta name=”viewport” content=”width=device-width,initial-scale=1.0” 解释</a><br>2 <a href="http://css3pie.com/" target="_blank" rel="external">pie用hack方式在ie中实现border-radius</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这段时间,笨笨找了个活儿,做一个页面,能够适配所有的主流浏览器,包括pc,平板和手机等终端(这和当年某刘提的要求一样啊).<br>我第一个想到的是bootstrap,可惜这货太大了,我只是几个简单的页面,没必要用这么大体量的东西.<br>搜索一番以后,我找到了我的解决方案,media query,支付宝也是这么解决的.<br>]]>
    
    </summary>
    
      <category term="css" scheme="http://bblove.me/tags/css/"/>
    
      <category term="html5" scheme="http://bblove.me/tags/html5/"/>
    
      <category term="ie" scheme="http://bblove.me/tags/ie/"/>
    
      <category term="兼容性" scheme="http://bblove.me/tags/%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
      <category term="前端" scheme="http://bblove.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="前端" scheme="http://bblove.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[win8中使用vs2010配置opencv]]></title>
    <link href="http://bblove.me/2015/05/15/opencv-and-vs2010-in-win8/"/>
    <id>http://bblove.me/2015/05/15/opencv-and-vs2010-in-win8/</id>
    <published>2015-05-15T11:56:06.000Z</published>
    <updated>2015-10-29T06:08:47.548Z</updated>
    <content type="html"><![CDATA[<p>今天在师兄的帮助下,总算配置好了opencv.</p>
<h1 id="1_系统环境和软件版本">1 系统环境和软件版本</h1><p>操作系统:win8 64位<br>vs版本:vs2010 32位<br>opencv版本:opencv 2.4.10<br><a id="more"></a></p>
<h1 id="2_配置opencv">2 配置opencv</h1><p>安装vs比较简单,这里不再赘述.<br>现在说下配置opencv.<br>网上有很多相关的配置,都是设置环境变量,然后添加库目录,包含目录,blablabla.<br>这样做的坏处是,每次我新建一个项目,都要重复以上操作,这样岂不是很蛋疼.<br>如果你移植你的程序给别人,别人也还要去配置这些东西才能够运行,是不是很不方便?<br>所以,师兄教给我简单粗暴的办法,直接把相关文件手动复制到vs的目录下,这样就没这么多事了.<br><strong>缺点:每次都需要手动设置你所需要调用的lib文件</strong></p>
<h2 id="解压opencv到某个目录">解压opencv到某个目录</h2><p>这个很简单,双击那个exe,选择一个目录,就会把opencv的文件解压到你设定的那个目录.<br>我将它解压到<code>D:/opencv</code>下.</p>
<h2 id="复制include文件夹">复制include文件夹</h2><p>复制<code>D:\opencv\build\include</code>目录下的<code>opencv</code>和<code>opencv2</code><br>到<code>C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include</code>.<br><img src="http://ww3.sinaimg.cn/large/692869a3gw1es5atg7oimj20kw081ta4.jpg" alt="opencv解压后的include目录"><br><img src="http://ww2.sinaimg.cn/large/692869a3gw1es5az6qsa7j20jc099jtf.jpg" alt="复制以后的效果截图"></p>
<h2 id="复制lib文件夹">复制lib文件夹</h2><p>同理,复制lib文件夹<br>从<code>D:\opencv\build\x86\vc10\lib</code>复制到<code>C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\lib</code><br>如果你的程序是win32就选择x86,如果你写的程序是64位的,就复制x64的程序</p>
<h2 id="复制bin文件夹">复制bin文件夹</h2><p>复制bin目录下的东西,我们只需要系统找得到就行,所以我们这里采用环境变量的搞法</p>
<p>我们修改path变量,在后面添加<code>;d:\opencv\build\x86\vc10\bin</code>,效果如图所示<br><br><img src="http://ww2.sinaimg.cn/large/692869a3gw1es5bew5vcjj20e10g4go8.jpg" alt="修改path变量,添加opencv的bin目录路径"></p>
<h1 id="3_写代码调试">3 写代码调试</h1><p>代码如下:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># include &#60;opencv2/opencv.hpp&#62;&#10;# include &#60;iostream&#62;&#10;# include &#60;string&#62;&#10;# ifdef _DEBUG&#10;# pragma comment(lib,&#34;opencv_core2410d.lib&#34;)&#10;# pragma comment(lib,&#34;opencv_highgui2410d.lib&#34;)&#10;# else&#10;# pragma comment(lib,&#34;opencv_core2410.lib&#34;)&#10;# pragma comment(lib,&#34;opencv_highgui2410.lib&#34;)&#10;# endif&#10;using namespace cv;&#10;using namespace std;&#10;int main()&#10;&#123;&#10;    Mat img = imread(&#34;ie8-2.png&#34;);&#10;    if(img.empty())&#10;    &#123;&#10;        cout&#60;&#60;&#34;error&#34;;&#10;        return -1;&#10;   &#125;&#10;   imshow(&#34;xx&#30340;&#38739;&#29031;&#34;,img);&#10;   waitKey();&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>注意一下这段宏设置<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># <span class="keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="preprocessor"># <span class="keyword">pragma</span> comment(lib,<span class="string">"opencv_core2410d.lib"</span>)</span></span><br><span class="line"><span class="preprocessor"># <span class="keyword">pragma</span> comment(lib,<span class="string">"opencv_highgui2410d.lib"</span>)</span></span><br><span class="line"><span class="preprocessor"># <span class="keyword">else</span></span></span><br><span class="line"><span class="preprocessor"># <span class="keyword">pragma</span> comment(lib,<span class="string">"opencv_core2410.lib"</span>)</span></span><br><span class="line"><span class="preprocessor"># <span class="keyword">pragma</span> comment(lib,<span class="string">"opencv_highgui2410.lib"</span>)</span></span><br><span class="line"><span class="preprocessor"># <span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></p>
<p>debug和release,分别调用对应的lib<br>如果你当前是debug模式<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># <span class="keyword">pragma</span> comment(lib,<span class="string">"opencv_core2410d.lib"</span>)</span></span><br><span class="line"><span class="preprocessor"># <span class="keyword">pragma</span> comment(lib,<span class="string">"opencv_highgui2410d.lib"</span>)</span></span><br></pre></td></tr></table></figure></p>
<p>这段代码是必须要的,以后调用相应的lib文件,我们都要手动在头部加入这句话才行<br>否则,你会看到下面这堆东西<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>&gt;  test.cpp</span><br><span class="line"><span class="number">1</span>&gt;ManifestResourceCompile:</span><br><span class="line"><span class="number">1</span>&gt;  所有输出均为最新。</span><br><span class="line"><span class="number">1</span>&gt;test.obj : <span class="keyword">error</span> LNK2019: 无法解析的外部符号 <span class="string">"int __cdecl cv::waitKey(int)"</span> (?waitKey<span class="variable">@cv</span><span class="variable">@@</span>YAHH<span class="variable">@Z</span>)，该符号在函数 _main 中被引用</span><br><span class="line"><span class="number">1</span>&gt;test.obj : <span class="keyword">error</span> LNK2019: 无法解析的外部符号 <span class="string">"void __cdecl cv::imshow(class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; const &amp;,class cv::_InputArray const &amp;)"</span> (?imshow<span class="variable">@cv</span><span class="variable">@@</span>YAXABV?<span class="variable">$basic_string</span><span class="variable">@DU</span>?<span class="variable">$char_traits</span><span class="variable">@D</span><span class="variable">@std</span><span class="variable">@@</span>V?<span class="variable">$allocator</span><span class="variable">@D</span><span class="variable">@2</span><span class="variable">@@</span>std<span class="variable">@@</span>ABV_InputArray<span class="variable">@1</span><span class="variable">@@</span>Z)，该符号在函数 _main 中被引用</span><br><span class="line"><span class="number">1</span>&gt;test.obj : <span class="keyword">error</span> LNK2019: 无法解析的外部符号 <span class="string">"public: __thiscall cv::_InputArray::_InputArray(class cv::Mat const &amp;)"</span> (??<span class="number">0</span>_InputArray<span class="variable">@cv</span><span class="variable">@@</span>QAE<span class="variable">@ABVMat</span><span class="variable">@1</span><span class="variable">@@</span>Z)，该符号在函数 _main 中被引用</span><br><span class="line"><span class="number">1</span>&gt;test.obj : <span class="keyword">error</span> LNK2019: 无法解析的外部符号 <span class="string">"class cv::Mat __cdecl cv::imread(class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; const &amp;,int)"</span> (?imread<span class="variable">@cv</span><span class="variable">@@</span>YA?AVMat<span class="variable">@1</span><span class="variable">@ABV</span>?<span class="variable">$basic_string</span><span class="variable">@DU</span>?<span class="variable">$char_traits</span><span class="variable">@D</span><span class="variable">@std</span><span class="variable">@@</span>V?<span class="variable">$allocator</span><span class="variable">@D</span><span class="variable">@2</span><span class="variable">@@</span>std<span class="variable">@@</span>H<span class="variable">@Z</span>)，该符号在函数 _main 中被引用</span><br><span class="line"><span class="number">1</span>&gt;test.obj : <span class="keyword">error</span> LNK2019: 无法解析的外部符号 <span class="string">"void __cdecl cv::fastFree(void *)"</span> (?fastFree<span class="variable">@cv</span><span class="variable">@@</span>YAXPAX<span class="variable">@Z</span>)，该符号在函数 <span class="string">"public: __thiscall cv::Mat::~Mat(void)"</span> (??<span class="number">1</span>Mat<span class="variable">@cv</span><span class="variable">@@</span>QAE<span class="variable">@XZ</span>) 中被引用</span><br><span class="line"><span class="number">1</span>&gt;test.obj : <span class="keyword">error</span> LNK2019: 无法解析的外部符号 <span class="string">"public: void __thiscall cv::Mat::deallocate(void)"</span> (?deallocate<span class="variable">@Mat</span><span class="variable">@cv</span><span class="variable">@@</span>QAEXXZ)，该符号在函数 <span class="string">"public: void __thiscall cv::Mat::release(void)"</span> (?release<span class="variable">@Mat</span><span class="variable">@cv</span><span class="variable">@@</span>QAEXXZ) 中被引用</span><br><span class="line"><span class="number">1</span>&gt;test.obj : <span class="keyword">error</span> LNK2019: 无法解析的外部符号 <span class="string">"int __cdecl cv::_interlockedExchangeAdd(int *,int)"</span> (?_interlockedExchangeAdd<span class="variable">@cv</span><span class="variable">@@</span>YAHPAHH<span class="variable">@Z</span>)，该符号在函数 <span class="string">"public: void __thiscall cv::Mat::release(void)"</span> (?release<span class="variable">@Mat</span><span class="variable">@cv</span><span class="variable">@@</span>QAEXXZ) 中被引用</span><br><span class="line"><span class="number">1</span>&gt;C:\Users\chenhao\documents\visual studio <span class="number">2010</span>\Projects\b\Debug\b.exe : fatal <span class="keyword">error</span> LNK1120: <span class="number">7</span> 个无法解析的外部命令</span><br><span class="line"><span class="number">1</span>&gt;</span><br><span class="line"><span class="number">1</span>&gt;生成失败。</span><br><span class="line"><span class="number">1</span>&gt;</span><br><span class="line"><span class="number">1</span>&gt;已用时间 <span class="number">00</span>:<span class="number">00</span>:<span class="number">03.71</span></span><br><span class="line">========== 生成: 成功 <span class="number">0</span> 个，失败 <span class="number">1</span> 个，最新 <span class="number">0</span> 个，跳过 <span class="number">0</span> 个 ==========</span><br></pre></td></tr></table></figure></p>
<p>ok,打完收工!</p>
<p>ps:上述操作完,应该就好了.我还遇到一个奇葩问题<br>编译和生成解决方案没有问题，但是开始执行就出现应用程序无法正常启动 0xc000007b错误窗口<br>最后,原来是权限问题,使用管理员权限打开vs就解决了,win7下找兼容性设置,以管理员权限运行<br>我的win8没有找到兼容性设置,如图所示操作,每次都能以管理员权限打开vs<br><img src="http://ww4.sinaimg.cn/large/692869a3gw1es5bpz7mkqj20mm0giq7k.jpg" alt="win8使用管理员权限运行vs2010"></p>
<h1 id="参考文献">参考文献</h1><p>1 <a href="http://www.cnblogs.com/freedomshe/archive/2012/04/25/2470540.html" target="_blank" rel="external">VS2010+Opencv-2.4.0的配置攻略</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天在师兄的帮助下,总算配置好了opencv.</p>
<h1 id="1_系统环境和软件版本">1 系统环境和软件版本</h1><p>操作系统:win8 64位<br>vs版本:vs2010 32位<br>opencv版本:opencv 2.4.10<br>]]>
    
    </summary>
    
      <category term="opencv" scheme="http://bblove.me/tags/opencv/"/>
    
      <category term="vs2010" scheme="http://bblove.me/tags/vs2010/"/>
    
      <category term="win8" scheme="http://bblove.me/tags/win8/"/>
    
      <category term="软件安装与技巧" scheme="http://bblove.me/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%80%E5%B7%A7/"/>
    
      <category term="软件安装与技巧" scheme="http://bblove.me/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
</feed>
