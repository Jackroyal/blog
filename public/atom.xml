<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[搁浅St的blog]]></title>
  <subtitle><![CDATA[我最喜欢笨笨]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://jackroyal.github.io/"/>
  <updated>2015-04-27T01:32:07.946Z</updated>
  <id>http://jackroyal.github.io/</id>
  
  <author>
    <name><![CDATA[搁浅St]]></name>
    <email><![CDATA[geqianst@qq.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[ubuntu下使用scrapy抓取cnblogs]]></title>
    <link href="http://jackroyal.github.io/2015/04/26/ubuntu-scrapy-stackoverflow/"/>
    <id>http://jackroyal.github.io/2015/04/26/ubuntu-scrapy-stackoverflow/</id>
    <published>2015-04-26T08:52:28.000Z</published>
    <updated>2015-04-27T01:32:02.000Z</updated>
    <content type="html"><![CDATA[<p>今天在伯乐在线上看到一篇翻译的博客，讲的是使用scrapy来抓取stackoverflow上的问题，刚好好久没用这个，于是一并捡起来玩一下。<br><a id="more"></a></p>
<h1 id="软件安装">软件安装</h1>
<p>我的环境是：ubuntu 14.04 lts<br>需要安装相关软件</p>
<h2 id="scrapy">scrapy</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip <span class="operator"><span class="keyword">install</span> Scrapy</span></div></pre></td></tr></table></figure>

<h2 id="PyMongo">PyMongo</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip <span class="operator"><span class="keyword">install</span> pymongo</span></div></pre></td></tr></table></figure>

<h2 id="Mongodb">Mongodb</h2>
<p>上面安装的是python使用Mongodb的接口，很显然，我们要安装Mongodb才能使用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get <span class="operator"><span class="keyword">install</span> mongodb-<span class="keyword">server</span></span></div></pre></td></tr></table></figure>

<p>至此，要使用的软件都已经安装完毕</p>
<h1 id="使用scrapy新建工程">使用scrapy新建工程</h1>
<p>使用scrapy新建工程很简单，如下所示，我们新建一个stack的项目，他会在你的当前目录新建一个stack文件夹</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">scrapy</span> startproject stack</div></pre></td></tr></table></figure>

<p>并且会建成如下所示的目录树结构</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">chen<span class="variable">@chen</span>-<span class="constant">P31</span><span class="symbol">:~</span><span class="variable">$ </span>tree stack</div><div class="line">stack</div><div class="line">├── stack</div><div class="line">│   ├── __init_<span class="number">_</span>.py</div><div class="line">│   ├── items.py</div><div class="line">│   ├── pipelines.py</div><div class="line">│   ├── settings.py</div><div class="line">│   └── spiders</div><div class="line">│       └── __init_<span class="number">_</span>.py</div><div class="line">└── scrapy.cfg</div></pre></td></tr></table></figure>

<p>接下来，我们修改items.py的内容，这个文件用于定义存储“容器”，用来存储将要抓取的数据。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> scrapy.item <span class="keyword">import</span> Item,Field</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackItem</span><span class="params">(Item)</span>:</span></div><div class="line">    <span class="comment"># define the fields for your item here like:</span></div><div class="line">    <span class="comment"># name = scrapy.Field()</span></div><div class="line">    title = Field()<span class="comment">#我们添加两个字段，我们等会儿会抓取一个标题和url两个字段</span></div><div class="line">    url = Field()</div></pre></td></tr></table></figure>

<p>接着，还有一个很重要的东西，对，就是我们的蜘蛛，我们在spider目录下，新建一个stack_spider.py文件。顾名思义，这就是我们的蜘蛛。我们需要定义我们爬虫的起点，爬虫的规则等等</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Spider</div><div class="line"><span class="keyword">from</span> stack.items <span class="keyword">import</span> StackItem  <span class="comment">#导入我们上面定义的容器类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackSpider</span><span class="params">(Spider)</span>:</span></div><div class="line">    name = <span class="string">'stack'</span>   <span class="comment">#定义我们爬虫的名字</span></div><div class="line">    allowed_domains = [<span class="string">"cnblogs.com"</span>]   <span class="comment">#规定爬虫爬取的域名</span></div><div class="line">    start_urls = [<span class="string">'http://www.cnblogs.com/geqianst/p/'</span>,]   <span class="comment">#爬虫工作的起点</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span><span class="comment">#爬虫用来做数据解析的</span></div><div class="line">        questions = response.xpath(<span class="string">'//div[@id="myposts"]//a[@id]'</span>)</div><div class="line">        <span class="comment">#xpath选择器，这里的含义是取所有id为myposts的div，在它下面找所有带id的超链接a</span></div><div class="line">        <span class="comment">#实际结果是这样的</span></div><div class="line">        <span class="comment">#[&lt;Selector xpath='//div[@id="myposts"]//a[@id]' data=u'&lt;a id="PostsList1_rpPosts_TitleUrl_0" hr'&gt;,</span></div><div class="line">        <span class="comment">#&lt;Selector xpath='//div[@id="myposts"]//a[@id]' data=u'&lt;a id="PostsList1_rpPosts_TitleUrl_1" hr'&gt;,</span></div><div class="line">        <span class="comment">#&lt;Selector xpath='//div[@id="myposts"]//a[@id]' data=u'&lt;a id="PostsList1_rpPosts_TitleUrl_2" hr'&gt;,</span></div><div class="line">        <span class="comment">#&lt;Selector xpath='//div[@id="myposts"]//a[@id]' data=u'&lt;a id="PostsList1_rpPosts_TitleUrl_3" hr'&gt;,</span></div><div class="line">        <span class="comment">#&lt;Selector xpath='//div[@id="myposts"]//a[@id]' data=u'&lt;a id="PostsList1_rpPosts_TitleUrl_4" hr'&gt;,</span></div><div class="line">        <span class="comment">#&lt;Selector xpath='//div[@id="myposts"]//a[@id]' data=u'&lt;a id="PostsList1_rpPosts_TitleUrl_5" hr'&gt;,</span></div><div class="line">        <span class="comment">#&lt;Selector xpath='//div[@id="myposts"]//a[@id]' data=u'&lt;a id="PostsList1_rpPosts_TitleUrl_6" hr'&gt;,</span></div><div class="line">        <span class="comment">#&lt;Selector xpath='//div[@id="myposts"]//a[@id]' data=u'&lt;a id="PostsList1_rpPosts_TitleUrl_7" hr'&gt;,</span></div><div class="line">        <span class="comment">#&lt;Selector xpath='//div[@id="myposts"]//a[@id]' data=u'&lt;a id="PostsList1_rpPosts_TitleUrl_8" hr'&gt;,</span></div><div class="line">        <span class="comment">#&lt;Selector xpath='//div[@id="myposts"]//a[@id]' data=u'&lt;a id="PostsList1_rpPosts_TitleUrl_9" hr'&gt;]</span></div><div class="line">        <span class="comment">#</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> question <span class="keyword">in</span> questions:</div><div class="line">            item = StackItem()</div><div class="line">            item[<span class="string">'title'</span>] = question.xpath(</div><div class="line">                <span class="string">'text()'</span>).extract()[<span class="number">0</span>]</div><div class="line">            item[<span class="string">'url'</span>] = question.xpath(</div><div class="line">                <span class="string">'@href'</span>).extract()[<span class="number">0</span>]</div><div class="line">            <span class="keyword">print</span> item</div><div class="line">            <span class="keyword">yield</span> item</div></pre></td></tr></table></figure>

<h1 id="测试">测试</h1>
<p>ok，上述工作基本完成，我们来测试一下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrapy crawl stack</div></pre></td></tr></table></figure>

<p>还可以这样测试一下，使用shell命令<br><img src="http://ww4.sinaimg.cn/large/692869a3gw1erjvd7qeqdj213z0j9h2h.jpg" alt="用shell测试xpath"><br>妈蛋，我的竟然出错了，输出如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">chen<span class="variable">@chen</span>-<span class="constant">P31</span><span class="symbol">:~/stack</span><span class="variable">$ </span>scrapy crawl stack</div><div class="line"><span class="number">2015</span>-<span class="number">04</span>-<span class="number">26</span> <span class="number">16</span><span class="symbol">:</span><span class="number">49</span><span class="symbol">:</span><span class="number">11</span>+080<span class="number">0</span> [scrapy] <span class="constant">INFO</span><span class="symbol">:</span> <span class="constant">Scrapy</span> <span class="number">0</span>.<span class="number">24.6</span> started (<span class="symbol">bot:</span> stack)</div><div class="line"><span class="number">2015</span>-<span class="number">04</span>-<span class="number">26</span> <span class="number">16</span><span class="symbol">:</span><span class="number">49</span><span class="symbol">:</span><span class="number">11</span>+080<span class="number">0</span> [scrapy] <span class="constant">INFO</span><span class="symbol">:</span> <span class="constant">Optional</span> features <span class="symbol">available:</span> ssl, http11</div><div class="line"><span class="number">2015</span>-<span class="number">04</span>-<span class="number">26</span> <span class="number">16</span><span class="symbol">:</span><span class="number">49</span><span class="symbol">:</span><span class="number">11</span>+080<span class="number">0</span> [scrapy] <span class="constant">INFO</span><span class="symbol">:</span> <span class="constant">Overridden</span> <span class="symbol">settings:</span> {<span class="string">'NEWSPIDER_MODULE'</span><span class="symbol">:</span> <span class="string">'stack.spiders'</span>, <span class="string">'SPIDER_MODULES'</span><span class="symbol">:</span> [<span class="string">'stack.spiders'</span>], <span class="string">'BOT_NAME'</span><span class="symbol">:</span> <span class="string">'stack'</span>}</div><div class="line"><span class="constant">Traceback</span> (most recent call last)<span class="symbol">:</span></div><div class="line">  <span class="constant">File</span> <span class="string">"/usr/local/bin/scrapy"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;<span class="class"><span class="keyword">module</span>&gt;</span></div><div class="line">    sys.exit(execute())</div><div class="line">  <span class="constant">File</span> <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py"</span>, line <span class="number">143</span>, <span class="keyword">in</span> execute</div><div class="line">    _run_print_help(parser, _run_command, cmd, args, opts)</div><div class="line">  <span class="constant">File</span> <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py"</span>, line <span class="number">89</span>, <span class="keyword">in</span> _run_print_help</div><div class="line">    func(*a, **kw)</div><div class="line">  <span class="constant">File</span> <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py"</span>, line <span class="number">150</span>, <span class="keyword">in</span> _run_command</div><div class="line">    cmd.run(args, opts)</div><div class="line">  <span class="constant">File</span> <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/commands/crawl.py"</span>, line <span class="number">60</span>, <span class="keyword">in</span> run</div><div class="line">    <span class="keyword">self</span>.crawler_process.start()</div><div class="line">  <span class="constant">File</span> <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py"</span>, line <span class="number">92</span>, <span class="keyword">in</span> start</div><div class="line">    <span class="keyword">if</span> <span class="keyword">self</span>.start_crawling()<span class="symbol">:</span></div><div class="line">  <span class="constant">File</span> <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py"</span>, line <span class="number">124</span>, <span class="keyword">in</span> start_crawling</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>._start_crawler() is <span class="keyword">not</span> <span class="constant">None</span></div><div class="line">  <span class="constant">File</span> <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py"</span>, line <span class="number">139</span>, <span class="keyword">in</span> _start_crawler</div><div class="line">    crawler.configure()</div><div class="line">  <span class="constant">File</span> <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py"</span>, line <span class="number">46</span>, <span class="keyword">in</span> configure</div><div class="line">    <span class="keyword">self</span>.extensions = <span class="constant">ExtensionManager</span>.from_crawler(<span class="keyword">self</span>)</div><div class="line">  <span class="constant">File</span> <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/middleware.py"</span>, line <span class="number">50</span>, <span class="keyword">in</span> from_crawler</div><div class="line">    <span class="keyword">return</span> cls.from_settings(crawler.settings, crawler)</div><div class="line">  <span class="constant">File</span> <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/middleware.py"</span>, line <span class="number">29</span>, <span class="keyword">in</span> from_settings</div><div class="line">    mwcls = load_object(clspath)</div><div class="line">  <span class="constant">File</span> <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/utils/misc.py"</span>, line <span class="number">42</span>, <span class="keyword">in</span> load_object</div><div class="line">    raise <span class="constant">ImportError</span>(<span class="string">"Error loading object '%s': %s"</span> % (path, e))</div><div class="line"><span class="constant">ImportError</span><span class="symbol">:</span> <span class="constant">Error</span> loading object <span class="string">'scrapy.telnet.TelnetConsole'</span><span class="symbol">:</span> <span class="constant">No</span> <span class="class"><span class="keyword">module</span> <span class="title">named</span> <span class="title">conch</span></span></div></pre></td></tr></table></figure>

<p>这是什么gui？<br>还好我有stackoverflow，google一番，找到解决办法（其实这不是最后的解决办法，请往后看）<br>网上说是twisted的问题，重新安装一下就好了，ok，走起</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">chen@chen-P31:~/stack$ sudo apt-get install twisted</div><div class="line">Reading package lists... Done</div><div class="line">Building dependency tree       </div><div class="line">Reading state information... Done</div><div class="line">E: Unable to locate package twisted</div><div class="line">chen@chen-P31:~/stack$ sudo apt-get install twisted.conch</div><div class="line">Reading package lists... Done</div><div class="line">Building dependency tree       </div><div class="line">Reading state information... Done</div><div class="line">Note, selecting <span class="string">'python-twisted-conch'</span> <span class="keyword">for</span> regex <span class="string">'twisted.conch'</span></div><div class="line">Note, selecting <span class="string">'python2.7-twisted-conch'</span> <span class="keyword">for</span> regex <span class="string">'twisted.conch'</span></div><div class="line">Note, selecting <span class="string">'python-twisted-conch'</span> instead of <span class="string">'python2.7-twisted-conch'</span></div><div class="line">The following packages were automatically installed and are no longer required:</div><div class="line">  cli-common dockmanager freepats gstreamer1.0-plugins-bad-faad</div><div class="line">  gstreamer1.0-plugins-bad-videoparsers libbotan-<span class="number">1.10</span>-<span class="number">0</span>:i386 libcdaudio1</div><div class="line">  libdbus-glib2.0-cil libdbus2.0-cil libdbusmenu-glib4:i386</div><div class="line">  libdbusmenu-gtk4:i386 libegl1-mesa:i386 libegl1-mesa-drivers:i386 libflite1</div><div class="line">  libfluidsynth1 libgbm1:i386 libgconf2.0-cil libgdiplus libgif4</div><div class="line">  libgles2-mesa:i386 libglib2.0-cil libgme0 libgmp10:i386</div><div class="line">  libgnome-desktop-<span class="number">2</span>-<span class="number">17</span> libgnome-keyring1.0-cil libgnomedesktop2.20-cil</div><div class="line">  libgstreamer-plugins-bad0.10-<span class="number">0</span> libgstreamer-plugins-bad1.0-<span class="number">0</span> libgtk2.0-cil</div><div class="line">  libicu52:i386 libmimic0 libmms0 libmono-addins0.2-cil libmono-cairo4.0-cil</div><div class="line">  libmono-corlib4.0-cil libmono-corlib4.5-cil libmono-data-tds4.0-cil</div><div class="line">  libmono-i18n-west4.0-cil libmono-i18n4.0-cil libmono-posix4.0-cil</div><div class="line">  libmono-security4.0-cil libmono-sharpzip4.84-cil libmono-sqlite4.0-cil</div><div class="line">  libmono-system-configuration4.0-cil libmono-system-core4.0-cil</div><div class="line">  libmono-system-data4.0-cil libmono-system-drawing4.0-cil</div><div class="line">  libmono-system-enterpriseservices4.0-cil</div><div class="line">  libmono-system-runtime-serialization-formatters-soap4.0-cil</div><div class="line">  libmono-system-security4.0-cil libmono-system-transactions4.0-cil</div><div class="line">  libmono-system-web-applicationservices4.0-cil</div><div class="line">  libmono-system-web-services4.0-cil libmono-system-web4.0-cil</div><div class="line">  libmono-system-xml-linq4.0-cil libmono-system-xml4.0-cil</div><div class="line">  libmono-system4.0-cil libmono-web4.0-cil libmpg123-<span class="number">0</span> libnotify0.4-cil</div><div class="line">  libofa0 libopenal-data libopenal1 libopenvg1-mesa:i386 libqrencode3:i386</div><div class="line">  libqt5core5a:i386 libqt5dbus5:i386 libqt5gui5:i386 libqt5network5:i386</div><div class="line">  libqt5widgets5:i386 libqtshadowsocks:i386 librsvg2-<span class="number">2.18</span>-cil libslv2-<span class="number">9</span></div><div class="line">  libsoundtouch0 libspandsp2 libsrtp0 libssl1.0.0:i386 libv4l-<span class="number">0</span>:i386</div><div class="line">  libv4lconvert0:i386 libvo-aacenc0 libvo-amrwbenc0 libwayland-client0:i386</div><div class="line">  libwayland-egl1-mesa:i386 libwayland-server0:i386 libwildmidi-config</div><div class="line">  libwildmidi1 libwnck2.20-cil libxcb-icccm4:i386 libxcb-image0:i386</div><div class="line">  libxcb-keysyms1:i386 libxcb-randr0:i386 libxcb-render-util0:i386</div><div class="line">  libxcb-shape0:i386 libxcb-util0:i386 libxcb-xfixes0:i386 libxcb-xkb1:i386</div><div class="line">  libxkbcommon-x11-<span class="number">0</span>:i386 libxkbcommon0:i386 libzbar0:i386 mono-<span class="number">4.0</span>-gac</div><div class="line">  mono-gac mono-runtime mono-runtime-common mono-runtime-sgen python-mpd</div><div class="line">  python-mutagen python-twisted-names</div><div class="line">Use <span class="string">'apt-get autoremove'</span> to remove them.</div><div class="line">The following extra packages will be installed:</div><div class="line">  python-pyasn1</div><div class="line">The following NEW packages will be installed:</div><div class="line">  python-pyasn1 python-twisted-conch</div><div class="line"><span class="number">0</span> upgraded, <span class="number">2</span> newly installed, <span class="number">0</span> to remove and <span class="number">6</span> not upgraded.</div><div class="line">Need to get <span class="number">286</span> kB of archives.</div><div class="line">After this operation, <span class="number">1</span>,<span class="number">793</span> kB of additional disk space will be used.</div><div class="line">Do you want to continue? [Y/n] </div><div class="line">Get:<span class="number">1</span> http://mirrors.ustc.edu.cn/ubuntu/ trusty/main python-pyasn1 all <span class="number">0.1</span><span class="number">.7</span>-1ubuntu2 [<span class="number">44.2</span> kB]</div><div class="line">Get:<span class="number">2</span> http://mirrors.ustc.edu.cn/ubuntu/ trusty/main python-twisted-conch all <span class="number">1</span>:<span class="number">13.2</span><span class="number">.0</span>-1ubuntu1 [<span class="number">242</span> kB]</div><div class="line">Fetched <span class="number">286</span> kB <span class="keyword">in</span> 0s (<span class="number">1</span>,<span class="number">595</span> kB/s)         </div><div class="line">Selecting previously unselected package python-pyasn1.</div><div class="line">(Reading database <span class="keyword">...</span> <span class="number">359746</span> files and directories currently installed.)</div><div class="line">Preparing to unpack <span class="keyword">...</span>/python-pyasn1_0.1.7-1ubuntu2_all.deb <span class="keyword">...</span></div><div class="line">Unpacking python-pyasn1 (<span class="number">0.1</span><span class="number">.7</span>-1ubuntu2) <span class="keyword">...</span></div><div class="line">Selecting previously unselected package python-twisted-conch.</div><div class="line">Preparing to unpack <span class="keyword">...</span>/python-twisted-conch_1%3a13.2.0-1ubuntu1_all.deb <span class="keyword">...</span></div><div class="line">Unpacking python-twisted-conch (<span class="number">1</span>:<span class="number">13.2</span><span class="number">.0</span>-1ubuntu1) <span class="keyword">...</span></div><div class="line">Processing triggers <span class="keyword">for</span> doc-base (<span class="number">0.10</span><span class="number">.5</span>) <span class="keyword">...</span></div><div class="line">Processing <span class="number">1</span> added doc-base file...</div><div class="line">Processing triggers <span class="keyword">for</span> man-db (<span class="number">2.6</span><span class="number">.7</span><span class="number">.1</span>-1ubuntu1) <span class="keyword">...</span></div><div class="line">Setting up python-pyasn1 (<span class="number">0.1</span><span class="number">.7</span>-1ubuntu2) <span class="keyword">...</span></div><div class="line">Setting up python-twisted-conch (<span class="number">1</span>:<span class="number">13.2</span><span class="number">.0</span>-1ubuntu1) <span class="keyword">...</span></div></pre></td></tr></table></figure>

<p>安装总算完成，再试一次，妈蛋，又来一个新错误，这是什么gui？？？</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">chen@chen-P31:~/stack$ scrapy crawl stack</div><div class="line"><span class="number">2015</span>-<span class="number">04</span>-<span class="number">26</span> <span class="number">16</span>:<span class="number">50</span>:<span class="number">44</span>+<span class="number">0800</span> [scrapy] INFO: Scrapy <span class="number">0.24</span>.<span class="number">6</span> started (bot: stack)</div><div class="line"><span class="number">2015</span>-<span class="number">04</span>-<span class="number">26</span> <span class="number">16</span>:<span class="number">50</span>:<span class="number">44</span>+<span class="number">0800</span> [scrapy] INFO: Optional features available: ssl, http11</div><div class="line"><span class="number">2015</span>-<span class="number">04</span>-<span class="number">26</span> <span class="number">16</span>:<span class="number">50</span>:<span class="number">44</span>+<span class="number">0800</span> [scrapy] INFO: Overridden settings: {<span class="string">'NEWSPIDER_MODULE'</span>: <span class="string">'stack.spiders'</span>, <span class="string">'SPIDER_MODULES'</span>: [<span class="string">'stack.spiders'</span>], <span class="string">'BOT_NAME'</span>: <span class="string">'stack'</span>}</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"/usr/local/bin/scrapy"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    sys.exit(execute())</div><div class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py"</span>, line <span class="number">143</span>, <span class="keyword">in</span> execute</div><div class="line">    _run_print_<span class="built_in">help</span>(parser, _run_command, cmd, args, opts)</div><div class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py"</span>, line <span class="number">89</span>, <span class="keyword">in</span> _run_print_<span class="built_in">help</span></div><div class="line">    func(*a, **kw)</div><div class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py"</span>, line <span class="number">150</span>, <span class="keyword">in</span> _run_command</div><div class="line">    cmd.run(args, opts)</div><div class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/commands/crawl.py"</span>, line <span class="number">60</span>, <span class="keyword">in</span> run</div><div class="line">    self.crawler_process.start()</div><div class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py"</span>, line <span class="number">92</span>, <span class="keyword">in</span> start</div><div class="line">    <span class="keyword">if</span> self.start_crawling():</div><div class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py"</span>, line <span class="number">124</span>, <span class="keyword">in</span> start_crawling</div><div class="line">    <span class="keyword">return</span> self._start_crawler() is not None</div><div class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py"</span>, line <span class="number">139</span>, <span class="keyword">in</span> _start_crawler</div><div class="line">    crawler.configure()</div><div class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py"</span>, line <span class="number">46</span>, <span class="keyword">in</span> configure</div><div class="line">    self.extensions = ExtensionManager.from_crawler(self)</div><div class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/middleware.py"</span>, line <span class="number">50</span>, <span class="keyword">in</span> from_crawler</div><div class="line">    <span class="keyword">return</span> cls.from_settings(crawler.settings, crawler)</div><div class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/middleware.py"</span>, line <span class="number">29</span>, <span class="keyword">in</span> from_settings</div><div class="line">    mwcls = load_object(clspath)</div><div class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/scrapy/utils/misc.py"</span>, line <span class="number">42</span>, <span class="keyword">in</span> load_object</div><div class="line">    raise ImportError(<span class="string">"Error loading object '%s': %s"</span> % (path, e))</div><div class="line">ImportError: Error loading object <span class="string">'scrapy.contrib.memusage.MemoryUsage'</span>: No module named mail.smtp</div></pre></td></tr></table></figure>

<p>最后的最后，我在我们万能的github上找到<a href="https://github.com/scrapy/scrapy/issues/958" target="_blank" rel="external">答案</a>，原来是我们没有安装python-twisted，安装一下，世界都美好了</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="built_in">get</span> install <span class="keyword">python</span>-twisted</div></pre></td></tr></table></figure>

<h2 id="输出到文件">输出到文件</h2>
<p>为了更直观的看到结果，我们将结果输出到一个json文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrapy crawl stack -<span class="keyword">o</span> <span class="built_in">items</span>.json -<span class="keyword">t</span> json</div></pre></td></tr></table></figure>

<p>噢耶，第一个爬虫成功</p>
<h1 id="存储到mongodb">存储到mongodb</h1>
<p>接下来，我们做最后一件事，我们将结果存储到mongodb的数据库中<br>在这里，我遇到一个大坑，无论是伯乐在线翻译的博客<br>还是网上搜索到的一般教程，都是使用pymongo.Connection来连接数据库，可是妈蛋，你使用<code>pip install pymongo</code>安装的版本都是最新版本3.0.1，那个Connection的写法已经不支持，被丢弃了，擦。<br>我们来看一下版本，我学到一个新命令<code>pip show pymongo</code>，用来查看某一个包的版本的。<br><img src="http://ww4.sinaimg.cn/large/692869a3gw1erjct36jnrj20df038dgf.jpg" alt="查看pymongo版本"><br>在pymongo 3.0的版本中，已经不再支持pymongo.Connection，而是使用pymongo.MongoClient来替代。</p>
<h2 id="第一步">第一步</h2>
<p>创建一个用来保存我们抓取数据的数据库。打开<code>settings.py</code>,指定管道，然后加入数据库的相关设置</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">BOT_NAME = <span class="string">'stack'</span></div><div class="line"></div><div class="line">SPIDER_MODULES = [<span class="string">'stack.spiders'</span>]</div><div class="line">NEWSPIDER_MODULE = <span class="string">'stack.spiders'</span></div><div class="line"></div><div class="line"><span class="comment"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span></div><div class="line"><span class="comment">#USER_AGENT = 'stack (+http://www.yourdomain.com)'</span></div><div class="line"></div><div class="line">ITEM_PIPELINES = [<span class="string">'stack.pipelines.MongoDBPipeline'</span>, ]</div><div class="line"><span class="comment">#关于mongodb的相关设置，包括服务器的ip，端口号，数据库名，表名，</span></div><div class="line"><span class="comment">#我也是第一次使用mongodb竟然不需要用户验证信息，而且这表名确实奇怪，叫做MONGODB_COLLECTION</span></div><div class="line">MONGODB_SERVER = <span class="string">"localhost"</span></div><div class="line">MONGODB_PORT = <span class="number">27017</span></div><div class="line">MONGODB_DB = <span class="string">"stackoverflow"</span></div><div class="line">MONGODB_COLLECTION = <span class="string">"questions"</span></div><div class="line"></div><div class="line">DOWNLOAD_DELAY = <span class="number">5</span>  <span class="comment">#抓取的延迟</span></div></pre></td></tr></table></figure>

<h2 id="第二步">第二步</h2>
<p>我们已经能够爬取和解析html数据了，而且已经配置了数据库，接下来，我们通过<code>pipelines.py</code>中建立一个管道去连接这两个部分。<br>我们首先来完成数据库的连接部分</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pymongo</div><div class="line"></div><div class="line"><span class="keyword">from</span> scrapy.conf <span class="keyword">import</span> settings</div><div class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> DropItem</div><div class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> log</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoDBPipeline</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        connection = pymongo.MongoClient(</div><div class="line">            settings[<span class="string">'MONGODB_SERVER'</span>],</div><div class="line">            settings[<span class="string">'MONGODB_PORT'</span>]</div><div class="line">        )</div><div class="line">        db = connection[settings[<span class="string">'MONGODB_DB'</span>]]</div><div class="line">        self.collection = db[settings[<span class="string">'MONGODB_COLLECTION'</span>]]</div></pre></td></tr></table></figure>

<p>接下来定义一个处理函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></div><div class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> item:</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</div><div class="line">            <span class="keyword">raise</span> DropItem(<span class="string">"Missing data!"</span>)</div><div class="line">    self.collection.update({<span class="string">'url'</span>: item[<span class="string">'url'</span>]}, dict(item), upsert=<span class="keyword">True</span>)</div><div class="line">    log.msg(<span class="string">"Question added to MongoDB database!"</span>,</div><div class="line">            level=log.DEBUG, spider=spider)</div><div class="line">    <span class="keyword">return</span> item</div></pre></td></tr></table></figure>

<p>ok,搞定，我们再测试一把</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrapy crawl stack</div></pre></td></tr></table></figure>

<h2 id="执行效果如下">执行效果如下</h2>
<p><img src="http://ww1.sinaimg.cn/large/692869a3gw1erjv5to5w3j20w70g8wio.jpg" alt="mongodb数据库管理"></p>
<h1 id="参考文献">参考文献</h1>
<p>1 <a href="https://github.com/scrapy/scrapy/issues/958" target="_blank" rel="external">ImportError: Error loading object ‘scrapy.contrib.memusage.MemoryUsage’: No module named mail.smtp</a><br>2 <a href="http://stackoverflow.com/questions/8671071/error-to-execute-python-scrappy-module" target="_blank" rel="external">http://stackoverflow.com/questions/8671071/error-to-execute-python-scrappy-module</a><br>3 <a href="http://python.jobbole.com/81320/" target="_blank" rel="external">Python下用Scrapy和MongoDB构建爬虫系统（1）</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天在伯乐在线上看到一篇翻译的博客，讲的是使用scrapy来抓取stackoverflow上的问题，刚好好久没用这个，于是一并捡起来玩一下。<br>]]>
    
    </summary>
    
      <category term="python" scheme="http://jackroyal.github.io/tags/python/"/>
    
      <category term="scrapy" scheme="http://jackroyal.github.io/tags/scrapy/"/>
    
      <category term="爬虫" scheme="http://jackroyal.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="python学习笔记" scheme="http://jackroyal.github.io/categories/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用opencv实现人脸检测]]></title>
    <link href="http://jackroyal.github.io/2015/04/26/face-detection/"/>
    <id>http://jackroyal.github.io/2015/04/26/face-detection/</id>
    <published>2015-04-26T04:54:24.000Z</published>
    <updated>2015-04-26T05:21:21.000Z</updated>
    <content type="html"><![CDATA[<p>这两个星期，都在搞这个，就把代码都分享一下，太烂，就不分享到github了。<br><a id="more"></a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding:utf-8-*-</span></div><div class="line">__author__ = <span class="string">'chen'</span></div><div class="line"><span class="keyword">import</span> cv2</div><div class="line"><span class="keyword">import</span> Image</div><div class="line"><span class="keyword">import</span> ImageDraw</div><div class="line"><span class="keyword">import</span> sys,os</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">detectFaces</span><span class="params">(image_name)</span>:</span></div><div class="line">    img = cv2.imread(image_name)</div><div class="line">    face_cascade = cv2.CascadeClassifier(<span class="string">'../data2/haarcascades/haarcascade_frontalface_alt.xml'</span>)<span class="comment">#加载级联分类器，这里使用的是intel训练出来的人脸识别分类器</span></div><div class="line">    <span class="keyword">if</span> img.ndim == <span class="number">3</span>:<span class="comment">#判断图片是否是灰度图像，如果img.ndim==3那就表示不是灰度图像</span></div><div class="line">        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<span class="comment">#将图片转化为灰度图像</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        gray = img</div><div class="line"></div><div class="line">    faces = face_cascade.detectMultiScale(gray, scaleFactor=<span class="number">1.2</span>, minNeighbors=<span class="number">4</span>, minSize=(<span class="number">30</span>, <span class="number">30</span>), flags = cv2.CASCADE_SCALE_IMAGE)<span class="comment">#核心操作，返回图片中所有的人脸的坐标和宽高度</span></div><div class="line">    result = []</div><div class="line">    <span class="keyword">for</span> (x, y, width, height) <span class="keyword">in</span> faces:</div><div class="line">        <span class="keyword">print</span> (x, y, width, height)</div><div class="line">        result.append((x, y, x+width, y+height))<span class="comment">#将原始数据，转化为人脸的四个点的坐标</span></div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawFaces</span><span class="params">(image_name)</span>:</span></div><div class="line">    faces = detectFaces(image_name)<span class="comment">#此处的返回值是一个元组，(x, y, width, height)，每一个元组都包括人脸的（x,y）坐标，还有人脸的宽度和高度，有这些数据，我们就可以把人脸标记出来，比如画一个矩形框出来</span></div><div class="line">    <span class="keyword">print</span> faces</div><div class="line">    <span class="keyword">if</span> faces:</div><div class="line">        imga = cv2.imread(image_name)<span class="comment">#读取图片</span></div><div class="line">        draw_rects(imga, faces, (<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>))<span class="comment">#画矩形标记</span></div><div class="line">        cv2.imshow(<span class="string">'img'</span>, imga)<span class="comment">#显示修改后的矩形</span></div><div class="line">        cv2.waitKey(<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_rects</span><span class="params">(img, rects, color)</span>:</span></div><div class="line">    <span class="keyword">for</span> x1, y1, x2, y2 <span class="keyword">in</span> rects:</div><div class="line">        cv2.rectangle(img, (x1, y1), (x2, y2), color, <span class="number">2</span>)<span class="comment">#调用cv2的矩形函数，画矩形</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveFaces</span><span class="params">(image_name)</span>:</span><span class="comment">#将人脸截取并保存成图片</span></div><div class="line">    faces = detectFaces(image_name)</div><div class="line">    <span class="keyword">if</span> faces:</div><div class="line">        save_dir = image_name.split(<span class="string">'.'</span>)[<span class="number">0</span>] + <span class="string">"_faces_"</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(save_dir):<span class="comment">#检测目录是否存在，如果不存在那就创建目录</span></div><div class="line">            os.mkdir(save_dir)</div><div class="line">        count = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> (x1, y1, x2, y2) <span class="keyword">in</span> faces:</div><div class="line">            imga = cv2.imread(image_name)</div><div class="line">            file_name = os.path.join(save_dir,str(count)+<span class="string">".jpg"</span>)</div><div class="line">            roi = imga[y1:y2,x1:x2]<span class="comment">#这一步是重点，他就像取一个数组一样，把人脸的部分保存出来</span></div><div class="line">            cv2.imwrite(file_name,cv2.cvtColor(cv2.resize(roi,(<span class="number">92</span>,<span class="number">112</span>)), cv2.COLOR_BGR2GRAY))<span class="comment">#把图片的size重新设定维（92,112），并将图片转换为灰度图像</span></div><div class="line">            <span class="comment"># cv2.imshow('aaa',imga)</span></div><div class="line"></div><div class="line"></div><div class="line">drawFaces(<span class="string">'../at/chen.jpg'</span>)</div><div class="line">saveFaces(<span class="string">'../at/chen.jpg'</span>)</div></pre></td></tr></table></figure>

<p>这里面的截取人脸并保存的saveFaces函数，我觉得还不错。网上找到的代码，调用了Image库，我的代码全部都是用cv2搞定的，没有用Image库。画矩形也是，我也都是用cv2自带的东西完成的。<br>我用以上代码生成的数据，去进行人脸识别，惨不忍睹。</p>
<h1 id="参考文献">参考文献</h1>
<p>1 <a href="http://blog.csdn.net/u012162613/article/details/43523507" target="_blank" rel="external">Python-OpenCV人脸检测(代码)</a><br>2 <a href="http://wangwei007.blog.51cto.com/68019/1104940" target="_blank" rel="external">python os.path模块常用方法详解</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这两个星期，都在搞这个，就把代码都分享一下，太烂，就不分享到github了。<br>]]>
    
    </summary>
    
      <category term="opencv" scheme="http://jackroyal.github.io/tags/opencv/"/>
    
      <category term="图像处理" scheme="http://jackroyal.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
      <category term="python" scheme="http://jackroyal.github.io/tags/python/"/>
    
      <category term="图像处理" scheme="http://jackroyal.github.io/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用opencv实现人脸识别]]></title>
    <link href="http://jackroyal.github.io/2015/04/26/face-recognizer/"/>
    <id>http://jackroyal.github.io/2015/04/26/face-recognizer/</id>
    <published>2015-04-26T02:50:00.000Z</published>
    <updated>2015-04-26T04:51:05.000Z</updated>
    <content type="html"><![CDATA[<p>最近搞了两个星期的opencv，人脸识别方向，感觉没有什么前途，看不到论文在哪里啊。<br><a id="more"></a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding:utf-8-*-</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> cv2</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line">z = {} <span class="comment">#存储关于每张图片对应的lable</span></div><div class="line">for_pre = []  <span class="comment">#存储用来进行测试的图片，规则是每个人10张图，5张用来训练，5张用来测试</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize</span><span class="params">(X, low, high, dtype=None)</span>:</span></div><div class="line">    <span class="string">"""对数据进行正常化处理，让其处于最高和最低值之间."""</span></div><div class="line">    X = np.asarray(X)</div><div class="line">    minX, maxX = np.min(X), np.max(X)</div><div class="line">    <span class="comment"># normalize to [0...1].</span></div><div class="line">    X = X - float(minX)</div><div class="line">    X = X / float((maxX - minX))</div><div class="line">    <span class="comment"># scale to [low...high].</span></div><div class="line">    X = X * (high-low)</div><div class="line">    X = X + low</div><div class="line">    <span class="keyword">if</span> dtype <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">return</span> np.asarray(X)</div><div class="line">    <span class="keyword">return</span> np.asarray(X, dtype=dtype)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_images</span><span class="params">(path, sz=None)</span>:</span></div><div class="line">    <span class="string">"""从文件夹中读取图像，并且将其大小限制在一定范围之内</span></div><div class="line"></div><div class="line">    参数:</div><div class="line">        path: 图片的路径</div><div class="line">        sz: 设定图像的大小以元组的形式，例如(92,112)</div><div class="line"></div><div class="line">    返回值:</div><div class="line">        返回一个list的数据[X,y]</div><div class="line"></div><div class="line">            X: 一个numpy的数组，里面存储的是所有的图片的矩阵.</div><div class="line">            y:一个list存储的，都是与X中图片对应的lable</div><div class="line">    """</div><div class="line">    c = <span class="number">0</span></div><div class="line">    X,y = [], []</div><div class="line">    <span class="keyword">for</span> dirname, dirnames, filenames <span class="keyword">in</span> os.walk(path):</div><div class="line">        <span class="keyword">for</span> subdirname <span class="keyword">in</span> dirnames:</div><div class="line">            subject_path = os.path.join(dirname, subdirname)</div><div class="line">            <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(subject_path):</div><div class="line">                <span class="keyword">try</span>:</div><div class="line">                    im = cv2.imread(os.path.join(subject_path, filename), cv2.IMREAD_GRAYSCALE)</div><div class="line">                    <span class="comment"># resize to given size (if given)</span></div><div class="line">                    <span class="keyword">if</span> (sz <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>):</div><div class="line">                        im = cv2.resize(im, sz)</div><div class="line">                    <span class="keyword">if</span> y.count(c) &gt; <span class="number">4</span>:</div><div class="line">                        for_pre.append({<span class="string">'no'</span>:c,<span class="string">'src'</span>:np.asarray(im, dtype=np.uint8)})</div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        X.append(np.asarray(im, dtype=np.uint8))</div><div class="line">                        y.append(c)</div><div class="line">                    <span class="keyword">global</span> z</div><div class="line">                    z[os.path.join(subject_path, filename)] = c</div><div class="line">                <span class="keyword">except</span> IOError, (errno, strerror):</div><div class="line">                    <span class="keyword">print</span> <span class="string">"I/O error({0}): {1}"</span>.format(errno, strerror)</div><div class="line">                <span class="keyword">except</span>:</div><div class="line">                    <span class="keyword">print</span> <span class="string">"Unexpected error:"</span>, sys.exc_info()[<span class="number">0</span>]</div><div class="line">                    <span class="keyword">raise</span></div><div class="line">            c = c+<span class="number">1</span></div><div class="line">    <span class="keyword">return</span> [X,y]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">prediction</span><span class="params">(model)</span>:</span></div><div class="line">    <span class="string">"""图像预测</span></div><div class="line"></div><div class="line">    参数:</div><div class="line">        model: 就是图片训练的那个model</div><div class="line"></div><div class="line">    数据集中每个人存储了10张图片，我把其中的5张存储到for_pre，作为训练数据。用已知的lable和预测的lable作比较，得出图片识别正确的概率</div><div class="line">    """</div><div class="line">    tn = <span class="number">0</span> <span class="comment">#识别正确的图片数</span></div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> for_pre:</div><div class="line">        [p_label, p_confidence] = model.predict(cv2.resize(item[<span class="string">'src'</span>],(<span class="number">92</span>,<span class="number">112</span>)))</div><div class="line">        <span class="keyword">if</span> p_label == item[<span class="string">'no'</span>]:</div><div class="line">            tn = tn+<span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'the answer is %d,'</span> % item[<span class="string">'no'</span>],</div><div class="line">            <span class="keyword">print</span> <span class="string">"Predicted label = %d (confidence=%.2f)"</span> % (p_label, p_confidence)</div><div class="line"></div><div class="line">    <span class="keyword">print</span> <span class="string">"总共有%d次预测，其中正确次数为%d"</span> %(len(for_pre),tn)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="comment"># This is where we write the images, if an output_dir is given</span></div><div class="line">    <span class="comment"># in command line:</span></div><div class="line">    out_dir = <span class="keyword">None</span></div><div class="line">    <span class="comment"># You'll need at least a path to your image data, please see</span></div><div class="line">    <span class="comment"># the tutorial coming with this source code on how to prepare</span></div><div class="line">    <span class="comment"># your image data:</span></div><div class="line">    <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"USAGE: face_rec.py &lt;/path/to/images&gt; [&lt;/path/to/store/images/at&gt;]"</span></div><div class="line">        sys.exit()</div><div class="line">    <span class="comment"># Now read in the image data. This must be a valid path!</span></div><div class="line">    [X,y] = read_images(sys.argv[<span class="number">1</span>], (<span class="number">92</span>, <span class="number">112</span>))</div><div class="line"> </div><div class="line">    <span class="comment"># Convert labels to 32bit integers. This is a workaround for 64bit machines,</span></div><div class="line">    <span class="comment"># because the labels will truncated else. This will be fixed in code as</span></div><div class="line">    <span class="comment"># soon as possible, so Python users don't need to know about this.</span></div><div class="line">    <span class="comment"># Thanks to Leo Dirac for reporting:</span></div><div class="line">    y = np.asarray(y, dtype=np.int32)</div><div class="line">    <span class="comment"># If a out_dir is given, set it:</span></div><div class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">3</span>:</div><div class="line">        out_dir = sys.argv[<span class="number">2</span>]</div><div class="line">    <span class="comment"># Create the Eigenfaces model. We are going to use the default</span></div><div class="line">    <span class="comment"># parameters for this simple example, please read the documentation</span></div><div class="line">    <span class="comment"># for thresholding:</span></div><div class="line">    model = cv2.createEigenFaceRecognizer()</div><div class="line">    <span class="comment"># Read</span></div><div class="line">    <span class="comment"># Learn the model. Remember our function returns Python lists,</span></div><div class="line">    <span class="comment"># so we use np.asarray to turn them into NumPy lists to make</span></div><div class="line">    <span class="comment"># the OpenCV wrapper happy:</span></div><div class="line">    model.train(np.asarray(X), np.asarray(y))</div><div class="line">    prediction(model) <span class="comment">#图片预测</span></div><div class="line">    <span class="comment">#</span></div><div class="line">    <span class="comment">#</span></div><div class="line">    <span class="comment"># You can see the available parameters with getParams():</span></div><div class="line">    <span class="keyword">print</span> model.getParams()</div><div class="line">    <span class="comment"># Now let's get some data:</span></div><div class="line">    mean = model.getMat(<span class="string">"mean"</span>)</div><div class="line">    <span class="keyword">print</span> out_dir + <span class="string">'/out.xml'</span></div><div class="line">    f = open(out_dir + <span class="string">'/out.xml'</span>,<span class="string">'w'</span>)</div><div class="line">    model.save(out_dir + <span class="string">'/out.xml'</span>)</div><div class="line">    eigenvectors = model.getMat(<span class="string">"eigenvectors"</span>)</div><div class="line">    <span class="comment"># We'll save the mean, by first normalizing it:</span></div><div class="line">    mean_norm = normalize(mean, <span class="number">0</span>, <span class="number">255</span>, dtype=np.uint8)</div><div class="line">    mean_resized = mean_norm.reshape(X[<span class="number">0</span>].shape)</div><div class="line">    <span class="keyword">if</span> out_dir <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        cv2.imshow(<span class="string">"mean"</span>, mean_resized)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        cv2.imwrite(<span class="string">"%s/mean.png"</span> % (out_dir), mean_resized)</div><div class="line">    <span class="comment"># Turn the first (at most) 16 eigenvectors into grayscale</span></div><div class="line">    <span class="comment"># images. You could also use cv::normalize here, but sticking</span></div><div class="line">    <span class="comment"># to NumPy is much easier for now.</span></div><div class="line">    <span class="comment"># Note: eigenvectors are stored by column:</span></div><div class="line">    <span class="comment"># for i in xrange(min(len(X), 16)):</span></div><div class="line">    <span class="comment">#     eigenvector_i = eigenvectors[:,i].reshape(X[0].shape)</span></div><div class="line">    <span class="comment">#     eigenvector_i_norm = normalize(eigenvector_i, 0, 255, dtype=np.uint8)</span></div><div class="line">    <span class="comment">#     # Show or save the images:</span></div><div class="line">    <span class="comment">#     if out_dir is None:</span></div><div class="line">    <span class="comment">#         cv2.imshow("%s/eigenface_%d" % (out_dir,i), eigenvector_i_norm)</span></div><div class="line">    <span class="comment">#     else:</span></div><div class="line">    <span class="comment">#         cv2.imwrite("%s/eigenface_%d.png" % (out_dir,i), eigenvector_i_norm)</span></div><div class="line">    <span class="comment"># Show the images:</span></div><div class="line">    <span class="keyword">print</span> z</div><div class="line">    <span class="keyword">if</span> out_dir <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        cv2.waitKey(<span class="number">0</span>)</div></pre></td></tr></table></figure>

<p>代码执行效果如下<br><img src="http://ww1.sinaimg.cn/large/692869a3gw1eriuc3wsckj20nr08qn2q.jpg" alt="人脸识别执行效果"><br>我在这里输出的是那些预测错误的。<code>总共有200次预测，其中正确次数为186。</code>这预测率有点低啊，我用的数据都是来自于<a href="http://www.cl.cam.ac.uk/research/dtg/attarchive/facedatabase.html" target="_blank" rel="external"> AT&amp;T Facedatabase</a>。一共40个人，每个人10张图，图片宽高是92*112像素，全部是灰度图像。<br>至于如何提高图片识别的效率，我也不知道。</p>
<h1 id="参考文献">参考文献</h1>
<p>1 <a href="http://docs.opencv.org/modules/contrib/doc/facerec/facerec_tutorial.html" target="_blank" rel="external">http://docs.opencv.org/modules/contrib/doc/facerec/facerec_tutorial.html</a><br>2 <a href="https://code.google.com/p/pythonxy/source/browse/src/python/OpenCV/DOC/samples/python2/facerec_demo.py?repo=xy-27&amp;r=a2e41c7a3cb6db536b948747872cab71c696b44e" target="_blank" rel="external">python调用opencv实现人脸识别</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近搞了两个星期的opencv，人脸识别方向，感觉没有什么前途，看不到论文在哪里啊。<br>]]>
    
    </summary>
    
      <category term="opencv" scheme="http://jackroyal.github.io/tags/opencv/"/>
    
      <category term="图像处理" scheme="http://jackroyal.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
      <category term="python" scheme="http://jackroyal.github.io/tags/python/"/>
    
      <category term="图像处理" scheme="http://jackroyal.github.io/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[blog2markdown程序打包,csdn爬虫]]></title>
    <link href="http://jackroyal.github.io/2015/03/29/blog2markdown-csdn-windows/"/>
    <id>http://jackroyal.github.io/2015/03/29/blog2markdown-csdn-windows/</id>
    <published>2015-03-29T14:08:22.000Z</published>
    <updated>2015-03-30T13:47:05.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>项目地址<a href="https://github.com/Jackroyal/blog2markdown.git" target="_blank" rel="external">https://github.com/Jackroyal/blog2markdown.git</a></p>
</blockquote>
<p>用来实现普通blog到markdown的搬家，自动将blog的html转换成HEXO可用的Markdown格式<br>暂时只做了CSDN</p>
<h3 id="UPDATE:">UPDATE:</h3>
<p>2015-03-29 添加了打包成exe的程序,修复cmd下乱码,win和ubuntu完美运行<br>2015-03-29 连夜修复了在win下乱码的问题,删除了冗余代码<br>2015-03-28 将某些参数改为从配置文件中读取,加入更多异常判断<br>2014-12-15 优化标签解析功能,添加了标题,tag和category<br>2014-12-13 实现解析功能,基本完成解析功能<br>2014-12-10 实现CSDN的抓取，正在实现parse解析过程<br><a id="more"></a></p>
<h3 id="BUG">BUG</h3>
<p>如果代码中有#和*会被转义成<code>\#</code>和<code>\*</code><br>对table的支持不好</p>
<h3 id="依赖库">依赖库</h3>
<p>爬虫使用了<code>beautifulsoup  4.3.2</code><br><a href="http://www.crummy.com/software/BeautifulSoup/" target="_blank" rel="external">点我点我</a><br>你必须安装这个才可以正常使用<br>PS:我打包了exe<a href="http://pan.baidu.com/s/1dDERlOP" target="_blank" rel="external">点此下载</a>,可以什么不装,改完配置文件,直接运行</p>
<h1 id="使用:">使用:</h1>
<h2 id="首先,编辑配置文件spider-conf">首先,编辑配置文件<code>spider.conf</code></h2>
<p>格式如下:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[blog]</div><div class="line"><span class="comment">#此处url不需要单引号或者双引号,不然类型识别错误,网址最后不要/</span></div><div class="line"><span class="variable">url=</span>http://blog.csdn.net/jackroyal</div><div class="line">[setting]</div><div class="line"><span class="variable">wait_time=</span><span class="number">5</span></div></pre></td></tr></table></figure>

<p>这里的<code>url</code>地址注意不要加引号,下面的<code>wait_time</code>是指两次抓取的间隔时间,这是为了安全起见,如果高频访问,可能会被封,我设置的<code>5</code>秒,你可以根据自己需要去设置</p>
<h2 id="打包">打包</h2>
<p>我打包了一个<a href="http://pan.baidu.com/s/1dDERlOP" target="_blank" rel="external">exe程序</a>,放在github项目的dist目录下,在windows系统中,<code>直接下载</code>,<code>运行</code></p>
<p>PS:由于pyInstaller的问题,导致无法在中文路径下正常运行</p>
<p>比如你放在C:/users/张三/spider.exe<br>这样是无法正常运行的<br>所以应该放在全英文的目录下<br>C:/software/spider.exe<br>运行结果如图<br><img src="http://ww2.sinaimg.cn/large/692869a3gw1eqmymt6bhrj20ip0cata6.jpg" alt="spider运行截图"><br><img src="http://ww1.sinaimg.cn/large/692869a3gw1eqmyur9uihj20mb0gqmzf.jpg" alt="运行结果截图"></p>
<h1 id="源码执行">源码执行</h1>
<p>如果你对我的exe不放心,可以自己执行python源码</p>
<h3 id="执行">执行</h3>
<p>在linux下,首先要给予执行权限</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chmod <span class="keyword">a</span>+<span class="keyword">x</span> spider.<span class="keyword">py</span> ParseBlog.<span class="keyword">py</span></div><div class="line"><span class="keyword">python</span> spider.<span class="keyword">py</span></div></pre></td></tr></table></figure>

<p>然后就可以了,输出文件在output文件夹</p>
<p>在win下,经过修复也可以正常运行了,在idle(在win中你安装了python2.7的话就会有这个编辑器)中是可以完全正常的显示中文</p>
<figure class="highlight ,在系统自带的cmd里中文显示会有问题,因为cmd中的编码默认是GBK,我程序基本都是utf-8,如果要在cmd显示正常,显示的代码都要加个str.encode('utf-8')才行."><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">不过抓取是没有问题的,此处就不纠结了哈,能用就好</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#在win下,没有权限的问题,直接执行就好了</div><div class="line"><span class="keyword">python</span> spider.<span class="keyword">py</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>项目地址<a href="https://github.com/Jackroyal/blog2markdown.git" target="_blank" rel="external">https://github.com/Jackroyal/blog2markdown.git</a></p>
</blockquote>
<p>用来实现普通blog到markdown的搬家，自动将blog的html转换成HEXO可用的Markdown格式<br>暂时只做了CSDN</p>
<h3 id="UPDATE:">UPDATE:</h3>
<p>2015-03-29 添加了打包成exe的程序,修复cmd下乱码,win和ubuntu完美运行<br>2015-03-29 连夜修复了在win下乱码的问题,删除了冗余代码<br>2015-03-28 将某些参数改为从配置文件中读取,加入更多异常判断<br>2014-12-15 优化标签解析功能,添加了标题,tag和category<br>2014-12-13 实现解析功能,基本完成解析功能<br>2014-12-10 实现CSDN的抓取，正在实现parse解析过程<br>]]>
    
    </summary>
    
      <category term="github" scheme="http://jackroyal.github.io/tags/github/"/>
    
      <category term="hexo" scheme="http://jackroyal.github.io/tags/hexo/"/>
    
      <category term="windows" scheme="http://jackroyal.github.io/tags/windows/"/>
    
      <category term="python" scheme="http://jackroyal.github.io/tags/python/"/>
    
      <category term="python学习笔记" scheme="http://jackroyal.github.io/categories/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo发布失败]]></title>
    <link href="http://jackroyal.github.io/2015/03/29/hexo-deploy-error/"/>
    <id>http://jackroyal.github.io/2015/03/29/hexo-deploy-error/</id>
    <published>2015-03-29T10:09:28.000Z</published>
    <updated>2015-03-30T13:59:23.000Z</updated>
    <content type="html"><![CDATA[<p>可能受到上次ddos的问题,这两天国内访问github,总是感觉不顺畅.<br>今天下午写了一篇博客,可是却发布不成功,一直卡在这一步:<br><img src="http://ww3.sinaimg.cn/large/692869a3gw1eqmrrf20j1j20g006676y.jpg" alt="hexo发布的时候卡住"></p>
<p>然后我继续等,得到如下错误:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="variable">Failed</span> to <span class="keyword">receive</span> <span class="variable">SOCKS4</span> connect request ack.</div></pre></td></tr></table></figure>

<p>我执行了<code>hexo clean</code>命令,手动删掉了<code>.deploy</code>文件夹,可是还是不行<br>最后报错<br>无法连接<code>https://github.com/Jackroyal/Jackroyal.github.io.git</code></p>
<p><em>(ps:此处已经无法重现了,抽风啊)</em></p>
<p>最后我换了下这条链接<br>我修改了博客目录下的<code>_config.yml</code>,改了deploy参数<br>原参数设置</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="class"><span class="keyword">type</span>: <span class="title">github</span></span></div><div class="line">  repo: https:<span class="comment">//github.com/Jackroyal/Jackroyal.github.io.git</span></div><div class="line">  branch: master</div></pre></td></tr></table></figure>

<p>修改以后:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: github</div><div class="line">  repo: git@github.com:Jackroyal/Jackroyal.github.<span class="built_in">io</span>.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>

<p>然后就deploy成功了.</p>
<p><em>PPPS:千万注意,上面的参数设置repo:后面有一个空格,没有空格会报错</em></p>
<h1 id="update:">update:</h1>
<p>repo的两种方式分别为ssh和https<br>昨天没搞清楚,专门去查了一下,ssh和https两种提交的区别<br>官方推荐用https,因为这回要求你输入用户名和密码,这样更安全<br>用ssh的话,只要你的ssh-key(可以设置一道类似密码的东西,和你的key一起加密,这样使用的时候会要求输入这段密码)对,那么就都可以提交,没有了更多的验证过程(可以设置一个para加密,提交会要求输入这段para)</p>
<hr>
<h3 id="友情链接">友情链接</h3>
<p><a href="http://rolight.cn/blog/?p=34" target="_blank" rel="external">ubuntu  shadowsocks 全局 代理</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>可能受到上次ddos的问题,这两天国内访问github,总是感觉不顺畅.<br>今天下午写了一篇博客,可是却发布不成功,一直卡在这一步:<br><img src="http://ww3.sinaimg.cn/large/692869a3gw1eqmrrf20j1j20g00]]>
    </summary>
    
      <category term="hexo" scheme="http://jackroyal.github.io/tags/hexo/"/>
    
      <category term="hexo" scheme="http://jackroyal.github.io/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python学习笔记--python和beautifulsoup遇到的编码问题]]></title>
    <link href="http://jackroyal.github.io/2015/03/29/python-blog-spider/"/>
    <id>http://jackroyal.github.io/2015/03/29/python-blog-spider/</id>
    <published>2015-03-29T06:43:45.000Z</published>
    <updated>2015-03-30T13:56:03.000Z</updated>
    <content type="html"><![CDATA[<p>在刚开始使用github pages的时候,我用python写了一个爬虫,计划是从csdn和cnblogs等博客网站上,把自己之前写的博客爬取下来,然后再转换成hexo用的markdown格式,样就可以直接添加到我的github pages.</p>
<blockquote>
<p>项目主页: <a href="https://github.com/Jackroyal/blog2markdown" target="_blank" rel="external">https://github.com/Jackroyal/blog2markdown</a></p>
</blockquote>
<p>最近刚好在学习python,刚好就把它给优化了一下,顺便做了个跨平台(哈哈,win和ubuntu都可以跑哈),昨天遇到很蛋疼的问题,一它给了我很多思路帮助我定位问题,.直搞到凌晨两点才弄好.<br>非常非常感谢<a href="http://www.crifan.com/summary_python_2_x_common_string_encode_decode_error_reason_and_solution/" target="_blank" rel="external">【总结】Python 2.x中常见字符编码和解码方面的错误及其解决办法</a><br>作者做了一个很好的总结,帮助我们定位问题.<br><a id="more"></a></p>
<h1 id="1_编码类型">1 编码类型</h1>
<p>首先确定好你的编码类型,比如一般推荐用utf-8.当确定编码类型后,就要保持统一,不要又弄些GBK的编码在里面.</p>
<ul>
<li>1.1  编辑器编码<ul>
<li>我们有时候会犯一个错误,我在py文件的头部声明当前文件是按照utf-8来编码.但是文件实际保存的编却不是utf-8,这样也会导致乱码.建议使用可以查看当前文件编码的编辑器,比如sublime text或者notepad++ 或者pycharm.<br>在sublime下如图所示<br><img src="http://ww2.sinaimg.cn/large/692869a3gw1eqmn535qb7j208u028t8k.jpg" alt="sublime显示当前文件编码"></li>
<li>文件编码声明,我们要在py文件的头部添加一行<code># -*- coding: utf-8 -*-</code>,表明我接下来要使用utf-8编码</li>
</ul>
</li>
<li>1.2  python解释器<ul>
<li>如果是Python的IDLE，如果你没修改defaultencoding，那么就使用默认的字符编码可以通过sys.getdefaultencoding()而获得，比如此处获得是：ascii<br><img src="http://ww4.sinaimg.cn/large/692869a3gw1eqmnd8fgrjj20b205kabi.jpg" alt="win中python解释器编码"><br><img src="http://ww3.sinaimg.cn/large/692869a3gw1eqmnfd29u7j20k5047wfv.jpg" alt="ubuntu终端解释器的编码"></li>
</ul>
</li>
<li>1.3  执行python代码<ul>
<li>其中，很常见的几种动作是：<ul>
<li>打印print对应的所获得的字符<ul>
<li>对于字符串打印,Python的逻辑:<ul>
<li>如果是Unicode字符串,则可以,自动地,编码为对应的终端所用编码,然后正确的显示出来</li>
<li>比如unicode的字符串,输出到windows的默认编码为GBK的cmd中,则Python可以自动将Unicode编码为GBK,然后输出到cmd中</li>
<li>个别特殊情况,也会出错:<ul>
<li>当此unicode字符串中包含某特殊字符,而目标终端的编码集合中,没有此字符,则很明显也是无法实现将Unicode编码为对应的特定编码的字符串,无法正确显示的</li>
</ul>
</li>
<li>如果是某种编码类型的str,则需要该str的编码类型,和目标终端编码匹配<ul>
<li>比如GBK的字符串,输出到windows的默认编码为GBK的cmd,则是可以正常输出的</li>
<li>此处后来经过代码测试，就发现一个有趣或者说诡异的问题，虽然我们python文件声明的UTF-8编码，但是实际上实际上是用GBK编码，而此时，文件中的字符串，很明显是用GBK存储的，所以，将此GBK字符，输出到GBK的cmd中，是可以正常输出的。即，此处字符串的类型，很明显只和文件所用的实际编码有关，而和文件所声明的代码无关。</li>
</ul>
</li>
<li>如果是UTF-8的字符串,输出到windows的默认编码为GBK的cmd,就会出错<ul>
<li>对相应的字符，进行编码（为某种特定类型的字符str），或解码（为对应的unicode类型的字符）</li>
<li>比如将当前的某种编码的字符串，解码为Unicode字符串<ul>
<li>很明显，也是要保证，你字符串本身的编码和所指定的编码，两者之间要一致的</li>
<li>比如：decodedUnicode = someUtf8Str.decode(“UTF-8”)</li>
<li>而如果用这样的：decodedUnicode = someGbkStr.decode(“UTF-8”)，那就会出现错误</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="2_常用方法">2 常用方法</h1>
<h3 id="2-1_encode和decode">2.1 encode和decode</h3>
<p>encode()  unicode编码-&gt;其他编码</p>
<p>decode()  其他编码-&gt;unicode编码</p>
<p>使用这两个方法的前提是,你要知道当前是什么编码.然后用对应的编码去进行解码<br>比如对于s字符串可以用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">s.encode(<span class="string">'utf-8'</span>) <span class="comment">#将s由unicode转码成utf-8</span></div><div class="line">s.decode(<span class="string">'GBK'</span>) <span class="comment">#s是GBK编码,将s转换成unicode</span></div></pre></td></tr></table></figure>

<h3 id="2-2_isinstance()">2.2 isinstance()</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">isinstance(s , <span class="keyword">unicode</span>) <span class="preprocessor">#检测s是否是unicode编码</span></div><div class="line"></div><div class="line">isinstance(s , str) <span class="preprocessor">#检测s是否是str格式</span></div></pre></td></tr></table></figure>

<h1 id="3_beautifulsoup编码问题">3 beautifulsoup编码问题</h1>
<h3 id="Beautiful_Soup_会按顺序尝试不同的编码将你的文档转换为Unicode：">Beautiful Soup 会按顺序尝试不同的编码将你的文档转换为Unicode：</h3>
<ul>
<li>可以通过from_encoding参数传递编码类型给soup的构造器</li>
<li>通过文档本身找到编码类型：例如XML的声明或者HTML文档http-equiv的META标签。 </li>
<li>如果Beautiful Soup在文档中发现编码类型，它试着使用找到的类型转换文档。 +</li>
<li>但是，如果你明显的指定一个编码类型， </li>
<li>并且成功使用了编码：这时它会忽略任何它在文档中发现的编码类型。</li>
<li>通过嗅探文件开头的一下数据，判断编码。如果编码类型可以被检测到，</li>
<li>它将是这些中的一个：UTF-*编码，EBCDIC或者ASCII。</li>
<li>通过chardet库,嗅探编码，如果你安装了这个库。</li>
<li>UTF-8</li>
<li>Windows-1252</li>
</ul>
<p>一般来说,bs的自动识别,是不会有问题的,但是在我这里除了问题,具体原因不太清楚<br>我的网页上已经声明了是<code>utf-8</code>编码<br>原来代码如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#这是原来的编码,在win下面乱码</span></div><div class="line"><span class="keyword">self</span>.soup = bs((response.read()))</div><div class="line"><span class="keyword">print</span> <span class="keyword">self</span>.soup.originalEncoding   <span class="comment">#此处结果竟然返回Windows-1252</span></div></pre></td></tr></table></figure>

<p>修改后代码如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#win下乱码的关键在这里,beautifulsoup解析的编码不对,我们这里直接指定编码</span></div><div class="line"><span class="keyword">self</span>.soup = bs((response.read()), from_encoding=<span class="string">'utf-8'</span>)</div><div class="line"><span class="keyword">print</span> <span class="keyword">self</span>.soup.originalEncoding   <span class="comment">#修正后代码正确返回'utf-8'</span></div></pre></td></tr></table></figure>

<p>看来beautifulsoup的自动识别编码不能全部依赖.<br>好不容易才定位到这里的问题,折腾了一天啊<br>这里用了一个方法来检测编码.就是soup.iriginalEncoding属性</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="keyword">self</span>.soup.originalEncoding   <span class="comment">#修正后代码正确返回'utf-8'</span></div></pre></td></tr></table></figure>

<p>这篇博客好水,毕竟不是很懂,所以说不出来</p>
<p>update:2015-03-30</p>
<h1 id="4_新技能get">4 新技能get</h1>
<p>之前都没好好理解原作者的博客,觉得没办法一个程序在win和ubuntu中不更改正常运行,现在发现,如果把编码改为unicode格式输出,那么系统会自动转换,这样就不存在utf-8编码在windows下cmd乱码了.</p>
<h1 id="参考文献">参考文献</h1>
<p>1 <a href="http://www.crifan.com/summary_python_2_x_common_string_encode_decode_error_reason_and_solution/" target="_blank" rel="external">【总结】Python 2.x中常见字符编码和解码方面的错误及其解决办法</a><br>2 <a href="http://www.crifan.com/resolved_python_garbled_chinese_characters_gb2312_gbk_gb18030-related_issues/" target="_blank" rel="external">【已解决】python中文字符乱码（GB2312，GBK，GB18030相关的问题）</a><br>参考资料太多,贴不过来啊,主要都是cifan的博客,里面资料很多,一步一步都有过程,非常好用,谢谢cifan作者</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在刚开始使用github pages的时候,我用python写了一个爬虫,计划是从csdn和cnblogs等博客网站上,把自己之前写的博客爬取下来,然后再转换成hexo用的markdown格式,样就可以直接添加到我的github pages.</p>
<blockquote>
<p>项目主页: <a href="https://github.com/Jackroyal/blog2markdown" target="_blank" rel="external">https://github.com/Jackroyal/blog2markdown</a></p>
</blockquote>
<p>最近刚好在学习python,刚好就把它给优化了一下,顺便做了个跨平台(哈哈,win和ubuntu都可以跑哈),昨天遇到很蛋疼的问题,一它给了我很多思路帮助我定位问题,.直搞到凌晨两点才弄好.<br>非常非常感谢<a href="http://www.crifan.com/summary_python_2_x_common_string_encode_decode_error_reason_and_solution/" target="_blank" rel="external">【总结】Python 2.x中常见字符编码和解码方面的错误及其解决办法</a><br>作者做了一个很好的总结,帮助我们定位问题.<br>]]>
    
    </summary>
    
      <category term="python" scheme="http://jackroyal.github.io/tags/python/"/>
    
      <category term="爬虫" scheme="http://jackroyal.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="python学习笔记" scheme="http://jackroyal.github.io/categories/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python学习笔记--一个简单聊天室的实现]]></title>
    <link href="http://jackroyal.github.io/2015/03/26/python-im/"/>
    <id>http://jackroyal.github.io/2015/03/26/python-im/</id>
    <published>2015-03-26T13:33:35.000Z</published>
    <updated>2015-03-26T14:09:53.000Z</updated>
    <content type="html"><![CDATA[<p>最近项目真多,一个接一个的失之交臂,全部都错过了.最近状态有些不好,容易胡思乱想.<br>这是来自书上的一个python聊天程序,我照着敲了一遍,然后给扩展了一下,加了多个房间和创建选择房间的功能,写了好久好久,感觉都拖了一个星期了.<br>下一步是做一个gui,恩,那将是我的第一个gui程序.<br><a id="more"></a></p>
<h1 id="先贴一下代码_server5-py">先贴一下代码 server5.py</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding:utf-8-*-</span></div><div class="line">__author__ = <span class="string">'chen'</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> asyncore <span class="keyword">import</span>  dispatcher</div><div class="line"><span class="keyword">from</span>  asynchat <span class="keyword">import</span> async_chat</div><div class="line"><span class="keyword">import</span> socket,asyncore</div><div class="line"></div><div class="line">PORT = <span class="number">5005</span>  <span class="comment">#设定程序的端口号</span></div><div class="line">NAME = <span class="string">'testchat'</span>  <span class="comment">#给服务器一个名称</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EndSession</span><span class="params">(Exception)</span>:</span><span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommandHandler</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    类似标准库中cmd.Cmd的简单命令处理程序</div><div class="line">    """</div><div class="line">    <span class="comment">#如果输入的命令,那么就返回unknown命令</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unknown</span><span class="params">(self, session, cmd)</span>:</span></div><div class="line">        session.push(<span class="string">'Unknown command: %s \r\n'</span> % cmd)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self, session, line)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line.strip():</div><div class="line">            <span class="keyword">return</span></div><div class="line">        parts = line.split(<span class="string">' '</span>, <span class="number">1</span>)</div><div class="line">        cmd = parts[<span class="number">0</span>]</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            line = parts[<span class="number">1</span>].strip()</div><div class="line">        <span class="keyword">except</span> IndexError:line = <span class="string">''</span></div><div class="line">        meth = getattr(self, <span class="string">'do_'</span> + cmd, <span class="keyword">None</span>)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            meth(session, line)</div><div class="line">        <span class="keyword">except</span> TypeError:</div><div class="line">            self.unknown(session, cmd)</div><div class="line"><span class="comment">#这个类是聊天房间的类,继承上面的类是为了继承执行命令的功能</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatRoom</span><span class="params">(CommandHandler)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, server)</span>:</span></div><div class="line">        self.server = server</div><div class="line">        self.name = name</div><div class="line">        self.sessions = []</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, session)</span>:</span></div><div class="line">        self.broadcast(session.name + <span class="string">' has entered the room %s\r\n'</span> % self.name)</div><div class="line">        session.push(<span class="string">'you can type "h" for help\r\n'</span>)</div><div class="line">        <span class="comment">##因为后面要将用户挪动房间,所以必须保存每个用户的session,这样才能挪动和删除</span></div><div class="line">        self.server.users[session.name] = session</div><div class="line">        self.sessions.append(session)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, session)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.sessions.remove(session)</div><div class="line">        <span class="keyword">except</span>: <span class="keyword">pass</span> <span class="comment">#如果此处的sessions为空或者已经不存在,会出错,此处不上报</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">broadcast</span><span class="params">(self, line)</span>:</span></div><div class="line">        <span class="comment">#广播,只广播到当前房间</span></div><div class="line">        <span class="keyword">for</span> session <span class="keyword">in</span> self.sessions:</div><div class="line">            session.push(line)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_say</span><span class="params">(self, session, line)</span>:</span></div><div class="line">        <span class="comment">#说话</span></div><div class="line">        self.broadcast(session.name + <span class="string">":"</span> + line + <span class="string">'\r\n'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_login</span><span class="params">(self, session, line)</span>:</span></div><div class="line">        <span class="comment">#login,其实是实现改名字的功能,懒得去改函数名了</span></div><div class="line">        name = line.strip()</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name:</div><div class="line">            session.push(<span class="string">'please enter a name\r\n'</span>)</div><div class="line">        <span class="keyword">elif</span> name <span class="keyword">in</span> self.server.users.keys():</div><div class="line">            session.push(<span class="string">'The name %s is taken\r\n'</span> % name)</div><div class="line">            session.push(<span class="string">'please try again\r\n'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            session.server.users[name] = session.server.users.pop(session.name)</div><div class="line">            session.name = name</div><div class="line">            session.enter(self)</div><div class="line">            self.do_list(session, <span class="string">''</span>)</div><div class="line">            session.push(<span class="string">'type "select name" to choose one room\r\n'</span>)</div><div class="line">    <span class="comment">#查看当前房间有哪些人</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_look</span><span class="params">(self, session, line)</span>:</span></div><div class="line">        session.push(<span class="string">'the following are in this room:\r\n'</span>)</div><div class="line">        <span class="keyword">for</span> other <span class="keyword">in</span> self.sessions:</div><div class="line">            session.push(other.name + <span class="string">"\r\n"</span>)</div><div class="line">    <span class="comment">#查看当前在线的用户,所有房间的用户</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_who</span><span class="params">(self, session, line)</span>:</span></div><div class="line">        session.push(<span class="string">'the following are logged in:\r\n'</span>)</div><div class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> self.server.users:</div><div class="line">            session.push(name + <span class="string">'\r\n'</span>)</div><div class="line">    <span class="comment">#查看当前所有的房间</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_list</span><span class="params">(self, session, line)</span>:</span></div><div class="line">        session.push(<span class="string">'the room list is below\r\n'</span>)</div><div class="line">        session.push(<span class="string">'   '</span>.join(self.server.rooms) + <span class="string">'\r\n'</span>)</div><div class="line">    <span class="comment">#选择房间</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_select</span><span class="params">(self, session, line)</span>:</span></div><div class="line">        name = line.strip()</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name:</div><div class="line">            session.push(<span class="string">'please enter a room name\r\n'</span>)</div><div class="line">        <span class="keyword">elif</span> name <span class="keyword">in</span> self.server.rooms.keys():</div><div class="line">            session.enter(self.server.rooms[name])</div><div class="line">            self.broadcast(<span class="string">' %s ,welcome to join %s\r\n'</span>% (session.name, name))</div><div class="line">    <span class="comment">#输出帮助</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_h</span><span class="params">(self, session, line)</span>:</span></div><div class="line">        session.push(<span class="string">'you can use this commands:\r\n1,who to see who is on this server(online and offline)\r\n2,'</span></div><div class="line">        <span class="string">'list to see how many room are avaliable\r\n3,look to see who are in this room\r\n4,login to login online and '</span></div><div class="line">        <span class="string">'change a name\r\n5,create to create a new room'</span>)</div><div class="line">    <span class="comment">#创建新房间</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_create</span><span class="params">(self, session, line)</span>:</span></div><div class="line">        name = line.strip()</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name:</div><div class="line">            session.push(<span class="string">'please enter a name\r\n'</span>)</div><div class="line">        <span class="keyword">elif</span> name <span class="keyword">in</span> self.server.rooms.keys():</div><div class="line">            session.push(<span class="string">'The room name %s is taken\r\n'</span> % name)</div><div class="line">            session.push(<span class="string">'please try again\r\n'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            ChatRoom(name, self.server)</div><div class="line">            session.server.rooms[name] = ChatRoom(name, self.server)</div><div class="line">            session.push(<span class="string">"the room %s create successful\r\n"</span> % name)</div><div class="line">            session.enter(session.server.rooms[name])</div><div class="line"><span class="comment">#每个用户回话,这个是重点类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatSession</span><span class="params">(async_chat)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, server, sock)</span>:</span></div><div class="line">        async_chat.__init__(self, sock)</div><div class="line">        self.server = server</div><div class="line">        self.set_terminator(<span class="string">'\r\n'</span>)</div><div class="line">        self.data = []</div><div class="line">        self.name = <span class="string">'visitor'</span> + str(len(server.users))<span class="comment">#初始化用户名,用visitor1之类来表示</span></div><div class="line">        self.room = self.server.main_room</div><div class="line">        self.enter(self.server.main_room)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enter</span><span class="params">(self, room)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            cur = self.room</div><div class="line">        <span class="keyword">except</span> AttributeError: <span class="keyword">pass</span></div><div class="line">        <span class="keyword">else</span>: cur.remove(self)</div><div class="line">        self.room = room</div><div class="line">        room.add(self)</div><div class="line">    <span class="comment">#当用户有输入的时候</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">collect_incoming_data</span><span class="params">(self, data)</span>:</span></div><div class="line">        self.data.append(data)</div><div class="line">    <span class="comment">#当用户输入终止符的时候</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">found_terminator</span><span class="params">(self)</span>:</span></div><div class="line">        line = <span class="string">''</span>.join(self.data)</div><div class="line">        self.data = []</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.room.handle(self, line)</div><div class="line">        <span class="keyword">except</span> EndSession:</div><div class="line">            self.handle_close()</div><div class="line">    <span class="comment">#关闭用户回话</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_close</span><span class="params">(self)</span>:</span></div><div class="line">        async_chat.handle_close(self)</div><div class="line">        <span class="comment">#self.enter()</span></div><div class="line"></div><div class="line"><span class="comment">#服务器类,这个也是重点类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatServer</span><span class="params">(dispatcher)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, port, name)</span>:</span></div><div class="line">        dispatcher.__init__(self)</div><div class="line">        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">        <span class="comment">#端口复用</span></div><div class="line">        self.set_reuse_addr()</div><div class="line">        self.bind((<span class="string">''</span>, port))</div><div class="line">        self.listen(<span class="number">5</span>)</div><div class="line">        self.sessions = {}</div><div class="line">        self.name = name</div><div class="line">        self.users = {}</div><div class="line">        self.rooms = {}</div><div class="line">        <span class="comment">#新建一个房间hall,因为每个初始登陆的用户没有房间,但是操作是依赖与ChatRoom类的,所以给一个初始默认的房间</span></div><div class="line">        self.main_room = ChatRoom(<span class="string">'hall'</span>, self)</div><div class="line">        self.rooms[self.main_room.name] = self.main_room</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_accept</span><span class="params">(self)</span>:</span></div><div class="line">        conn,addr = self.accept()</div><div class="line">        ChatSession(self, conn)</div><div class="line">        <span class="keyword">print</span> <span class="string">'connection attempt from '</span>, addr[<span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'server start'</span></div><div class="line">    s = ChatServer(PORT, NAME)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        asyncore.loop()</div><div class="line">    <span class="keyword">except</span> KeyboardInterrupt: <span class="keyword">print</span></div></pre></td></tr></table></figure>

<p>效果如图所示<br><img src="http://ww3.sinaimg.cn/large/692869a3gw1eqjhaekoz0j20ii0h5q62.jpg" alt="运行效果"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近项目真多,一个接一个的失之交臂,全部都错过了.最近状态有些不好,容易胡思乱想.<br>这是来自书上的一个python聊天程序,我照着敲了一遍,然后给扩展了一下,加了多个房间和创建选择房间的功能,写了好久好久,感觉都拖了一个星期了.<br>下一步是做一个gui,恩,那将是我的第一个gui程序.<br>]]>
    
    </summary>
    
      <category term="python" scheme="http://jackroyal.github.io/tags/python/"/>
    
      <category term="socket" scheme="http://jackroyal.github.io/tags/socket/"/>
    
      <category term="python学习笔记" scheme="http://jackroyal.github.io/categories/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python学习笔记--socket编程端口复用]]></title>
    <link href="http://jackroyal.github.io/2015/03/18/python-socket-port-reuse/"/>
    <id>http://jackroyal.github.io/2015/03/18/python-socket-port-reuse/</id>
    <published>2015-03-18T00:47:02.000Z</published>
    <updated>2015-03-18T01:36:34.000Z</updated>
    <content type="html"><![CDATA[<p>最近在学习socket编程,遇到一个问题:<br>我先bind一个端口后,如果通过ctr+c关闭进程.接下来执行程序的时候,就会提示<code>socket.error: Address already in use</code>.<br><a id="more"></a><br>照例google一番,找到<a href="http://blog.csdn.net/xl_xunzhao/article/details/3130037" target="_blank" rel="external">这个</a>.博主说的情况和我的一样.<br>我还在stackoverflow上找到<a href="http://stackoverflow.com/questions/4465959/python-errno-98-address-already-in-use" target="_blank" rel="external">这个</a>.<br>修改后代码如下:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">server_socket = <span class="keyword">socket</span>.<span class="keyword">socket</span>(<span class="keyword">socket</span>.AF_INET, <span class="keyword">socket</span>.SOCK_STREAM)</div><div class="line"><span class="comment">#下面这行是关健</span></div><div class="line">server_socket.<span class="keyword">setsockopt</span>(<span class="keyword">socket</span>.SOL_SOCKET, <span class="keyword">socket</span>.SO_REUSEADDR, <span class="number">1</span>)</div><div class="line"></div><div class="line">server_socket.<span class="keyword">bind</span>((<span class="string">''</span>, PORT))</div><div class="line">server_socket.<span class="keyword">listen</span>(<span class="number">5</span>)</div></pre></td></tr></table></figure>

<p>然后就搞定了.</p>
<p>下面的代码是socket编程敲得两个小例子,基于socket的聊天小程序都是别人的东西,只是练习一下,源地址在本文最后.</p>
<h2 id="多线程版本服务器端程序server2-py">多线程版本服务器端程序server2.py</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding:utf-8-*-</span></div><div class="line">__author__ = <span class="string">'chen'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> socket,sys</div><div class="line"><span class="keyword">from</span> thread <span class="keyword">import</span> *</div><div class="line"></div><div class="line">HOST = <span class="string">''</span></div><div class="line">PORT = <span class="number">8888</span></div><div class="line"></div><div class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line"><span class="keyword">print</span> <span class="string">'socket created'</span></div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    s.bind((HOST, PORT))</div><div class="line"><span class="keyword">except</span> socket.error, msg:</div><div class="line">    <span class="keyword">print</span> <span class="string">'bind failed.Error code: |||%S Message: %s'</span> %(str(msg[<span class="number">0</span>]), msg[<span class="number">1</span>])</div><div class="line">    sys.exit()</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'socket bind complete'</span></div><div class="line"></div><div class="line">s.listen(<span class="number">10</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'socket now listening'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">clientthread</span><span class="params">(conn)</span>:</span></div><div class="line">    conn.send(<span class="string">'welcome to the server.Type something and hit enter\n'</span>)</div><div class="line"></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        data = conn.recv(<span class="number">1024</span>)</div><div class="line">        reply = <span class="string">'ok...'</span> + data</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        conn.sendall(reply)</div><div class="line">    conn.close()</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">    conn, addr = s.accept()</div><div class="line">    <span class="keyword">print</span> <span class="string">'connected with %s : %s'</span> %(addr[<span class="number">0</span>],str(addr[<span class="number">1</span>]))</div><div class="line"></div><div class="line">    start_new_thread(clientthread, (conn,))</div><div class="line"></div><div class="line">s.close()</div></pre></td></tr></table></figure>

<p>直接telnet连接socket,就可以调试</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">telnet</span> localhost <span class="number">8888</span></div></pre></td></tr></table></figure>

<h2 id="改良版,带广播的聊天室程序server3-py">改良版,带广播的聊天室程序server3.py</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding:utf-8-*-</span></div><div class="line">__author_<span class="number">_</span> = <span class="string">'chen'</span></div><div class="line"></div><div class="line">import <span class="keyword">socket</span>, <span class="keyword">select</span></div><div class="line"></div><div class="line">def broadcast_data(sock, message):</div><div class="line">    <span class="keyword">for</span> <span class="keyword">socket</span> in CONNECTION_LIST:</div><div class="line">        <span class="keyword">if</span> <span class="keyword">socket</span> != server_socket != sock:</div><div class="line">            try:</div><div class="line">                <span class="keyword">socket</span>.<span class="keyword">send</span>(message)</div><div class="line">            except msg:</div><div class="line">                <span class="keyword">socket</span>.<span class="keyword">close</span>()</div><div class="line">                CONNECTION_LIST.remove(<span class="keyword">socket</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">"__main__"</span>:</div><div class="line">    CONNECTION_LIST = []</div><div class="line">    RECV_BUFFER = <span class="number">4096</span></div><div class="line">    PORT = <span class="number">5000</span></div><div class="line">    server_socket = <span class="keyword">socket</span>.<span class="keyword">socket</span>(<span class="keyword">socket</span>.AF_INET, <span class="keyword">socket</span>.SOCK_STREAM)</div><div class="line">    server_socket.<span class="keyword">setsockopt</span>(<span class="keyword">socket</span>.SOL_SOCKET, <span class="keyword">socket</span>.SO_REUSEADDR, <span class="number">1</span>)</div><div class="line">    server_socket.<span class="keyword">bind</span>((<span class="string">''</span>, PORT))</div><div class="line">    server_socket.<span class="keyword">listen</span>(<span class="number">5</span>)</div><div class="line"></div><div class="line">    CONNECTION_LIST.append(server_socket)</div><div class="line">    <span class="keyword">print</span> <span class="string">"chat server started on port <span class="variable">%s</span>"</span> % str(PORT)</div><div class="line"></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        read_sockets, write_sockets,error_sockets = <span class="keyword">select</span>.<span class="keyword">select</span>(CONNECTION_LIST, [], [])</div><div class="line"></div><div class="line">        <span class="keyword">for</span> sock in read_sockets:</div><div class="line">            <span class="keyword">if</span> sock == server_socket:</div><div class="line">                sockfd,addr = server_socket.<span class="keyword">accept</span>()</div><div class="line">                CONNECTION_LIST.append(sockfd)</div><div class="line">                <span class="keyword">print</span> <span class="string">"client (<span class="variable">%s</span>, <span class="variable">%s</span>) connected"</span> % addr</div><div class="line"></div><div class="line">                broadcast_data(sockfd, <span class="string">"[<span class="variable">%s</span>:<span class="variable">%s</span>] entered room\n"</span> % addr)</div><div class="line"></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                try:</div><div class="line">                    data = sock.<span class="keyword">recv</span>(RECV_BUFFER)</div><div class="line">                    <span class="keyword">if</span> data:</div><div class="line">                        <span class="keyword">print</span>  <span class="string">"[<span class="variable">%s</span>:<span class="variable">%s</span>]"</span> % (str(sock.<span class="keyword">getpeername</span>()), data)</div><div class="line">                        broadcast_data(sock, <span class="string">"[<span class="variable">%s</span>:<span class="variable">%s</span>]"</span> % (str(sock.<span class="keyword">getpeername</span>()), data))</div><div class="line">                except msg:</div><div class="line">                    <span class="keyword">print</span> msg</div><div class="line">                    broadcast_data(sock, <span class="string">"client (<span class="variable">%s</span>, <span class="variable">%s</span>) is offline "</span>% addr)</div><div class="line">                    <span class="keyword">print</span> <span class="string">"client (<span class="variable">%s</span>,<span class="variable">%s</span>) is offline "</span> % addr</div><div class="line">                    sock.<span class="keyword">close</span>()</div><div class="line">                    CONNECTION_LIST.remove(sock)</div><div class="line">                    <span class="keyword">continue</span></div><div class="line">    server_socket.<span class="keyword">close</span>()</div></pre></td></tr></table></figure>

<h2 id="客户端程序client3-py">客户端程序client3.py</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding:utf-8-*-</span></div><div class="line">__author_<span class="number">_</span> = <span class="string">'chen'</span></div><div class="line"></div><div class="line">import <span class="keyword">socket</span>,<span class="keyword">select</span>,string,sys</div><div class="line"></div><div class="line">def prompt():</div><div class="line">    sys.stdout.<span class="keyword">write</span>(<span class="string">'[you]'</span>)</div><div class="line">    sys.stdout.flush()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">"__main__"</span>:</div><div class="line">    <span class="keyword">if</span>(len(sys.argv)&lt;<span class="number">3</span>):</div><div class="line">        <span class="keyword">print</span> <span class="string">'usage: python client3.py hostname port'</span></div><div class="line">        sys.<span class="keyword">exit</span>()</div><div class="line"></div><div class="line">    host = sys.argv[<span class="number">1</span>]</div><div class="line">    port = <span class="keyword">int</span>(sys.argv[<span class="number">2</span>])</div><div class="line"></div><div class="line">    <span class="keyword">s</span> = <span class="keyword">socket</span>.<span class="keyword">socket</span>(<span class="keyword">socket</span>.AF_INET, <span class="keyword">socket</span>.SOCK_STREAM)</div><div class="line">    <span class="keyword">s</span>.settimeout(<span class="number">2</span>)</div><div class="line"></div><div class="line">    try:</div><div class="line">        <span class="keyword">s</span>.<span class="keyword">connect</span>((host, port))</div><div class="line">    except:</div><div class="line">        <span class="keyword">print</span> <span class="string">'unable to connect'</span></div><div class="line">        sys.<span class="keyword">exit</span>()</div><div class="line"></div><div class="line">    <span class="keyword">print</span> <span class="string">'connected to remote host. start sending messages'</span></div><div class="line">    prompt()</div><div class="line"></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        rlist = [sys.stdin, <span class="keyword">s</span>]</div><div class="line"></div><div class="line">        read_list, write_list, error_list = <span class="keyword">select</span>.<span class="keyword">select</span>(rlist, [], [])</div><div class="line"></div><div class="line">        <span class="keyword">for</span> sock in read_list:</div><div class="line">            <span class="keyword">if</span> sock == <span class="keyword">s</span>:</div><div class="line">                data = sock.<span class="keyword">recv</span>(<span class="number">4096</span>)</div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> data:</div><div class="line">                    <span class="keyword">print</span> <span class="string">'\nDisconnected from chat server'</span></div><div class="line">                    sys.<span class="keyword">exit</span>()</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    sys.stdout.<span class="keyword">write</span>(data)</div><div class="line">                    prompt()</div><div class="line"></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                msg = sys.stdin.<span class="keyword">readline</span>()</div><div class="line">                <span class="keyword">s</span>.<span class="keyword">send</span>(msg)</div><div class="line">                prompt()</div></pre></td></tr></table></figure>

<hr>
<h1 id="参考文献">参考文献</h1>
<p>1 <a href="http://www.cnblogs.com/hazir/p/python_socket_programming.html" target="_blank" rel="external">Python Socket 网络编程</a><br>2 <a href="http://www.cnblogs.com/hazir/p/python_chat_room.html" target="_blank" rel="external">Python Socket 编程——聊天室示例程序</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在学习socket编程,遇到一个问题:<br>我先bind一个端口后,如果通过ctr+c关闭进程.接下来执行程序的时候,就会提示<code>socket.error: Address already in use</code>.<br>]]>
    
    </summary>
    
      <category term="python" scheme="http://jackroyal.github.io/tags/python/"/>
    
      <category term="socket" scheme="http://jackroyal.github.io/tags/socket/"/>
    
      <category term="Linux" scheme="http://jackroyal.github.io/tags/Linux/"/>
    
      <category term="python学习笔记" scheme="http://jackroyal.github.io/categories/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[shadowsocks的安装和配置--在ubuntu和ubuntu中]]></title>
    <link href="http://jackroyal.github.io/2015/03/09/use-ss/"/>
    <id>http://jackroyal.github.io/2015/03/09/use-ss/</id>
    <published>2015-03-09T14:26:21.000Z</published>
    <updated>2015-03-10T05:28:30.000Z</updated>
    <content type="html"><![CDATA[<p>最近我的vpn一直在抽风，几乎没法正常使用，而且我的chrome也是各种花屏，我快疯了，没办法，只能改用shadowsocks了。<br>搭建过程分为两部分:服务端和客户端(这里是主要是ubuntu的客户端)。<br><a id="more"></a></p>
<h1 id="1_系统环境">1 系统环境</h1>
<p><strong>服务器</strong>:DigitalOcean上的Ubuntu 14.04 LTS<br><strong>客户端</strong>:Ubuntu 14.04 LTS</p>
<h1 id="2_服务器端安装和配置">2 服务器端安装和配置</h1>
<p>这里主要是参考github的<a href="https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E" target="_blank" rel="external">官方说明</a><br>通过ssh登陆的服务器上去,这里不在赘述如何登陆.<br>以下主要针对linux服务器,windows服务器查看<a href="https://github.com/shadowsocks/shadowsocks/wiki/Install-Shadowsocks-Server-on-Windows" target="_blank" rel="external">这里</a></p>
<h2 id="安装">安装</h2>
<p>Linux不同的发行版本执行的命令如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Debian / Ubuntu:</div><div class="line"></div><div class="line">apt-get <span class="operator"><span class="keyword">install</span> python-pip</span></div><div class="line">pip <span class="keyword">install</span> shadowsocks</div><div class="line"></div><div class="line">CentOS:</div><div class="line"></div><div class="line">yum <span class="keyword">install</span> python-setuptools && easy_install pip</div><div class="line">pip <span class="keyword">install</span> shadowsocks</div></pre></td></tr></table></figure>

<h2 id="配置">配置</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> vi /etc/shadowsocks.json</div></pre></td></tr></table></figure>

<p>配置文件的内容大致如下:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">    "<span class="attribute">server</span>":<span class="value"><span class="string">"你的服务器的ip"</span></span>,</div><div class="line">    "<span class="attribute">server_port</span>":<span class="value"><span class="number">8388</span></span>,</div><div class="line">    "<span class="attribute">local_address</span>": <span class="value"><span class="string">"127.0.0.1"</span></span>,</div><div class="line">    "<span class="attribute">local_port</span>":<span class="value"><span class="number">1080</span></span>,</div><div class="line">    "<span class="attribute">password</span>":<span class="value"><span class="string">"你设置的密码"</span></span>,</div><div class="line">    "<span class="attribute">timeout</span>":<span class="value"><span class="number">300</span></span>,</div><div class="line">    "<span class="attribute">method</span>":<span class="value"><span class="string">"aes-256-cfb"</span></span>,</div><div class="line">    "<span class="attribute">fast_open</span>": <span class="value"><span class="literal">false</span></span></div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>参数名称       解释</strong><br>server         安装shadowsocks服务器ip<br>server_port    服务器端口号<br>local_address  本地服务器默认是127.0.0.1<br>local_port     本地监听的端口号<br>password       密码<br>timeout        超时时间,单位是秒<br>method         加密方法默认是: “aes-256-cfb”可以用其他加密方法<br>fast_open      是否使用TCP_FASTOPEN,默认为不使用<br>workers        number of workers, available on Unix/Linux</p>
<h2 id="运行">运行</h2>
<p>前台运行的命令<br><code>ssserver -c /etc/shadowsocks.json</code><br>后台运行<br><code>ssserver -c /etc/shadowsocks.json -d start</code><br><code>ssserver -c /etc/shadowsocks.json -d stop</code><br>ps:我上述两条命令都会出错,这两条命令来自官方的github,我用的是下面的<br><code>nohup ssserver -c /etc/shadowsocks.json &gt; aa.log</code></p>
<h2 id="开机自启">开机自启</h2>
<p>我们把它写入/etc/rc.local中就可以完成开机自启动了.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> vi /etc/rc.local  <span class="comment">#打开rc.local文件</span></div><div class="line"><span class="comment">#然后在exit前面加入下面这一行</span></div><div class="line"><span class="comment">#nohup ssserver -c /etc/shadowsocks.json &gt; aa.log</span></div></pre></td></tr></table></figure>

<h1 id="3_客户端的安装和配置">3 客户端的安装和配置</h1>
<p>客户端按理说和服务器端类似,安装shadowsocks,但是我的就是这个出了问题.</p>
<h2 id="1)_安装相关软件">1) 安装相关软件</h2>
<p>shadowsocks有各种客户端版本,各个系统都有.在ubuntu下带图形化界面的有shadowsocks-qt5,还可以直接用命令行.</p>
<p><strong>图形化:</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo <span class="built_in">add</span>-apt-repository <span class="keyword">pp</span><span class="variable">a:hzwhuang</span>/ss-qt5</div><div class="line">sudo apt-<span class="built_in">get</span> <span class="keyword">update</span></div><div class="line">sudo apt-<span class="built_in">get</span> install shadowsocks-qt5</div></pre></td></tr></table></figure>

<p><em>PS:</em>我的电脑安装这个以后,会自动卸载我的chrome<br><em>PPS:</em>我刚才又试了一次,我在安装了命令行模式的shadowsocks以后,现在不会卸载我的chrome,总算正常了</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">The following extra packages will be installed:</div><div class="line">  libbotan-<span class="number">1.10</span>-<span class="number">0</span> libqrencode3 libqtshadowsocks libzbar0</div><div class="line">The following packages will be REMOVED:</div><div class="line">  libbotan-<span class="number">1.10</span>-<span class="number">0</span>:i386 libqtshadowsocks:i386 libzbar0:i386</div><div class="line">The following <span class="keyword">NEW</span> packages will be installed:</div><div class="line">  libbotan-<span class="number">1.10</span>-<span class="number">0</span> libqrencode3 libqtshadowsocks libzbar0 shadowsocks-qt5</div><div class="line"><span class="number">0</span> upgraded, <span class="number">5</span> newly installed, <span class="number">3</span> <span class="keyword">to</span> remove <span class="keyword">and</span> <span class="number">19</span> <span class="keyword">not</span> upgraded.</div><div class="line">Need <span class="keyword">to</span> <span class="keyword">get</span> <span class="number">1</span>,<span class="number">280</span> kB <span class="keyword">of</span> archives.</div><div class="line">After this operation, <span class="number">662</span> kB <span class="keyword">of</span> additional disk space will be used.</div><div class="line"><span class="keyword">Do</span> you want <span class="keyword">to</span> <span class="keyword">continue</span>? [Y/n]</div></pre></td></tr></table></figure>

<p><strong>命令行模式:</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="built_in">get</span> install <span class="keyword">python</span>-pip <span class="keyword">python</span>-dev build-essential </div><div class="line">sudo pip install  pip</div><div class="line">sudo apt-<span class="built_in">get</span> install <span class="keyword">python</span>-m2crypto</div><div class="line">sudo pip install shadowsocks</div></pre></td></tr></table></figure>

<p>我因为之前在环境中就安装过pip,所以我只需要执行倒数第三个和第四个命令.<br>但是我的倒数第四个命令<code>pip install shadowsocks</code>一直报错:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Exception: Traceback (most recent call <span class="keyword">last</span>):</div><div class="line">File <span class="string">"/usr/lib/python2.7/dist-packages/pip/basecommand.py"</span>, <span class="built_in">line</span> <span class="number">122</span>, <span class="operator">in</span> main</div><div class="line">  status = self.run(options, args)</div><div class="line">File <span class="string">"/usr/lib/python2.7/dist-packages/pip/commands/install.py"</span>, <span class="built_in">line</span> <span class="number">278</span>, <span class="operator">in</span> run</div><div class="line">  requirement_set.prepare_files(finder, force_root_egg_info=self.bundle, bundle=self.bundle) </div><div class="line">File <span class="string">"/usr/lib/python2.7/dist-packages/pip/req.py"</span>, <span class="built_in">line</span> <span class="number">1177</span>, <span class="operator">in</span> prepare_files </div><div class="line">  url = finder.find_requirement(req_to_install, upgrade=self.upgrade) </div><div class="line">File <span class="string">"/usr/lib/python2.7/dist-packages/pip/index.py"</span>, <span class="built_in">line</span> <span class="number">256</span>, <span class="operator">in</span> find_requirement</div><div class="line">  page_versions.extend(self.<span class="title">_package</span>_versions(page.links, req.name.<span class="built_in">lower</span>())) </div><div class="line">File <span class="string">"/usr/lib/python2.7/dist-packages/pip/index.py"</span>, <span class="built_in">line</span> <span class="number">432</span>, <span class="operator">in</span> <span class="title">_package</span>_versions </div><div class="line">  <span class="keyword">for</span> link <span class="operator">in</span> self.<span class="title">_sort</span>_links(links): </div><div class="line">File <span class="string">"/usr/lib/python2.7/dist-packages/pip/index.py"</span>, <span class="built_in">line</span> <span class="number">422</span>, <span class="operator">in</span> <span class="title">_sort</span>_links </div><div class="line">  <span class="keyword">for</span> link <span class="operator">in</span> links: </div><div class="line">File <span class="string">"/usr/lib/python2.7/dist-packages/pip/index.py"</span>, <span class="built_in">line</span> <span class="number">769</span>, <span class="operator">in</span> links </div><div class="line">  <span class="keyword">for</span> anchor <span class="operator">in</span> self.parsed.findall(<span class="string">".//a"</span>):</div><div class="line">AttributeError: <span class="string">'Document'</span> object has no attribute <span class="string">'findall'</span></div><div class="line"></div><div class="line">Storing debug <span class="built_in">log</span> <span class="keyword">for</span> failure <span class="operator">in</span> /root/.pip/pip.<span class="built_in">log</span></div></pre></td></tr></table></figure>

<p>网上搜索一番,在<a href="https://github.com/pypa/pip/issues/1742" target="_blank" rel="external">这里</a>找到答案.<br>解决方法很简单,执行<code>easy_install pip</code>,就ok(貌似是把pip重新安装了一次).</p>
<h2 id="2)_客户端运行">2) 客户端运行</h2>
<p>shadowsocks图形化的比较简单,这里不表.<br>命令行模式,启动如下:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sslocal <span class="operator">-s</span> 服务器ip -p <span class="number">8388</span> -k 密码</div></pre></td></tr></table></figure>

<p>启动成功后会有如下输出:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2015<span class="tag">-03-10</span> 11<span class="pseudo">:12</span><span class="pseudo">:59</span> <span class="tag">INFO</span>     <span class="tag">loading</span> <span class="tag">libcrypto</span> <span class="tag">from</span> <span class="tag">libcrypto</span><span class="class">.so</span><span class="class">.1</span><span class="class">.0</span><span class="class">.0</span></div><div class="line">2015<span class="tag">-03-10</span> 11<span class="pseudo">:12</span><span class="pseudo">:59</span> <span class="tag">INFO</span>     <span class="tag">starting</span> <span class="tag">local</span> <span class="tag">at</span> 127<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span><span class="pseudo">:1080</span></div></pre></td></tr></table></figure>

<h2 id="3)_浏览器代理设置">3) 浏览器代理设置</h2>
<p>一般来说我们不希望shadowsocks做全局的翻墙,那样,访问国内的速度也会变慢,我们在chome浏览器中安装switchysharp,来管理代理.具体设置如下所示:<br><img src="http://ww3.sinaimg.cn/large/692869a3gw1eq0k16t5ejj20ne0ihmzh.jpg" alt="swichysharp设置"></p>
<p>enjoy it!</p>
<h1 id="后记">后记</h1>
<p>安卓客户端安装,<a href="https://apps.evozi.com/apk-downloader/?id=com.github.shadowsocks" target="_blank" rel="external">点我点我</a></p>
<h1 id="参考文献">参考文献</h1>
<p>1 这是一篇好博客 <a href="http://mushapi.com/shadowsocks-install-config-using.html" target="_blank" rel="external">http://mushapi.com/shadowsocks-install-config-using.html</a><br>2 <a href="https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E" target="_blank" rel="external">shadowsocks使用说明</a><br>3 <a href="https://github.com/pypa/pip/issues/1742" target="_blank" rel="external">修复我pip问题的一个issue</a></p>
<h1 id="致谢">致谢</h1>
<p>这个网站可以下载google play的apk,对于我等天朝良民来说,可真是个好东西<br><a href="https://apps.evozi.com/apk-downloader/?id=com.github.shadowsocks" target="_blank" rel="external">https://apps.evozi.com/apk-downloader/?id=com.github.shadowsocks</a></p>
<p>我们家<a href="http://huirong.github.io" target="_blank" rel="external">笨笨的博客</a>弄好了,欢迎访问</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近我的vpn一直在抽风，几乎没法正常使用，而且我的chrome也是各种花屏，我快疯了，没办法，只能改用shadowsocks了。<br>搭建过程分为两部分:服务端和客户端(这里是主要是ubuntu的客户端)。<br>]]>
    
    </summary>
    
      <category term="Linux" scheme="http://jackroyal.github.io/tags/Linux/"/>
    
      <category term="ubuntu" scheme="http://jackroyal.github.io/tags/ubuntu/"/>
    
      <category term="shadowsocks" scheme="http://jackroyal.github.io/tags/shadowsocks/"/>
    
      <category term="Linux" scheme="http://jackroyal.github.io/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[kali安装后设置]]></title>
    <link href="http://jackroyal.github.io/2015/03/04/after-kali/"/>
    <id>http://jackroyal.github.io/2015/03/04/after-kali/</id>
    <published>2015-03-04T06:14:57.000Z</published>
    <updated>2015-03-04T06:43:16.000Z</updated>
    <content type="html"><![CDATA[<p>kali安装好了，还有几件事要做<br>我们用root的身份登进去系统<br><a id="more"></a></p>
<h1 id="1_更新软件源">1 更新软件源</h1>
<p>官方自带的软件源速度相对比较慢，资源也少一些，我们添加一些国内的源进去<br>vi /etc/apt/sources.list<br>（可自由选择，不一定要全部）： </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#官方源</span></div><div class="line">deb http:<span class="comment">//http.kali.org/kali kali main non-free contrib</span></div><div class="line">deb-src http:<span class="comment">//http.kali.org/kali kali main non-free contrib</span></div><div class="line">deb http:<span class="comment">//security.kali.org/kali-security kali/updates main contrib non-free</span></div><div class="line"></div><div class="line"><span class="preprocessor">#激进源，新手不推荐使用这个软件源</span></div><div class="line">deb http:<span class="comment">//repo.kali.org/kali kali-bleeding-edge main</span></div><div class="line">deb-src http:<span class="comment">//repo.kali.org/kali kali-bleeding-edge main</span></div><div class="line"></div><div class="line"><span class="preprocessor">#中科大kali源</span></div><div class="line">deb http:<span class="comment">//mirrors.ustc.edu.cn/kali kali main non-free contrib</span></div><div class="line">deb-src http:<span class="comment">//mirrors.ustc.edu.cn/kali kali main non-free contrib</span></div><div class="line">deb http:<span class="comment">//mirrors.ustc.edu.cn/kali-security kali/updates main contrib non-free</span></div><div class="line"></div><div class="line"><span class="preprocessor">#阿里云kali源</span></div><div class="line">deb http:<span class="comment">//mirrors.aliyun.com/kali kali main non-free contrib</span></div><div class="line">deb-src http:<span class="comment">//mirrors.aliyun.com/kali kali main non-free contrib</span></div><div class="line">deb http:<span class="comment">//mirrors.aliyun.com/kali-security kali/updates main contrib non-free</span></div></pre></td></tr></table></figure>

<p>保存之后运行：<br><code>apt-get update</code>     #刷新系统<br><code>apt-get dist-upgrade</code>        #安装更新</p>
<h1 id="2_安装中文输入法和字体">2 安装中文输入法和字体</h1>
<p>安装字体<br><code>apt-get install ttf-wqy-microhei ttf-wqy-zenhei</code><br> 执行以下命令<br> <code>apt-get install fcitx fcitx-googlepinyin</code></p>
<h1 id="3_安装vpn">3 安装vpn</h1>
<p>kali默认情况下vpn是无法使用的，需要安装相关组件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">apt-get <span class="operator"><span class="keyword">install</span> network-manager-openvpn</span></div><div class="line">apt-<span class="keyword">get</span> <span class="keyword">install</span> network-manager-openvpn-gnome</div><div class="line">apt-<span class="keyword">get</span> <span class="keyword">install</span> network-manager-pptp</div><div class="line">apt-<span class="keyword">get</span> <span class="keyword">install</span> network-manager-pptp-gnome</div><div class="line">apt-<span class="keyword">get</span> <span class="keyword">install</span> network-manager-strongswan</div><div class="line">apt-<span class="keyword">get</span> <span class="keyword">install</span> network-manager-vpnc</div><div class="line">apt-<span class="keyword">get</span> <span class="keyword">install</span> network-manager-vpnc-gnome</div><div class="line">/etc/init.d/network-manager restart</div></pre></td></tr></table></figure>

<h1 id="4_网卡管理显示“device_not_managed”">4 网卡管理显示“device not managed”</h1>
<p><code>vi  /etc/NetworkManager/NetworkManager.conf</code><br>修改<code>managed=false</code>为<code>managed=true</code><br>然后重启网络管理<br><code>service network-manager restart</code></p>
<h1 id="5_安装chrome浏览器">5 安装chrome浏览器</h1>
<p><code>apt-get install google-chrome-unstable</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>kali安装好了，还有几件事要做<br>我们用root的身份登进去系统<br>]]>
    
    </summary>
    
      <category term="kali" scheme="http://jackroyal.github.io/tags/kali/"/>
    
      <category term="Linux" scheme="http://jackroyal.github.io/tags/Linux/"/>
    
      <category term="Linux" scheme="http://jackroyal.github.io/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[kali和ubuntu双系统安装]]></title>
    <link href="http://jackroyal.github.io/2015/03/03/kali-and-ubuntu/"/>
    <id>http://jackroyal.github.io/2015/03/03/kali-and-ubuntu/</id>
    <published>2015-03-03T13:17:41.000Z</published>
    <updated>2015-03-08T10:57:41.000Z</updated>
    <content type="html"><![CDATA[<p>时间忽快忽慢，一转眼，年过完了，又回来学校了，又一个多月没有push了，重新回到github。今天我们家笨笨给我找了点kali的资料，索性就把kali捡起来，第一步安装kali的系统。<br>此处背景不再介绍，直奔主题。kali的安装过程和ubuntu的安装过程类似，应该说原理上是一模一样的，只是界面有些不同。我的电脑当前已经安装了win8和ubuntu，现在需要再加一个kali的系统，三系统共存。<br>大体分为如下几个步骤：</p>
<h3 id="1_下载kali镜像">1 下载kali镜像</h3>
<h3 id="2_刻录u盘">2 刻录u盘</h3>
<h3 id="3_安装kali">3 安装kali</h3>
<h2><a id="more"></a></h2>
<h1 id="1_下载kali镜像-1">1 下载kali镜像</h1>
<p>这步很简单，我们去kali的官网下载<a href="https://www.kali.org/downloads/" target="_blank" rel="external">https://www.kali.org/downloads/</a>,下载对应的版本。我这里下载的是第一个64位版本（<a href="http://cdimage.kali.org/kali-1.1.0/kali-linux-1.1.0-amd64.iso" target="_blank" rel="external">http://cdimage.kali.org/kali-1.1.0/kali-linux-1.1.0-amd64.iso</a>）,因为是在ubuntu下，我们可以顺手校验一下文件的hash值，防止文件损坏。<br>在终端中输入<code>sha1sum /home/chen/kali-linux-1.1.0-amd64.iso</code><br>查看输出是否是<code>40a1fd1d4864e7fac70438a1bf2095c8c1a4e764</code>，若正确，则第一步完成。</p>
<h1 id="2_刻录u盘-1">2 刻录u盘</h1>
<p>如果采用硬盘安装的话，我们需要在win下面操作，使用easybcd来编辑grub引导，还需要解压文件，相对比较麻烦，我这里采用u盘安装，相对比较简单。<br>和安装ubuntu不同，我之前在win下用UltraISO来刻录,<br><img src="http://ww3.sinaimg.cn/large/692869a3gw1epsvwgs1rqj20fa0c676e.jpg" alt="刻录ubuntu">如图所示，便捷启动是可以不修改的，直接默认，点击写入就行。我今天在刻录kali的时候，发现这样写的u盘无法启动，开机的时候会提示<code>failed to boot from USB disk with error: gfxboot.c32: not a COM32R Image boot:</code>的错误。<br>解决方法有两个<br>1 linux的用mkusb，windows的用Win32DiskImager 来制作U盘启动<br>具体用法：<br><a href="https://wiki.ubuntu.com/Win32DiskImager/iso2usb" target="_blank" rel="external">https://wiki.ubuntu.com/Win32DiskImager/iso2usb</a><br><a href="https://help.ubuntu.com/community/mkusb" target="_blank" rel="external">https://help.ubuntu.com/community/mkusb</a><br>2 在win下用UltraISO来刻录，记得更改便捷启动的设置，如图所示<br><img src="http://ww4.sinaimg.cn/large/692869a3gw1epsw409qr3j20go09rjtp.jpg" alt="更改便捷启动">，点击便捷启动-&gt;选择写入新的启动器引导扇区——&gt;syslinus——&gt;写入</p>
<p><em>我采用的是法一，我在ubuntu中用mkusb来刻录</em></p>
<h1 id="3_安装kali-1">3 安装kali</h1>
<p>下面开始安装kali（以下图片是我用virtualbox虚拟机中安装拍摄的）</p>
<h2 id="1_引导成功以后，开机画面如图所示">1 引导成功以后，开机画面如图所示</h2>
<p><img src="http://ww1.sinaimg.cn/large/692869a3gw1eptme5jxk5j20ne0hcjwf.jpg" alt="开机画面"><br>我们选择<code>Graphical install</code>,图形化安装，也可以选择<code>install</code>那是文字界面安装</p>
<h2 id="2_选择语言，地区">2 选择语言，地区</h2>
<p>语言： 选择 <code>chinese（simplified）简体中文</code><br>地区： 选择 <code>中国</code></p>
<h2 id="3_配置网络名称和domain">3 配置网络名称和domain</h2>
<p>这个代表你的电脑在网络上的名称，比如win默认的就是pc-2000123131，也就是别人在网上邻居中看到你的电脑的名称。我们就用默认的<code>localhost</code><br>domain我们留空不管他，下一步</p>
<h2 id="4_设置root密码">4 设置root密码</h2>
<p>我们设置两次一样的密码就行，不要忘记了<br><img src="http://ww2.sinaimg.cn/large/692869a3gw1eptmmnvzlnj20ne0hcdih.jpg" alt="设置root密码"></p>
<h2 id="5_磁盘分区">5 磁盘分区</h2>
<p>我们选择第三项<code>手动</code><br><img src="http://ww4.sinaimg.cn/large/692869a3gw1eptmp2uw4ij20ne0hc42t.jpg" alt="磁盘分区选项"><br><strong>分区</strong>，这里我们一共分<code>三个区</code>，一个300M的<code>/boot</code>分区，一个2048M的<code>swap</code>分区，其他的分为一个<code>/</code>（你也可以把/home单独分区出来），因为分区方法类似，所以我只讲一个<code>/boot</code>和<code>swap</code>分区的步骤<br><strong>boot分区</strong><br><strong>注意:</strong>选择<strong>可启动标志</strong>，我们只有/boot设置为<code>开</code>，其他分区的这个选项都是<code>关</code><br><img src="http://ww1.sinaimg.cn/large/692869a3gw1eptmu4nonsj20ne0hctbb.jpg" alt="boot分区设置"><br>设置完成后，选择<code>分区设定结束</code>，点击继续</p>
<p><strong>交换空间</strong><br><strong>注意:</strong>交换空间是一种<strong>文件类型</strong>，其他的分区是<strong>属于载点</strong><br><img src="http://ww1.sinaimg.cn/large/692869a3gw1eptn2gehkdj20ne0hc77a.jpg" alt="交换空间swap分区设置"><br>设置完成后，选择<code>分区设定结束</code>，点击继续</p>
<p>等分区完成，就选择<code>分区设定结束并将修改写入磁盘</code>，点击继续，就开始安装kali</p>
<h2 id="6_启动引导">6 启动引导</h2>
<p>当系统快安装完成的时候，会出现grub安装的选择,如图所示<br><img src="http://ww3.sinaimg.cn/large/692869a3gw1eptnhakprmj20ns0j7dij.jpg" alt="交换空间swap分区设置"></p>
<p>因为我的系统是<code>win8</code>和<code>ubuntu</code>和<code>kali</code>多系统共存，当前是由<code>win</code>来引导（当前系统由谁引导就看开机看到的第一个<code>系统选择</code>是谁的，如果是红色的ubuntu选项，那就说明由ubuntu引导）。<br>我这里选择否的话，那么我就需要去<code>win</code>里面手动添加<code>kali</code>的引导（使用easybcd来操作）。<br>如果你是<code>ubuntu</code>来引导系统的话，一样需要手动去添加<code>kali</code>的引导（这里我还不会）。<br>所以我选择<code>是</code>，这样装完三个系统都可以正常开机了。</p>
<p>到此所有的安装结束。</p>
<hr>
<h1 id="参考文献">参考文献</h1>
<p>1 安装kali 系统 <a href="http://blog.sina.com.cn/s/blog_779dcd090102va9c.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_779dcd090102va9c.html</a><br>2 <a href="http://www.bkjia.com/Linuxjc/844530.html" target="_blank" rel="external">kali系统安装图文教程，kali系统安装图文</a></p>
<h1 id="致谢">致谢</h1>
<p>这里，要感谢我最亲爱的笨笨<a href="http://huirong.github.io" target="_blank" rel="external">http://huirong.github.io</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>时间忽快忽慢，一转眼，年过完了，又回来学校了，又一个多月没有push了，重新回到github。今天我们家笨笨给我找了点kali的资料，索性就把kali捡起来，第一步安装kali的系统。<br>此处背景不再介绍，直奔主题。kali的安装过程和ubuntu的安装过程类似，应该说原理上是一模一样的，只是界面有些不同。我的电脑当前已经安装了win8和ubuntu，现在需要再加一个kali的系统，三系统共存。<br>大体分为如下几个步骤：</p>
<h3 id="1_下载kali镜像">1 下载kali镜像</h3>
<h3 id="2_刻录u盘">2 刻录u盘</h3>
<h3 id="3_安装kali">3 安装kali</h3>
<h2>]]>
    
    </summary>
    
      <category term="kali" scheme="http://jackroyal.github.io/tags/kali/"/>
    
      <category term="Linux" scheme="http://jackroyal.github.io/tags/Linux/"/>
    
      <category term="Linux" scheme="http://jackroyal.github.io/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux下使用github]]></title>
    <link href="http://jackroyal.github.io/2015/01/19/linux%E4%B8%8B%E4%BD%BF%E7%94%A8github/"/>
    <id>http://jackroyal.github.io/2015/01/19/linux下使用github/</id>
    <published>2015-01-18T16:53:48.000Z</published>
    <updated>2015-01-19T08:02:55.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>我的惰性真是病入膏肓了，已经整整3周没有在github上提交东西了，今天看了《模拟游戏》，索性又捡起来了。下面来总结一下linux下github的使用，也算是给自己一个备份，因为我自己也是老忘记。</p>
</blockquote>
<p>使用环境：Ubuntu 14.04</p>
<h2 id="1_安装git相关软件">1 安装git相关软件</h2>
<p>我的Ubuntu里面没有自带git相关软件，所以我们首先需要安装它，很简单。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sudo</span> apt-get install git</div></pre></td></tr></table></figure>

<h2 id="2_初始化git的设置">2 初始化git的设置</h2>
<p>接下来，进行初始化设置，也就是设置你的github账号和密码</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git config --global <span class="literal">user</span>.name <span class="string">"zhangsan"</span><span class="comment">#其中的“zhangsan”输入的就是你注册时候的用户名，这步是设置你提交时候默认的用户名</span></div><div class="line"><span class="comment">#之后设置提交时候默认的邮箱，在命令行输入：</span></div><div class="line">git config --global <span class="literal">user</span>.email <span class="string">"haha@qq.com"</span></div><div class="line"><span class="comment">#其中的“haha@qq.com”就是你注册时候用的邮箱，当然也可以用别的邮箱，用别的邮箱的时候你必须在github的主页上设置里面把用的邮箱添加进去</span></div></pre></td></tr></table></figure>

<h2 id="3_开始使用github">3 开始使用github</h2>
<p>1 首先你的github上应该有一个库，如果没有的话，就去github网站上新建一个库，或者fork一个别人的项目，以下的操作都是建立在这个基础上，<code>假设存在一个库https://github.com/Jackroyal/test.git</code>.<br>如果你的github上已经有库了，可以忽略第1步直接进入第2步<br>2 我们在本地新建一个文件夹(命名随你便，我取名叫做test_git)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">mkdir</span> test_git</div></pre></td></tr></table></figure>

<p>3 将远程的库复制下来，我们使用git clone命令来完成</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#如果你的环境不在test_git目录</span></div><div class="line"><span class="preprocessor">#cd test_git</span></div><div class="line"><span class="preprocessor">#如果在test_git中</span></div><div class="line">git clone https:<span class="comment">//github.com/Jackroyal/test.git#他会在你的本地新建一个test文件夹</span></div><div class="line">cd test</div><div class="line"><span class="preprocessor">#接下来新建一个测试文件</span></div><div class="line">touch test.md</div><div class="line"><span class="preprocessor">#修改测试文件的内容</span></div><div class="line">vi test.md</div><div class="line"><span class="preprocessor">#提交刚才所做的更改</span></div><div class="line">git add .</div><div class="line">git commit -m <span class="string">"首次提交"</span></div></pre></td></tr></table></figure>

<p>3 push提交到github</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git remote <span class="built_in">add</span> origin http<span class="variable">s:</span>//github.<span class="keyword">com</span>/Jackroyal/test.git</div><div class="line">git push</div></pre></td></tr></table></figure>

<p>之后会提示你输入用户名密码，你输入你github账号和密码就行了<br>打完收工，睡觉<br>后面会陆续介绍hexo在Linux下的使用</p>
<h1 id="参考文献">参考文献</h1>
<p>1 <a href="http://blog.chinaunix.net/uid-29040159-id-3799719.html" target="_blank" rel="external">ubuntu 下 github 简单的使用教程</a><br>2 <a href="http://blog.csdn.net/pony_maggie/article/details/23207847" target="_blank" rel="external">Github入门级使用攻略</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>我的惰性真是病入膏肓了，已经整整3周没有在github上提交东西了，今天看了《模拟游戏》，索性又捡起来了。下面来总结一下linux下github的使用，也算是给自己一个备份，因为我自己也是老忘记。</p>
</blockquote>
<p>使用环境]]>
    </summary>
    
      <category term="Linux" scheme="http://jackroyal.github.io/tags/Linux/"/>
    
      <category term="github" scheme="http://jackroyal.github.io/tags/github/"/>
    
      <category term="Linux" scheme="http://jackroyal.github.io/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[近期任务]]></title>
    <link href="http://jackroyal.github.io/2014/12/02/recent-task/"/>
    <id>http://jackroyal.github.io/2014/12/02/recent-task/</id>
    <published>2014-12-02T14:56:31.000Z</published>
    <updated>2015-01-06T04:35:04.000Z</updated>
    <content type="html"><![CDATA[<p>2014-12-02 22:56:31  接下来的一个星期，我的任务是学习python爬虫的编写，至少要实现csdn博客转markdown的任务</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>2014-12-02 22:56:31  接下来的一个星期，我的任务是学习python爬虫的编写，至少要实现csdn博客转markdown的任务</p>
]]>
    </summary>
    
      <category term="杂文" scheme="http://jackroyal.github.io/categories/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[配置hexo]]></title>
    <link href="http://jackroyal.github.io/2014/11/28/custom-hexo/"/>
    <id>http://jackroyal.github.io/2014/11/28/custom-hexo/</id>
    <published>2014-11-28T13:07:27.000Z</published>
    <updated>2015-01-06T04:35:04.000Z</updated>
    <content type="html"><![CDATA[<p>经过<a href="/how-to-build-a-blog-with-hexo.html">上篇博客</a>,我们搭建起了自己的博客,接下来我们对它做些个性化的定制.<br>在hexo中,配置文件一共两个(我的hexo安装在F:/blog/),分别是<code>F:/blog/_config.yml</code>和<code>F:/blog/themes/light/_config.yml</code>.第一个是全局的配置文件,第二个是主题的配置文件,在继续说之前,我们先来说一下主题安装.<a id="more"></a></p>
<h1 id="主题安装">主题安装</h1>
<p>这个很简单,在hexo的Github的主页上有个主题栏目,<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">https://github.com/hexojs/hexo/wiki/Themes</a>,里面列出了很多主题.<br>安装方法很简单</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">$ git clone &lt;repository&gt;</span> themes/&lt;theme-name&gt;</span></div></pre></td></tr></table></figure>

<p>举个简单例子,我安装的主题名为<code>light</code>,请在<code>F:/blog/</code>目录下执行以下代码</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/hexojs</span><span class="regexp">/hexo-theme-light themes/light</span></div></pre></td></tr></table></figure>

<p>如果你不是在<code>F:/blog/</code>中执行,请修改后面的路径themes/light为你的路径.基本原理就是把主题下下来,放在themes目录下就OK了,主题安装完毕.</p>
<h1 id="修改全局配置文件_F:/blog/_config-yml">修改全局配置文件 <code>F:/blog/_config.yml</code></h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor"># Hexo Configuration</span></div><div class="line"><span class="preprocessor">## Docs: http://hexo.io/docs/configuration.html</span></div><div class="line"><span class="preprocessor">## Source: https://github.com/hexojs/hexo/</span></div><div class="line"></div><div class="line"><span class="preprocessor"># Site</span></div><div class="line"><span class="label">title:</span> 搁浅<span class="keyword">St</span>的blog  <span class="preprocessor">#站点的名称</span></div><div class="line"><span class="label">subtitle:</span> 我最喜欢笨笨   <span class="preprocessor">#站点的副标题</span></div><div class="line"><span class="label">description:</span>             <span class="preprocessor">#站点的描述,有利于搜索引擎的抓取</span></div><div class="line"><span class="label">author:</span> 搁浅<span class="keyword">St</span>       <span class="preprocessor">#作者</span></div><div class="line"><span class="label">email:</span> geqianst@qq.com          <span class="preprocessor">#你的邮箱</span></div><div class="line"><span class="label">language:</span> <span class="built_in">zh</span>-CN           <span class="preprocessor">#语言,一般应该都是这个吧</span></div><div class="line"></div><div class="line"><span class="preprocessor"># URL</span></div><div class="line"><span class="preprocessor">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class="line"><span class="label">url:</span> http://jackroyal.github.io       <span class="preprocessor">#网站的url,在页面上,可以调用配置中的url参数,就是这个,比如google自定义搜索,需要制定搜索范围,就是通过这个设置的</span></div><div class="line"><span class="label">root:</span> /</div><div class="line"><span class="label">permalink:</span> :year/:month/:day/:title/</div><div class="line"><span class="label">tag_dir:</span> tags</div><div class="line"><span class="label">archive_dir:</span> archives</div><div class="line"><span class="label">category_dir:</span> categories</div><div class="line"><span class="label">code_dir:</span> downloads/code</div><div class="line"><span class="label">permalink_defaults:</span></div><div class="line"></div><div class="line"><span class="preprocessor"># Directory</span></div><div class="line"><span class="label">source_dir:</span> source</div><div class="line"><span class="label">public_dir:</span> public</div><div class="line"></div><div class="line"><span class="preprocessor"># Writing</span></div><div class="line"><span class="label">new_post_name:</span> :title.md <span class="preprocessor"># File name of new posts</span></div><div class="line"><span class="label">default_layout:</span> post  </div><div class="line"><span class="label">titlecase:</span> false <span class="preprocessor"># Transform title into titlecase</span></div><div class="line"><span class="label">external_link:</span> true <span class="preprocessor"># Open external links in new tab</span></div><div class="line"><span class="label">filename_case:</span> <span class="number">0</span></div><div class="line"><span class="label">render_drafts:</span> false</div><div class="line"><span class="label">post_asset_folder:</span> false</div><div class="line"><span class="label">relative_link:</span> false</div><div class="line"><span class="label">highlight:</span></div><div class="line">  enable: true</div><div class="line">  line_number: true</div><div class="line">  tab_replace:</div><div class="line"></div><div class="line"><span class="preprocessor"># Category & Tag</span></div><div class="line"><span class="label">default_category:</span> uncategorized  </div><div class="line"><span class="label">category_map:</span></div><div class="line"><span class="label">tag_map:</span></div><div class="line"></div><div class="line"><span class="preprocessor"># Archives 默认值为2，这里都修改为1，相应页面就只会列出标题，而非全文</span></div><div class="line"><span class="preprocessor">## 2: Enable pagination</span></div><div class="line"><span class="preprocessor">## 1: Disable pagination</span></div><div class="line"><span class="preprocessor">## 0: Fully Disable</span></div><div class="line"><span class="label">archive:</span> <span class="number">1</span></div><div class="line"><span class="label">category:</span> <span class="number">1</span></div><div class="line"><span class="label">tag:</span> <span class="number">1</span></div><div class="line"></div><div class="line"><span class="preprocessor"># Server</span></div><div class="line"><span class="preprocessor">## Hexo uses Connect as a server</span></div><div class="line"><span class="preprocessor">## You can customize the logger format as defined in</span></div><div class="line"><span class="preprocessor">## http://www.senchalabs.org/connect/logger.html</span></div><div class="line"><span class="label">port:</span> <span class="number">4000</span></div><div class="line"><span class="label">server_ip:</span> localhost</div><div class="line"><span class="label">logger:</span> false</div><div class="line"><span class="label">logger_format:</span> dev</div><div class="line"></div><div class="line"><span class="preprocessor"># Date / Time format</span></div><div class="line"><span class="preprocessor">## Hexo uses Moment.js to parse and display date</span></div><div class="line"><span class="preprocessor">## You can customize the date format as defined in</span></div><div class="line"><span class="preprocessor">## http://momentjs.com/docs/#/displaying/format/</span></div><div class="line"><span class="label">date_format:</span> MMM D YYYY</div><div class="line"><span class="label">time_format:</span> H:mm:ss</div><div class="line"></div><div class="line"><span class="preprocessor"># Pagination</span></div><div class="line"><span class="preprocessor">## Set per_page to 0 to disable pagination</span></div><div class="line"><span class="label">per_page:</span> <span class="number">5</span></div><div class="line"><span class="label">pagination_dir:</span> page</div><div class="line"></div><div class="line"><span class="preprocessor"># Disqus</span></div><div class="line"><span class="label">disqus_shortname:</span></div><div class="line"><span class="preprocessor">#这一行是我添加的duoshuo_shortname,因为天朝disqus不好用,用多说</span></div><div class="line"><span class="label">duoshuo_shortname:</span> jackroyal</div><div class="line"><span class="preprocessor"># Extensions</span></div><div class="line"><span class="preprocessor">## Plugins: https://github.com/hexojs/hexo/wiki/Plugins</span></div><div class="line"><span class="preprocessor">## Themes: https://github.com/hexojs/hexo/wiki/Themes</span></div><div class="line"><span class="label">theme:</span> light</div><div class="line"><span class="label">exclude_generator:</span></div><div class="line"></div><div class="line"><span class="preprocessor"># Deployment  发布相关设置</span></div><div class="line"><span class="preprocessor">## Docs: http://hexo.io/docs/deployment.html</span></div><div class="line"><span class="label">deploy:</span></div><div class="line">  type: github</div><div class="line">  repo: https://github.com/Jackroyal/Jackroyal.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>

<p>至此,全局配置文件修改完毕,你可以<code>hexo g</code>和<code>hexo s</code>进行查看.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="label">menu:</span><span class="preprocessor">#导航栏的设置默认只有这两个,还可以添加更多的导航</span></div><div class="line">  Home: /</div><div class="line">  Archives: /archives</div><div class="line"><span class="preprocessor">#它就是你页面右边的侧边项目,比如搜索之类,你可以根据自己的需求进行修改,你能用几个widgets可以在F:\blog\themes\light\layout\_widget中进行查看</span></div><div class="line"><span class="label">widgets:</span><span class="preprocessor">#我这里使用了所有的widgets</span></div><div class="line">- search</div><div class="line">- category</div><div class="line">- tag</div><div class="line">- recent_posts</div><div class="line">- tagcloud</div><div class="line"></div><div class="line"><span class="label">excerpt_link:</span> Read More  <span class="preprocessor">#可以换成中文的  阅读全文</span></div><div class="line"></div><div class="line"><span class="label">twitter:</span></div><div class="line">  username:</div><div class="line">  show_replies: false</div><div class="line">  tweet_count: <span class="number">5</span></div><div class="line">//默认的一个分享组件,因为主要针对国外,不适合国内我们不使用它</div><div class="line"><span class="label">addthis:</span></div><div class="line">  enable: false  <span class="preprocessor">#把true改为false</span></div><div class="line">  pubid:</div><div class="line">  facebook: true</div><div class="line">  twitter: true</div><div class="line">  google: true</div><div class="line">  pinterest: true</div><div class="line"></div><div class="line"><span class="label">fancybox:</span> true</div><div class="line"></div><div class="line"><span class="label">google_analytics:</span></div><div class="line"><span class="label">rss:</span></div><div class="line"><span class="label">duoshuo_shortname:</span> jackroyal  <span class="preprocessor">#多说的用户名</span></div><div class="line"></div><div class="line"><span class="label">comment_provider:</span></div><div class="line"><span class="preprocessor"># Facebook comment</span></div><div class="line"><span class="label">facebook:</span></div><div class="line">  appid: <span class="number">123456789012345</span></div><div class="line">  comment_count: <span class="number">5</span></div><div class="line">  comment_width: <span class="number">840</span></div><div class="line">  comment_colorscheme: light</div></pre></td></tr></table></figure>

<p>至此,配置文件修改完毕,上面提到了我们不适用disqus的评论组件,使用多说,下面教大家来配置多说</p>
<h1 id="创建多说">创建多说</h1>
<p>首先我们去多说注册一个账号,<a href="http://duoshuo.com/" title="多说官网" target="_blank" rel="external">点击这里</a><br>我们点击<a href="http://duoshuo.com/create-site/" title="我要安装" target="_blank" rel="external">我要安装</a>,界面如下<img src="http://ww4.sinaimg.cn/large/692869a3gw1emtdlnpsqaj20wo0lp783.jpg" alt="duoshuo 创建界面" title="创建多说账号"><br>shortname就是jackroyal,创建完成后,跳转到如下界面<br><img src="http://ww1.sinaimg.cn/large/692869a3gw1emtdp96x54j20us0jxn18.jpg" alt="获取多说代码" title="获取多说代码"><br>我们选择<code>通用代码</code>,点击复制,就行了</p>
<h1 id="配置多说">配置多说</h1>
<p>这里说一个前提,我使用的是light主题,如果你用的是其他主题,接下来的设置可能给我有点区别,但是原理差不多,参考看看</p>
<ol>
<li>我们打开<code>F:\blog\themes\light\layout\_partial\comment.ejs</code>这个文件,然后修改后代码如下(如果你不是light主题,可能跟这个不一样,你去找下包含comment的section在哪里,改法还是这样.例如系统默认的landscape主题,下面这段代码就是在article.ejs,它没有comment.ejs)</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="vbscript">&lt;% <span class="keyword">if</span> (page.comments){ %&gt;</span></div><div class="line"><span class="comment">&lt;!-- 这里添加了一个导航,页面的下面会有一个上一篇,下一篇 --&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="title">nav</span> <span class="attribute">id</span>=<span class="value">"pagination"</span> &gt;</span></div><div class="line">    <span class="vbscript">&lt;% <span class="keyword">if</span> (page.prev) { %&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"&lt;%- config.root %&gt;&lt;%- page.prev.path %&gt;"</span> <span class="attribute">class</span>=<span class="value">"alignleft prev"</span> &gt;</span> <span class="vbscript">&lt;%=page.prev.title %&gt;</span> <span class="tag">&lt;/<span class="title">a</span>&gt;</span></div><div class="line">    <span class="vbscript">&lt;% } %&gt;</span></div><div class="line">    <span class="vbscript">&lt;% <span class="keyword">if</span> (page.<span class="keyword">next</span>) { %&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"&lt;%- config.root %&gt;&lt;%- page.next.path %&gt;"</span> <span class="attribute">class</span>=<span class="value">"alignright next"</span> &gt;</span> <span class="vbscript">&lt;%=page.<span class="keyword">next</span>.title %&gt;</span> <span class="tag">&lt;/<span class="title">a</span>&gt;</span></div><div class="line">    <span class="vbscript">&lt;% } %&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"clearfix"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">nav</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 导航结束 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">section</span> <span class="attribute">id</span>=<span class="value">"comments"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 这里是多说的代码,直接把你的代码粘贴到这里就行 --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 多说评论框 start --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"ds-thread"</span> <span class="attribute">data-thread-key</span>=<span class="value">"&lt;%= page.layout %&gt;-&lt;%= page.slug %&gt;"</span> <span class="attribute">data-title</span>=<span class="value">"&lt;%= page.title %&gt;"</span> <span class="attribute">data-url</span>=<span class="value">"&lt;%= page.permalink %&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 多说评论框 end --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> duoshuoQuery = {short_name:<span class="string">'&lt;%= config.duoshuo_shortname %&gt;'</span>};</div><div class="line">      (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">var</span> ds = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">        ds.type = <span class="string">'text/javascript'</span>;ds.async = <span class="literal">true</span>;</div><div class="line">        ds.src = (<span class="built_in">document</span>.location.protocol == <span class="string">'https:'</span> ? <span class="string">'https:'</span> : <span class="string">'http:'</span>) + <span class="string">'//static.duoshuo.com/embed.js'</span>;</div><div class="line">        ds.charset = <span class="string">'UTF-8'</span>;</div><div class="line">        (<span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>]</div><div class="line">         || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]).appendChild(ds);</div><div class="line">      })();</div><div class="line">      <span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 多说公共JS代码 end --&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 多说结束 --&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">section</span>&gt;</span></div><div class="line"><span class="vbscript">&lt;% } %&gt;</span></div></pre></td></tr></table></figure>

<p>眼尖的同学可能已经看到我的上面第16行代码与你们的不同,这行代码包括了页面的标题和url,它会根据hexo的配置,由hexo动态生成,所以你把你的代码替换成我的这行代码.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="variable">class=</span><span class="string">"ds-thread"</span> <span class="variable">data-thread-key=</span><span class="string">"&lt;%= page.layout %&gt;-&lt;%= page.slug %&gt;"</span> <span class="variable">data-title=</span><span class="string">"&lt;%= page.title %&gt;"</span> <span class="variable">data-url=</span><span class="string">"&lt;%= page.permalink %&gt;"</span>&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>

<p>至此,多说添加完毕</p>
<h1 id="修复bug">修复bug</h1>
<p>我发现light的主题貌似有个小bug,在<code>F:\blog\themes\light\layout\_partial\article.ejs</code>中间第27行有这样一行代码</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="vbscript">&lt;% <span class="keyword">if</span> (item.comment && config.disqus_shortname){ %&gt;</span></div></pre></td></tr></table></figure>

<p>首先我们,替换config.disqus_shortname为config.duoshuo_shortname.<br>然后修改<code>item.comment</code>为<code>item.comments</code>,因为系统中没有comment这个变量,只有comments这个变量,如果不修改comments,那么<code>item.comment</code>一直为假,所以一直不成立,就不会显示comments字段了.修改后代码如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="vbscript">&lt;% <span class="keyword">if</span> (item.comments && config.duoshuo_shortname){ %&gt;</span></div></pre></td></tr></table></figure>

<p>产生的效果如图<img src="http://ww3.sinaimg.cn/large/692869a3gw1emteitia5uj20tl0fn412.jpg" alt="开启和关闭comment的区别" title="开启和关闭comment的区别">.<br>至此,配置hexo,打完收工<br>enjoy it</p>
<hr>
<h1 id="参考文献">参考文献</h1>
<p>1 <a href="http://zipperary.com/2013/05/29/hexo-guide-3/" target="_blank" rel="external">http://zipperary.com/2013/05/29/hexo-guide-3/</a><br>2 <a href="http://dev.duoshuo.com/threads/541d3b2b40b5abcd2e4df0e9" target="_blank" rel="external">duoshuo官方Hexo使用教程</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>经过<a href="/how-to-build-a-blog-with-hexo.html">上篇博客</a>,我们搭建起了自己的博客,接下来我们对它做些个性化的定制.<br>在hexo中,配置文件一共两个(我的hexo安装在F:/blog/),分别是<code>F:/blog/_config.yml</code>和<code>F:/blog/themes/light/_config.yml</code>.第一个是全局的配置文件,第二个是主题的配置文件,在继续说之前,我们先来说一下主题安装.]]>
    
    </summary>
    
      <category term="hexo" scheme="http://jackroyal.github.io/tags/hexo/"/>
    
      <category term="hexo" scheme="http://jackroyal.github.io/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用hexo建立自己的Github pages]]></title>
    <link href="http://jackroyal.github.io/2014/11/27/how-to-build-a-blog-with-hexo/"/>
    <id>http://jackroyal.github.io/2014/11/27/how-to-build-a-blog-with-hexo/</id>
    <published>2014-11-27T06:48:29.000Z</published>
    <updated>2015-03-08T10:57:46.000Z</updated>
    <content type="html"><![CDATA[<p>昨天经过一天的<a href="http://jackroyal.github.io/2014/11/26/new-start/" title="生命在于折腾" target="_blank" rel="external">折腾</a>,总算把博客搭建起来了,今天就来写个博客总结一下.<br>网上的资料很多,我主要参考的是这篇博客,一路很顺利.</p>
<blockquote>
<p><a href="http://zipperary.com/2013/05/28/hexo-guide-2/" target="_blank" rel="external">http://zipperary.com/2013/05/28/hexo-guide-2/</a></p>
</blockquote>
<p>一个很重要的原因就是他是针对windows的,刚好我也在用windows.</p>
<h1 id="安装过程">安装过程</h1>
<h2 id="1-_安装Github_for_windows">1. 安装Github for windows</h2>
<p>因为我之前就在用Github,所以早就安装了这个.已经装过的同学请忽略这一段.<br>下载 <a href="https://windows.github.com/" title="Github for windows" target="_blank" rel="external">Github for windows</a> 并执行即可完成安装(<em>在线安装,会有点慢</em>)。这个软件的的好处是有一个带GUI的界面,还有一个终端界面.如图所示<a id="more"></a><br><img src="http://ww2.sinaimg.cn/large/692869a3jw1emplp1lz31j204w033mx0.jpg" alt="Github for windows"><br><img src="http://ww2.sinaimg.cn/large/692869a3gw1empluh6hvej210b0j741r.jpg" alt="GUI and Bash"><br>如果你不喜欢用这个,也可以用上面的博客推荐的<a href="http://code.google.com/p/msysgit/" target="_blank" rel="external">msysgit</a>.</p>
<h2 id="2-_安装Node-js">2. 安装Node.js</h2>
<p>在 Windows 环境下安装 <a href="http://nodejs.org/" title="Node.js 官网" target="_blank" rel="external">Node.js</a> 非常简单，仅须下载安装文件并执行即可完成安装。（win下建议下载msi格式的，因为这样可以不用配置环境变量之类的）</p>
<h2 id="3-_测试node-js是否安装">3. 测试node.js是否安装</h2>
<p>在任何控制台输入(可以按windows键+R,输入cmd,然后输入npm,一般来说不会有问题)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span></div></pre></td></tr></table></figure>

<p>返回值如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Usage</span>: <span class="string">npm &lt;command&gt;</span></div><div class="line"></div><div class="line"><span class="applescript"><span class="keyword">where</span> &lt;command&gt; <span class="keyword">is</span> one <span class="keyword">of</span>:</span></div><div class="line">    add-user, adduser, apihelp, author, bin, bugs, c, cache,</div><div class="line">    completion, config, ddp, dedupe, deprecate, docs, edit,</div><div class="line">    explore, faq, find, find-dupes, <span class="keyword">get</span>, help, help-search,</div><div class="line">    home, i, info, init, install, isntall, issues, la, link,</div><div class="line">    <span class="type">list</span>, ll, ln, login, ls, outdated, owner, pack, prefix,</div><div class="line">    prune, publish, r, rb, rebuild, remove, repo, restart, rm,</div><div class="line">    root, <span class="command">run</span>-<span class="keyword">script</span>, s, se, search, <span class="keyword">set</span>, show, shrinkwrap,</div><div class="line">    star, stars, start, stop, submodule, t, tag, test, tst, un,</div><div class="line">    uninstall, unlink, unpublish, unstar, up, update, v,</div><div class="line">    <span class="property">version</span>, view, whoami</div><div class="line"></div><div class="line">npm &lt;cmd&gt; -h     quick help <span class="function_start"><span class="keyword">on</span></span> &lt;cmd&gt;</div><div class="line">npm -l           display full usage info</div><div class="line">npm faq          commonly asked questions</div><div class="line">npm help &lt;term&gt;  search <span class="keyword">for</span> help <span class="function_start"><span class="keyword">on</span></span> &lt;term&gt;</div><div class="line">npm help npm     involved overview</div><div class="line"></div><div class="line">Specify configs <span class="keyword">in</span> <span class="keyword">the</span> ini-formatted <span class="type">file</span>:</div><div class="line">    C:\Users\chenhao\.npmrc</div><div class="line"><span class="keyword">or</span> <span class="function_start"><span class="keyword">on</span></span> <span class="keyword">the</span> command line via: npm &lt;command&gt; <span class="comment">--key value</span></div><div class="line">Config info can be viewed via: npm help config</div><div class="line"></div><div class="line">npm@<span class="number">1.4</span><span class="number">.28</span> D:\Program Files (x86)\nodejs\node_modules\npm</div></pre></td></tr></table></figure>

<p>看到这个结果,就表示你的node.js已经安装上去了<br><em>感谢我们家笨笨的反馈：</em>此处如果npm无效，首先确定win下你采用的是msi格式的安装文件，然后重启下电脑，应该就正常了。</p>
<h2 id="4-_安装hexo">4. 安装hexo</h2>
<p>接下来的操作我都是用<strong>Github for windows</strong>自带的Bash来完成的,因为后面会涉及到SSH,用<strong>Github for windows</strong>,就可以避免这个问题.</p>
<ul>
<li>在Bash中输入以下命令</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="operator"><span class="keyword">install</span> -g hexo</span></div></pre></td></tr></table></figure>

<ul>
<li>创建hexo文件夹<br>创建你hexo放置的文件夹,先用Bash进入到目标文件夹,比如我的是F:/blog/,接下来初始化hexo,自动生成相关的文件,在F:/blog/环境下,输入</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /f/blog  <span class="comment">#这个命令表示当前进入目录为f：/blog/</span></div><div class="line">hexo init</div></pre></td></tr></table></figure>

<ul>
<li>安装依赖包</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="operator"><span class="keyword">install</span></span></div></pre></td></tr></table></figure>

<ul>
<li>本地预览,做完以上操作,可以本地预览一下</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">hexo</span> g</div><div class="line">hexo s</div></pre></td></tr></table></figure>

<p>以上两条命令的意思是:<br>生成相关文件(就是生成目标html,静态博客嘛,就是很多html组成)<br>打开本地服务器预览(node.js就是干这事的,点击访问<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a>,就可以看到了)</p>
<h2 id="ok,到这里,博客搭建基本完成,现在要做的就是把它发布到你的Github上去"><strong>ok</strong>,到这里,博客搭建基本完成,现在要做的就是把它发布到你的Github上去</h2>
<p>接下来,教你怎么发布到Github上去</p>
<h1 id="注册Github">注册Github</h1>
<p>这一步没什么说的,如果你连简单的注册都不会,我也不会教你╮(╯▽╰)╭</p>
<h1 id="创建公共库">创建公共库</h1>
<p>在自己Github主页右下角，创建一个新的repository(<a href="https://github.com/new" title="点我新建" target="_blank" rel="external">点这里</a>)。比如我的Github账号是Jackroyal，那么我应该创建的repository名字应该是Jackroyal.github.io(注意你的repository名字就是Jackroyal.github.io,我之前用的是Jackroyal怎么尝试都不行)。</p>
<blockquote>
<p>PS:有个大小写的问题其实我注册的是Jackroyal,大写的J,但是我访问的时候特别是带https的链接,他会自动转为小写访问.怎么说呢?简单点,你就按照你的用户名来,该大写大写,该小写小写</p>
</blockquote>
<h1 id="部署">部署</h1>
<p>现在万事俱备,只差部署了,我们来配置下<code>_config.yml</code>.<br>这个文件在路径是F:/blog/_config.yml.<br>用编辑器把它打开,修改最后一段</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="class"><span class="keyword">type</span>: <span class="title">github</span></span></div><div class="line">  repo: https:<span class="comment">//github.com/Jackroyal/Jackroyal.github.io.git</span></div><div class="line">  branch: master</div></pre></td></tr></table></figure>

<p>照着我的这个格式修改就好了,把我里面的用户名替换成你的.<br>至此基本完成所有搭建步骤.</p>
<h1 id="上传">上传</h1>
<p>我们开始上传项目的代码,再重复一次,我一直以来用的工具都是<em>Github for windows</em>自带的Bash,所以我没有配置SSH,如果你用的windows自带的终端或者其他比如msysgit,可能需要配置SSH,不然无法使用Github(点击<a href="https://help.github.com/articles/generating-ssh-keys/" title="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="external"><code>这里</code></a>查看官方教程).<br>我们输入以下命令</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">hexo</span> g</div><div class="line">hexo d</div></pre></td></tr></table></figure>

<p>或者偷个懒</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">hexo</span> d -g</div></pre></td></tr></table></figure>

<p>ok,现在就可以去看看你的个人主页了,逼格满满有木有.</p>
<h1 id="问题">问题</h1>
<p>我的中间出过一些问题:</p>
<ol>
<li>我的<code>hexo d</code>的时候出错,可以尝试手动删除<code>.deploy</code>文件夹,然后执行<code>hexo clean</code>还有可能出现的情况是,<code>deploy</code>没错但是一直没有提示<code>deploy done</code>,那就是骚年,你访问Github网速太慢</li>
<li>我<code>deploy d</code>成功以后,在Github里面已经看到生成的页面了,访问<a href="http://jackroyal.github.io" target="_blank" rel="external">http://jackroyal.github.io</a>或者<a href="https://jackroyal.github.io" target="_blank" rel="external">https://jackroyal.github.io</a>一直报404的错误,这种时候等一等就好了,一般等几分钟.如果一直不好那就给官方发个邮件,他们很快会回复你的,有什么问题说清楚就行.<h1 id="致谢">致谢</h1>
这里，要感谢我最亲爱的笨笨，是她给我测试和反馈的<a href="http://huirong.github.io" target="_blank" rel="external">http://huirong.github.io</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>昨天经过一天的<a href="http://jackroyal.github.io/2014/11/26/new-start/" title="生命在于折腾" target="_blank" rel="external">折腾</a>,总算把博客搭建起来了,今天就来写个博客总结一下.<br>网上的资料很多,我主要参考的是这篇博客,一路很顺利.</p>
<blockquote>
<p><a href="http://zipperary.com/2013/05/28/hexo-guide-2/" target="_blank" rel="external">http://zipperary.com/2013/05/28/hexo-guide-2/</a></p>
</blockquote>
<p>一个很重要的原因就是他是针对windows的,刚好我也在用windows.</p>
<h1 id="安装过程">安装过程</h1>
<h2 id="1-_安装Github_for_windows">1. 安装Github for windows</h2>
<p>因为我之前就在用Github,所以早就安装了这个.已经装过的同学请忽略这一段.<br>下载 <a href="https://windows.github.com/" title="Github for windows" target="_blank" rel="external">Github for windows</a> 并执行即可完成安装(<em>在线安装,会有点慢</em>)。这个软件的的好处是有一个带GUI的界面,还有一个终端界面.如图所示]]>
    
    </summary>
    
      <category term="hexo" scheme="http://jackroyal.github.io/tags/hexo/"/>
    
      <category term="github" scheme="http://jackroyal.github.io/tags/github/"/>
    
      <category term="hexo" scheme="http://jackroyal.github.io/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[新的开始]]></title>
    <link href="http://jackroyal.github.io/2014/11/26/new-start/"/>
    <id>http://jackroyal.github.io/2014/11/26/new-start/</id>
    <published>2014-11-26T13:29:15.000Z</published>
    <updated>2015-01-06T04:35:04.000Z</updated>
    <content type="html"><![CDATA[<p>今天<strong>折腾</strong>了一天,终于弄好了,<a href="http://jackroyal.github.io" title="搁浅St的博客" target="_blank" rel="external">我的博客</a>,正式落户Github.<a id="more"></a><br><img src="http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png" alt="GitHub Mark" title="GitHub Mark"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天<strong>折腾</strong>了一天,终于弄好了,<a href="http://jackroyal.github.io" title="搁浅St的博客" target="_blank" rel="external">我的博客</a>,正式落户Github.]]>
    
    </summary>
    
      <category term="hexo" scheme="http://jackroyal.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[js]replace替换]]></title>
    <link href="http://jackroyal.github.io/2014/11/25/%5Bjs%5Dreplace%E6%9B%BF%E6%8D%A2/"/>
    <id>http://jackroyal.github.io/2014/11/25/[js]replace替换/</id>
    <published>2014-11-25T14:32:00.000Z</published>
    <updated>2015-01-06T04:35:04.000Z</updated>
    <content type="html"><![CDATA[<p>今天做前端试题,用到了replace函数,来记录一下.<br>(以下部分知识点来自<a href="http://www.w3cschool.cn/jsref_replace.html" target="_blank" rel="external">http://www.w3cschool.cn/jsref_replace.html</a>)</p>
<h2 id="定义和用法">定义和用法</h2>
<p>replace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</p>
<h3 id="语法">语法</h3>
<table class="dataintable " style="margin-top:10px; border-collapse:collapse; border:1px solid rgb(136,136,136); width:606px; color:rgb(0,0,0); font-size:12px; background-color:rgb(249,249,249)"><br><tbody><br><tr><br><th style="vertical-align:baseline; padding:5px 15px 5px 5px; border:1px solid rgb(136,136,136); background-color:rgb(204,204,204)"><br>参数</th><br><th style="vertical-align:baseline; padding:5px 15px 5px 5px; border:1px solid rgb(136,136,136); background-color:rgb(204,204,204)"><br>描述</th><br></tr><br><tr><br><td style="vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)"><br>regexp/substr</td><br><td style="vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)"><br><p style="margin-top:0px; margin-bottom:0px; line-height:18px">必需。规定子字符串或要替换的模式的 RegExp 对象。</p><br><p style="margin-top:0px; margin-bottom:2px; line-height:18px">请注意，如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换为 RegExp 对象。</p><br></td><br></tr><br><tr><br><td style="vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)"><br>replacement</td><br><td style="vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)"><br>必需。一个字符串值。规定了替换文本或生成替换文本的函数。</td><br></tr><br></tbody><br></table>

<h3 id="返回值">返回值</h3>
<p>一个新的字符串，是用 <em>replacement</em> 替换了 regexp 的第一次匹配或所有匹配之后得到的。</p>
<h3 id="说明">说明</h3>
<p>字符串 stringObject 的 replace() 方法执行的是查找并替换的操作。它将在 stringObject 中查找与 regexp 相匹配的子字符串，然后用 <em>replacement</em> 来替换这些子串。如果 regexp 具有全局标志 g，那么 replace() 方法将替换所有匹配的子串。否则，它只替换第一个匹配子串。</p>
<p><em>replacement</em> 可以是字符串，也可以是函数。如果它是字符串，那么每个匹配都将由字符串替换。但是 replacement 中的 $ 字符具有特定的含义。如下表所示，它说明从模式匹配得到的字符串将用于替换。</p>
<table class="dataintable " style="margin-top:10px; border-collapse:collapse; border:1px solid rgb(136,136,136); width:606px; color:rgb(0,0,0); font-size:12px; background-color:rgb(249,249,249)"><br><tbody><br><tr><br><th style="vertical-align:baseline; padding:5px 15px 5px 5px; border:1px solid rgb(136,136,136); background-color:rgb(204,204,204)"><br>字符</th><br><th style="vertical-align:baseline; padding:5px 15px 5px 5px; border:1px solid rgb(136,136,136); background-color:rgb(204,204,204)"><br>替换文本</th><br></tr><br><tr><br><td style="vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)"><br>$1、$2、…、$99</td><br><td style="vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)"><br>与 regexp 中的第 1 到第 99 个子表达式相匹配的文本。</td><br></tr><br><tr><br><td style="vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)"><br>$&amp;</td><br><td style="vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)"><br>与 regexp 相匹配的子串。</td><br></tr><br><tr><br><td style="vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)"><br>$`</td><br><td style="vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)"><br>位于匹配子串左侧的文本。</td><br></tr><br><tr><br><td style="vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)"><br>$’</td><br><td style="vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)"><br>位于匹配子串右侧的文本。</td><br></tr><br><tr><br><td style="vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)"><br>$$</td><br><td style="vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)"><br>直接量符号。</td><br></tr><br></tbody><br></table>

<p><strong>注意：</strong>ECMAScript v3 规定，replace() 方法的参数 replacement 可以是函数而不是字符串。在这种情况下，每个匹配都调用该函数，它返回的字符串将作为替换文本使用。该函数的第一个参数是匹配模式的字符串。接下来的参数是与模式中的子表达式匹配的字符串，可以有 0 个或多个这样的参数。接下来的参数是一个整数，声明了匹配在 stringObject 中出现的位置。最后一个参数是<br> stringObject 本身。</p>
<p>下面给几个简单的例子来说明一下</p>
<p>ps:介绍一下正则的小知识,\w表示匹配一个英文字符,+表示匹配数量必须大于一个,\b就是分节符,单词中间分隔用的,连在一起就是取出前面字符串中所有的单词</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'my name is'</span>.replace(<span class="regexp">/(\w+)\b/g</span>,<span class="string">'haha  '</span>);<span class="comment">//输出结果为   "haha   haha   haha  "</span></div></pre></td></tr></table></figure>



<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'my name is'</span>.replace(<span class="regexp">/(\w+)\b/g</span>,<span class="string">'$1aa'</span>);<span class="comment">//输出结果为"myaa nameaa isaa"</span></div></pre></td></tr></table></figure>



<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'my name is'</span>.replace(<span class="regexp">/((\w)(\w+?))\b/g</span>,<span class="function"><span class="keyword">function</span><span class="params">(m,a,b,c,d,e)</span></span>{<span class="keyword">return</span> b.toUpperCase()+c;});<span class="comment">//输出结果为"My Name Is"</span></div></pre></td></tr></table></figure>

<p>重点讲解一下第三个,replace返回值为函数的例子(function必须要return)</p>
<p>当replace返回值为函数的时候</p>
<p>如果只有一个分组的话,他的参数是funciton(match,pos,originalText),分别表示模式的匹配项,模式匹配项在字符串中的位置和原始字符串</p>
<p>如果有多个分组的话,他的参数是funciton(match,arr1,arr2,arr3,….arrn,pos,originalText),分别表示模式的匹配项,模式匹配项,还有n个匹配的分组,最后的两个参数是在字符串中的位置和原始字符串</p>
<p>比如下面的例子,执行的结果就是</p>
<p>‘my name is imweba ‘.replace(/((\w)(\w+?))\b/g,function(m,a,b,c,d,e){</p>
<p>console.log(m);</p>
<p>console.log(a);</p>
<p>console.log(b);</p>
<p>console.log(c);</p>
<p>console.log(d);</p>
<p>console.log(e);</p>
<p>});<br>执行结果</p>
<p>my//模式匹配的值,因为上面匹配了整个单词,虽然分了多个组</p>
<p>my//第一个分组的值</p>
<p>m//第二个分组的值</p>
<p>y//第三个分组的值</p>
<p>0//模式匹配在字符串中的起始位置</p>
<p>my name is imweba  //原始字符串</p>
<p>name</p>
<p>name</p>
<p>n</p>
<p>ame</p>
<p>3</p>
<p>my name is imweba </p>
<p>is</p>
<p>is</p>
<p>i</p>
<p>s</p>
<p>8</p>
<p>my name is imweba </p>
<p>imweba</p>
<p>imweba</p>
<p>i</p>
<p>mweba</p>
<p>11</p>
<p>my name is imweba </p>
<p>“undefined undefined undefined undefined “//这一行是因为function必须要有return,我没写return,所以就都是undefined</p>
<p>ok  打完收工</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天做前端试题,用到了replace函数,来记录一下.<br>(以下部分知识点来自<a href="http://www.w3cschool.cn/jsref_replace.html" target="_blank" rel="external">http://www.w]]>
    </summary>
    
      <category term="javascript" scheme="http://jackroyal.github.io/tags/javascript/"/>
    
      <category term="正则表达式" scheme="http://jackroyal.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="前端" scheme="http://jackroyal.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="http://jackroyal.github.io/tags/js/"/>
    
      <category term="javascript" scheme="http://jackroyal.github.io/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[js]前端试题]]></title>
    <link href="http://jackroyal.github.io/2014/11/25/%5Bjs%5D%E5%89%8D%E7%AB%AF%E8%AF%95%E9%A2%98/"/>
    <id>http://jackroyal.github.io/2014/11/25/[js]前端试题/</id>
    <published>2014-11-25T14:26:00.000Z</published>
    <updated>2015-01-06T04:35:04.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1、获取页面id为 hello 的节点</span></div><div class="line"><span class="keyword">var</span> he=<span class="built_in">document</span>.getElementById(<span class="string">'hello'</span>);</div><div class="line"><span class="comment">// 2、获取页面所有 div 标签</span></div><div class="line"><span class="keyword">var</span> di=<span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>);</div><div class="line"><span class="comment">// 3、给 id 为hello的节点绑定click 事件，点击的时候弹出 "hello"</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'hello'</span>).onclick=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{alert(<span class="string">'helo'</span>)};</div><div class="line"><span class="comment">// 4、将页面上 id为hello的节点隐藏</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'hello'</span>).style.visibility=none;</div><div class="line"><span class="comment">// 5、将 "hello world" 用正则替换成 "hello javascript”</span></div><div class="line"><span class="keyword">var</span> str=<span class="string">'hello world'</span>;</div><div class="line">str.replace(<span class="regexp">/hello[\s]+world/g</span>,<span class="string">'hello javascript'</span>);</div><div class="line"><span class="comment">// 6、给节点（假设为element）绑定click事件，当被点击时候，alert 弹出事件的类型（通过jquery）</span></div><div class="line">$(element).click(<span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>{</div><div class="line">    alert(event.type);</div><div class="line">});</div><div class="line"><span class="comment">// 7、给一个节点添加一个类 "hello"</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'kw'</span>).className=<span class="built_in">document</span>.getElementById(<span class="string">'kw'</span>).className+<span class="string">" hello"</span>;</div><div class="line"><span class="comment">// 8、给节点（假设为element）绑定click事件，当被点击时候，alert 弹出事件的类型（要求兼容IE、标准浏览器）</span></div><div class="line">element.onclick=<span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>{<span class="keyword">var</span> e=event||<span class="built_in">window</span>.event};</div><div class="line"><span class="comment">// 9、假设页面有这么两个节点将 id为world的节点的 内容设置成 跟 id 为 hello 的节点一样。</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'world'</span>).innerHTML=<span class="built_in">document</span>.getElementById(<span class="string">'hello'</span>).innerHTML;</div><div class="line"><span class="comment">// 10、通过 js 将element的margin-left 设置为 20px</span></div><div class="line">element.style.marginLeft=<span class="string">"20px"</span>;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 1.[{a:3},{a:4},{a:1},{a:2}] sort排序</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortnum</span><span class="params">(a,b)</span></span>{</div><div class="line">    <span class="keyword">return</span> a.a-b.a;</div><div class="line">}</div><div class="line"><span class="comment">//   [{a:3,b:5},{a:4,b:6},{a:1},{a:2,b:8}]按a的正向排序</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortab</span><span class="params">(a,b)</span></span>{</div><div class="line">    <span class="keyword">return</span> a.a-b.a!=<span class="number">0</span>?a.a-b.a:a.b-b.b;</div><div class="line">}</div><div class="line"><span class="comment">//   sort 排序原理  使用的算法</span></div><div class="line"><span class="comment">// 2.my name is imweba ... =&gt; my6 name7 is8 imweba9 ...</span></div><div class="line"><span class="comment">//   用正则实现</span></div><div class="line"><span class="string">'my name is imweba '</span>.replace(<span class="regexp">/([\w]+)\b/g</span>,<span class="string">'$1'</span>)</div><div class="line"><span class="keyword">var</span> attr=<span class="string">'my name is imweba '</span>.match(<span class="regexp">/([\w]+)\b/g</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; attr.length; i++) {</div><div class="line">    attr[i]=attr[i]+(<span class="number">6</span>+i);</div><div class="line">};</div><div class="line">attr.join(<span class="string">' '</span>);<span class="comment">//感觉不对,只能做到这个程度</span></div><div class="line"></div><div class="line"><span class="comment">// 3.实现function test(str)(){},将str的每个单词的首字母大写（str为英文字符串）</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">(str)</span></span>{</div><div class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/((\w)(\w+?))\b/g</span>,<span class="function"><span class="keyword">function</span><span class="params">(m,a,b,c,d,e)</span></span>{<span class="keyword">return</span> b.toUpperCase()+c;});</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// 4.写一个二分查找的算法   （假设这个数组不是有序的呢）</span></div><div class="line">\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*</div><div class="line"><span class="comment">// 5.123+”+34  直接说结果   12334</span></div><div class="line"><span class="number">12334</span></div><div class="line"><span class="comment">// 加法会将数字转化为字符串，减法和乘法等会将字符串转化为数字</span></div><div class="line"><span class="comment">// "4"\*"5"=20</span></div><div class="line"><span class="comment">// 6.实现function find(attr,val){},找到当前页面里具备属性为attr且值为val的节点，输出其父元素名称</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">find</span><span class="params">(attr,val)</span></span>{</div><div class="line">    <span class="keyword">var</span> dom=<span class="built_in">document</span>.getElementsByTagName(<span class="string">'\*'</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;dom.length; i++) {</div><div class="line">        <span class="keyword">if</span>(dom[i].getAttribute(attr)==val){</div><div class="line">            <span class="keyword">return</span> dom[i].parentNode.tagName;</div><div class="line">        }</div><div class="line">   }</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">]]>
    </summary>
    
      <category term="javascript" scheme="http://jackroyal.github.io/tags/javascript/"/>
    
      <category term="前端" scheme="http://jackroyal.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="正则" scheme="http://jackroyal.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
      <category term="javascript" scheme="http://jackroyal.github.io/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[cmcc520扩展使用说明]]></title>
    <link href="http://jackroyal.github.io/2014/11/24/cmcc520%E6%89%A9%E5%B1%95%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <id>http://jackroyal.github.io/2014/11/24/cmcc520扩展使用说明/</id>
    <published>2014-11-24T13:56:00.000Z</published>
    <updated>2015-01-06T04:35:04.000Z</updated>
    <content type="html"><![CDATA[<p>我的cmcc520 2.0版本终于完成了,写个使用说明</p>
<p>学校部分范围有CMCC-EDU可用,通过手动修改ssid,可以免费使用.</p>
<p>写了个扩展来简化这个过程.</p>
<p>1 安装扩展<br>将保存下来的 *.crx 文件或*.js 文件直接拖拽到浏览器的“扩展程序”（<a href="&quot;Chrome 扩展程序页面&quot;">chrome://chrome/extensions</a>/）页面。<br><img src="http://img.blog.csdn.net/20141124215558921?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>( 注：只有拖动到此页面才能安装，其它页面无效)</p>
<p>　　2. 按照提示安装<br><img src="http://img.blog.csdn.net/20141124215611765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>详细安装过程见<a href="http://www.williamlong.info/archives/3160.html" target="_blank" rel="external">http://www.williamlong.info/archives/3160.html</a></p>
<p>3,配置软件功能</p>
<p>左键点击图标,可以选择开关扩展功能(默认为开启)<br> <img src="http://img.blog.csdn.net/20141124215702865?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>4.使用软件</p>
<p>如果软件的功能打开,那么如果当你使用cmcc-edu的时候会自动跳转完成登录,不再需要手动操作,登录成功页面如下,你可以关闭这个页面了<br><img src="http://img.blog.csdn.net/20141124215651437?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>5.下线</p>
<p>在任何页面按ALT+X   可以下线</p>
<p>Ps,如果按Alt+x无任何提示,可能是快捷键设置有问题<br> <img src="http://img.blog.csdn.net/20141124215717575?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><img src="http://img.blog.csdn.net/20141124215740968?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>那就需要你按照上图手动设置快捷键</p>
<p>6 反馈<br>如果发现任何bug,可以和我联系</p>
<p>新浪微博<a href="http://weibo.com/517123263" target="_blank" rel="external">http://weibo.com/517123263</a><br>Github项目地址 <a href="https://github.com/Jackroyal/cmcc520" target="_blank" rel="external">https://github.com/Jackroyal/cmcc520</a><br>我的csdn博客<a href="file:///C:/Users/chenhao/Desktop/%20http:/blog.csdn.net/jackroyal" target="_blank" rel="external"> http://blog.csdn.net/jackroyal</a></p>
<p>2014/11/24</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我的cmcc520 2.0版本终于完成了,写个使用说明</p>
<p>学校部分范围有CMCC-EDU可用,通过手动修改ssid,可以免费使用.</p>
<p>写了个扩展来简化这个过程.</p>
<p>1 安装扩展<br>将保存下来的 *.crx 文件或*.js 文件直接拖拽]]>
    </summary>
    
      <category term="chrome" scheme="http://jackroyal.github.io/tags/chrome/"/>
    
      <category term="cmcc-edu" scheme="http://jackroyal.github.io/tags/cmcc-edu/"/>
    
      <category term="中国移动" scheme="http://jackroyal.github.io/tags/%E4%B8%AD%E5%9B%BD%E7%A7%BB%E5%8A%A8/"/>
    
      <category term="扩展" scheme="http://jackroyal.github.io/tags/%E6%89%A9%E5%B1%95/"/>
    
      <category term="脚本" scheme="http://jackroyal.github.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
      <category term="chrome扩展" scheme="http://jackroyal.github.io/categories/chrome%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[chrome扩展开发手记-chrome扩展开始第一步manfest.json]]></title>
    <link href="http://jackroyal.github.io/2014/11/24/chrome%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91%E6%89%8B%E8%AE%B0-chrome%E6%89%A9%E5%B1%95%E5%BC%80%E5%A7%8B%E7%AC%AC%E4%B8%80%E6%AD%A5manfest.json/"/>
    <id>http://jackroyal.github.io/2014/11/24/chrome扩展开发手记-chrome扩展开始第一步manfest.json/</id>
    <published>2014-11-24T07:16:00.000Z</published>
    <updated>2015-03-29T06:41:45.000Z</updated>
    <content type="html"><![CDATA[<p>参考文档   <a href="https://lmk123.duapp.com/" target="_blank" rel="external">https://lmk123.duapp.com/</a></p>
<p>下面开始写chrome扩展了,第一步就是看文档,官方文档有入门指导,先要过一遍</p>
<p>我们首先来编写第一个文件manfest.json,这是一个清单文件,告诉系统,我有哪些文件,需要申请哪些权限都在里面,下卖弄给出我的manfest.json</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">    <span class="string">"name"</span>:<span class="string">"cmcc520"</span>,<span class="comment">//扩展的名称</span></div><div class="line">    <span class="string">"version"</span>:<span class="string">"2.0"</span>,<span class="comment">//扩展的版本号,随便写</span></div><div class="line">    <span class="string">"description"</span>:<span class="string">"powered by 搁浅St"</span>,<span class="comment">//扩展的描述,就是在chrome://extension页面中,扩展名称下面的几个字</span></div><div class="line">    <span class="string">"background"</span>: {<span class="comment">//background.js,整个扩展的运行,有个页面在后台运行</span></div><div class="line">        <span class="string">"scripts"</span>: [<span class="string">"js/function.js"</span>,<span class="string">"bg.js"</span>],</div><div class="line">        <span class="string">"persistent"</span>: <span class="literal">false</span></div><div class="line">    },</div><div class="line">    <span class="string">"page_action"</span>:{<span class="comment">//比较常见有page_action和browser_action有,page会出现在地址栏末端,browser会在浏览器上显示一个图标</span></div><div class="line">        <span class="string">"default_icon"</span>:<span class="string">"icon-48.png"</span>,</div><div class="line">        <span class="string">"default_popup"</span>: <span class="string">"popup.html"</span>,<span class="comment">//popup.html点击弹出的页面</span></div><div class="line">        <span class="string">"default_title"</span>:<span class="string">"cmcc520"</span></div><div class="line">    },</div><div class="line">    <span class="string">"permissions"</span> : [<span class="comment">//申请内容脚本的权限,在插入内容到页面时,需要用哪些权限,此处必须声明</span></div><div class="line">        <span class="string">"tabs"</span>, <span class="string">"http://\*/\*"</span></div><div class="line">    ],</div><div class="line">    <span class="string">"icons"</span> : {<span class="comment">//图标设置</span></div><div class="line">        <span class="string">"48"</span> : <span class="string">"icon-48.png"</span>,</div><div class="line">        <span class="string">"128"</span> : <span class="string">"icon-128.png"</span></div><div class="line">    },</div><div class="line">    <span class="string">"commands"</span>: {<span class="comment">//快捷键设置</span></div><div class="line">        <span class="string">"logout_cmcc"</span>: {</div><div class="line">            <span class="string">"description"</span>: <span class="string">"退出CMCC登录"</span>,</div><div class="line">            <span class="string">"suggested_key"</span>: {</div><div class="line">                <span class="string">"default"</span>: <span class="string">"Alt+X"</span></div><div class="line">            }</div><div class="line">        }</div><div class="line">    },</div><div class="line">    <span class="string">"manifest_version"</span>:<span class="number">2</span><span class="comment">//manifest_version,现在版本1已经不支持,统一都写成2</span></div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<p>简单的属性,这里不再赘述,我重点说一下background,page_action,permissions和commands.</p>
<p>background  它是一个包含扩展程序主要逻辑的不可见页面。扩展程序也可以包含其他页面，展现扩展程序的用户界面。如果扩展程序需要与用户加载的网页交互（相对于包含在扩展程序中的页面），扩展程序必须使用内容脚本。后台网页分两种：持续运行的后台网页与事件页面(设置persistent属性)。正如它们的名称所述，持续运行的后台网页保持打开状态，事件页面根据需要打开与关闭。除非您绝对需要您的后台网页一直运行，请首选事件页面。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">"background"</span>: {<span class="comment">//background.js,整个扩展的运行,有个页面在后台运行</span></div><div class="line">    <span class="string">"scripts"</span>: [<span class="string">"js/function.js"</span>,<span class="string">"bg.js"</span>],</div><div class="line">    <span class="string">"persistent"</span>: <span class="literal">false</span></div><div class="line">},</div></pre></td></tr></table></figure>

<p>比如我的这个 后台执行就是这样的</p>
<p><img src="http://img.blog.csdn.net/20141124194616706?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>采用pageaction还是browseraction取决于你是否想让图标一直可见.`<img src="http://img.blog.csdn.net/20141124193151343?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>如图,绿色的是广告终结者,他的图标是pageAction,后面的印象笔记还有switchproxy是browserAction.一般来说,适用于少数页面的扩展建议使用pageaction,适用于大多数页面的建议使用browseraction</p>
<p>permissions属性,用来设置和conten_script相关的选项,举个例子,如果你想插入一段代码到页面中去执行,操作页面上的dom,那就写个content_script就行了,使用 content_scripts 字段，扩展程序可以向一个页面中插入多个内容脚本，每个内容脚本可以有多个<br> JavaScript 和 CSS 文件,详细情况请看这里<a href="https://lmk123.duapp.com/extensions/content_scripts" target="_blank" rel="external">https://lmk123.duapp.com/extensions/content_scripts</a></p>
<p>我现在在做的一个扩展就是做这样的事,百度的搜索结果会先跳到一个百度的网址,然后才是目标网址,我可以使用cotent_scripts来插入脚本,修改百度搜索结果的链接,让他直接跳转到目标页面,而不是百度的搜索结果页面.</p>
<p>commands选项是设置快捷键,然后给快捷键设置事件 监听,这样我们按快捷键就会执行相应操作.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">"logout_cmcc"</span>: {<span class="comment">//某个快捷操作的名称</span></div><div class="line">    <span class="string">"description"</span>: <span class="string">"退出CMCC登录"</span>,<span class="comment">//快捷操作的描述</span></div><div class="line">    <span class="string">"suggested_key"</span>: {<span class="comment">//默认推荐的快捷键,不能与系统默认的快捷键冲突,否则就会失灵,需要用户手动去设置</span></div><div class="line">        <span class="string">"default"</span>: <span class="string">"Alt+X"</span></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>参考文档   <a href="https://lmk123.duapp.com/" target="_blank" rel="external">https://lmk123.duapp.com/</a></p>
<p>下面开始写chrome扩展了,第一步就是看文档,官方]]>
    </summary>
    
      <category term="chrome" scheme="http://jackroyal.github.io/tags/chrome/"/>
    
      <category term="cmcc-edu" scheme="http://jackroyal.github.io/tags/cmcc-edu/"/>
    
      <category term="扩展" scheme="http://jackroyal.github.io/tags/%E6%89%A9%E5%B1%95/"/>
    
      <category term="脚本" scheme="http://jackroyal.github.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
      <category term="中国移动" scheme="http://jackroyal.github.io/tags/%E4%B8%AD%E5%9B%BD%E7%A7%BB%E5%8A%A8/"/>
    
      <category term="chrome扩展" scheme="http://jackroyal.github.io/categories/chrome%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
</feed>
