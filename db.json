{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/fexo/source/css/styles.css","path":"css/styles.css","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.eot","path":"fonts/PoiretOne-Regular.eot","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.woff","path":"fonts/PoiretOne-Regular.woff","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.ttf","path":"fonts/PoiretOne-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.eot","path":"fonts/calligraffitti-regular-webfont.eot","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff","path":"fonts/calligraffitti-regular-webfont.woff","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff2","path":"fonts/calligraffitti-regular-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.eot","path":"fonts/fontello.eot","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.svg","path":"fonts/fontello.svg","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.ttf","path":"fonts/fontello.ttf","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.woff2","path":"fonts/fontello.woff2","modified":0,"renderable":1},{"_id":"themes/fexo/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.woff","path":"fonts/fontello.woff","modified":0,"renderable":1},{"_id":"themes/fexo/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/fexo/source/js/fastclick.js","path":"js/fastclick.js","modified":0,"renderable":1},{"_id":"themes/fexo/source/images/avatar2.jpg","path":"images/avatar2.jpg","modified":0,"renderable":1},{"_id":"themes/fexo/source/js/util.js","path":"js/util.js","modified":0,"renderable":1},{"_id":"themes/fexo/source/js/bundle.js","path":"js/bundle.js","modified":0,"renderable":1},{"_id":"themes/fexo/source/js/zenscroll.js","path":"js/zenscroll.js","modified":0,"renderable":1},{"_id":"themes/fexo/source/js/scroll-spy.js","path":"js/scroll-spy.js","modified":0,"renderable":1},{"_id":"themes/fexo/source/sass/styles.scss","path":"sass/styles.scss","modified":0,"renderable":1},{"_id":"themes/fexo/source/css/styles.css.map","path":"css/styles.css.map","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.ttf","path":"fonts/calligraffitti-regular-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.svg","path":"fonts/calligraffitti-regular-webfont.svg","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.svg","path":"fonts/PoiretOne-Regular.svg","modified":0,"renderable":1},{"_id":"themes/fexo/source/images/bg.jpg","path":"images/bg.jpg","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.eot","path":"fonts/Lobster-Regular.eot","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.ttf","path":"fonts/Lobster-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.woff","path":"fonts/Lobster-Regular.woff","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.svg","path":"fonts/Lobster-Regular.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"e398114d6c354e3d7e8201828094643f0f96fb98","modified":1478163005000},{"_id":"source/CNAME","hash":"db86d81a1e8ba91f4c3ed871038fd71cae368980","modified":1477921457000},{"_id":"themes/fexo/.DS_Store","hash":"184ecfd8b39260f9828aa7444350090eadb03106","modified":1478158628000},{"_id":"themes/fexo/LICENSE","hash":"db4cb5aef6072a96721b5428fdd999647c049d55","modified":1478094905000},{"_id":"themes/fexo/.gitignore","hash":"32223fbe296f8e3026c689bad8f3dea9d0fcbb43","modified":1478094905000},{"_id":"themes/fexo/.csscomb.json","hash":"0bff596879c2556634b9a92abe5b1606dc77fd1c","modified":1478094905000},{"_id":"themes/fexo/README.md","hash":"35cd346c229e17ed83609ee94b5d6493c4ab9982","modified":1478094905000},{"_id":"themes/fexo/_config.yml","hash":"7eeadb9fd1cddf22ba9484e95e62b26dc660bf73","modified":1478161483000},{"_id":"themes/fexo/gulpfile.js","hash":"5995b9c4e8e18d1670ad30b2881d49fa17e56415","modified":1478094905000},{"_id":"themes/fexo/package.json","hash":"351b5b21f5ea8851103ee1891248be43f3c27027","modified":1478094905000},{"_id":"source/about/index.md","hash":"bc1e33abe97db8273e6b12f35bb578534dde20a2","modified":1478157626000},{"_id":"source/_posts/[js]replace替换.md","hash":"dfd1dce37632e3611c51391a32573609b326d5f9","modified":1446098904000},{"_id":"source/_posts/after-kali.md","hash":"002bed0c1b3b6b6b771a68edcb2d090f0378fac5","modified":1446098902000},{"_id":"source/_posts/[js]前端试题.md","hash":"23a43ea66d1d4fd4cfa194517d0a12ee986faaf5","modified":1443526884000},{"_id":"source/_posts/blog2markdown-csdn-windows.md","hash":"9d5aed158e3320497384bec07f7138c646616ed8","modified":1446098936000},{"_id":"source/_posts/chrome扩展开发手记-chrome扩展开始第一步manfest.json.md","hash":"a6c4260ebdcf35a05cbeb2febc75f1d83c195762","modified":1443526884000},{"_id":"source/_posts/chrome扩展开发手记1-需求分析.md","hash":"6c8062392a285be0209d8572b603a06170ba98d9","modified":1443526884000},{"_id":"source/_posts/chrome扩展开发手记2-登录原理分析.md","hash":"a8ccfd0fee0737c556ac875164720575bcc998be","modified":1443526884000},{"_id":"source/_posts/cmcc520扩展使用说明.md","hash":"435780374a028424cd5e91a64250960dca6c1f08","modified":1443526884000},{"_id":"source/_posts/face-detection.md","hash":"82c539b13e3b9a0ce94a3366a46eb36ab8743701","modified":1446098932000},{"_id":"source/_posts/digitalocean-support-google-scholar-by-ipv6.md","hash":"10708207eba05605aaacceefa146c9950c501189","modified":1446098934000},{"_id":"source/_posts/custom-hexo.md","hash":"0de5cad3c586c042c5bfc9309ef11e4c313d3732","modified":1446100850000},{"_id":"source/_posts/digitalocean-switch-kernel.md","hash":"080d0781239a766b4eb219c9298959cad4636315","modified":1453973126000},{"_id":"source/_posts/face-recognizer.md","hash":"0ca56e71b818f79436f8ab3a087c35a8b44edd50","modified":1446098932000},{"_id":"source/_posts/hexo-3-0-update.md","hash":"1097068e0049c7738927fcda96bdd0d4d9814aef","modified":1446098932000},{"_id":"source/_posts/hexo-setting-with-comments-and-visitors.md","hash":"26a0a0cdf14f7047661d9083c7b9e9295082a3ea","modified":1446098930000},{"_id":"source/_posts/hexo-deploy-error.md","hash":"fa2cd23855350bdc2a5ea60e9222b63c7cddc1e3","modified":1446098930000},{"_id":"source/_posts/how-to-build-a-blog-with-hexo.md","hash":"66715a6459d94baa813602ee25b25202b3c65c65","modified":1446098930000},{"_id":"source/_posts/how-to-solve-the-problem-that-github-blocks-the-baidu-spider.md","hash":"517d67a2532a8f3f37305fa3f8a6c23b858ceb6c","modified":1457259808000},{"_id":"source/_posts/holes-in-ie6-about-html5.md","hash":"9a2350e3f17835f4ba59947dc1faed3cb1d48e7f","modified":1446098930000},{"_id":"source/_posts/how-to-solve-the-water-problem.md","hash":"88094f2fa8ac2e0c23464923e7e2893edc40d6c5","modified":1458373428000},{"_id":"source/_posts/http-1-0-vs-1-1.md","hash":"281c46c7b1e9994a73fbcf3db73d102b9550fb28","modified":1458894418000},{"_id":"source/_posts/kali-and-ubuntu.md","hash":"9ced85fb841dc3390de2fedee640e8f3d078600d","modified":1446098930000},{"_id":"source/_posts/migrate-pages-from-gitcafe-to-coding.md","hash":"78df2801bf13e8446c35577ff4c5089fa826805b","modified":1457259826000},{"_id":"source/_posts/my-git-note1.md","hash":"b22516e1b3b1633475c4fc5d5bfae3bdc1d7cbbb","modified":1446644322000},{"_id":"source/_posts/linux下使用github.md","hash":"a141149d9ee412855cda45dac74c5741a534860e","modified":1446631136000},{"_id":"source/_posts/offline-install.md","hash":"a73e1e371b817affbd2223a64c98fe563a3494d6","modified":1478163581000},{"_id":"source/_posts/new-start.md","hash":"40ed95747e311d7763c94b846d602f48e358366a","modified":1443526884000},{"_id":"source/_posts/my-git-note2.md","hash":"297d661e1e09a17b1a1a1c0d689735ac03b51903","modified":1446685430000},{"_id":"source/_posts/opencv-and-vs2010-in-win8.md","hash":"06131ef4734cb297900a560486f068025654edda","modified":1446098928000},{"_id":"source/_posts/opencv-lbph-source-code-analysis.md","hash":"32acc719d0ac677c73ce00aae70a491ea35a67cb","modified":1443526884000},{"_id":"source/_posts/php-boolean-value.md","hash":"b2f9b7942e59e16af6c79af81443061590cb172d","modified":1446098928000},{"_id":"source/_posts/my-life-these-days.md","hash":"c753f0dab207e239808f4cb8e07e199c1ac1f08d","modified":1478426097000},{"_id":"source/_posts/php-learn-note-2.md","hash":"9155edc678e7507680f09284297b1c193c7e7624","modified":1457170424000},{"_id":"source/_posts/php-learn-note-1.md","hash":"589411cb180e133fb8b19090ce4af42612115823","modified":1449757066000},{"_id":"source/_posts/php-learn-note-3-5.md","hash":"be81de4639776b08f2c080d3e0bd3fcb06ed108a","modified":1457170394000},{"_id":"source/_posts/php-learn-note-3.md","hash":"2a58bb34b0cfb9477bd45ebd3b67c1934c114a84","modified":1457414570000},{"_id":"source/_posts/php-learn-note-5.md","hash":"bdbbe42ab648da68bf023e08c10a26af7ca49ae5","modified":1460599912000},{"_id":"source/_posts/php-learn-note-4.md","hash":"f3b8189c7bb53e7a66c09f774bef94794707f5a3","modified":1457749906000},{"_id":"source/_posts/python-blog-spider.md","hash":"62e9f9cb76aab835a341fb5c75ba728c3effcfc3","modified":1446098928000},{"_id":"source/_posts/python-im.md","hash":"192b2bb4b23423b8a7f4a9783011f01ac0c45d32","modified":1446098928000},{"_id":"source/_posts/python-socket-port-reuse.md","hash":"a9f9f04a97a8a3e2ac79eb2bf9fcdaae89826334","modified":1446098926000},{"_id":"source/_posts/recent-task.md","hash":"4ae0899df647db128b4d48649fb5d2a55cc90f8f","modified":1443526884000},{"_id":"source/_posts/python-requests-login-csdn-blog.md","hash":"47060e74ba5d41888f3f6d1061f20dab1473d44e","modified":1446098926000},{"_id":"source/_posts/sql中left_join和right_join混用.md","hash":"3bc83929ddfed08b937c0aec846a93b1e4ec166a","modified":1443526884000},{"_id":"source/_posts/ubuntu-denyhosts.md","hash":"3614f0cf4eabcfa117c2a12aeb5dcb770687f6a1","modified":1446098926000},{"_id":"source/_posts/ubuntu-lamp-alias-setting.md","hash":"5695ef83402a5ab486255f036628781219010f9a","modified":1446098924000},{"_id":"source/_posts/ubuntu-14-04-setting-about-thinkphp-url-rewrite.md","hash":"0f52c6b11762b57d59adc32536771211a459b424","modified":1446098926000},{"_id":"source/_posts/wamp与sql_server_因为端口80冲突,无法开启wamp.md","hash":"3fece93a3087ba638414cce4e3ac0ef95ca7056a","modified":1443526884000},{"_id":"source/_posts/weixin-app-pay-v3-0.md","hash":"e99b9d1d42ad4f7469865f93c9f2ffda0bbd9f23","modified":1446099180000},{"_id":"source/_posts/阿里云windows_server_2003_搭建邮件服务器.md","hash":"fe01a017a9dd4cf1f36ab5801cfd9b7a74165a2f","modified":1443526884000},{"_id":"source/_posts/use-ss.md","hash":"d542a54c9ff427de2daa86a3f565259ef0fe3e04","modified":1446098924000},{"_id":"source/category/index.md","hash":"7f7244fded59157de316a6b1ba4dbb6fc08a2a5c","modified":1478157322000},{"_id":"source/_posts/ubuntu-scrapy-stackoverflow.md","hash":"d050299c7c1daf7b1c493d7581cf46f888644edf","modified":1446098924000},{"_id":"source/link/index.md","hash":"357e194d549590b0ff8dcf404137578b10530196","modified":1478157441000},{"_id":"source/css/geqianst.css","hash":"32de469b99aeefb9c570dd0a0484381ff49a0696","modified":1478160046000},{"_id":"source/search/index.md","hash":"50c12c2a6300c2d6355834fda046593a02bd9be0","modified":1478157660000},{"_id":"source/tag/index.md","hash":"34c7b76f347ad9f82a1b085bc6691d24c8fb126b","modified":1478157414000},{"_id":"themes/fexo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1478094905000},{"_id":"themes/fexo/.git/config","hash":"78a9f656fdfea85aaa63de99ef0857e7149d11d2","modified":1478094905000},{"_id":"themes/fexo/.git/index","hash":"53c8c0c59f8d2e1743b938f0e94f81098c3a13e4","modified":1478161707000},{"_id":"themes/fexo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1478094711000},{"_id":"themes/fexo/.git/packed-refs","hash":"70c7a5722b6fe81037ace8d2a546b565e9851011","modified":1478094905000},{"_id":"themes/fexo/languages/en.yml","hash":"b58364c7dfac61eddd64510f74ca7516da48f0cf","modified":1478094905000},{"_id":"themes/fexo/languages/default.yml","hash":"1a6762d52295b0f7586f40c35e713c0fd33c2a2b","modified":1478094905000},{"_id":"themes/fexo/languages/zh-TW.yml","hash":"6141b4c7a094c74bd9df7c08908d92b561c1a0c0","modified":1478094905000},{"_id":"themes/fexo/languages/no.yml","hash":"bf11017d77f64fbafb9c99ac219d076b20d53afc","modified":1478094905000},{"_id":"themes/fexo/languages/zh-CN.yml","hash":"1a6762d52295b0f7586f40c35e713c0fd33c2a2b","modified":1478094905000},{"_id":"themes/fexo/layout/archive.ejs","hash":"9c22251c328e937c444a9f5d4b324f97a78d324f","modified":1478094905000},{"_id":"themes/fexo/layout/about.ejs","hash":"f1f06842f3fac2c7dd74811722431c5720e6cf8d","modified":1478094905000},{"_id":"themes/fexo/layout/category.ejs","hash":"6d7f43a3d3180e7eb120601bae701664911cf8e6","modified":1478094905000},{"_id":"themes/fexo/layout/index.ejs","hash":"9d33cd03e7a8adf8bbc124c248def36c15e681d0","modified":1478094905000},{"_id":"themes/fexo/layout/link.ejs","hash":"0144bdb1bc5f19763535b79b3302bf85bc0afbff","modified":1478094905000},{"_id":"themes/fexo/layout/post.ejs","hash":"075586a9805c24683a154a19e8df9a7e9eab7bcd","modified":1478094905000},{"_id":"themes/fexo/layout/project.ejs","hash":"6648041e1319c8ee3e16c882b33bb457c67a9527","modified":1478094905000},{"_id":"themes/fexo/layout/search.ejs","hash":"8c6fc59bed1facf14dd6a48bdf8dd44452583f4d","modified":1478094905000},{"_id":"themes/fexo/layout/layout.ejs","hash":"ae485be0f6c0c431245e0cac21dc109c9d0125e8","modified":1478094905000},{"_id":"themes/fexo/layout/tag.ejs","hash":"2cadf0acdf7c8e76bd4f27c6d7fe97eefe42ef5e","modified":1478094905000},{"_id":"themes/fexo/source/.DS_Store","hash":"b7b5b538c358b2d0f9fa04cd73683e6c3aaa10c6","modified":1478158622000},{"_id":"themes/fexo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1478094711000},{"_id":"themes/fexo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1478094711000},{"_id":"themes/fexo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1478094711000},{"_id":"themes/fexo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1478094711000},{"_id":"themes/fexo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1478094711000},{"_id":"themes/fexo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1478094711000},{"_id":"themes/fexo/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1478094711000},{"_id":"themes/fexo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1478094711000},{"_id":"themes/fexo/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1478094711000},{"_id":"themes/fexo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1478094711000},{"_id":"themes/fexo/.git/logs/HEAD","hash":"6d8e98fe016fccf17bbee04941993cf7f35ebbfb","modified":1478094905000},{"_id":"themes/fexo/layout/_partial/article.ejs","hash":"835d6d1f2d29b1d8e4448c951be761590ce277c8","modified":1478094905000},{"_id":"themes/fexo/layout/_partial/baidu-analytics.ejs","hash":"c19e4abec19c23840fff7f8a51f4aefbb2b7e8ca","modified":1478094905000},{"_id":"themes/fexo/layout/_partial/duoshuo.ejs","hash":"728522a31887d5cc896104cc1b4c48b9d2659350","modified":1478094905000},{"_id":"themes/fexo/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1478094905000},{"_id":"themes/fexo/layout/_partial/home.ejs","hash":"225b8a001c7aace46f2b39676e968e7cba9a4277","modified":1478094905000},{"_id":"themes/fexo/layout/_partial/head.ejs","hash":"aaee7fc7a120e9a45e91e95595dde85d770baf84","modified":1478094905000},{"_id":"themes/fexo/layout/_partial/style.ejs","hash":"99c20c0ae1a6876899614b029ce39864bf86f877","modified":1478094905000},{"_id":"themes/fexo/layout/_partial/load-script.ejs","hash":"4675c917548817118f4a3c5d84acc98d6c61a1d8","modified":1478094905000},{"_id":"themes/fexo/source/css/styles.css","hash":"d9fb6499a1ef5d27ecbd1039c9d458c872885edf","modified":1478094905000},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.eot","hash":"2a4ef0d00fb77d16e37c3da429698b029e7d2d2f","modified":1478094905000},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.woff","hash":"1cebcedde2c52261591bc322b176638798336a24","modified":1478094905000},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.ttf","hash":"2b186ce205301f7f3abd441f0372b72adcd2aee3","modified":1478094905000},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.eot","hash":"4c7bcece73621f648fa71d58fa13c28670fed8ca","modified":1478094905000},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff","hash":"1364845a3815740c572e29c83fd8d54f1c1ef5de","modified":1478094905000},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff2","hash":"ba50c427166090361b0dab4c72136c7b451e86d4","modified":1478094905000},{"_id":"themes/fexo/source/fonts/fontello.eot","hash":"7732065eeaec4614e9548955d9bd30ccd7b149c1","modified":1478094905000},{"_id":"themes/fexo/source/fonts/fontello.svg","hash":"33a984f4482a5ba5e7bc67d82e8db63cda4e3ae1","modified":1478094905000},{"_id":"themes/fexo/source/fonts/fontello.ttf","hash":"e255d37ca14348e9a8532667a757ab552e58caff","modified":1478094905000},{"_id":"themes/fexo/source/fonts/fontello.woff2","hash":"1dfbc23328582f7cd9bcbe538224f6c762023e43","modified":1478094905000},{"_id":"themes/fexo/source/images/avatar.jpg","hash":"06b315b1cde634d2313044a83c40b1ac10961134","modified":1478094905000},{"_id":"themes/fexo/source/fonts/fontello.woff","hash":"45737fea847f3942ef405f00ea4df940fbb6bbd9","modified":1478094905000},{"_id":"themes/fexo/source/js/app.js","hash":"a6d6e7fba3d69d0dec2c4d18debe0dc4cc7ab319","modified":1478094905000},{"_id":"themes/fexo/source/js/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1478094905000},{"_id":"themes/fexo/source/images/avatar2.jpg","hash":"9926b5ce9005dee9276e6068e7e0901052b8dd9e","modified":1478157964000},{"_id":"themes/fexo/source/js/util.js","hash":"8136da2bec1faf5fe3e14fa436f501292fca8c07","modified":1478094905000},{"_id":"themes/fexo/source/js/bundle.js","hash":"7da160b15a43ce19273ec85204828bd42628546f","modified":1478094905000},{"_id":"themes/fexo/source/js/zenscroll.js","hash":"bea2a3571555fdae64e8fc56f161f9a4f427b335","modified":1478094905000},{"_id":"themes/fexo/source/sass/_base.scss","hash":"9b5bdc3cd8a418672292619ab01b82a304ef9462","modified":1478094905000},{"_id":"themes/fexo/source/js/scroll-spy.js","hash":"81b81362fcd63592045a673b54ce1edb7a6e3028","modified":1478094905000},{"_id":"themes/fexo/source/sass/_animate.scss","hash":"8de97c948cb4b9c9b7a87c0f7332ed534c378e26","modified":1478094905000},{"_id":"themes/fexo/source/sass/_common.scss","hash":"b1fc97d6d24a92a9a7a9d39be4fe844f5c0f6d44","modified":1478094905000},{"_id":"themes/fexo/source/sass/_highlight-js.scss","hash":"38a5c4d9f3a2943aff9bde1d624d710587e3bc05","modified":1478094905000},{"_id":"themes/fexo/source/sass/_normalize.scss","hash":"e58275a588bb631a37a2988145eea231ed23176b","modified":1478094905000},{"_id":"themes/fexo/source/sass/_fonts.scss","hash":"10e188d379782ae2ee10427544919557036d0137","modified":1478094905000},{"_id":"themes/fexo/source/sass/_variable.scss","hash":"e403294d093f6b5294938619786a22fde3e7f848","modified":1478094905000},{"_id":"themes/fexo/source/sass/_type.scss","hash":"cc7a25654593030f5214d5adf85f12a954c373c5","modified":1478094905000},{"_id":"themes/fexo/source/sass/_fontello.scss","hash":"f2d6b86bb63459884cf63e8c045fd10c827396eb","modified":1478094905000},{"_id":"themes/fexo/source/sass/styles.scss","hash":"86ebe05d6a2931dd6fceef1e50c31ca996dc20be","modified":1478094905000},{"_id":"themes/fexo/source/css/styles.css.map","hash":"b1a19e82d69bf95425c5522bf67fcc40987c0857","modified":1478094905000},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.ttf","hash":"4688935c427ae40dcbf16523bc11d9fc10e359b5","modified":1478094905000},{"_id":"themes/fexo/source/sass/pages/_tag.scss","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1478094905000},{"_id":"themes/fexo/.git/refs/heads/master","hash":"076e0430ba0fef56e601846fccadd78d664d3819","modified":1478094905000},{"_id":"themes/fexo/layout/_partial/component/category.ejs","hash":"2429158ff177b8876de765498b54d0c91b3fc551","modified":1478094905000},{"_id":"themes/fexo/layout/_partial/component/category-box.ejs","hash":"f18e08e5c8718d5cd6672fc01e25ba457db0a385","modified":1478094905000},{"_id":"themes/fexo/layout/_partial/component/back-top.ejs","hash":"47f2b8306b901f0fffc6aa0cfa40db697a0c5aff","modified":1478094905000},{"_id":"themes/fexo/layout/_partial/component/date.ejs","hash":"163fbd874481cb9e2b6da5282701a3fbaa4e367a","modified":1478094905000},{"_id":"themes/fexo/layout/_partial/component/comments.ejs","hash":"49d044fc7bff2c6a249842b36c3739f01333109e","modified":1478094905000},{"_id":"themes/fexo/layout/_partial/component/disqus.ejs","hash":"21de7498d235a52337335108fce7446e1a21ea1c","modified":1478094905000},{"_id":"themes/fexo/layout/_partial/component/donation.ejs","hash":"65bf93ad8e149033e6f93d673cc85ee223615589","modified":1478094905000},{"_id":"themes/fexo/layout/_partial/component/duoshuo.ejs","hash":"f4829b8a8a46fd4b9c92b3032057db7e10356965","modified":1478094905000},{"_id":"themes/fexo/layout/_partial/component/item-tag.ejs","hash":"1b4c4e090c33ccfd44b531a5de9af16eec266512","modified":1478094905000},{"_id":"themes/fexo/layout/_partial/component/item-category-name.ejs","hash":"8ab52c9b5d5db1d3c1d343ecb405c4e15cd144ac","modified":1478094905000},{"_id":"themes/fexo/layout/_partial/component/item-post.ejs","hash":"722e5dbde2d4683eea08f2af922358db45b253b1","modified":1478094905000},{"_id":"themes/fexo/layout/_partial/component/item-year.ejs","hash":"906a6aea44a30e83c4c4e449294c7e4d831c188e","modified":1478094905000},{"_id":"themes/fexo/layout/_partial/component/modal.ejs","hash":"8edceb2fd6c770691bd5cf4a35236c1def8410fe","modified":1478094905000},{"_id":"themes/fexo/layout/_partial/component/pagination.ejs","hash":"ffbb548aee6e15cae924ee7f922f28b2403e8e45","modified":1478094905000},{"_id":"themes/fexo/layout/_partial/component/tag-box.ejs","hash":"d648ea91ec9dc72bca80d70fbb66f7655bd0ea12","modified":1478094905000},{"_id":"themes/fexo/layout/_partial/component/tag-list.ejs","hash":"8535c40b573744ced738b051383c0feca80eb0e9","modified":1478094905000},{"_id":"themes/fexo/layout/_partial/component/page-header.ejs","hash":"14bad32082d87d7eeb45c0e9079e72f0ae65dbf4","modified":1478094905000},{"_id":"themes/fexo/layout/_partial/component/toc.ejs","hash":"000be428e925f5595af29eeba37ba6111f7f6511","modified":1478094905000},{"_id":"themes/fexo/layout/_partial/component/toolbox.ejs","hash":"fcfcccc5b231c4050f1a665b70f7738f9d070541","modified":1478094905000},{"_id":"themes/fexo/layout/_partial/component/title.ejs","hash":"e2fcdd904123186648513cfca4c7ad04921d2d57","modified":1478094905000},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.svg","hash":"76e1e4cee6f2b5d596c635631938ee5eb6ab3e67","modified":1478094905000},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.svg","hash":"e21109783f218cb7849b12e867e0b775ce3fadda","modified":1478094905000},{"_id":"themes/fexo/source/images/bg.jpg","hash":"f3f797e21fdc54d8fdcd28e664e32fa15f49a4bc","modified":1478158084000},{"_id":"themes/fexo/source/sass/component/_comments.scss","hash":"3e9b61bc08f38f947f54e942986a19a7f95ce723","modified":1478094905000},{"_id":"themes/fexo/source/sass/component/_category-box.scss","hash":"a807145b74d1b98270ea19ae35edd25b4c448bfa","modified":1478094905000},{"_id":"themes/fexo/source/sass/component/_back-top.scss","hash":"1c67da7007f4b9d8c65deea3d82c0f579e65f2c2","modified":1478094905000},{"_id":"themes/fexo/source/sass/component/_hint.scss","hash":"2812b4e10313168f2e082b740c60d64a151d94c8","modified":1478094905000},{"_id":"themes/fexo/source/sass/component/_index.scss","hash":"dc7d816cc77cb46580828e9ded2cfa45ba454226","modified":1478094905000},{"_id":"themes/fexo/source/sass/component/_item-category-name.scss","hash":"119840d160cd263b57e79e2099a81079d7eeee3d","modified":1478094905000},{"_id":"themes/fexo/source/sass/component/_item-post.scss","hash":"1fb2e9be2d2edbb538cfbce7c80d5847f88e2f05","modified":1478094905000},{"_id":"themes/fexo/source/sass/component/_item-title.scss","hash":"cdaca2858abc9428ef01103a7fbea8f095d856aa","modified":1478094905000},{"_id":"themes/fexo/source/sass/component/_item-year.scss","hash":"12c147dd4ab9587cd622083c86c2f6cf07d8e26a","modified":1478094905000},{"_id":"themes/fexo/source/sass/component/_list-post.scss","hash":"43564f6443385bf34e15672d1477d1c7560f5563","modified":1478094905000},{"_id":"themes/fexo/source/sass/component/_pagination.scss","hash":"12c1880c518aee2e3ccf59661d01c308639f8a9e","modified":1478094905000},{"_id":"themes/fexo/source/sass/component/_page-header.scss","hash":"893d0595ef48323dce449ef0d17308ce02b36087","modified":1478094905000},{"_id":"themes/fexo/source/sass/component/_modal.scss","hash":"2f0ed96df388ec28445b1ce5c6a61a0a697f9a68","modified":1478094905000},{"_id":"themes/fexo/source/sass/component/_table.scss","hash":"4899fb31d1be8d5c9c397fcbcfc2ff0c5b2e7f7f","modified":1478094905000},{"_id":"themes/fexo/source/sass/component/_tag-box.scss","hash":"7601951d09a75a7c39493bfa1b1da5ac989d9cda","modified":1478094905000},{"_id":"themes/fexo/source/sass/component/_toc.scss","hash":"3b4c083cb2ba4a88ca35b6d8259ee991c83b3406","modified":1478094905000},{"_id":"themes/fexo/source/sass/component/_toolbox.scss","hash":"964a480d4e7fad100463195cde2a3f67f9765c23","modified":1478094905000},{"_id":"themes/fexo/source/sass/pages/_archive.scss","hash":"fefd54282a42ebb68b711f1cfefa1f67abbde05b","modified":1478094905000},{"_id":"themes/fexo/source/sass/pages/_category.scss","hash":"713242d10c0c8687c9e2f287f1beeb38de6cdbad","modified":1478094905000},{"_id":"themes/fexo/source/sass/component/_donation.scss","hash":"dd8fb354d6196bf751978ae2215b8f0757c10ed5","modified":1478094905000},{"_id":"themes/fexo/source/sass/pages/_about.scss","hash":"7d61e627ea5376390081e0b93db426ffc6c4dee8","modified":1478094905000},{"_id":"themes/fexo/source/sass/component/_toolbox-mobile.scss","hash":"f15b215b9bb103ee1773a01d8badd81bb7643710","modified":1478094905000},{"_id":"themes/fexo/source/sass/pages/_home.scss","hash":"b65bb069ed28fbf223c5bb7e760882f79d20fa46","modified":1478094905000},{"_id":"themes/fexo/source/sass/pages/_link.scss","hash":"d3a249423c7ee88d1cb3a12e03f6c42a0a4d45a1","modified":1478094905000},{"_id":"themes/fexo/source/sass/pages/_project.scss","hash":"bcbaded3d378bbaa1497f4c3843994ea589f3149","modified":1478094905000},{"_id":"themes/fexo/source/sass/pages/_post.scss","hash":"c6f694568af362f9fe1e7e2b9909e47303178116","modified":1478094905000},{"_id":"themes/fexo/source/sass/pages/_search.scss","hash":"fd28f01829628c9d21f9391d5067ddcd836dad13","modified":1478094905000},{"_id":"themes/fexo/source/sass/pages/_index.scss","hash":"d9fe73a87585abad06a7dd77b67ec7ce6c24402c","modified":1478094905000},{"_id":"themes/fexo/.git/objects/pack/pack-690a232ad84d4b33738175f118776e8fbc5fd2f1.idx","hash":"ff27d73704f17213a3201e8628c0de0b8ee4feee","modified":1478094905000},{"_id":"themes/fexo/.git/logs/refs/heads/master","hash":"6d8e98fe016fccf17bbee04941993cf7f35ebbfb","modified":1478094905000},{"_id":"themes/fexo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1478094905000},{"_id":"themes/fexo/.git/logs/refs/remotes/origin/HEAD","hash":"6d8e98fe016fccf17bbee04941993cf7f35ebbfb","modified":1478094905000},{"_id":"themes/fexo/source/fonts/Lobster-Regular.eot","hash":"4f0c85f63beb0d95610317e16f1d4acdd2962eee","modified":1478094905000},{"_id":"themes/fexo/source/fonts/Lobster-Regular.ttf","hash":"50a84291b7012bfdcf9ff5116d6c7aa3f257f37f","modified":1478094905000},{"_id":"themes/fexo/source/fonts/Lobster-Regular.woff","hash":"298b80b1c9f694e1a055d62a5d809863c89baf50","modified":1478094905000},{"_id":"themes/fexo/source/fonts/Lobster-Regular.svg","hash":"be1cab622c673942fb4d11a23c012227938b4792","modified":1478094905000},{"_id":"themes/fexo/.git/objects/pack/pack-690a232ad84d4b33738175f118776e8fbc5fd2f1.pack","hash":"dd725ce49d5627f74cea579a1d67b9cf12d51f0e","modified":1478094905000},{"_id":"public/css/geqianst.css","hash":"32de469b99aeefb9c570dd0a0484381ff49a0696","modified":1478423594261},{"_id":"public/atom.xml","hash":"df8d1cd0113d38930cffe72f2f3931b243b1155a","modified":1478426129028},{"_id":"public/sitemap.xml","hash":"43e2e8e8fc1c080280f528aef348b67e213409b0","modified":1478426129110},{"_id":"public/search.json","hash":"d19ec42331bffdcfe25206a6147b79afeec84a24","modified":1478426130104},{"_id":"public/about/index.html","hash":"d303621726f45e574c5495057d9cc0ea6ba52182","modified":1478423595321},{"_id":"public/link/index.html","hash":"9d26e92af779f08f13eb2a5f2604eee82994ba9d","modified":1478423595321},{"_id":"public/search/index.html","hash":"52fa174060236d53593d3c8a58b8ccad106c851c","modified":1478423595321},{"_id":"public/2016/03/19/how-to-solve-the-water-problem/index.html","hash":"92a88c8ff83a3f161f91f05aa8f5f9ad55a7f759","modified":1478423595321},{"_id":"public/2016/03/19/php-learn-note-5/index.html","hash":"e19b2405e3250b518dec53771173fc7ca65d03d9","modified":1478423595321},{"_id":"public/2016/03/12/php-learn-note-4/index.html","hash":"4fa5478df0d18fda361793555ff088ee81810e1c","modified":1478423595321},{"_id":"public/2016/03/04/php-learn-note-3/index.html","hash":"8e5e8e2085484f1252c06abe1f139a37f56e2c1e","modified":1478423595321},{"_id":"public/2016/01/28/digitalocean-switch-kernel/index.html","hash":"c49b7796bc3769f74d5073c5b5b56cf3f66571cd","modified":1478423595321},{"_id":"public/2015/12/10/php-learn-note-1/index.html","hash":"583c5d7f09d535ad4328e5f7a1705d518d7d09f9","modified":1478423595321},{"_id":"public/2015/11/26/offline-install/index.html","hash":"f9f91878cd3f0af391388f95f8999e35961faa4e","modified":1478423595321},{"_id":"public/2015/07/20/php-boolean-value/index.html","hash":"f6c6a1afb17ad992eaf7069a2be462ce7154663b","modified":1478423595321},{"_id":"public/2015/06/29/ubuntu-14-04-setting-about-thinkphp-url-rewrite/index.html","hash":"8d91d7d0a903d66841f4df1d1e2be50ff72c8260","modified":1478423595321},{"_id":"public/2015/05/06/opencv-lbph-source-code-analysis/index.html","hash":"9c386560779c60536d4436a63fad37508c2a0292","modified":1478423595321},{"_id":"public/2015/03/29/blog2markdown-csdn-windows/index.html","hash":"2b7d62a1e23ef3c3a164ec60b4e8f74c6d18d970","modified":1478423595321},{"_id":"public/2015/03/29/hexo-deploy-error/index.html","hash":"2b2216e57ec2886201daebba0951d3b9f958675f","modified":1478423595321},{"_id":"public/2015/03/04/after-kali/index.html","hash":"37faafc813771115223cb6780e714fc24d5a127f","modified":1478423595322},{"_id":"public/2015/01/19/linux下使用github/index.html","hash":"3c3be220673e44049aa3f21dff31076c6d090f31","modified":1478423595322},{"_id":"public/2014/12/02/recent-task/index.html","hash":"5111632d572c01d95acd9a3a5deae36bfd260495","modified":1478423595322},{"_id":"public/2014/11/26/new-start/index.html","hash":"2b4dd845a88b633682550ebdd250c4b15f0c99c0","modified":1478423595322},{"_id":"public/2014/11/24/cmcc520扩展使用说明/index.html","hash":"7d8f1d85ef7dcbd4389cb71e55d441a7a129eb52","modified":1478423595322},{"_id":"public/2014/11/21/chrome扩展开发手记1-需求分析/index.html","hash":"ab1404b6d31c856e27d6d873792543194049f56e","modified":1478423595322},{"_id":"public/2014/11/14/wamp与sql_server_因为端口80冲突,无法开启wamp/index.html","hash":"a431334336c322c92fdcaa4a289ddefaaaecca36","modified":1478423595322},{"_id":"public/2014/08/08/sql中left_join和right_join混用/index.html","hash":"612096cfa4e6dfd758c7b8aee2f34adcc75eb030","modified":1478423595322},{"_id":"public/2014/06/28/阿里云windows_server_2003_搭建邮件服务器/index.html","hash":"bdcb9c32145f75d0dd60b5231381e06030262603","modified":1478423595322},{"_id":"public/index.html","hash":"194487aa628c6a38edb5240244cc6b82dba44b4f","modified":1478423595323},{"_id":"public/page/2/index.html","hash":"5792a914b37f5e3668a4e2cf715e0bd234d0df6a","modified":1478423595323},{"_id":"public/page/3/index.html","hash":"e88aa4d4f8c985e6a2e984ffeaa4ff6913355a61","modified":1478423595323},{"_id":"public/page/4/index.html","hash":"061b2f224a1266346c77aadfa4e70858b43e7b8b","modified":1478423595323},{"_id":"public/page/5/index.html","hash":"30df3a5cbce40d9c3f1e4b12b873a26f63c71366","modified":1478423595323},{"_id":"public/page/6/index.html","hash":"ab604eec19b630690dcd6ccce33205c626441d4d","modified":1478423595323},{"_id":"public/archives/index.html","hash":"27120997ebe5e44da168cba1b4379a5f48209b3e","modified":1478426130164},{"_id":"public/archives/page/2/index.html","hash":"b92da9a9fc96f751be6020288adb736a3a2aabe2","modified":1478423595323},{"_id":"public/archives/page/3/index.html","hash":"5255aa4ea4a10cf77d7775d6cb23a3bc36a87985","modified":1478423595323},{"_id":"public/archives/2014/index.html","hash":"d6440de3ccee3e327f7f648a81e1af414d219d2d","modified":1478423595323},{"_id":"public/archives/2014/06/index.html","hash":"ca8b8f4a077d72a92aa423ed111dd6f30233e9a7","modified":1478423595323},{"_id":"public/archives/2014/08/index.html","hash":"f468c5973bfd53c16f0db2fbff33bbc9c1cffe3e","modified":1478423595323},{"_id":"public/archives/2014/11/index.html","hash":"ea78bf8ff36d14f9e09c303ab9026b71a72c1138","modified":1478423595323},{"_id":"public/archives/2014/12/index.html","hash":"6f3a6beafcbdc3c0e4fa76544ff33d8a040caa52","modified":1478423595323},{"_id":"public/archives/2015/index.html","hash":"2b4512e25520d01a0cdf55f19038e897f63568a0","modified":1478423595323},{"_id":"public/archives/2015/page/2/index.html","hash":"b083d7e5bee730da4086c34fe704d75cec5475ce","modified":1478423595323},{"_id":"public/archives/2015/01/index.html","hash":"a1c5d6ebae136413b239d8c4fca74b68676be5c3","modified":1478423595324},{"_id":"public/archives/2015/03/index.html","hash":"fd9397e38cc0ca45e2323a8ba682583403842348","modified":1478423595324},{"_id":"public/archives/2015/04/index.html","hash":"d5638b353413f313c7dd4aab80d05186e873a8bd","modified":1478423595324},{"_id":"public/archives/2015/05/index.html","hash":"ca003cb011cd0d2db10991f40bbdda917b5bb4f7","modified":1478423595324},{"_id":"public/archives/2015/06/index.html","hash":"872a54e6a385df962c80ef3210f4a8b46e4fcd90","modified":1478423595324},{"_id":"public/archives/2015/07/index.html","hash":"219792c674c76424dffd8cde16d1ccf6897d6fac","modified":1478423595324},{"_id":"public/archives/2015/10/index.html","hash":"78d6989d9f692d5cb1ecbb63e2735f1048b186ff","modified":1478423595324},{"_id":"public/archives/2015/11/index.html","hash":"8ee390f5f64e0ae30a7cc4839fa2a6cae984e9bb","modified":1478423595324},{"_id":"public/archives/2015/12/index.html","hash":"edeba82cad0dc2951b18a03d956d8d2da17c74a2","modified":1478423595324},{"_id":"public/archives/2016/index.html","hash":"80b42fa26a431dea07b8fc1b3733e2a7f3a62d2b","modified":1478426130164},{"_id":"public/archives/2016/01/index.html","hash":"9da7cdf3328741e379b06d1513100b5487e180bd","modified":1478423595324},{"_id":"public/archives/2016/02/index.html","hash":"ff18d7400ada5b13a5c23741649145b1f38f5725","modified":1478423595324},{"_id":"public/archives/2016/03/index.html","hash":"da7fc6d11d2ce86cfe5ddfd5144edb1218498e20","modified":1478423595324},{"_id":"public/archives/2016/11/index.html","hash":"b0567d0768eb56ad90508d1b44d7aea26fe261d6","modified":1478426130164},{"_id":"public/category/index.html","hash":"ae0ac7ba2a3dcf6138d9b077b67e9ca99748f1f8","modified":1478426130164},{"_id":"public/tag/index.html","hash":"c8dd33ff47690396b4b61d5207d5ed8b91aff4da","modified":1478426130164},{"_id":"public/2016/11/06/my-life-these-days/index.html","hash":"d64ed8b73ec4e8b089d3ef59493dbc505e47b8c8","modified":1478426130164},{"_id":"public/2016/03/25/http-1-0-vs-1-1/index.html","hash":"c4b662be21a3886dc6da1816c93e7afdab2342b1","modified":1478423595325},{"_id":"public/2016/03/06/migrate-pages-from-gitcafe-to-coding/index.html","hash":"5fe4a123c2674339a55920675089bf84904a7c20","modified":1478423595325},{"_id":"public/2016/03/05/php-learn-note-3-5/index.html","hash":"c06274eb7f338e40a749b5919c8b9f1ac826ccb3","modified":1478423595325},{"_id":"public/2016/02/25/php-learn-note-2/index.html","hash":"3e199ba663c7d7a8cd51473811fd33e7de44043b","modified":1478423595325},{"_id":"public/2015/11/25/how-to-solve-the-problem-that-github-blocks-the-baidu-spider/index.html","hash":"da98e9e62ef4f5c07212dee79e3c0d5d6d35b905","modified":1478423595325},{"_id":"public/2015/11/04/my-git-note2/index.html","hash":"c08a8175e75dea52b8cb15853930b40df4f48a70","modified":1478423595325},{"_id":"public/2015/11/04/my-git-note1/index.html","hash":"01ee75da1dce10829886efe73076005ff375cb85","modified":1478423595325},{"_id":"public/2015/10/25/weixin-app-pay-v3-0/index.html","hash":"abee2cb7a02cecaddc0dd45b2f1b692a22f3320d","modified":1478423595325},{"_id":"public/2015/10/15/ubuntu-lamp-alias-setting/index.html","hash":"5af4e459a5ece10776bc36f7c8dd11be334d3f9b","modified":1478423595325},{"_id":"public/2015/06/16/digitalocean-support-google-scholar-by-ipv6/index.html","hash":"df25f0fe1bb8b929da06246cdd34fe431c67fee9","modified":1478423595325},{"_id":"public/2015/06/16/hexo-3-0-update/index.html","hash":"54485d392ef6c09c86c0449dbd558989a3f3ee39","modified":1478423595326},{"_id":"public/2015/05/30/hexo-setting-with-comments-and-visitors/index.html","hash":"2cfb10464e8a39d8a6180e6ad93b68d957c57761","modified":1478423595326},{"_id":"public/2015/05/15/holes-in-ie6-about-html5/index.html","hash":"867bc689b0d187a3730b30dc19e26fbeddd9add6","modified":1478423595326},{"_id":"public/2015/05/23/python-requests-login-csdn-blog/index.html","hash":"c059836e7707e3da72b5fe04fb94c1885cd3547f","modified":1478423595326},{"_id":"public/2015/05/15/opencv-and-vs2010-in-win8/index.html","hash":"0206092233d417f5d77ad598034b69fd5c8b65b8","modified":1478423595326},{"_id":"public/2015/04/28/ubuntu-denyhosts/index.html","hash":"d62b800fe6cb4e0355ceb452252fc89de2e6806c","modified":1478423595326},{"_id":"public/2015/04/26/ubuntu-scrapy-stackoverflow/index.html","hash":"f68e62edb43e5de5c81265b1e9a45676896b6ed0","modified":1478423595326},{"_id":"public/2015/04/26/face-detection/index.html","hash":"3f1181f163472c4b5d56aaf6e783f745e59d69de","modified":1478423595326},{"_id":"public/2015/04/26/face-recognizer/index.html","hash":"e476c425faf4b57338fcce1d07c342bfc7bb970e","modified":1478423595326},{"_id":"public/2015/03/29/python-blog-spider/index.html","hash":"e4212904c0a452356e4f85945c0a23438118c5fa","modified":1478423595326},{"_id":"public/2015/03/26/python-im/index.html","hash":"1d7512efd9b41cb53a20c4f9fbabc25ec2a72f5b","modified":1478423595326},{"_id":"public/2015/03/18/python-socket-port-reuse/index.html","hash":"30cf6d331225e0a662acfee98c1931ae4f6c04a4","modified":1478423595326},{"_id":"public/2015/03/09/use-ss/index.html","hash":"f95f336e083da8a1ad179727a8114f3aeae59ed4","modified":1478423595326},{"_id":"public/2015/03/03/kali-and-ubuntu/index.html","hash":"620b3eaaf2687e402445e55cb777a6440eb4b919","modified":1478423595326},{"_id":"public/2014/11/28/custom-hexo/index.html","hash":"8b5c58be1e2df83a3086c9a629e76dd8380d778a","modified":1478423595326},{"_id":"public/2014/11/27/how-to-build-a-blog-with-hexo/index.html","hash":"406311b15fcedaad21177dcfef8aa64f562a6971","modified":1478423595326},{"_id":"public/2014/11/25/[js]replace替换/index.html","hash":"f645cee8af602dfa2532e0d00299f22feb0a9dcb","modified":1478423595326},{"_id":"public/2014/11/25/[js]前端试题/index.html","hash":"4f0321410d412a6b549f46963abb9230984dd30a","modified":1478423595326},{"_id":"public/2014/11/24/chrome扩展开发手记-chrome扩展开始第一步manfest.json/index.html","hash":"f052761e293c551ba2593a695ce59933eb5b85a6","modified":1478423595326},{"_id":"public/2014/11/24/chrome扩展开发手记2-登录原理分析/index.html","hash":"721d96536a339a58e21e83d8213ef970af766516","modified":1478423595326},{"_id":"public/categories/Linux/index.html","hash":"4dda3f0a47a6f7e017826e2fe060d2ddc34bf191","modified":1478426130164},{"_id":"public/categories/javascript/index.html","hash":"ff045700be05b6e15793206dcffdfe0ba200135f","modified":1478426130164},{"_id":"public/categories/python学习笔记/index.html","hash":"5a688b6c6892b76260b592ae07ee12103ea2bf1d","modified":1478426130164},{"_id":"public/categories/chrome扩展/index.html","hash":"f85c22a7b6e47298862c54e9fb59228ab81de581","modified":1478426130164},{"_id":"public/categories/图像处理/index.html","hash":"9468fd559f4e1981bd9e881fa8de3342ad540d2f","modified":1478426130164},{"_id":"public/categories/hexo/index.html","hash":"618e704c0f5b457c01f3de242c6c45af66a0e685","modified":1478426130164},{"_id":"public/categories/服务器/index.html","hash":"73937bbe5416685b8143510fd6162b064c65b63d","modified":1478426130164},{"_id":"public/categories/前端/index.html","hash":"3f26ae7b72a37116fb5d91c2d887dfbcc42ec519","modified":1478426130164},{"_id":"public/categories/软件安装与技巧/index.html","hash":"65f48c49cd8a8a8988dd2d7d64e5545773753397","modified":1478426130165},{"_id":"public/categories/php/index.html","hash":"a8c1d2e2c9b619d795b42b12ea4c19f30392cbcd","modified":1478426130165},{"_id":"public/categories/杂文/index.html","hash":"367495cfdf72922a16345054f0602233030fb48b","modified":1478426130165},{"_id":"public/categories/php学习笔记/index.html","hash":"85ecba038a9f71b3a11c0225fdbe581fe3c0b516","modified":1478426130165},{"_id":"public/categories/数据库/index.html","hash":"626b383f3ce3bd0beb06cb3e1237d62baeabd39c","modified":1478426130165},{"_id":"public/tags/kali/index.html","hash":"5113d9ef085ab7177437514f94a0df0b66c89102","modified":1478426130165},{"_id":"public/tags/Linux/index.html","hash":"b2286bc0ce92d6bf4b649a376a2a63ca41b46d0a","modified":1478426130165},{"_id":"public/tags/javascript/index.html","hash":"3c8a928b9497263359669a994b0d8764f8a2556c","modified":1478426130165},{"_id":"public/tags/正则表达式/index.html","hash":"524b7fb38db2a69e7e1ffb6f1a85dbf7d75bea24","modified":1478426130165},{"_id":"public/tags/前端/index.html","hash":"ed782b0c24ad2a75dc5b628c9002956f8f0f074c","modified":1478426130165},{"_id":"public/tags/js/index.html","hash":"687d8286e0157c6ddd4742b67a83df5b5ab5ae4a","modified":1478426130165},{"_id":"public/tags/正则/index.html","hash":"bcc318a9296efc63d4febe0a78ccf20693909abe","modified":1478426130165},{"_id":"public/tags/github/index.html","hash":"12833b644b0cc9a01c5985342c6a6712a78a421f","modified":1478426130166},{"_id":"public/tags/hexo/index.html","hash":"f019d4dbfbda880b6c440b77c37637efaf76c42b","modified":1478426130166},{"_id":"public/tags/windows/index.html","hash":"ac5e5be8d8c29609eb996f5cf8f7fe1d17324581","modified":1478426130166},{"_id":"public/tags/python/index.html","hash":"3457d65fdb1530a709926dd360d299538fe75755","modified":1478426130166},{"_id":"public/tags/chrome/index.html","hash":"9d1897c284a09a9836df7c901eae5e6f00561adf","modified":1478426130167},{"_id":"public/tags/cmcc-edu/index.html","hash":"b8b407411f34b9739666841f1cd08ec556099956","modified":1478426130167},{"_id":"public/tags/中国移动/index.html","hash":"1bd361f7fa346cbe9413f95dfbb3aabb820415ee","modified":1478426130167},{"_id":"public/tags/扩展/index.html","hash":"81cd9b15cd003c360bb7a9d6be4468898fe92807","modified":1478426130167},{"_id":"public/tags/脚本/index.html","hash":"8d9510e8cbb69bcb3a9492fb615fe955251b3cc2","modified":1478426130167},{"_id":"public/tags/表单/index.html","hash":"68fbc3fa8a003526581578a92b8dde462f0f4b7f","modified":1478426130167},{"_id":"public/tags/opencv/index.html","hash":"1c6abbba9fcbaeb0088e9c1e7e3ab1631d673c82","modified":1478426130167},{"_id":"public/tags/图像处理/index.html","hash":"48ebeab719f4e86aeeb621a2c9105f4ec791d1f8","modified":1478426130167},{"_id":"public/tags/digitalocean/index.html","hash":"4d8866d58152c7bf75376e294fc1dd149ba14395","modified":1478426130167},{"_id":"public/tags/ubuntu/index.html","hash":"41a36998861d63815612e1bae9e6c0d79a67bfe5","modified":1478426130167},{"_id":"public/tags/ipv6/index.html","hash":"f169412e645e63fca72f9b7fd5983ac759783ff2","modified":1478426130167},{"_id":"public/tags/shadowsocks/index.html","hash":"888011eee7c0e95cc272529c2736ae8d4b5e2ac2","modified":1478426130167},{"_id":"public/tags/baidu/index.html","hash":"d21f109508ef8c271f5bd951c4dd199dd9068246","modified":1478426130167},{"_id":"public/tags/css/index.html","hash":"4ace7360f921dc28ddfe3aa3051c6a42d77da91f","modified":1478426130167},{"_id":"public/tags/html5/index.html","hash":"ced94d6a99754b3132be6ec3502ccf3c9e1bc95b","modified":1478426130168},{"_id":"public/tags/ie/index.html","hash":"f3cc75524f278d183fd7107d3d68b222890a3335","modified":1478426130168},{"_id":"public/tags/兼容性/index.html","hash":"ae0781e44a6266cb82f8d17072117d90ac88f9bb","modified":1478426130168},{"_id":"public/tags/智力题/index.html","hash":"5bd6014dbbb029d8361d2d9b04725f45995f8e47","modified":1478426130168},{"_id":"public/tags/HTTP/index.html","hash":"f52312a7e925bc839d4e5f19c9a368a80d678075","modified":1478426130168},{"_id":"public/tags/apache/index.html","hash":"8b3cbb31613d4a9ed74139ea286341f115f6d33c","modified":1478426130168},{"_id":"public/tags/git/index.html","hash":"ec5d27f1f896eea69aba9c4a7c3da45c9b9aada8","modified":1478426130168},{"_id":"public/tags/离线安装/index.html","hash":"149aea90338f6184defde9a374654daf4c043703","modified":1478426130168},{"_id":"public/tags/flash/index.html","hash":"34d843ab70d723770bb6e0d97e354ebe51008584","modified":1478426130168},{"_id":"public/tags/软件安装与技巧/index.html","hash":"d6375059a4bce49a43ca67a7887195e28e7fe0b4","modified":1478426130168},{"_id":"public/tags/vs2010/index.html","hash":"418f99a7572fd60976a538e306936b4f3561f11b","modified":1478426130168},{"_id":"public/tags/win8/index.html","hash":"7557a28121e92750a60d8b9c255d8f80540db671","modified":1478426130169},{"_id":"public/tags/lbph/index.html","hash":"4277f8f385a4c543108292fe9e9f0e9980efc775","modified":1478426130169},{"_id":"public/tags/php/index.html","hash":"0304f13e3979afbea6ea233b4978bf2ce14f3d1c","modified":1478426130169},{"_id":"public/tags/bool/index.html","hash":"ac25a0fee88c022e9e2c8dd81b54122626b5e869","modified":1478426130169},{"_id":"public/tags/生活/index.html","hash":"bd1874fd61bc5042b23263cc87af668ba977a2d5","modified":1478426130169},{"_id":"public/tags/爬虫/index.html","hash":"639aebae2d743a04aea67131cad449b1eb39a24e","modified":1478426130169},{"_id":"public/tags/socket/index.html","hash":"3a7e8dcb8da545a5b697337da6833f23b48a904f","modified":1478426130169},{"_id":"public/tags/sql/index.html","hash":"c2a9f4a342ee428c3b099020dfeb8cc986fa98ab","modified":1478426130169},{"_id":"public/tags/select/index.html","hash":"8fead591ab5fa1d2b01824ddbc537b9f1a1178d1","modified":1478426130169},{"_id":"public/tags/csdn/index.html","hash":"7bc783e1fb12e8e911c2aebe28912abb6fa88c6d","modified":1478426130169},{"_id":"public/tags/模拟登录/index.html","hash":"3a98219d04ae5ec79f33b68cf15154d04fab4a72","modified":1478426130169},{"_id":"public/tags/requests/index.html","hash":"f4f81e029a828cda8d3da7efdade350ef9289a29","modified":1478426130169},{"_id":"public/tags/thinkphp/index.html","hash":"cff19bbbd00adffffc83fdba7635c39b87d5dace","modified":1478426130169},{"_id":"public/tags/sql-server/index.html","hash":"39420f9b72541c973427c9c10adb9434b7a5b62e","modified":1478426130169},{"_id":"public/tags/wamp/index.html","hash":"26288afa1580dfc40026b1ef03a29b379010060d","modified":1478426130169},{"_id":"public/tags/微信支付/index.html","hash":"7f0c2b84a34bdf82b213b700cb4af0b647b290f8","modified":1478426130169},{"_id":"public/tags/api/index.html","hash":"2ee866757b94de1b92a1f1813c16da37f580352e","modified":1478426130170},{"_id":"public/tags/scrapy/index.html","hash":"dfc97c4b23bc1752f83bd62a910b661bf025f861","modified":1478426130170},{"_id":"public/fonts/PoiretOne-Regular.eot","hash":"2a4ef0d00fb77d16e37c3da429698b029e7d2d2f","modified":1478423595359},{"_id":"public/fonts/PoiretOne-Regular.woff","hash":"1cebcedde2c52261591bc322b176638798336a24","modified":1478423595359},{"_id":"public/fonts/PoiretOne-Regular.ttf","hash":"2b186ce205301f7f3abd441f0372b72adcd2aee3","modified":1478423595359},{"_id":"public/fonts/calligraffitti-regular-webfont.eot","hash":"4c7bcece73621f648fa71d58fa13c28670fed8ca","modified":1478423595359},{"_id":"public/fonts/calligraffitti-regular-webfont.woff","hash":"1364845a3815740c572e29c83fd8d54f1c1ef5de","modified":1478423595359},{"_id":"public/fonts/calligraffitti-regular-webfont.woff2","hash":"ba50c427166090361b0dab4c72136c7b451e86d4","modified":1478423595359},{"_id":"public/fonts/fontello.eot","hash":"7732065eeaec4614e9548955d9bd30ccd7b149c1","modified":1478423595359},{"_id":"public/fonts/fontello.svg","hash":"33a984f4482a5ba5e7bc67d82e8db63cda4e3ae1","modified":1478423595359},{"_id":"public/fonts/fontello.ttf","hash":"e255d37ca14348e9a8532667a757ab552e58caff","modified":1478423595359},{"_id":"public/fonts/fontello.woff2","hash":"1dfbc23328582f7cd9bcbe538224f6c762023e43","modified":1478423595359},{"_id":"public/images/avatar.jpg","hash":"06b315b1cde634d2313044a83c40b1ac10961134","modified":1478423595360},{"_id":"public/fonts/fontello.woff","hash":"45737fea847f3942ef405f00ea4df940fbb6bbd9","modified":1478423595360},{"_id":"public/images/avatar2.jpg","hash":"9926b5ce9005dee9276e6068e7e0901052b8dd9e","modified":1478423595360},{"_id":"public/sass/styles.scss","hash":"86ebe05d6a2931dd6fceef1e50c31ca996dc20be","modified":1478423595360},{"_id":"public/CNAME","hash":"db86d81a1e8ba91f4c3ed871038fd71cae368980","modified":1478423595360},{"_id":"public/css/styles.css.map","hash":"b1a19e82d69bf95425c5522bf67fcc40987c0857","modified":1478423595395},{"_id":"public/fonts/calligraffitti-regular-webfont.ttf","hash":"4688935c427ae40dcbf16523bc11d9fc10e359b5","modified":1478423595396},{"_id":"public/js/app.js","hash":"a6d6e7fba3d69d0dec2c4d18debe0dc4cc7ab319","modified":1478423595406},{"_id":"public/js/util.js","hash":"8136da2bec1faf5fe3e14fa436f501292fca8c07","modified":1478423595406},{"_id":"public/js/scroll-spy.js","hash":"81b81362fcd63592045a673b54ce1edb7a6e3028","modified":1478423595406},{"_id":"public/js/bundle.js","hash":"7da160b15a43ce19273ec85204828bd42628546f","modified":1478423595406},{"_id":"public/js/zenscroll.js","hash":"bea2a3571555fdae64e8fc56f161f9a4f427b335","modified":1478423595406},{"_id":"public/css/styles.css","hash":"d9fb6499a1ef5d27ecbd1039c9d458c872885edf","modified":1478423595406},{"_id":"public/js/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1478423595406},{"_id":"public/fonts/calligraffitti-regular-webfont.svg","hash":"76e1e4cee6f2b5d596c635631938ee5eb6ab3e67","modified":1478423595406},{"_id":"public/fonts/PoiretOne-Regular.svg","hash":"e21109783f218cb7849b12e867e0b775ce3fadda","modified":1478423595406},{"_id":"public/images/bg.jpg","hash":"f3f797e21fdc54d8fdcd28e664e32fa15f49a4bc","modified":1478423595406},{"_id":"public/fonts/Lobster-Regular.eot","hash":"4f0c85f63beb0d95610317e16f1d4acdd2962eee","modified":1478423595431},{"_id":"public/fonts/Lobster-Regular.ttf","hash":"50a84291b7012bfdcf9ff5116d6c7aa3f257f37f","modified":1478423595431},{"_id":"public/fonts/Lobster-Regular.woff","hash":"298b80b1c9f694e1a055d62a5d809863c89baf50","modified":1478423595431},{"_id":"public/fonts/Lobster-Regular.svg","hash":"be1cab622c673942fb4d11a23c012227938b4792","modified":1478423595449}],"Category":[{"name":"Linux","_id":"civ6f7ynx0003x8cdr6is9z27"},{"name":"javascript","_id":"civ6f7yo90008x8cdhldmkh85"},{"name":"python学习笔记","_id":"civ6f7yok000kx8cd8cdys3ga"},{"name":"chrome扩展","_id":"civ6f7yon000px8cd3jx2nqp5"},{"name":"图像处理","_id":"civ6f7yp9001dx8cd9cght1of"},{"name":"hexo","_id":"civ6f7ypi001kx8cd8bphi0gr"},{"name":"服务器","_id":"civ6f7ypu001yx8cde22gf7m0"},{"name":"前端","_id":"civ6f7yqo0036x8cdy7x3l0pq"},{"name":"软件安装与技巧","_id":"civ6f7yqs003fx8cdt3te6z9p"},{"name":"php","_id":"civ6f7yqu003lx8cddu9lywt6"},{"name":"杂文","_id":"civ6f7yqx003ox8cd7byt9nq6"},{"name":"php学习笔记","_id":"civ6f7yqy003tx8cdudcsmfef"},{"name":"数据库","_id":"civ6f7yss0086x8cdhrx7ljd3"}],"Data":[],"Page":[{"title":"about","layout":"about","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: about\nlayout: about\ncomments: false\n---\n","date":"2016-11-03T07:20:26.000Z","updated":"2016-11-03T07:20:26.000Z","path":"about/index.html","_id":"civ6f7ynn0000x8cdg7k3habz","content":"","excerpt":"","more":""},{"title":"category","layout":"category","comments":0,"_content":"","source":"category/index.md","raw":"---\ntitle: category\nlayout: category\ncomments: false\n---\n","date":"2016-11-03T07:15:22.000Z","updated":"2016-11-03T07:15:22.000Z","path":"category/index.html","_id":"civ6f7yse007qx8cd219wj6yd","content":"","excerpt":"","more":""},{"title":"link","layout":"link","comments":0,"_content":"","source":"link/index.md","raw":"---\ntitle: link\nlayout: link\ncomments: false\n---\n","date":"2016-11-03T07:17:21.000Z","updated":"2016-11-03T07:17:21.000Z","path":"link/index.html","_id":"civ6f7ysf007sx8cdxbds0yhw","content":"","excerpt":"","more":""},{"_content":"@font-face {\n    font-family: \"Meiryo\";\n    src: url(\"/fonts/Meiryo.eot\");\n    /* IE9 */\n    src: url(\"/fonts/Meiryo.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n    url(\"/fonts/Meiryo.woff\") format(\"woff\"), /* chrome, firefox */\n    url(\"/fonts/Meiryo.ttf\") format(\"truetype\"), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n    url(\"/fonts/Meiryo.svg#Meiryo\") format(\"svg\");\n    /* iOS 4.1- */\n    font-style: normal;\n    font-weight: normal;\n}\nhtml.page-home {\n    background-image: url('/images/bg.jpg');\n    background-color: transparent;\n    background-size: cover;\n    background-position: center center;\n    background-repeat: no-repeat;\n/*  background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);\n  background-blend-mode: screen;\n  background: linear-gradient(to left, #5f2c82, #49a09d);*/\n}\n","source":"css/geqianst.css","raw":"@font-face {\n    font-family: \"Meiryo\";\n    src: url(\"/fonts/Meiryo.eot\");\n    /* IE9 */\n    src: url(\"/fonts/Meiryo.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n    url(\"/fonts/Meiryo.woff\") format(\"woff\"), /* chrome, firefox */\n    url(\"/fonts/Meiryo.ttf\") format(\"truetype\"), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n    url(\"/fonts/Meiryo.svg#Meiryo\") format(\"svg\");\n    /* iOS 4.1- */\n    font-style: normal;\n    font-weight: normal;\n}\nhtml.page-home {\n    background-image: url('/images/bg.jpg');\n    background-color: transparent;\n    background-size: cover;\n    background-position: center center;\n    background-repeat: no-repeat;\n/*  background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);\n  background-blend-mode: screen;\n  background: linear-gradient(to left, #5f2c82, #49a09d);*/\n}\n","date":"2016-11-03T08:00:46.000Z","updated":"2016-11-03T08:00:46.000Z","path":"css/geqianst.css","layout":"false","title":"","comments":1,"_id":"civ6f7ysj007vx8cdfop13hjw","content":"@font-face {\n    font-family: \"Meiryo\";\n    src: url(\"/fonts/Meiryo.eot\");\n    /* IE9 */\n    src: url(\"/fonts/Meiryo.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n    url(\"/fonts/Meiryo.woff\") format(\"woff\"), /* chrome, firefox */\n    url(\"/fonts/Meiryo.ttf\") format(\"truetype\"), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n    url(\"/fonts/Meiryo.svg#Meiryo\") format(\"svg\");\n    /* iOS 4.1- */\n    font-style: normal;\n    font-weight: normal;\n}\nhtml.page-home {\n    background-image: url('/images/bg.jpg');\n    background-color: transparent;\n    background-size: cover;\n    background-position: center center;\n    background-repeat: no-repeat;\n/*  background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);\n  background-blend-mode: screen;\n  background: linear-gradient(to left, #5f2c82, #49a09d);*/\n}\n","excerpt":"","more":"@font-face {\n    font-family: \"Meiryo\";\n    src: url(\"/fonts/Meiryo.eot\");\n    /* IE9 */\n    src: url(\"/fonts/Meiryo.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n    url(\"/fonts/Meiryo.woff\") format(\"woff\"), /* chrome, firefox */\n    url(\"/fonts/Meiryo.ttf\") format(\"truetype\"), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n    url(\"/fonts/Meiryo.svg#Meiryo\") format(\"svg\");\n    /* iOS 4.1- */\n    font-style: normal;\n    font-weight: normal;\n}\nhtml.page-home {\n    background-image: url('/images/bg.jpg');\n    background-color: transparent;\n    background-size: cover;\n    background-position: center center;\n    background-repeat: no-repeat;\n/*  background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);\n  background-blend-mode: screen;\n  background: linear-gradient(to left, #5f2c82, #49a09d);*/\n}\n"},{"title":"search","layout":"search","comments":0,"_content":"","source":"search/index.md","raw":"---\ntitle: search\nlayout: search\ncomments: false\n---\n","date":"2016-11-03T07:21:00.000Z","updated":"2016-11-03T07:21:00.000Z","path":"search/index.html","_id":"civ6f7ysl007yx8cdf13utapi","content":"","excerpt":"","more":""},{"title":"tag","layout":"tag","comments":0,"_content":"","source":"tag/index.md","raw":"---\ntitle: tag\nlayout: tag\ncomments: false\n---\n","date":"2016-11-03T07:16:54.000Z","updated":"2016-11-03T07:16:54.000Z","path":"tag/index.html","_id":"civ6f7ysp0082x8cdamvvjn48","content":"","excerpt":"","more":""}],"Post":[{"title":"kali安装后设置","date":"2015-03-04T06:14:57.000Z","_content":"kali安装好了，还有几件事要做\n我们用root的身份登进去系统\n<!-- more -->\n# 1 更新软件源\n官方自带的软件源速度相对比较慢，资源也少一些，我们添加一些国内的源进去\nvi /etc/apt/sources.list\n（可自由选择，不一定要全部）： \n```\n# 官方源\ndeb http://http.kali.org/kali kali main non-free contrib\ndeb-src http://http.kali.org/kali kali main non-free contrib\ndeb http://security.kali.org/kali-security kali/updates main contrib non-free\n\n# 激进源，新手不推荐使用这个软件源\ndeb http://repo.kali.org/kali kali-bleeding-edge main\ndeb-src http://repo.kali.org/kali kali-bleeding-edge main\n\n# 中科大kali源\ndeb http://mirrors.ustc.edu.cn/kali kali main non-free contrib\ndeb-src http://mirrors.ustc.edu.cn/kali kali main non-free contrib\ndeb http://mirrors.ustc.edu.cn/kali-security kali/updates main contrib non-free\n\n# 阿里云kali源\ndeb http://mirrors.aliyun.com/kali kali main non-free contrib\ndeb-src http://mirrors.aliyun.com/kali kali main non-free contrib\ndeb http://mirrors.aliyun.com/kali-security kali/updates main contrib non-free\n```\n保存之后运行：\n`apt-get update `     # 刷新系统\n`apt-get dist-upgrade `        # 安装更新\n\n# 2 安装中文输入法和字体\n安装字体\n`apt-get install ttf-wqy-microhei ttf-wqy-zenhei`\n 执行以下命令\n `apt-get install fcitx fcitx-googlepinyin`\n\n# 3 安装vpn\nkali默认情况下vpn是无法使用的，需要安装相关组件\n```\napt-get install network-manager-openvpn\napt-get install network-manager-openvpn-gnome\napt-get install network-manager-pptp\napt-get install network-manager-pptp-gnome\napt-get install network-manager-strongswan\napt-get install network-manager-vpnc\napt-get install network-manager-vpnc-gnome\n/etc/init.d/network-manager restart\n```\n\n# 4 网卡管理显示“device not managed”\n`vi  /etc/NetworkManager/NetworkManager.conf`\n修改`managed=false`为`managed=true`\n然后重启网络管理\n`service network-manager restart`\n# 5 安装chrome浏览器\n`apt-get install google-chrome-unstable`\n","source":"_posts/after-kali.md","raw":"title: kali安装后设置\ndate: 2015-03-04 14:14:57\ntags:\n- kali\n- Linux\ncategories: Linux\n---\nkali安装好了，还有几件事要做\n我们用root的身份登进去系统\n<!-- more -->\n# 1 更新软件源\n官方自带的软件源速度相对比较慢，资源也少一些，我们添加一些国内的源进去\nvi /etc/apt/sources.list\n（可自由选择，不一定要全部）： \n```\n# 官方源\ndeb http://http.kali.org/kali kali main non-free contrib\ndeb-src http://http.kali.org/kali kali main non-free contrib\ndeb http://security.kali.org/kali-security kali/updates main contrib non-free\n\n# 激进源，新手不推荐使用这个软件源\ndeb http://repo.kali.org/kali kali-bleeding-edge main\ndeb-src http://repo.kali.org/kali kali-bleeding-edge main\n\n# 中科大kali源\ndeb http://mirrors.ustc.edu.cn/kali kali main non-free contrib\ndeb-src http://mirrors.ustc.edu.cn/kali kali main non-free contrib\ndeb http://mirrors.ustc.edu.cn/kali-security kali/updates main contrib non-free\n\n# 阿里云kali源\ndeb http://mirrors.aliyun.com/kali kali main non-free contrib\ndeb-src http://mirrors.aliyun.com/kali kali main non-free contrib\ndeb http://mirrors.aliyun.com/kali-security kali/updates main contrib non-free\n```\n保存之后运行：\n`apt-get update `     # 刷新系统\n`apt-get dist-upgrade `        # 安装更新\n\n# 2 安装中文输入法和字体\n安装字体\n`apt-get install ttf-wqy-microhei ttf-wqy-zenhei`\n 执行以下命令\n `apt-get install fcitx fcitx-googlepinyin`\n\n# 3 安装vpn\nkali默认情况下vpn是无法使用的，需要安装相关组件\n```\napt-get install network-manager-openvpn\napt-get install network-manager-openvpn-gnome\napt-get install network-manager-pptp\napt-get install network-manager-pptp-gnome\napt-get install network-manager-strongswan\napt-get install network-manager-vpnc\napt-get install network-manager-vpnc-gnome\n/etc/init.d/network-manager restart\n```\n\n# 4 网卡管理显示“device not managed”\n`vi  /etc/NetworkManager/NetworkManager.conf`\n修改`managed=false`为`managed=true`\n然后重启网络管理\n`service network-manager restart`\n# 5 安装chrome浏览器\n`apt-get install google-chrome-unstable`\n","slug":"after-kali","published":1,"updated":"2015-10-29T06:08:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7ynp0001x8cd0u9t256g","content":"<p>kali安装好了，还有几件事要做<br>我们用root的身份登进去系统<br><a id=\"more\"></a></p>\n<h1 id=\"1-更新软件源\"><a href=\"#1-更新软件源\" class=\"headerlink\" title=\"1 更新软件源\"></a>1 更新软件源</h1><p>官方自带的软件源速度相对比较慢，资源也少一些，我们添加一些国内的源进去<br>vi /etc/apt/sources.list<br>（可自由选择，不一定要全部）：<br><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># 官方源</span></div><div class=\"line\">deb http:<span class=\"comment\">//http.kali.org/kali kali main non-free contrib</span></div><div class=\"line\">deb-src http:<span class=\"comment\">//http.kali.org/kali kali main non-free contrib</span></div><div class=\"line\">deb http:<span class=\"comment\">//security.kali.org/kali-security kali/updates main contrib non-free</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 激进源，新手不推荐使用这个软件源</span></div><div class=\"line\">deb http:<span class=\"comment\">//repo.kali.org/kali kali-bleeding-edge main</span></div><div class=\"line\">deb-src http:<span class=\"comment\">//repo.kali.org/kali kali-bleeding-edge main</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 中科大kali源</span></div><div class=\"line\">deb http:<span class=\"comment\">//mirrors.ustc.edu.cn/kali kali main non-free contrib</span></div><div class=\"line\">deb-src http:<span class=\"comment\">//mirrors.ustc.edu.cn/kali kali main non-free contrib</span></div><div class=\"line\">deb http:<span class=\"comment\">//mirrors.ustc.edu.cn/kali-security kali/updates main contrib non-free</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 阿里云kali源</span></div><div class=\"line\">deb http:<span class=\"comment\">//mirrors.aliyun.com/kali kali main non-free contrib</span></div><div class=\"line\">deb-src http:<span class=\"comment\">//mirrors.aliyun.com/kali kali main non-free contrib</span></div><div class=\"line\">deb http:<span class=\"comment\">//mirrors.aliyun.com/kali-security kali/updates main contrib non-free</span></div></pre></td></tr></table></figure></p>\n<p>保存之后运行：<br><code>apt-get update</code>     # 刷新系统<br><code>apt-get dist-upgrade</code>        # 安装更新</p>\n<h1 id=\"2-安装中文输入法和字体\"><a href=\"#2-安装中文输入法和字体\" class=\"headerlink\" title=\"2 安装中文输入法和字体\"></a>2 安装中文输入法和字体</h1><p>安装字体<br><code>apt-get install ttf-wqy-microhei ttf-wqy-zenhei</code><br> 执行以下命令<br> <code>apt-get install fcitx fcitx-googlepinyin</code></p>\n<h1 id=\"3-安装vpn\"><a href=\"#3-安装vpn\" class=\"headerlink\" title=\"3 安装vpn\"></a>3 安装vpn</h1><p>kali默认情况下vpn是无法使用的，需要安装相关组件<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get <span class=\"keyword\">install</span> network-manager-openvpn</div><div class=\"line\">apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> network-manager-openvpn-gnome</div><div class=\"line\">apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> network-manager-pptp</div><div class=\"line\">apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> network-manager-pptp-gnome</div><div class=\"line\">apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> network-manager-strongswan</div><div class=\"line\">apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> network-manager-vpnc</div><div class=\"line\">apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> network-manager-vpnc-gnome</div><div class=\"line\">/etc/init.d/network-manager restart</div></pre></td></tr></table></figure></p>\n<h1 id=\"4-网卡管理显示“device-not-managed”\"><a href=\"#4-网卡管理显示“device-not-managed”\" class=\"headerlink\" title=\"4 网卡管理显示“device not managed”\"></a>4 网卡管理显示“device not managed”</h1><p><code>vi  /etc/NetworkManager/NetworkManager.conf</code><br>修改<code>managed=false</code>为<code>managed=true</code><br>然后重启网络管理<br><code>service network-manager restart</code></p>\n<h1 id=\"5-安装chrome浏览器\"><a href=\"#5-安装chrome浏览器\" class=\"headerlink\" title=\"5 安装chrome浏览器\"></a>5 安装chrome浏览器</h1><p><code>apt-get install google-chrome-unstable</code></p>\n","excerpt":"<p>kali安装好了，还有几件事要做<br>我们用root的身份登进去系统<br>","more":"</p>\n<h1 id=\"1-更新软件源\"><a href=\"#1-更新软件源\" class=\"headerlink\" title=\"1 更新软件源\"></a>1 更新软件源</h1><p>官方自带的软件源速度相对比较慢，资源也少一些，我们添加一些国内的源进去<br>vi /etc/apt/sources.list<br>（可自由选择，不一定要全部）：<br><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># 官方源</span></div><div class=\"line\">deb http:<span class=\"comment\">//http.kali.org/kali kali main non-free contrib</span></div><div class=\"line\">deb-src http:<span class=\"comment\">//http.kali.org/kali kali main non-free contrib</span></div><div class=\"line\">deb http:<span class=\"comment\">//security.kali.org/kali-security kali/updates main contrib non-free</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 激进源，新手不推荐使用这个软件源</span></div><div class=\"line\">deb http:<span class=\"comment\">//repo.kali.org/kali kali-bleeding-edge main</span></div><div class=\"line\">deb-src http:<span class=\"comment\">//repo.kali.org/kali kali-bleeding-edge main</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 中科大kali源</span></div><div class=\"line\">deb http:<span class=\"comment\">//mirrors.ustc.edu.cn/kali kali main non-free contrib</span></div><div class=\"line\">deb-src http:<span class=\"comment\">//mirrors.ustc.edu.cn/kali kali main non-free contrib</span></div><div class=\"line\">deb http:<span class=\"comment\">//mirrors.ustc.edu.cn/kali-security kali/updates main contrib non-free</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"># 阿里云kali源</span></div><div class=\"line\">deb http:<span class=\"comment\">//mirrors.aliyun.com/kali kali main non-free contrib</span></div><div class=\"line\">deb-src http:<span class=\"comment\">//mirrors.aliyun.com/kali kali main non-free contrib</span></div><div class=\"line\">deb http:<span class=\"comment\">//mirrors.aliyun.com/kali-security kali/updates main contrib non-free</span></div></pre></td></tr></table></figure></p>\n<p>保存之后运行：<br><code>apt-get update</code>     # 刷新系统<br><code>apt-get dist-upgrade</code>        # 安装更新</p>\n<h1 id=\"2-安装中文输入法和字体\"><a href=\"#2-安装中文输入法和字体\" class=\"headerlink\" title=\"2 安装中文输入法和字体\"></a>2 安装中文输入法和字体</h1><p>安装字体<br><code>apt-get install ttf-wqy-microhei ttf-wqy-zenhei</code><br> 执行以下命令<br> <code>apt-get install fcitx fcitx-googlepinyin</code></p>\n<h1 id=\"3-安装vpn\"><a href=\"#3-安装vpn\" class=\"headerlink\" title=\"3 安装vpn\"></a>3 安装vpn</h1><p>kali默认情况下vpn是无法使用的，需要安装相关组件<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get <span class=\"keyword\">install</span> network-manager-openvpn</div><div class=\"line\">apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> network-manager-openvpn-gnome</div><div class=\"line\">apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> network-manager-pptp</div><div class=\"line\">apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> network-manager-pptp-gnome</div><div class=\"line\">apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> network-manager-strongswan</div><div class=\"line\">apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> network-manager-vpnc</div><div class=\"line\">apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> network-manager-vpnc-gnome</div><div class=\"line\">/etc/init.d/network-manager restart</div></pre></td></tr></table></figure></p>\n<h1 id=\"4-网卡管理显示“device-not-managed”\"><a href=\"#4-网卡管理显示“device-not-managed”\" class=\"headerlink\" title=\"4 网卡管理显示“device not managed”\"></a>4 网卡管理显示“device not managed”</h1><p><code>vi  /etc/NetworkManager/NetworkManager.conf</code><br>修改<code>managed=false</code>为<code>managed=true</code><br>然后重启网络管理<br><code>service network-manager restart</code></p>\n<h1 id=\"5-安装chrome浏览器\"><a href=\"#5-安装chrome浏览器\" class=\"headerlink\" title=\"5 安装chrome浏览器\"></a>5 安装chrome浏览器</h1><p><code>apt-get install google-chrome-unstable</code></p>"},{"title":"[js]replace替换","date":"2014-11-25T14:32:00.000Z","_content":"\n今天做前端试题,用到了replace函数,来记录一下.\n(以下部分知识点来自[http://www.w3cschool.cn/jsref_replace.html](http://www.w3cschool.cn/jsref_replace.html))\n\n\n## 定义和用法\n\n\n\n\nreplace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。\n\n### 语法\n\n\n\n<table class=\"dataintable \" style=\"margin-top:10px; border-collapse:collapse; border:1px solid rgb(136,136,136); width:606px; color:rgb(0,0,0); font-size:12px; background-color:rgb(249,249,249)\">\n<tbody>\n<tr>\n<th style=\"vertical-align:baseline; padding:5px 15px 5px 5px; border:1px solid rgb(136,136,136); background-color:rgb(204,204,204)\">\n参数</th>\n<th style=\"vertical-align:baseline; padding:5px 15px 5px 5px; border:1px solid rgb(136,136,136); background-color:rgb(204,204,204)\">\n描述</th>\n</tr>\n<tr>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\nregexp/substr</td>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\n<p style=\"margin-top:0px; margin-bottom:0px; line-height:18px\">必需。规定子字符串或要替换的模式的 RegExp 对象。</p>\n<p style=\"margin-top:0px; margin-bottom:2px; line-height:18px\">请注意，如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换为 RegExp 对象。</p>\n</td>\n</tr>\n<tr>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\nreplacement</td>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\n必需。一个字符串值。规定了替换文本或生成替换文本的函数。</td>\n</tr>\n</tbody>\n</table>\n\n### 返回值\n\n\n一个新的字符串，是用 _replacement_ 替换了 regexp 的第一次匹配或所有匹配之后得到的。\n\n### 说明\n\n\n字符串 stringObject 的 replace() 方法执行的是查找并替换的操作。它将在 stringObject 中查找与 regexp 相匹配的子字符串，然后用 _replacement_ 来替换这些子串。如果 regexp 具有全局标志 g，那么 replace() 方法将替换所有匹配的子串。否则，它只替换第一个匹配子串。\n\n_replacement_ 可以是字符串，也可以是函数。如果它是字符串，那么每个匹配都将由字符串替换。但是 replacement 中的 $ 字符具有特定的含义。如下表所示，它说明从模式匹配得到的字符串将用于替换。\n<table class=\"dataintable \" style=\"margin-top:10px; border-collapse:collapse; border:1px solid rgb(136,136,136); width:606px; color:rgb(0,0,0); font-size:12px; background-color:rgb(249,249,249)\">\n<tbody>\n<tr>\n<th style=\"vertical-align:baseline; padding:5px 15px 5px 5px; border:1px solid rgb(136,136,136); background-color:rgb(204,204,204)\">\n字符</th>\n<th style=\"vertical-align:baseline; padding:5px 15px 5px 5px; border:1px solid rgb(136,136,136); background-color:rgb(204,204,204)\">\n替换文本</th>\n</tr>\n<tr>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\n$1、$2、...、$99</td>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\n与 regexp 中的第 1 到第 99 个子表达式相匹配的文本。</td>\n</tr>\n<tr>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\n$&</td>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\n与 regexp 相匹配的子串。</td>\n</tr>\n<tr>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\n$`</td>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\n位于匹配子串左侧的文本。</td>\n</tr>\n<tr>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\n$'</td>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\n位于匹配子串右侧的文本。</td>\n</tr>\n<tr>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\n$$</td>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\n直接量符号。</td>\n</tr>\n</tbody>\n</table>\n\n__注意：__ECMAScript v3 规定，replace() 方法的参数 replacement 可以是函数而不是字符串。在这种情况下，每个匹配都调用该函数，它返回的字符串将作为替换文本使用。该函数的第一个参数是匹配模式的字符串。接下来的参数是与模式中的子表达式匹配的字符串，可以有 0 个或多个这样的参数。接下来的参数是一个整数，声明了匹配在 stringObject 中出现的位置。最后一个参数是\n stringObject 本身。\n\n\n\n下面给几个简单的例子来说明一下\n\nps:介绍一下正则的小知识,\\w表示匹配一个英文字符,+表示匹配数量必须大于一个,\\b就是分节符,单词中间分隔用的,连在一起就是取出前面字符串中所有的单词\n\n\n```javascript\n'my name is'.replace(/(\\w+)\\b/g,'haha  ');//输出结果为   \"haha   haha   haha  \"\n```\n\n```javascript\n'my name is'.replace(/(\\w+)\\b/g,'$1aa');//输出结果为\"myaa nameaa isaa\"\n```\n\n```javascript\n'my name is'.replace(/((\\w)(\\w+?))\\b/g,function(m,a,b,c,d,e){return b.toUpperCase()+c;});//输出结果为\"My Name Is\"\n```\n\n重点讲解一下第三个,replace返回值为函数的例子(function必须要return)\n\n当replace返回值为函数的时候\n\n如果只有一个分组的话,他的参数是funciton(match,pos,originalText),分别表示模式的匹配项,模式匹配项在字符串中的位置和原始字符串\n\n如果有多个分组的话,他的参数是funciton(match,arr1,arr2,arr3,....arrn,pos,originalText),分别表示模式的匹配项,模式匹配项,还有n个匹配的分组,最后的两个参数是在字符串中的位置和原始字符串\n\n比如下面的例子,执行的结果就是\n\n'my name is imweba '.replace(/((\\w)(\\w+?))\\b/g,function(m,a,b,c,d,e){\n\nconsole.log(m);\n\nconsole.log(a);\n\nconsole.log(b);\n\nconsole.log(c);\n\nconsole.log(d);\n\nconsole.log(e);\n\n});\n执行结果\n\n\n\nmy//模式匹配的值,因为上面匹配了整个单词,虽然分了多个组\n\nmy//第一个分组的值\n\nm//第二个分组的值\n\ny//第三个分组的值\n\n0//模式匹配在字符串中的起始位置\n\nmy name is imweba  //原始字符串\n\nname\n\nname\n\nn\n\name\n\n3\n\nmy name is imweba \n\nis\n\nis\n\ni\n\ns\n\n8\n\nmy name is imweba \n\nimweba\n\nimweba\n\ni\n\nmweba\n\n11\n\nmy name is imweba \n\n\"undefined undefined undefined undefined \"//这一行是因为function必须要有return,我没写return,所以就都是undefined\n\n\n\n\n\n\n\n\n\nok  打完收工\n\n\n\n\n\n\n","source":"_posts/[js]replace替换.md","raw":"title: '[js]replace替换'\ndate: 2014-11-25 22:32\ntags:\n- javascript\n- 正则表达式\n- 前端\n- js\ncategories:\n- javascript\n---\n\n今天做前端试题,用到了replace函数,来记录一下.\n(以下部分知识点来自[http://www.w3cschool.cn/jsref_replace.html](http://www.w3cschool.cn/jsref_replace.html))\n\n\n## 定义和用法\n\n\n\n\nreplace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。\n\n### 语法\n\n\n\n<table class=\"dataintable \" style=\"margin-top:10px; border-collapse:collapse; border:1px solid rgb(136,136,136); width:606px; color:rgb(0,0,0); font-size:12px; background-color:rgb(249,249,249)\">\n<tbody>\n<tr>\n<th style=\"vertical-align:baseline; padding:5px 15px 5px 5px; border:1px solid rgb(136,136,136); background-color:rgb(204,204,204)\">\n参数</th>\n<th style=\"vertical-align:baseline; padding:5px 15px 5px 5px; border:1px solid rgb(136,136,136); background-color:rgb(204,204,204)\">\n描述</th>\n</tr>\n<tr>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\nregexp/substr</td>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\n<p style=\"margin-top:0px; margin-bottom:0px; line-height:18px\">必需。规定子字符串或要替换的模式的 RegExp 对象。</p>\n<p style=\"margin-top:0px; margin-bottom:2px; line-height:18px\">请注意，如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换为 RegExp 对象。</p>\n</td>\n</tr>\n<tr>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\nreplacement</td>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\n必需。一个字符串值。规定了替换文本或生成替换文本的函数。</td>\n</tr>\n</tbody>\n</table>\n\n### 返回值\n\n\n一个新的字符串，是用 _replacement_ 替换了 regexp 的第一次匹配或所有匹配之后得到的。\n\n### 说明\n\n\n字符串 stringObject 的 replace() 方法执行的是查找并替换的操作。它将在 stringObject 中查找与 regexp 相匹配的子字符串，然后用 _replacement_ 来替换这些子串。如果 regexp 具有全局标志 g，那么 replace() 方法将替换所有匹配的子串。否则，它只替换第一个匹配子串。\n\n_replacement_ 可以是字符串，也可以是函数。如果它是字符串，那么每个匹配都将由字符串替换。但是 replacement 中的 $ 字符具有特定的含义。如下表所示，它说明从模式匹配得到的字符串将用于替换。\n<table class=\"dataintable \" style=\"margin-top:10px; border-collapse:collapse; border:1px solid rgb(136,136,136); width:606px; color:rgb(0,0,0); font-size:12px; background-color:rgb(249,249,249)\">\n<tbody>\n<tr>\n<th style=\"vertical-align:baseline; padding:5px 15px 5px 5px; border:1px solid rgb(136,136,136); background-color:rgb(204,204,204)\">\n字符</th>\n<th style=\"vertical-align:baseline; padding:5px 15px 5px 5px; border:1px solid rgb(136,136,136); background-color:rgb(204,204,204)\">\n替换文本</th>\n</tr>\n<tr>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\n$1、$2、...、$99</td>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\n与 regexp 中的第 1 到第 99 个子表达式相匹配的文本。</td>\n</tr>\n<tr>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\n$&</td>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\n与 regexp 相匹配的子串。</td>\n</tr>\n<tr>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\n$`</td>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\n位于匹配子串左侧的文本。</td>\n</tr>\n<tr>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\n$'</td>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\n位于匹配子串右侧的文本。</td>\n</tr>\n<tr>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\n$$</td>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\n直接量符号。</td>\n</tr>\n</tbody>\n</table>\n\n__注意：__ECMAScript v3 规定，replace() 方法的参数 replacement 可以是函数而不是字符串。在这种情况下，每个匹配都调用该函数，它返回的字符串将作为替换文本使用。该函数的第一个参数是匹配模式的字符串。接下来的参数是与模式中的子表达式匹配的字符串，可以有 0 个或多个这样的参数。接下来的参数是一个整数，声明了匹配在 stringObject 中出现的位置。最后一个参数是\n stringObject 本身。\n\n\n\n下面给几个简单的例子来说明一下\n\nps:介绍一下正则的小知识,\\w表示匹配一个英文字符,+表示匹配数量必须大于一个,\\b就是分节符,单词中间分隔用的,连在一起就是取出前面字符串中所有的单词\n\n\n```javascript\n'my name is'.replace(/(\\w+)\\b/g,'haha  ');//输出结果为   \"haha   haha   haha  \"\n```\n\n```javascript\n'my name is'.replace(/(\\w+)\\b/g,'$1aa');//输出结果为\"myaa nameaa isaa\"\n```\n\n```javascript\n'my name is'.replace(/((\\w)(\\w+?))\\b/g,function(m,a,b,c,d,e){return b.toUpperCase()+c;});//输出结果为\"My Name Is\"\n```\n\n重点讲解一下第三个,replace返回值为函数的例子(function必须要return)\n\n当replace返回值为函数的时候\n\n如果只有一个分组的话,他的参数是funciton(match,pos,originalText),分别表示模式的匹配项,模式匹配项在字符串中的位置和原始字符串\n\n如果有多个分组的话,他的参数是funciton(match,arr1,arr2,arr3,....arrn,pos,originalText),分别表示模式的匹配项,模式匹配项,还有n个匹配的分组,最后的两个参数是在字符串中的位置和原始字符串\n\n比如下面的例子,执行的结果就是\n\n'my name is imweba '.replace(/((\\w)(\\w+?))\\b/g,function(m,a,b,c,d,e){\n\nconsole.log(m);\n\nconsole.log(a);\n\nconsole.log(b);\n\nconsole.log(c);\n\nconsole.log(d);\n\nconsole.log(e);\n\n});\n执行结果\n\n\n\nmy//模式匹配的值,因为上面匹配了整个单词,虽然分了多个组\n\nmy//第一个分组的值\n\nm//第二个分组的值\n\ny//第三个分组的值\n\n0//模式匹配在字符串中的起始位置\n\nmy name is imweba  //原始字符串\n\nname\n\nname\n\nn\n\name\n\n3\n\nmy name is imweba \n\nis\n\nis\n\ni\n\ns\n\n8\n\nmy name is imweba \n\nimweba\n\nimweba\n\ni\n\nmweba\n\n11\n\nmy name is imweba \n\n\"undefined undefined undefined undefined \"//这一行是因为function必须要有return,我没写return,所以就都是undefined\n\n\n\n\n\n\n\n\n\nok  打完收工\n\n\n\n\n\n\n","slug":"[js]replace替换","published":1,"updated":"2015-10-29T06:08:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7ynv0002x8cdibl0yj5q","content":"<p>今天做前端试题,用到了replace函数,来记录一下.<br>(以下部分知识点来自<a href=\"http://www.w3cschool.cn/jsref_replace.html\" target=\"_blank\" rel=\"external\">http://www.w3cschool.cn/jsref_replace.html</a>)</p>\n<h2 id=\"定义和用法\"><a href=\"#定义和用法\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h2><p>replace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><table class=\"dataintable \" style=\"margin-top:10px; border-collapse:collapse; border:1px solid rgb(136,136,136); width:606px; color:rgb(0,0,0); font-size:12px; background-color:rgb(249,249,249)\"><br><tbody><br><tr><br><th style=\"vertical-align:baseline; padding:5px 15px 5px 5px; border:1px solid rgb(136,136,136); background-color:rgb(204,204,204)\"><br>参数</th><br><th style=\"vertical-align:baseline; padding:5px 15px 5px 5px; border:1px solid rgb(136,136,136); background-color:rgb(204,204,204)\"><br>描述</th><br></tr><br><tr><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>regexp/substr</td><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br><p style=\"margin-top:0px; margin-bottom:0px; line-height:18px\">必需。规定子字符串或要替换的模式的 RegExp 对象。</p><br><p style=\"margin-top:0px; margin-bottom:2px; line-height:18px\">请注意，如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换为 RegExp 对象。</p><br></td><br></tr><br><tr><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>replacement</td><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>必需。一个字符串值。规定了替换文本或生成替换文本的函数。</td><br></tr><br></tbody><br></table>\n\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>一个新的字符串，是用 <em>replacement</em> 替换了 regexp 的第一次匹配或所有匹配之后得到的。</p>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>字符串 stringObject 的 replace() 方法执行的是查找并替换的操作。它将在 stringObject 中查找与 regexp 相匹配的子字符串，然后用 <em>replacement</em> 来替换这些子串。如果 regexp 具有全局标志 g，那么 replace() 方法将替换所有匹配的子串。否则，它只替换第一个匹配子串。</p>\n<p><em>replacement</em> 可以是字符串，也可以是函数。如果它是字符串，那么每个匹配都将由字符串替换。但是 replacement 中的 $ 字符具有特定的含义。如下表所示，它说明从模式匹配得到的字符串将用于替换。</p>\n<table class=\"dataintable \" style=\"margin-top:10px; border-collapse:collapse; border:1px solid rgb(136,136,136); width:606px; color:rgb(0,0,0); font-size:12px; background-color:rgb(249,249,249)\"><br><tbody><br><tr><br><th style=\"vertical-align:baseline; padding:5px 15px 5px 5px; border:1px solid rgb(136,136,136); background-color:rgb(204,204,204)\"><br>字符</th><br><th style=\"vertical-align:baseline; padding:5px 15px 5px 5px; border:1px solid rgb(136,136,136); background-color:rgb(204,204,204)\"><br>替换文本</th><br></tr><br><tr><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>$1、$2、…、$99</td><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>与 regexp 中的第 1 到第 99 个子表达式相匹配的文本。</td><br></tr><br><tr><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>$&amp;</td><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>与 regexp 相匹配的子串。</td><br></tr><br><tr><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>$`</td><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>位于匹配子串左侧的文本。</td><br></tr><br><tr><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>$’</td><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>位于匹配子串右侧的文本。</td><br></tr><br><tr><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>$$</td><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>直接量符号。</td><br></tr><br></tbody><br></table>\n\n<p><strong>注意：</strong>ECMAScript v3 规定，replace() 方法的参数 replacement 可以是函数而不是字符串。在这种情况下，每个匹配都调用该函数，它返回的字符串将作为替换文本使用。该函数的第一个参数是匹配模式的字符串。接下来的参数是与模式中的子表达式匹配的字符串，可以有 0 个或多个这样的参数。接下来的参数是一个整数，声明了匹配在 stringObject 中出现的位置。最后一个参数是<br> stringObject 本身。</p>\n<p>下面给几个简单的例子来说明一下</p>\n<p>ps:介绍一下正则的小知识,\\w表示匹配一个英文字符,+表示匹配数量必须大于一个,\\b就是分节符,单词中间分隔用的,连在一起就是取出前面字符串中所有的单词</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'my name is'</span>.replace(<span class=\"regexp\">/(\\w+)\\b/g</span>,<span class=\"string\">'haha  '</span>);<span class=\"comment\">//输出结果为   \"haha   haha   haha  \"</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'my name is'</span>.replace(<span class=\"regexp\">/(\\w+)\\b/g</span>,<span class=\"string\">'$1aa'</span>);<span class=\"comment\">//输出结果为\"myaa nameaa isaa\"</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'my name is'</span>.replace(<span class=\"regexp\">/((\\w)(\\w+?))\\b/g</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m,a,b,c,d,e</span>)</span>&#123;<span class=\"keyword\">return</span> b.toUpperCase()+c;&#125;);<span class=\"comment\">//输出结果为\"My Name Is\"</span></div></pre></td></tr></table></figure>\n<p>重点讲解一下第三个,replace返回值为函数的例子(function必须要return)</p>\n<p>当replace返回值为函数的时候</p>\n<p>如果只有一个分组的话,他的参数是funciton(match,pos,originalText),分别表示模式的匹配项,模式匹配项在字符串中的位置和原始字符串</p>\n<p>如果有多个分组的话,他的参数是funciton(match,arr1,arr2,arr3,….arrn,pos,originalText),分别表示模式的匹配项,模式匹配项,还有n个匹配的分组,最后的两个参数是在字符串中的位置和原始字符串</p>\n<p>比如下面的例子,执行的结果就是</p>\n<p>‘my name is imweba ‘.replace(/((\\w)(\\w+?))\\b/g,function(m,a,b,c,d,e){</p>\n<p>console.log(m);</p>\n<p>console.log(a);</p>\n<p>console.log(b);</p>\n<p>console.log(c);</p>\n<p>console.log(d);</p>\n<p>console.log(e);</p>\n<p>});<br>执行结果</p>\n<p>my//模式匹配的值,因为上面匹配了整个单词,虽然分了多个组</p>\n<p>my//第一个分组的值</p>\n<p>m//第二个分组的值</p>\n<p>y//第三个分组的值</p>\n<p>0//模式匹配在字符串中的起始位置</p>\n<p>my name is imweba  //原始字符串</p>\n<p>name</p>\n<p>name</p>\n<p>n</p>\n<p>ame</p>\n<p>3</p>\n<p>my name is imweba </p>\n<p>is</p>\n<p>is</p>\n<p>i</p>\n<p>s</p>\n<p>8</p>\n<p>my name is imweba </p>\n<p>imweba</p>\n<p>imweba</p>\n<p>i</p>\n<p>mweba</p>\n<p>11</p>\n<p>my name is imweba </p>\n<p>“undefined undefined undefined undefined “//这一行是因为function必须要有return,我没写return,所以就都是undefined</p>\n<p>ok  打完收工</p>\n","excerpt":"","more":"<p>今天做前端试题,用到了replace函数,来记录一下.<br>(以下部分知识点来自<a href=\"http://www.w3cschool.cn/jsref_replace.html\">http://www.w3cschool.cn/jsref_replace.html</a>)</p>\n<h2 id=\"定义和用法\"><a href=\"#定义和用法\" class=\"headerlink\" title=\"定义和用法\"></a>定义和用法</h2><p>replace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><table class=\"dataintable \" style=\"margin-top:10px; border-collapse:collapse; border:1px solid rgb(136,136,136); width:606px; color:rgb(0,0,0); font-size:12px; background-color:rgb(249,249,249)\"><br><tbody><br><tr><br><th style=\"vertical-align:baseline; padding:5px 15px 5px 5px; border:1px solid rgb(136,136,136); background-color:rgb(204,204,204)\"><br>参数</th><br><th style=\"vertical-align:baseline; padding:5px 15px 5px 5px; border:1px solid rgb(136,136,136); background-color:rgb(204,204,204)\"><br>描述</th><br></tr><br><tr><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>regexp/substr</td><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br><p style=\"margin-top:0px; margin-bottom:0px; line-height:18px\">必需。规定子字符串或要替换的模式的 RegExp 对象。</p><br><p style=\"margin-top:0px; margin-bottom:2px; line-height:18px\">请注意，如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换为 RegExp 对象。</p><br></td><br></tr><br><tr><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>replacement</td><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>必需。一个字符串值。规定了替换文本或生成替换文本的函数。</td><br></tr><br></tbody><br></table>\n\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>一个新的字符串，是用 <em>replacement</em> 替换了 regexp 的第一次匹配或所有匹配之后得到的。</p>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>字符串 stringObject 的 replace() 方法执行的是查找并替换的操作。它将在 stringObject 中查找与 regexp 相匹配的子字符串，然后用 <em>replacement</em> 来替换这些子串。如果 regexp 具有全局标志 g，那么 replace() 方法将替换所有匹配的子串。否则，它只替换第一个匹配子串。</p>\n<p><em>replacement</em> 可以是字符串，也可以是函数。如果它是字符串，那么每个匹配都将由字符串替换。但是 replacement 中的 $ 字符具有特定的含义。如下表所示，它说明从模式匹配得到的字符串将用于替换。</p>\n<table class=\"dataintable \" style=\"margin-top:10px; border-collapse:collapse; border:1px solid rgb(136,136,136); width:606px; color:rgb(0,0,0); font-size:12px; background-color:rgb(249,249,249)\"><br><tbody><br><tr><br><th style=\"vertical-align:baseline; padding:5px 15px 5px 5px; border:1px solid rgb(136,136,136); background-color:rgb(204,204,204)\"><br>字符</th><br><th style=\"vertical-align:baseline; padding:5px 15px 5px 5px; border:1px solid rgb(136,136,136); background-color:rgb(204,204,204)\"><br>替换文本</th><br></tr><br><tr><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>$1、$2、…、$99</td><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>与 regexp 中的第 1 到第 99 个子表达式相匹配的文本。</td><br></tr><br><tr><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>$&amp;</td><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>与 regexp 相匹配的子串。</td><br></tr><br><tr><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>$`</td><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>位于匹配子串左侧的文本。</td><br></tr><br><tr><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>$’</td><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>位于匹配子串右侧的文本。</td><br></tr><br><tr><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>$$</td><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>直接量符号。</td><br></tr><br></tbody><br></table>\n\n<p><strong>注意：</strong>ECMAScript v3 规定，replace() 方法的参数 replacement 可以是函数而不是字符串。在这种情况下，每个匹配都调用该函数，它返回的字符串将作为替换文本使用。该函数的第一个参数是匹配模式的字符串。接下来的参数是与模式中的子表达式匹配的字符串，可以有 0 个或多个这样的参数。接下来的参数是一个整数，声明了匹配在 stringObject 中出现的位置。最后一个参数是<br> stringObject 本身。</p>\n<p>下面给几个简单的例子来说明一下</p>\n<p>ps:介绍一下正则的小知识,\\w表示匹配一个英文字符,+表示匹配数量必须大于一个,\\b就是分节符,单词中间分隔用的,连在一起就是取出前面字符串中所有的单词</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'my name is'</span>.replace(<span class=\"regexp\">/(\\w+)\\b/g</span>,<span class=\"string\">'haha  '</span>);<span class=\"comment\">//输出结果为   \"haha   haha   haha  \"</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'my name is'</span>.replace(<span class=\"regexp\">/(\\w+)\\b/g</span>,<span class=\"string\">'$1aa'</span>);<span class=\"comment\">//输出结果为\"myaa nameaa isaa\"</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'my name is'</span>.replace(<span class=\"regexp\">/((\\w)(\\w+?))\\b/g</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m,a,b,c,d,e</span>)</span>&#123;<span class=\"keyword\">return</span> b.toUpperCase()+c;&#125;);<span class=\"comment\">//输出结果为\"My Name Is\"</span></div></pre></td></tr></table></figure>\n<p>重点讲解一下第三个,replace返回值为函数的例子(function必须要return)</p>\n<p>当replace返回值为函数的时候</p>\n<p>如果只有一个分组的话,他的参数是funciton(match,pos,originalText),分别表示模式的匹配项,模式匹配项在字符串中的位置和原始字符串</p>\n<p>如果有多个分组的话,他的参数是funciton(match,arr1,arr2,arr3,….arrn,pos,originalText),分别表示模式的匹配项,模式匹配项,还有n个匹配的分组,最后的两个参数是在字符串中的位置和原始字符串</p>\n<p>比如下面的例子,执行的结果就是</p>\n<p>‘my name is imweba ‘.replace(/((\\w)(\\w+?))\\b/g,function(m,a,b,c,d,e){</p>\n<p>console.log(m);</p>\n<p>console.log(a);</p>\n<p>console.log(b);</p>\n<p>console.log(c);</p>\n<p>console.log(d);</p>\n<p>console.log(e);</p>\n<p>});<br>执行结果</p>\n<p>my//模式匹配的值,因为上面匹配了整个单词,虽然分了多个组</p>\n<p>my//第一个分组的值</p>\n<p>m//第二个分组的值</p>\n<p>y//第三个分组的值</p>\n<p>0//模式匹配在字符串中的起始位置</p>\n<p>my name is imweba  //原始字符串</p>\n<p>name</p>\n<p>name</p>\n<p>n</p>\n<p>ame</p>\n<p>3</p>\n<p>my name is imweba </p>\n<p>is</p>\n<p>is</p>\n<p>i</p>\n<p>s</p>\n<p>8</p>\n<p>my name is imweba </p>\n<p>imweba</p>\n<p>imweba</p>\n<p>i</p>\n<p>mweba</p>\n<p>11</p>\n<p>my name is imweba </p>\n<p>“undefined undefined undefined undefined “//这一行是因为function必须要有return,我没写return,所以就都是undefined</p>\n<p>ok  打完收工</p>\n"},{"title":"[js]前端试题","date":"2014-11-25T14:26:00.000Z","_content":"\n```javascript\n// 1、获取页面id为 hello 的节点\nvar he=document.getElementById('hello');\n// 2、获取页面所有 div 标签\nvar di=document.getElementsByTagName('div');\n// 3、给 id 为hello的节点绑定click 事件，点击的时候弹出 \"hello\"\ndocument.getElementById('hello').onclick=function(){alert('helo')};\n// 4、将页面上 id为hello的节点隐藏\ndocument.getElementById('hello').style.visibility=none;\n// 5、将 \"hello world\" 用正则替换成 \"hello javascript”\nvar str='hello world';\nstr.replace(/hello[\\s]+world/g,'hello javascript');\n// 6、给节点（假设为element）绑定click事件，当被点击时候，alert 弹出事件的类型（通过jquery）\n$(element).click(function(event) {\n    alert(event.type);\n});\n// 7、给一个节点添加一个类 \"hello\"\ndocument.getElementById('kw').className=document.getElementById('kw').className+\" hello\";\n// 8、给节点（假设为element）绑定click事件，当被点击时候，alert 弹出事件的类型（要求兼容IE、标准浏览器）\nelement.onclick=function(event){var e=event||window.event};\n// 9、假设页面有这么两个节点将 id为world的节点的 内容设置成 跟 id 为 hello 的节点一样。\ndocument.getElementById('world').innerHTML=document.getElementById('hello').innerHTML;\n// 10、通过 js 将element的margin-left 设置为 20px\nelement.style.marginLeft=\"20px\";\n\n\n\n// 1.[{a:3},{a:4},{a:1},{a:2}] sort排序\nfunction sortnum(a,b){\n    return a.a-b.a;\n}\n//   [{a:3,b:5},{a:4,b:6},{a:1},{a:2,b:8}]按a的正向排序\nfunction sortab(a,b){\n    return a.a-b.a!=0?a.a-b.a:a.b-b.b;\n}\n//   sort 排序原理  使用的算法\n// 2.my name is imweba ... => my6 name7 is8 imweba9 ...\n//   用正则实现\n'my name is imweba '.replace(/([\\w]+)\\b/g,'$1')\nvar attr='my name is imweba '.match(/([\\w]+)\\b/g);\nfor (var i = 0;i < attr.length; i++) {\n    attr[i]=attr[i]+(6+i);\n};\nattr.join(' ');//感觉不对,只能做到这个程度\n\n// 3.实现function test(str)(){},将str的每个单词的首字母大写（str为英文字符串）\nfunction test(str){\n    return str.replace(/((\\w)(\\w+?))\\b/g,function(m,a,b,c,d,e){return b.toUpperCase()+c;});\n}\n\n// 4.写一个二分查找的算法   （假设这个数组不是有序的呢）\n\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\n// 5.123+”+34  直接说结果   12334\n12334\n// 加法会将数字转化为字符串，减法和乘法等会将字符串转化为数字\n// \"4\"\\*\"5\"=20\n// 6.实现function find(attr,val){},找到当前页面里具备属性为attr且值为val的节点，输出其父元素名称\nfunction find(attr,val){\n    var dom=document.getElementsByTagName('\\*');\n    for (var i = 0; i<dom.length; i++) {\n        if(dom[i].getAttribute(attr)==val){\n            return dom[i].parentNode.tagName;\n        }\n   }\n}\n\n```\n\n\n","source":"_posts/[js]前端试题.md","raw":"title: '[js]前端试题'\ndate: 2014-11-25 22:26\ntags:\n- javascript\n- 前端\n- 正则\ncategories:\n- javascript\n---\n\n```javascript\n// 1、获取页面id为 hello 的节点\nvar he=document.getElementById('hello');\n// 2、获取页面所有 div 标签\nvar di=document.getElementsByTagName('div');\n// 3、给 id 为hello的节点绑定click 事件，点击的时候弹出 \"hello\"\ndocument.getElementById('hello').onclick=function(){alert('helo')};\n// 4、将页面上 id为hello的节点隐藏\ndocument.getElementById('hello').style.visibility=none;\n// 5、将 \"hello world\" 用正则替换成 \"hello javascript”\nvar str='hello world';\nstr.replace(/hello[\\s]+world/g,'hello javascript');\n// 6、给节点（假设为element）绑定click事件，当被点击时候，alert 弹出事件的类型（通过jquery）\n$(element).click(function(event) {\n    alert(event.type);\n});\n// 7、给一个节点添加一个类 \"hello\"\ndocument.getElementById('kw').className=document.getElementById('kw').className+\" hello\";\n// 8、给节点（假设为element）绑定click事件，当被点击时候，alert 弹出事件的类型（要求兼容IE、标准浏览器）\nelement.onclick=function(event){var e=event||window.event};\n// 9、假设页面有这么两个节点将 id为world的节点的 内容设置成 跟 id 为 hello 的节点一样。\ndocument.getElementById('world').innerHTML=document.getElementById('hello').innerHTML;\n// 10、通过 js 将element的margin-left 设置为 20px\nelement.style.marginLeft=\"20px\";\n\n\n\n// 1.[{a:3},{a:4},{a:1},{a:2}] sort排序\nfunction sortnum(a,b){\n    return a.a-b.a;\n}\n//   [{a:3,b:5},{a:4,b:6},{a:1},{a:2,b:8}]按a的正向排序\nfunction sortab(a,b){\n    return a.a-b.a!=0?a.a-b.a:a.b-b.b;\n}\n//   sort 排序原理  使用的算法\n// 2.my name is imweba ... => my6 name7 is8 imweba9 ...\n//   用正则实现\n'my name is imweba '.replace(/([\\w]+)\\b/g,'$1')\nvar attr='my name is imweba '.match(/([\\w]+)\\b/g);\nfor (var i = 0;i < attr.length; i++) {\n    attr[i]=attr[i]+(6+i);\n};\nattr.join(' ');//感觉不对,只能做到这个程度\n\n// 3.实现function test(str)(){},将str的每个单词的首字母大写（str为英文字符串）\nfunction test(str){\n    return str.replace(/((\\w)(\\w+?))\\b/g,function(m,a,b,c,d,e){return b.toUpperCase()+c;});\n}\n\n// 4.写一个二分查找的算法   （假设这个数组不是有序的呢）\n\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\n// 5.123+”+34  直接说结果   12334\n12334\n// 加法会将数字转化为字符串，减法和乘法等会将字符串转化为数字\n// \"4\"\\*\"5\"=20\n// 6.实现function find(attr,val){},找到当前页面里具备属性为attr且值为val的节点，输出其父元素名称\nfunction find(attr,val){\n    var dom=document.getElementsByTagName('\\*');\n    for (var i = 0; i<dom.length; i++) {\n        if(dom[i].getAttribute(attr)==val){\n            return dom[i].parentNode.tagName;\n        }\n   }\n}\n\n```\n\n\n","slug":"[js]前端试题","published":1,"updated":"2015-09-29T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yo10005x8cdebs8ndlf","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1、获取页面id为 hello 的节点</span></div><div class=\"line\"><span class=\"keyword\">var</span> he=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'hello'</span>);</div><div class=\"line\"><span class=\"comment\">// 2、获取页面所有 div 标签</span></div><div class=\"line\"><span class=\"keyword\">var</span> di=<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'div'</span>);</div><div class=\"line\"><span class=\"comment\">// 3、给 id 为hello的节点绑定click 事件，点击的时候弹出 \"hello\"</span></div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'hello'</span>).onclick=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"string\">'helo'</span>)&#125;;</div><div class=\"line\"><span class=\"comment\">// 4、将页面上 id为hello的节点隐藏</span></div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'hello'</span>).style.visibility=none;</div><div class=\"line\"><span class=\"comment\">// 5、将 \"hello world\" 用正则替换成 \"hello javascript”</span></div><div class=\"line\"><span class=\"keyword\">var</span> str=<span class=\"string\">'hello world'</span>;</div><div class=\"line\">str.replace(<span class=\"regexp\">/hello[\\s]+world/g</span>,<span class=\"string\">'hello javascript'</span>);</div><div class=\"line\"><span class=\"comment\">// 6、给节点（假设为element）绑定click事件，当被点击时候，alert 弹出事件的类型（通过jquery）</span></div><div class=\"line\">$(element).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">    alert(event.type);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 7、给一个节点添加一个类 \"hello\"</span></div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'kw'</span>).className=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'kw'</span>).className+<span class=\"string\">\" hello\"</span>;</div><div class=\"line\"><span class=\"comment\">// 8、给节点（假设为element）绑定click事件，当被点击时候，alert 弹出事件的类型（要求兼容IE、标准浏览器）</span></div><div class=\"line\">element.onclick=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;<span class=\"keyword\">var</span> e=event||<span class=\"built_in\">window</span>.event&#125;;</div><div class=\"line\"><span class=\"comment\">// 9、假设页面有这么两个节点将 id为world的节点的 内容设置成 跟 id 为 hello 的节点一样。</span></div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'world'</span>).innerHTML=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'hello'</span>).innerHTML;</div><div class=\"line\"><span class=\"comment\">// 10、通过 js 将element的margin-left 设置为 20px</span></div><div class=\"line\">element.style.marginLeft=<span class=\"string\">\"20px\"</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 1.[&#123;a:3&#125;,&#123;a:4&#125;,&#123;a:1&#125;,&#123;a:2&#125;] sort排序</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortnum</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a.a-b.a;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//   [&#123;a:3,b:5&#125;,&#123;a:4,b:6&#125;,&#123;a:1&#125;,&#123;a:2,b:8&#125;]按a的正向排序</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortab</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a.a-b.a!=<span class=\"number\">0</span>?a.a-b.a:a.b-b.b;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//   sort 排序原理  使用的算法</span></div><div class=\"line\"><span class=\"comment\">// 2.my name is imweba ... =&gt; my6 name7 is8 imweba9 ...</span></div><div class=\"line\"><span class=\"comment\">//   用正则实现</span></div><div class=\"line\"><span class=\"string\">'my name is imweba '</span>.replace(<span class=\"regexp\">/([\\w]+)\\b/g</span>,<span class=\"string\">'$1'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> attr=<span class=\"string\">'my name is imweba '</span>.match(<span class=\"regexp\">/([\\w]+)\\b/g</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; attr.length; i++) &#123;</div><div class=\"line\">    attr[i]=attr[i]+(<span class=\"number\">6</span>+i);</div><div class=\"line\">&#125;;</div><div class=\"line\">attr.join(<span class=\"string\">' '</span>);<span class=\"comment\">//感觉不对,只能做到这个程度</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 3.实现function test(str)()&#123;&#125;,将str的每个单词的首字母大写（str为英文字符串）</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">str</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/((\\w)(\\w+?))\\b/g</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m,a,b,c,d,e</span>)</span>&#123;<span class=\"keyword\">return</span> b.toUpperCase()+c;&#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 4.写一个二分查找的算法   （假设这个数组不是有序的呢）</span></div><div class=\"line\">\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*</div><div class=\"line\"><span class=\"comment\">// 5.123+”+34  直接说结果   12334</span></div><div class=\"line\"><span class=\"number\">12334</span></div><div class=\"line\"><span class=\"comment\">// 加法会将数字转化为字符串，减法和乘法等会将字符串转化为数字</span></div><div class=\"line\"><span class=\"comment\">// \"4\"\\*\"5\"=20</span></div><div class=\"line\"><span class=\"comment\">// 6.实现function find(attr,val)&#123;&#125;,找到当前页面里具备属性为attr且值为val的节点，输出其父元素名称</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">find</span>(<span class=\"params\">attr,val</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> dom=<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'\\*'</span>);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i&lt;dom.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(dom[i].getAttribute(attr)==val)&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> dom[i].parentNode.tagName;</div><div class=\"line\">        &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1、获取页面id为 hello 的节点</span></div><div class=\"line\"><span class=\"keyword\">var</span> he=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'hello'</span>);</div><div class=\"line\"><span class=\"comment\">// 2、获取页面所有 div 标签</span></div><div class=\"line\"><span class=\"keyword\">var</span> di=<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'div'</span>);</div><div class=\"line\"><span class=\"comment\">// 3、给 id 为hello的节点绑定click 事件，点击的时候弹出 \"hello\"</span></div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'hello'</span>).onclick=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;alert(<span class=\"string\">'helo'</span>)&#125;;</div><div class=\"line\"><span class=\"comment\">// 4、将页面上 id为hello的节点隐藏</span></div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'hello'</span>).style.visibility=none;</div><div class=\"line\"><span class=\"comment\">// 5、将 \"hello world\" 用正则替换成 \"hello javascript”</span></div><div class=\"line\"><span class=\"keyword\">var</span> str=<span class=\"string\">'hello world'</span>;</div><div class=\"line\">str.replace(<span class=\"regexp\">/hello[\\s]+world/g</span>,<span class=\"string\">'hello javascript'</span>);</div><div class=\"line\"><span class=\"comment\">// 6、给节点（假设为element）绑定click事件，当被点击时候，alert 弹出事件的类型（通过jquery）</span></div><div class=\"line\">$(element).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">    alert(event.type);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 7、给一个节点添加一个类 \"hello\"</span></div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'kw'</span>).className=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'kw'</span>).className+<span class=\"string\">\" hello\"</span>;</div><div class=\"line\"><span class=\"comment\">// 8、给节点（假设为element）绑定click事件，当被点击时候，alert 弹出事件的类型（要求兼容IE、标准浏览器）</span></div><div class=\"line\">element.onclick=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;<span class=\"keyword\">var</span> e=event||<span class=\"built_in\">window</span>.event&#125;;</div><div class=\"line\"><span class=\"comment\">// 9、假设页面有这么两个节点将 id为world的节点的 内容设置成 跟 id 为 hello 的节点一样。</span></div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'world'</span>).innerHTML=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'hello'</span>).innerHTML;</div><div class=\"line\"><span class=\"comment\">// 10、通过 js 将element的margin-left 设置为 20px</span></div><div class=\"line\">element.style.marginLeft=<span class=\"string\">\"20px\"</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 1.[&#123;a:3&#125;,&#123;a:4&#125;,&#123;a:1&#125;,&#123;a:2&#125;] sort排序</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortnum</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a.a-b.a;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//   [&#123;a:3,b:5&#125;,&#123;a:4,b:6&#125;,&#123;a:1&#125;,&#123;a:2,b:8&#125;]按a的正向排序</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortab</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a.a-b.a!=<span class=\"number\">0</span>?a.a-b.a:a.b-b.b;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//   sort 排序原理  使用的算法</span></div><div class=\"line\"><span class=\"comment\">// 2.my name is imweba ... =&gt; my6 name7 is8 imweba9 ...</span></div><div class=\"line\"><span class=\"comment\">//   用正则实现</span></div><div class=\"line\"><span class=\"string\">'my name is imweba '</span>.replace(<span class=\"regexp\">/([\\w]+)\\b/g</span>,<span class=\"string\">'$1'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> attr=<span class=\"string\">'my name is imweba '</span>.match(<span class=\"regexp\">/([\\w]+)\\b/g</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; attr.length; i++) &#123;</div><div class=\"line\">    attr[i]=attr[i]+(<span class=\"number\">6</span>+i);</div><div class=\"line\">&#125;;</div><div class=\"line\">attr.join(<span class=\"string\">' '</span>);<span class=\"comment\">//感觉不对,只能做到这个程度</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 3.实现function test(str)()&#123;&#125;,将str的每个单词的首字母大写（str为英文字符串）</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">str</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/((\\w)(\\w+?))\\b/g</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m,a,b,c,d,e</span>)</span>&#123;<span class=\"keyword\">return</span> b.toUpperCase()+c;&#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 4.写一个二分查找的算法   （假设这个数组不是有序的呢）</span></div><div class=\"line\">\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*</div><div class=\"line\"><span class=\"comment\">// 5.123+”+34  直接说结果   12334</span></div><div class=\"line\"><span class=\"number\">12334</span></div><div class=\"line\"><span class=\"comment\">// 加法会将数字转化为字符串，减法和乘法等会将字符串转化为数字</span></div><div class=\"line\"><span class=\"comment\">// \"4\"\\*\"5\"=20</span></div><div class=\"line\"><span class=\"comment\">// 6.实现function find(attr,val)&#123;&#125;,找到当前页面里具备属性为attr且值为val的节点，输出其父元素名称</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">find</span>(<span class=\"params\">attr,val</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> dom=<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'\\*'</span>);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i&lt;dom.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(dom[i].getAttribute(attr)==val)&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> dom[i].parentNode.tagName;</div><div class=\"line\">        &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"blog2markdown程序打包,csdn爬虫","date":"2015-03-29T14:08:22.000Z","_content":">项目地址<https://github.com/Jackroyal/blog2markdown.git>\n\n用来实现普通blog到markdown的搬家，自动将blog的html转换成HEXO可用的Markdown格式\n暂时只做了CSDN\n\n### UPDATE:\n2015-03-29 添加了打包成exe的程序,修复cmd下乱码,win和ubuntu完美运行\n2015-03-29 连夜修复了在win下乱码的问题,删除了冗余代码\n2015-03-28 将某些参数改为从配置文件中读取,加入更多异常判断\n2014-12-15 优化标签解析功能,添加了标题,tag和category\n2014-12-13 实现解析功能,基本完成解析功能\n2014-12-10 实现CSDN的抓取，正在实现parse解析过程\n<!-- more -->\n### BUG\n如果代码中有# 和\\*会被转义成`\\#`和`\\*`\n对table的支持不好\n\n### 依赖库\n爬虫使用了`beautifulsoup  4.3.2`\n[点我点我](http://www.crummy.com/software/BeautifulSoup/)\n你必须安装这个才可以正常使用\nPS:我打包了exe[点此下载](http://pan.baidu.com/s/1dDERlOP),可以什么不装,改完配置文件,直接运行\n\n# 使用:\n\n# # 首先,编辑配置文件`spider.conf`\n格式如下:\n```\n[blog]\n# 此处url不需要单引号或者双引号,不然类型识别错误,网址最后不要/\nurl=http://blog.csdn.net/jackroyal\n[setting]\nwait_time=5\n```\n这里的`url`地址注意不要加引号,下面的`wait_time`是指两次抓取的间隔时间,这是为了安全起见,如果高频访问,可能会被封,我设置的`5`秒,你可以根据自己需要去设置\n\n## 打包\n我打包了一个[exe程序](http://pan.baidu.com/s/1dDERlOP),放在github项目的dist目录下,在windows系统中,`直接下载`,`运行`\n\nPS:由于pyInstaller的问题,导致无法在中文路径下正常运行\n\n比如你放在C:/users/张三/spider.exe\n这样是无法正常运行的\n所以应该放在全英文的目录下\nC:/software/spider.exe\n运行结果如图\n![spider运行截图](http://ww2.sinaimg.cn/large/692869a3gw1eqmymt6bhrj20ip0cata6.jpg)\n![运行结果截图](http://ww1.sinaimg.cn/large/692869a3gw1eqmyur9uihj20mb0gqmzf.jpg)\n\n# 源码执行\n如果你对我的exe不放心,可以自己执行python源码\n\n\n## #  执行\n在linux下,首先要给予执行权限\n```\nchmod a+x spider.py ParseBlog.py\npython spider.py\n```\n然后就可以了,输出文件在output文件夹\n\n在win下,经过修复也可以正常运行了,在idle(在win中你安装了python2.7的话就会有这个编辑器)中是可以完全正常的显示中文~~~~,在系统自带的cmd里中文显示会有问题,因为cmd中的编码默认是GBK,我程序基本都是utf-8,如果要在cmd显示正常,显示的代码都要加个str.encode('utf-8')才行.\n不过抓取是没有问题的,此处就不纠结了哈,能用就好~~~~\n```\n# 在win下,没有权限的问题,直接执行就好了\npython spider.py\n```\n\n\n\n","source":"_posts/blog2markdown-csdn-windows.md","raw":"title: blog2markdown程序打包,csdn爬虫\ndate: 2015-03-29 22:08:22\ntags:\n- github\n- hexo\n- windows\n- python\ncategories:\n- python学习笔记\n---\n>项目地址<https://github.com/Jackroyal/blog2markdown.git>\n\n用来实现普通blog到markdown的搬家，自动将blog的html转换成HEXO可用的Markdown格式\n暂时只做了CSDN\n\n### UPDATE:\n2015-03-29 添加了打包成exe的程序,修复cmd下乱码,win和ubuntu完美运行\n2015-03-29 连夜修复了在win下乱码的问题,删除了冗余代码\n2015-03-28 将某些参数改为从配置文件中读取,加入更多异常判断\n2014-12-15 优化标签解析功能,添加了标题,tag和category\n2014-12-13 实现解析功能,基本完成解析功能\n2014-12-10 实现CSDN的抓取，正在实现parse解析过程\n<!-- more -->\n### BUG\n如果代码中有# 和\\*会被转义成`\\#`和`\\*`\n对table的支持不好\n\n### 依赖库\n爬虫使用了`beautifulsoup  4.3.2`\n[点我点我](http://www.crummy.com/software/BeautifulSoup/)\n你必须安装这个才可以正常使用\nPS:我打包了exe[点此下载](http://pan.baidu.com/s/1dDERlOP),可以什么不装,改完配置文件,直接运行\n\n# 使用:\n\n# # 首先,编辑配置文件`spider.conf`\n格式如下:\n```\n[blog]\n# 此处url不需要单引号或者双引号,不然类型识别错误,网址最后不要/\nurl=http://blog.csdn.net/jackroyal\n[setting]\nwait_time=5\n```\n这里的`url`地址注意不要加引号,下面的`wait_time`是指两次抓取的间隔时间,这是为了安全起见,如果高频访问,可能会被封,我设置的`5`秒,你可以根据自己需要去设置\n\n## 打包\n我打包了一个[exe程序](http://pan.baidu.com/s/1dDERlOP),放在github项目的dist目录下,在windows系统中,`直接下载`,`运行`\n\nPS:由于pyInstaller的问题,导致无法在中文路径下正常运行\n\n比如你放在C:/users/张三/spider.exe\n这样是无法正常运行的\n所以应该放在全英文的目录下\nC:/software/spider.exe\n运行结果如图\n![spider运行截图](http://ww2.sinaimg.cn/large/692869a3gw1eqmymt6bhrj20ip0cata6.jpg)\n![运行结果截图](http://ww1.sinaimg.cn/large/692869a3gw1eqmyur9uihj20mb0gqmzf.jpg)\n\n# 源码执行\n如果你对我的exe不放心,可以自己执行python源码\n\n\n## #  执行\n在linux下,首先要给予执行权限\n```\nchmod a+x spider.py ParseBlog.py\npython spider.py\n```\n然后就可以了,输出文件在output文件夹\n\n在win下,经过修复也可以正常运行了,在idle(在win中你安装了python2.7的话就会有这个编辑器)中是可以完全正常的显示中文~~~~,在系统自带的cmd里中文显示会有问题,因为cmd中的编码默认是GBK,我程序基本都是utf-8,如果要在cmd显示正常,显示的代码都要加个str.encode('utf-8')才行.\n不过抓取是没有问题的,此处就不纠结了哈,能用就好~~~~\n```\n# 在win下,没有权限的问题,直接执行就好了\npython spider.py\n```\n\n\n\n","slug":"blog2markdown-csdn-windows","published":1,"updated":"2015-10-29T06:08:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yo40006x8cd7wpt0u3u","content":"<blockquote>\n<p>项目地址<a href=\"https://github.com/Jackroyal/blog2markdown.git\" target=\"_blank\" rel=\"external\">https://github.com/Jackroyal/blog2markdown.git</a></p>\n</blockquote>\n<p>用来实现普通blog到markdown的搬家，自动将blog的html转换成HEXO可用的Markdown格式<br>暂时只做了CSDN</p>\n<h3 id=\"UPDATE\"><a href=\"#UPDATE\" class=\"headerlink\" title=\"UPDATE:\"></a>UPDATE:</h3><p>2015-03-29 添加了打包成exe的程序,修复cmd下乱码,win和ubuntu完美运行<br>2015-03-29 连夜修复了在win下乱码的问题,删除了冗余代码<br>2015-03-28 将某些参数改为从配置文件中读取,加入更多异常判断<br>2014-12-15 优化标签解析功能,添加了标题,tag和category<br>2014-12-13 实现解析功能,基本完成解析功能<br>2014-12-10 实现CSDN的抓取，正在实现parse解析过程<br><a id=\"more\"></a></p>\n<h3 id=\"BUG\"><a href=\"#BUG\" class=\"headerlink\" title=\"BUG\"></a>BUG</h3><p>如果代码中有# 和*会被转义成<code>\\#</code>和<code>\\*</code><br>对table的支持不好</p>\n<h3 id=\"依赖库\"><a href=\"#依赖库\" class=\"headerlink\" title=\"依赖库\"></a>依赖库</h3><p>爬虫使用了<code>beautifulsoup  4.3.2</code><br><a href=\"http://www.crummy.com/software/BeautifulSoup/\" target=\"_blank\" rel=\"external\">点我点我</a><br>你必须安装这个才可以正常使用<br>PS:我打包了exe<a href=\"http://pan.baidu.com/s/1dDERlOP\" target=\"_blank\" rel=\"external\">点此下载</a>,可以什么不装,改完配置文件,直接运行</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用:\"></a>使用:</h1><h1 id=\"首先-编辑配置文件spider-conf\"><a href=\"#首先-编辑配置文件spider-conf\" class=\"headerlink\" title=\"# 首先,编辑配置文件spider.conf\"></a># 首先,编辑配置文件<code>spider.conf</code></h1><p>格式如下:<br><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">[blog]</span></div><div class=\"line\"><span class=\"comment\"># 此处url不需要单引号或者双引号,不然类型识别错误,网址最后不要/</span></div><div class=\"line\"><span class=\"attr\">url</span>=http://blog.csdn.net/jackroyal</div><div class=\"line\"><span class=\"section\">[setting]</span></div><div class=\"line\"><span class=\"attr\">wait_time</span>=<span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p>这里的<code>url</code>地址注意不要加引号,下面的<code>wait_time</code>是指两次抓取的间隔时间,这是为了安全起见,如果高频访问,可能会被封,我设置的<code>5</code>秒,你可以根据自己需要去设置</p>\n<h2 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h2><p>我打包了一个<a href=\"http://pan.baidu.com/s/1dDERlOP\" target=\"_blank\" rel=\"external\">exe程序</a>,放在github项目的dist目录下,在windows系统中,<code>直接下载</code>,<code>运行</code></p>\n<p>PS:由于pyInstaller的问题,导致无法在中文路径下正常运行</p>\n<p>比如你放在C:/users/张三/spider.exe<br>这样是无法正常运行的<br>所以应该放在全英文的目录下<br>C:/software/spider.exe<br>运行结果如图<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1eqmymt6bhrj20ip0cata6.jpg\" alt=\"spider运行截图\"><br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1eqmyur9uihj20mb0gqmzf.jpg\" alt=\"运行结果截图\"></p>\n<h1 id=\"源码执行\"><a href=\"#源码执行\" class=\"headerlink\" title=\"源码执行\"></a>源码执行</h1><p>如果你对我的exe不放心,可以自己执行python源码</p>\n<h2 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"#  执行\"></a>#  执行</h2><p>在linux下,首先要给予执行权限<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod a+x spider<span class=\"selector-class\">.py</span> ParseBlog<span class=\"selector-class\">.py</span></div><div class=\"line\">python spider.py</div></pre></td></tr></table></figure></p>\n<p>然后就可以了,输出文件在output文件夹</p>\n<p>在win下,经过修复也可以正常运行了,在idle(在win中你安装了python2.7的话就会有这个编辑器)中是可以完全正常的显示中文<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">不过抓取是没有问题的,此处就不纠结了哈,能用就好</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 在win下,没有权限的问题,直接执行就好了</span></div><div class=\"line\"><span class=\"attribute\">python</span> spider.py</div></pre></td></tr></table></figure>\n","excerpt":"<blockquote>\n<p>项目地址<a href=\"https://github.com/Jackroyal/blog2markdown.git\">https://github.com/Jackroyal/blog2markdown.git</a></p>\n</blockquote>\n<p>用来实现普通blog到markdown的搬家，自动将blog的html转换成HEXO可用的Markdown格式<br>暂时只做了CSDN</p>\n<h3 id=\"UPDATE\"><a href=\"#UPDATE\" class=\"headerlink\" title=\"UPDATE:\"></a>UPDATE:</h3><p>2015-03-29 添加了打包成exe的程序,修复cmd下乱码,win和ubuntu完美运行<br>2015-03-29 连夜修复了在win下乱码的问题,删除了冗余代码<br>2015-03-28 将某些参数改为从配置文件中读取,加入更多异常判断<br>2014-12-15 优化标签解析功能,添加了标题,tag和category<br>2014-12-13 实现解析功能,基本完成解析功能<br>2014-12-10 实现CSDN的抓取，正在实现parse解析过程<br>","more":"</p>\n<h3 id=\"BUG\"><a href=\"#BUG\" class=\"headerlink\" title=\"BUG\"></a>BUG</h3><p>如果代码中有# 和*会被转义成<code>\\#</code>和<code>\\*</code><br>对table的支持不好</p>\n<h3 id=\"依赖库\"><a href=\"#依赖库\" class=\"headerlink\" title=\"依赖库\"></a>依赖库</h3><p>爬虫使用了<code>beautifulsoup  4.3.2</code><br><a href=\"http://www.crummy.com/software/BeautifulSoup/\">点我点我</a><br>你必须安装这个才可以正常使用<br>PS:我打包了exe<a href=\"http://pan.baidu.com/s/1dDERlOP\">点此下载</a>,可以什么不装,改完配置文件,直接运行</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用:\"></a>使用:</h1><h1 id=\"首先-编辑配置文件spider-conf\"><a href=\"#首先-编辑配置文件spider-conf\" class=\"headerlink\" title=\"# 首先,编辑配置文件spider.conf\"></a># 首先,编辑配置文件<code>spider.conf</code></h1><p>格式如下:<br><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">[blog]</span></div><div class=\"line\"><span class=\"comment\"># 此处url不需要单引号或者双引号,不然类型识别错误,网址最后不要/</span></div><div class=\"line\"><span class=\"attr\">url</span>=http://blog.csdn.net/jackroyal</div><div class=\"line\"><span class=\"section\">[setting]</span></div><div class=\"line\"><span class=\"attr\">wait_time</span>=<span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p>这里的<code>url</code>地址注意不要加引号,下面的<code>wait_time</code>是指两次抓取的间隔时间,这是为了安全起见,如果高频访问,可能会被封,我设置的<code>5</code>秒,你可以根据自己需要去设置</p>\n<h2 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h2><p>我打包了一个<a href=\"http://pan.baidu.com/s/1dDERlOP\">exe程序</a>,放在github项目的dist目录下,在windows系统中,<code>直接下载</code>,<code>运行</code></p>\n<p>PS:由于pyInstaller的问题,导致无法在中文路径下正常运行</p>\n<p>比如你放在C:/users/张三/spider.exe<br>这样是无法正常运行的<br>所以应该放在全英文的目录下<br>C:/software/spider.exe<br>运行结果如图<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1eqmymt6bhrj20ip0cata6.jpg\" alt=\"spider运行截图\"><br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1eqmyur9uihj20mb0gqmzf.jpg\" alt=\"运行结果截图\"></p>\n<h1 id=\"源码执行\"><a href=\"#源码执行\" class=\"headerlink\" title=\"源码执行\"></a>源码执行</h1><p>如果你对我的exe不放心,可以自己执行python源码</p>\n<h2 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"#  执行\"></a>#  执行</h2><p>在linux下,首先要给予执行权限<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod a+x spider<span class=\"selector-class\">.py</span> ParseBlog<span class=\"selector-class\">.py</span></div><div class=\"line\">python spider.py</div></pre></td></tr></table></figure></p>\n<p>然后就可以了,输出文件在output文件夹</p>\n<p>在win下,经过修复也可以正常运行了,在idle(在win中你安装了python2.7的话就会有这个编辑器)中是可以完全正常的显示中文<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">不过抓取是没有问题的,此处就不纠结了哈,能用就好</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 在win下,没有权限的问题,直接执行就好了</span></div><div class=\"line\"><span class=\"attribute\">python</span> spider.py</div></pre></td></tr></table></figure>"},{"title":"chrome扩展开发手记<1>-需求分析","date":"2014-11-21T10:17:00.000Z","_content":"\n本人的学校在武汉,有CMCC-EDU的网络覆盖,中国移动和武汉市政府搞了一个活动,可以免费公益上网,说白了,就是可以免费使用EDU的网络,如图.\n![](http://img.blog.csdn.net/20141121181910580?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n\n以上是前提.\n\n这个网络的使用流程是这样子的.\n\n\n\n\n\n\n1. 你打开任何一个网址,比如http://www.baidu.com  <br/>\n都会跳转到 [](http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC-EDU)[http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC-EDU](http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC-EDU)  界面如图所示<br/>\n![](http://img.blog.csdn.net/20141124103645611?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n1. 接下来我们手动更改最上面的网址栏,把ssid改为iWuhan-Free,(注意大小写)<br/>\n修改后的网址如下[http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=iWuhan-Free](http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC-EDU)界面如下<br/>\n![](http://img.blog.csdn.net/20141124104120281?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n1. 接下来我们点击,请点击登录按钮,系统反馈如下<br/>\n![](http://img.blog.csdn.net/20141124104623968?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)<br/>\n我们忽略这个警告,可以注意到,上面的地址栏已经变掉了,多了个loginFree.jsp完整的地址[http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=iWuhan-Free](http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=iWuhan-Free)\n1. 接下来,我们再改一次ssid,改为CMCC520,完整地址如下[http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC520](http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=iWuhan-Free) 界面还是和上图一样,就不贴图了,我们再点击一次,请点击登录,然后就会跳到一个计时页面,这样就表示你登录成功,可以上网了\n\n\n\n\n\n\n登录的流程走完了,下一篇,接下来我们分析一下登录的原理,简化一下登录的流程\n\n","source":"_posts/chrome扩展开发手记1-需求分析.md","raw":"title: 'chrome扩展开发手记<1>-需求分析'\ndate: 2014-11-21 18:17\ntags:\n- chrome\n- cmcc-edu\n- 中国移动\ncategories:\n- chrome扩展\n---\n\n本人的学校在武汉,有CMCC-EDU的网络覆盖,中国移动和武汉市政府搞了一个活动,可以免费公益上网,说白了,就是可以免费使用EDU的网络,如图.\n![](http://img.blog.csdn.net/20141121181910580?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n\n以上是前提.\n\n这个网络的使用流程是这样子的.\n\n\n\n\n\n\n1. 你打开任何一个网址,比如http://www.baidu.com  <br/>\n都会跳转到 [](http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC-EDU)[http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC-EDU](http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC-EDU)  界面如图所示<br/>\n![](http://img.blog.csdn.net/20141124103645611?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n1. 接下来我们手动更改最上面的网址栏,把ssid改为iWuhan-Free,(注意大小写)<br/>\n修改后的网址如下[http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=iWuhan-Free](http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC-EDU)界面如下<br/>\n![](http://img.blog.csdn.net/20141124104120281?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n1. 接下来我们点击,请点击登录按钮,系统反馈如下<br/>\n![](http://img.blog.csdn.net/20141124104623968?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)<br/>\n我们忽略这个警告,可以注意到,上面的地址栏已经变掉了,多了个loginFree.jsp完整的地址[http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=iWuhan-Free](http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=iWuhan-Free)\n1. 接下来,我们再改一次ssid,改为CMCC520,完整地址如下[http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC520](http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=iWuhan-Free) 界面还是和上图一样,就不贴图了,我们再点击一次,请点击登录,然后就会跳到一个计时页面,这样就表示你登录成功,可以上网了\n\n\n\n\n\n\n登录的流程走完了,下一篇,接下来我们分析一下登录的原理,简化一下登录的流程\n\n","slug":"chrome扩展开发手记1-需求分析","published":1,"updated":"2015-09-29T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yo70007x8cdsbvuk8jb","content":"<p>本人的学校在武汉,有CMCC-EDU的网络覆盖,中国移动和武汉市政府搞了一个活动,可以免费公益上网,说白了,就是可以免费使用EDU的网络,如图.<br><img src=\"http://img.blog.csdn.net/20141121181910580?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>以上是前提.</p>\n<p>这个网络的使用流程是这样子的.</p>\n<ol>\n<li>你打开任何一个网址,比如<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"external\">http://www.baidu.com</a>  <br><br>都会跳转到 <a href=\"http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC-EDU\" target=\"_blank\" rel=\"external\"></a><a href=\"http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC-EDU\" target=\"_blank\" rel=\"external\">http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC-EDU</a>  界面如图所示<br><br><img src=\"http://img.blog.csdn.net/20141124103645611?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></li>\n<li>接下来我们手动更改最上面的网址栏,把ssid改为iWuhan-Free,(注意大小写)<br><br>修改后的网址如下<a href=\"http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC-EDU\" target=\"_blank\" rel=\"external\">http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=iWuhan-Free</a>界面如下<br><br><img src=\"http://img.blog.csdn.net/20141124104120281?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></li>\n<li>接下来我们点击,请点击登录按钮,系统反馈如下<br><br><img src=\"http://img.blog.csdn.net/20141124104623968?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br><br>我们忽略这个警告,可以注意到,上面的地址栏已经变掉了,多了个loginFree.jsp完整的地址<a href=\"http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=iWuhan-Free\" target=\"_blank\" rel=\"external\">http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=iWuhan-Free</a></li>\n<li>接下来,我们再改一次ssid,改为CMCC520,完整地址如下<a href=\"http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=iWuhan-Free\" target=\"_blank\" rel=\"external\">http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC520</a> 界面还是和上图一样,就不贴图了,我们再点击一次,请点击登录,然后就会跳到一个计时页面,这样就表示你登录成功,可以上网了</li>\n</ol>\n<p>登录的流程走完了,下一篇,接下来我们分析一下登录的原理,简化一下登录的流程</p>\n","excerpt":"","more":"<p>本人的学校在武汉,有CMCC-EDU的网络覆盖,中国移动和武汉市政府搞了一个活动,可以免费公益上网,说白了,就是可以免费使用EDU的网络,如图.<br><img src=\"http://img.blog.csdn.net/20141121181910580?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>以上是前提.</p>\n<p>这个网络的使用流程是这样子的.</p>\n<ol>\n<li>你打开任何一个网址,比如<a href=\"http://www.baidu.com\">http://www.baidu.com</a>  <br/><br>都会跳转到 <a href=\"http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC-EDU\"></a><a href=\"http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC-EDU\">http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC-EDU</a>  界面如图所示<br/><br><img src=\"http://img.blog.csdn.net/20141124103645611?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></li>\n<li>接下来我们手动更改最上面的网址栏,把ssid改为iWuhan-Free,(注意大小写)<br/><br>修改后的网址如下<a href=\"http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC-EDU\">http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=iWuhan-Free</a>界面如下<br/><br><img src=\"http://img.blog.csdn.net/20141124104120281?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></li>\n<li>接下来我们点击,请点击登录按钮,系统反馈如下<br/><br><img src=\"http://img.blog.csdn.net/20141124104623968?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br/><br>我们忽略这个警告,可以注意到,上面的地址栏已经变掉了,多了个loginFree.jsp完整的地址<a href=\"http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=iWuhan-Free\">http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=iWuhan-Free</a></li>\n<li>接下来,我们再改一次ssid,改为CMCC520,完整地址如下<a href=\"http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=iWuhan-Free\">http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC520</a> 界面还是和上图一样,就不贴图了,我们再点击一次,请点击登录,然后就会跳到一个计时页面,这样就表示你登录成功,可以上网了</li>\n</ol>\n<p>登录的流程走完了,下一篇,接下来我们分析一下登录的原理,简化一下登录的流程</p>\n"},{"title":"chrome扩展开发手记-chrome扩展开始第一步manfest.json","date":"2014-11-24T07:16:00.000Z","_content":"参考文档   [https://lmk123.duapp.com/](https://lmk123.duapp.com/)\n\n下面开始写chrome扩展了,第一步就是看文档,官方文档有入门指导,先要过一遍\n\n我们首先来编写第一个文件manfest.json,这是一个清单文件,告诉系统,我有哪些文件,需要申请哪些权限都在里面,下卖弄给出我的manfest.json\n\n\n\n\n\n```javascript\n{\n    \"name\":\"cmcc520\",//扩展的名称\n    \"version\":\"2.0\",//扩展的版本号,随便写\n    \"description\":\"powered by 搁浅St\",//扩展的描述,就是在chrome://extension页面中,扩展名称下面的几个字\n    \"background\": {//background.js,整个扩展的运行,有个页面在后台运行\n        \"scripts\": [\"js/function.js\",\"bg.js\"],\n        \"persistent\": false\n    },\n    \"page_action\":{//比较常见有page_action和browser_action有,page会出现在地址栏末端,browser会在浏览器上显示一个图标\n        \"default_icon\":\"icon-48.png\",\n        \"default_popup\": \"popup.html\",//popup.html点击弹出的页面\n        \"default_title\":\"cmcc520\"\n    },\n    \"permissions\" : [//申请内容脚本的权限,在插入内容到页面时,需要用哪些权限,此处必须声明\n        \"tabs\", \"http://\\*/\\*\"\n    ],\n    \"icons\" : {//图标设置\n        \"48\" : \"icon-48.png\",\n        \"128\" : \"icon-128.png\"\n    },\n    \"commands\": {//快捷键设置\n        \"logout_cmcc\": {\n            \"description\": \"退出CMCC登录\",\n            \"suggested_key\": {\n                \"default\": \"Alt+X\"\n            }\n        }\n    },\n    \"manifest_version\":2//manifest_version,现在版本1已经不支持,统一都写成2\n\n}\n\n```\n\n\n简单的属性,这里不再赘述,我重点说一下background,page_action,permissions和commands.\n\nbackground  它是一个包含扩展程序主要逻辑的不可见页面。扩展程序也可以包含其他页面，展现扩展程序的用户界面。如果扩展程序需要与用户加载的网页交互（相对于包含在扩展程序中的页面），扩展程序必须使用内容脚本。后台网页分两种：持续运行的后台网页与事件页面(设置persistent属性)。正如它们的名称所述，持续运行的后台网页保持打开状态，事件页面根据需要打开与关闭。除非您绝对需要您的后台网页一直运行，请首选事件页面。\n\n\n```javascript\n    \"background\": {//background.js,整个扩展的运行,有个页面在后台运行\n        \"scripts\": [\"js/function.js\",\"bg.js\"],\n        \"persistent\": false\n    },\n```\n比如我的这个 后台执行就是这样的\n\n![](http://img.blog.csdn.net/20141124194616706?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n采用pageaction还是browseraction取决于你是否想让图标一直可见.`![](http://img.blog.csdn.net/20141124193151343?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n如图,绿色的是广告终结者,他的图标是pageAction,后面的印象笔记还有switchproxy是browserAction.一般来说,适用于少数页面的扩展建议使用pageaction,适用于大多数页面的建议使用browseraction\n\n\n\n\n\n\npermissions属性,用来设置和conten_script相关的选项,举个例子,如果你想插入一段代码到页面中去执行,操作页面上的dom,那就写个content_script就行了,使用 content_scripts 字段，扩展程序可以向一个页面中插入多个内容脚本，每个内容脚本可以有多个\n JavaScript 和 CSS 文件,详细情况请看这里[https://lmk123.duapp.com/extensions/content_scripts](https://lmk123.duapp.com/extensions/content_scripts)\n\n我现在在做的一个扩展就是做这样的事,百度的搜索结果会先跳到一个百度的网址,然后才是目标网址,我可以使用cotent_scripts来插入脚本,修改百度搜索结果的链接,让他直接跳转到目标页面,而不是百度的搜索结果页面.\n\n\n\n\n\n\n\ncommands选项是设置快捷键,然后给快捷键设置事件 监听,这样我们按快捷键就会执行相应操作.\n\n\n```javascript\n        \"logout_cmcc\": {//某个快捷操作的名称\n            \"description\": \"退出CMCC登录\",//快捷操作的描述\n            \"suggested_key\": {//默认推荐的快捷键,不能与系统默认的快捷键冲突,否则就会失灵,需要用户手动去设置\n                \"default\": \"Alt+X\"\n            }\n        }\n```\n\n\n\n","source":"_posts/chrome扩展开发手记-chrome扩展开始第一步manfest.json.md","raw":"title: 'chrome扩展开发手记-chrome扩展开始第一步manfest.json'\ndate: 2014-11-24 15:16\ntags:\n- chrome\n- cmcc-edu\n- 扩展\n- 脚本\n- 中国移动\ncategories:\n- chrome扩展\n---\n参考文档   [https://lmk123.duapp.com/](https://lmk123.duapp.com/)\n\n下面开始写chrome扩展了,第一步就是看文档,官方文档有入门指导,先要过一遍\n\n我们首先来编写第一个文件manfest.json,这是一个清单文件,告诉系统,我有哪些文件,需要申请哪些权限都在里面,下卖弄给出我的manfest.json\n\n\n\n\n\n```javascript\n{\n    \"name\":\"cmcc520\",//扩展的名称\n    \"version\":\"2.0\",//扩展的版本号,随便写\n    \"description\":\"powered by 搁浅St\",//扩展的描述,就是在chrome://extension页面中,扩展名称下面的几个字\n    \"background\": {//background.js,整个扩展的运行,有个页面在后台运行\n        \"scripts\": [\"js/function.js\",\"bg.js\"],\n        \"persistent\": false\n    },\n    \"page_action\":{//比较常见有page_action和browser_action有,page会出现在地址栏末端,browser会在浏览器上显示一个图标\n        \"default_icon\":\"icon-48.png\",\n        \"default_popup\": \"popup.html\",//popup.html点击弹出的页面\n        \"default_title\":\"cmcc520\"\n    },\n    \"permissions\" : [//申请内容脚本的权限,在插入内容到页面时,需要用哪些权限,此处必须声明\n        \"tabs\", \"http://\\*/\\*\"\n    ],\n    \"icons\" : {//图标设置\n        \"48\" : \"icon-48.png\",\n        \"128\" : \"icon-128.png\"\n    },\n    \"commands\": {//快捷键设置\n        \"logout_cmcc\": {\n            \"description\": \"退出CMCC登录\",\n            \"suggested_key\": {\n                \"default\": \"Alt+X\"\n            }\n        }\n    },\n    \"manifest_version\":2//manifest_version,现在版本1已经不支持,统一都写成2\n\n}\n\n```\n\n\n简单的属性,这里不再赘述,我重点说一下background,page_action,permissions和commands.\n\nbackground  它是一个包含扩展程序主要逻辑的不可见页面。扩展程序也可以包含其他页面，展现扩展程序的用户界面。如果扩展程序需要与用户加载的网页交互（相对于包含在扩展程序中的页面），扩展程序必须使用内容脚本。后台网页分两种：持续运行的后台网页与事件页面(设置persistent属性)。正如它们的名称所述，持续运行的后台网页保持打开状态，事件页面根据需要打开与关闭。除非您绝对需要您的后台网页一直运行，请首选事件页面。\n\n\n```javascript\n    \"background\": {//background.js,整个扩展的运行,有个页面在后台运行\n        \"scripts\": [\"js/function.js\",\"bg.js\"],\n        \"persistent\": false\n    },\n```\n比如我的这个 后台执行就是这样的\n\n![](http://img.blog.csdn.net/20141124194616706?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n采用pageaction还是browseraction取决于你是否想让图标一直可见.`![](http://img.blog.csdn.net/20141124193151343?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n如图,绿色的是广告终结者,他的图标是pageAction,后面的印象笔记还有switchproxy是browserAction.一般来说,适用于少数页面的扩展建议使用pageaction,适用于大多数页面的建议使用browseraction\n\n\n\n\n\n\npermissions属性,用来设置和conten_script相关的选项,举个例子,如果你想插入一段代码到页面中去执行,操作页面上的dom,那就写个content_script就行了,使用 content_scripts 字段，扩展程序可以向一个页面中插入多个内容脚本，每个内容脚本可以有多个\n JavaScript 和 CSS 文件,详细情况请看这里[https://lmk123.duapp.com/extensions/content_scripts](https://lmk123.duapp.com/extensions/content_scripts)\n\n我现在在做的一个扩展就是做这样的事,百度的搜索结果会先跳到一个百度的网址,然后才是目标网址,我可以使用cotent_scripts来插入脚本,修改百度搜索结果的链接,让他直接跳转到目标页面,而不是百度的搜索结果页面.\n\n\n\n\n\n\n\ncommands选项是设置快捷键,然后给快捷键设置事件 监听,这样我们按快捷键就会执行相应操作.\n\n\n```javascript\n        \"logout_cmcc\": {//某个快捷操作的名称\n            \"description\": \"退出CMCC登录\",//快捷操作的描述\n            \"suggested_key\": {//默认推荐的快捷键,不能与系统默认的快捷键冲突,否则就会失灵,需要用户手动去设置\n                \"default\": \"Alt+X\"\n            }\n        }\n```\n\n\n\n","slug":"chrome扩展开发手记-chrome扩展开始第一步manfest.json","published":1,"updated":"2015-09-29T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yoa000ax8cda98axy7j","content":"<p>参考文档   <a href=\"https://lmk123.duapp.com/\" target=\"_blank\" rel=\"external\">https://lmk123.duapp.com/</a></p>\n<p>下面开始写chrome扩展了,第一步就是看文档,官方文档有入门指导,先要过一遍</p>\n<p>我们首先来编写第一个文件manfest.json,这是一个清单文件,告诉系统,我有哪些文件,需要申请哪些权限都在里面,下卖弄给出我的manfest.json</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>:<span class=\"string\">\"cmcc520\"</span>,<span class=\"comment\">//扩展的名称</span></div><div class=\"line\">    <span class=\"string\">\"version\"</span>:<span class=\"string\">\"2.0\"</span>,<span class=\"comment\">//扩展的版本号,随便写</span></div><div class=\"line\">    <span class=\"string\">\"description\"</span>:<span class=\"string\">\"powered by 搁浅St\"</span>,<span class=\"comment\">//扩展的描述,就是在chrome://extension页面中,扩展名称下面的几个字</span></div><div class=\"line\">    <span class=\"string\">\"background\"</span>: &#123;<span class=\"comment\">//background.js,整个扩展的运行,有个页面在后台运行</span></div><div class=\"line\">        <span class=\"string\">\"scripts\"</span>: [<span class=\"string\">\"js/function.js\"</span>,<span class=\"string\">\"bg.js\"</span>],</div><div class=\"line\">        <span class=\"string\">\"persistent\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"page_action\"</span>:&#123;<span class=\"comment\">//比较常见有page_action和browser_action有,page会出现在地址栏末端,browser会在浏览器上显示一个图标</span></div><div class=\"line\">        <span class=\"string\">\"default_icon\"</span>:<span class=\"string\">\"icon-48.png\"</span>,</div><div class=\"line\">        <span class=\"string\">\"default_popup\"</span>: <span class=\"string\">\"popup.html\"</span>,<span class=\"comment\">//popup.html点击弹出的页面</span></div><div class=\"line\">        <span class=\"string\">\"default_title\"</span>:<span class=\"string\">\"cmcc520\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"permissions\"</span> : [<span class=\"comment\">//申请内容脚本的权限,在插入内容到页面时,需要用哪些权限,此处必须声明</span></div><div class=\"line\">        <span class=\"string\">\"tabs\"</span>, <span class=\"string\">\"http://\\*/\\*\"</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"string\">\"icons\"</span> : &#123;<span class=\"comment\">//图标设置</span></div><div class=\"line\">        <span class=\"string\">\"48\"</span> : <span class=\"string\">\"icon-48.png\"</span>,</div><div class=\"line\">        <span class=\"string\">\"128\"</span> : <span class=\"string\">\"icon-128.png\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"commands\"</span>: &#123;<span class=\"comment\">//快捷键设置</span></div><div class=\"line\">        <span class=\"string\">\"logout_cmcc\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"description\"</span>: <span class=\"string\">\"退出CMCC登录\"</span>,</div><div class=\"line\">            <span class=\"string\">\"suggested_key\"</span>: &#123;</div><div class=\"line\">                <span class=\"string\">\"default\"</span>: <span class=\"string\">\"Alt+X\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"manifest_version\"</span>:<span class=\"number\">2</span><span class=\"comment\">//manifest_version,现在版本1已经不支持,统一都写成2</span></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>简单的属性,这里不再赘述,我重点说一下background,page_action,permissions和commands.</p>\n<p>background  它是一个包含扩展程序主要逻辑的不可见页面。扩展程序也可以包含其他页面，展现扩展程序的用户界面。如果扩展程序需要与用户加载的网页交互（相对于包含在扩展程序中的页面），扩展程序必须使用内容脚本。后台网页分两种：持续运行的后台网页与事件页面(设置persistent属性)。正如它们的名称所述，持续运行的后台网页保持打开状态，事件页面根据需要打开与关闭。除非您绝对需要您的后台网页一直运行，请首选事件页面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"background\"</span>: &#123;<span class=\"comment\">//background.js,整个扩展的运行,有个页面在后台运行</span></div><div class=\"line\">    <span class=\"string\">\"scripts\"</span>: [<span class=\"string\">\"js/function.js\"</span>,<span class=\"string\">\"bg.js\"</span>],</div><div class=\"line\">    <span class=\"string\">\"persistent\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<p>比如我的这个 后台执行就是这样的</p>\n<p><img src=\"http://img.blog.csdn.net/20141124194616706?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>采用pageaction还是browseraction取决于你是否想让图标一直可见.`<img src=\"http://img.blog.csdn.net/20141124193151343?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>如图,绿色的是广告终结者,他的图标是pageAction,后面的印象笔记还有switchproxy是browserAction.一般来说,适用于少数页面的扩展建议使用pageaction,适用于大多数页面的建议使用browseraction</p>\n<p>permissions属性,用来设置和conten_script相关的选项,举个例子,如果你想插入一段代码到页面中去执行,操作页面上的dom,那就写个content_script就行了,使用 content_scripts 字段，扩展程序可以向一个页面中插入多个内容脚本，每个内容脚本可以有多个<br> JavaScript 和 CSS 文件,详细情况请看这里<a href=\"https://lmk123.duapp.com/extensions/content_scripts\" target=\"_blank\" rel=\"external\">https://lmk123.duapp.com/extensions/content_scripts</a></p>\n<p>我现在在做的一个扩展就是做这样的事,百度的搜索结果会先跳到一个百度的网址,然后才是目标网址,我可以使用cotent_scripts来插入脚本,修改百度搜索结果的链接,让他直接跳转到目标页面,而不是百度的搜索结果页面.</p>\n<p>commands选项是设置快捷键,然后给快捷键设置事件 监听,这样我们按快捷键就会执行相应操作.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"logout_cmcc\"</span>: &#123;<span class=\"comment\">//某个快捷操作的名称</span></div><div class=\"line\">    <span class=\"string\">\"description\"</span>: <span class=\"string\">\"退出CMCC登录\"</span>,<span class=\"comment\">//快捷操作的描述</span></div><div class=\"line\">    <span class=\"string\">\"suggested_key\"</span>: &#123;<span class=\"comment\">//默认推荐的快捷键,不能与系统默认的快捷键冲突,否则就会失灵,需要用户手动去设置</span></div><div class=\"line\">        <span class=\"string\">\"default\"</span>: <span class=\"string\">\"Alt+X\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>参考文档   <a href=\"https://lmk123.duapp.com/\">https://lmk123.duapp.com/</a></p>\n<p>下面开始写chrome扩展了,第一步就是看文档,官方文档有入门指导,先要过一遍</p>\n<p>我们首先来编写第一个文件manfest.json,这是一个清单文件,告诉系统,我有哪些文件,需要申请哪些权限都在里面,下卖弄给出我的manfest.json</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>:<span class=\"string\">\"cmcc520\"</span>,<span class=\"comment\">//扩展的名称</span></div><div class=\"line\">    <span class=\"string\">\"version\"</span>:<span class=\"string\">\"2.0\"</span>,<span class=\"comment\">//扩展的版本号,随便写</span></div><div class=\"line\">    <span class=\"string\">\"description\"</span>:<span class=\"string\">\"powered by 搁浅St\"</span>,<span class=\"comment\">//扩展的描述,就是在chrome://extension页面中,扩展名称下面的几个字</span></div><div class=\"line\">    <span class=\"string\">\"background\"</span>: &#123;<span class=\"comment\">//background.js,整个扩展的运行,有个页面在后台运行</span></div><div class=\"line\">        <span class=\"string\">\"scripts\"</span>: [<span class=\"string\">\"js/function.js\"</span>,<span class=\"string\">\"bg.js\"</span>],</div><div class=\"line\">        <span class=\"string\">\"persistent\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"page_action\"</span>:&#123;<span class=\"comment\">//比较常见有page_action和browser_action有,page会出现在地址栏末端,browser会在浏览器上显示一个图标</span></div><div class=\"line\">        <span class=\"string\">\"default_icon\"</span>:<span class=\"string\">\"icon-48.png\"</span>,</div><div class=\"line\">        <span class=\"string\">\"default_popup\"</span>: <span class=\"string\">\"popup.html\"</span>,<span class=\"comment\">//popup.html点击弹出的页面</span></div><div class=\"line\">        <span class=\"string\">\"default_title\"</span>:<span class=\"string\">\"cmcc520\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"permissions\"</span> : [<span class=\"comment\">//申请内容脚本的权限,在插入内容到页面时,需要用哪些权限,此处必须声明</span></div><div class=\"line\">        <span class=\"string\">\"tabs\"</span>, <span class=\"string\">\"http://\\*/\\*\"</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"string\">\"icons\"</span> : &#123;<span class=\"comment\">//图标设置</span></div><div class=\"line\">        <span class=\"string\">\"48\"</span> : <span class=\"string\">\"icon-48.png\"</span>,</div><div class=\"line\">        <span class=\"string\">\"128\"</span> : <span class=\"string\">\"icon-128.png\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"commands\"</span>: &#123;<span class=\"comment\">//快捷键设置</span></div><div class=\"line\">        <span class=\"string\">\"logout_cmcc\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"description\"</span>: <span class=\"string\">\"退出CMCC登录\"</span>,</div><div class=\"line\">            <span class=\"string\">\"suggested_key\"</span>: &#123;</div><div class=\"line\">                <span class=\"string\">\"default\"</span>: <span class=\"string\">\"Alt+X\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"manifest_version\"</span>:<span class=\"number\">2</span><span class=\"comment\">//manifest_version,现在版本1已经不支持,统一都写成2</span></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>简单的属性,这里不再赘述,我重点说一下background,page_action,permissions和commands.</p>\n<p>background  它是一个包含扩展程序主要逻辑的不可见页面。扩展程序也可以包含其他页面，展现扩展程序的用户界面。如果扩展程序需要与用户加载的网页交互（相对于包含在扩展程序中的页面），扩展程序必须使用内容脚本。后台网页分两种：持续运行的后台网页与事件页面(设置persistent属性)。正如它们的名称所述，持续运行的后台网页保持打开状态，事件页面根据需要打开与关闭。除非您绝对需要您的后台网页一直运行，请首选事件页面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"background\"</span>: &#123;<span class=\"comment\">//background.js,整个扩展的运行,有个页面在后台运行</span></div><div class=\"line\">    <span class=\"string\">\"scripts\"</span>: [<span class=\"string\">\"js/function.js\"</span>,<span class=\"string\">\"bg.js\"</span>],</div><div class=\"line\">    <span class=\"string\">\"persistent\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<p>比如我的这个 后台执行就是这样的</p>\n<p><img src=\"http://img.blog.csdn.net/20141124194616706?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>采用pageaction还是browseraction取决于你是否想让图标一直可见.`<img src=\"http://img.blog.csdn.net/20141124193151343?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>如图,绿色的是广告终结者,他的图标是pageAction,后面的印象笔记还有switchproxy是browserAction.一般来说,适用于少数页面的扩展建议使用pageaction,适用于大多数页面的建议使用browseraction</p>\n<p>permissions属性,用来设置和conten_script相关的选项,举个例子,如果你想插入一段代码到页面中去执行,操作页面上的dom,那就写个content_script就行了,使用 content_scripts 字段，扩展程序可以向一个页面中插入多个内容脚本，每个内容脚本可以有多个<br> JavaScript 和 CSS 文件,详细情况请看这里<a href=\"https://lmk123.duapp.com/extensions/content_scripts\">https://lmk123.duapp.com/extensions/content_scripts</a></p>\n<p>我现在在做的一个扩展就是做这样的事,百度的搜索结果会先跳到一个百度的网址,然后才是目标网址,我可以使用cotent_scripts来插入脚本,修改百度搜索结果的链接,让他直接跳转到目标页面,而不是百度的搜索结果页面.</p>\n<p>commands选项是设置快捷键,然后给快捷键设置事件 监听,这样我们按快捷键就会执行相应操作.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"logout_cmcc\"</span>: &#123;<span class=\"comment\">//某个快捷操作的名称</span></div><div class=\"line\">    <span class=\"string\">\"description\"</span>: <span class=\"string\">\"退出CMCC登录\"</span>,<span class=\"comment\">//快捷操作的描述</span></div><div class=\"line\">    <span class=\"string\">\"suggested_key\"</span>: &#123;<span class=\"comment\">//默认推荐的快捷键,不能与系统默认的快捷键冲突,否则就会失灵,需要用户手动去设置</span></div><div class=\"line\">        <span class=\"string\">\"default\"</span>: <span class=\"string\">\"Alt+X\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"chrome扩展开发手记<2>-登录原理分析","date":"2014-11-24T03:18:00.000Z","_content":"\n上一篇,我们 介绍了一下登录的流程,但是用程序进行登录的话,我们肯定不能那样一步一步,太过复杂,所以我们接下来分下一下登录的具体过程,看看能不能作一些简化\n\n我们接下来,给几个页面编个号,下面好分析一点\nA   最原始的跳转 [http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC-EDU](http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC-EDU)\nB  第一次改ssid  [http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=iWuhan-Free](http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC-EDU)\n\nC 第一次点击 请点击登录  以后的地址\n[http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=iWuhan-Free](http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=iWuhan-Free)\n\nD 第二次改ssid  \n[http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC520](http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=iWuhan-Free)\n\n\n\n\n\n1. 从www.baidu.com跳转到A地址,这个步骤没什么特别的,服务器那边做了一个302跳转,然后我们这边就自动跳转到A地址了\n1. 第一次改ssid,也就是从A到B,这个过程也没什么,只是一个单纯的地址跳转,B地址中有一个表单<br/>\n![](http://img.blog.csdn.net/20141124134725891?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)<br/>\n这个表单里面 主要包含四个字段,\n<br/>wlanacname:1022.0027.270.00\n<br/>wlanuserip:10.80.97.209\nssid:iWuhan-Free\n<br/>userAgent_1:Mozilla/5.0 (Windows NT 6.2)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36\n\n1. 我们第一次点击 请提交登录,所做的操作就是把上面的表单提交到  [http://120.202.164.10:8080/portal/servlets/SingleLoginServlet](http://120.202.164.10:8080/portal/servlets/SingleLoginServlet)<br/>\n服务器返回的地址是C,这一步的表单提交主要是为了获取C的地址,就是因为多了的那个loginFree.jsp,这样下一步才能改ssid为CMCC520,否则,如果你越过这一步直接改ssid为CMCC520,就会跳转到其他的页面,比如下面这个![](http://img.blog.csdn.net/20141124133708801?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)<br/>\n这个地址如果点击提交,是没有办法正常登陆的,我们必须要到武汉的那个页面才行.\n1. 在我们到达C那个页面以后,我们再次修改ssid,就到了D页面,然后在D页面点击  请点击登录,流程和上面的一样,页面效果也是一样,不过表单的值变了一个,具体表单post内容如下\n<br/>wlanacname:1022.0027.270.00\n<br/>wlanuserip:10.80.97.209\nssid:CMCC520\nuserAgent_1:Mozilla/5.0 (Windows NT 6.2)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36<br/>\n提交以后,我们就可以登录成功了,成功以后服务器会做一个302跳转,页面跳转到一个登录计时的页面.\n\n\n\n\n\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\n_<br/>\n_\n从整体来看,最核心的一个操作就是向[http://120.202.164.10:8080/portal/servlets/SingleLoginServlet](http://120.202.164.10:8080/portal/servlets/SingleLoginServlet)提交一个表单,表单内容是\nwlanacname:1022.0027.270.00\nwlanuserip:10.80.97.209\nssid:CMCC520\nuserAgent_1:Mozilla/5.0 (Windows NT 6.2)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36\n然后,然后就没有然后了,那个最后计时页面的跳转没有多大的实际作用,我们只需要post这一个请求就好了\n下一步我们开始制作chrome扩展,核心也是要实现这个post的请求\n_\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*_\n_退出登录也是如此,发一个get请求过去,然后从获得的内容中进行判断,判断成功与否_\n__\n\n下线请求\n[http://120.202.164.10:8080/portal/servlets/LogoutServlet?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC520&ATTRIBUTE_USERNAME=iWuhanFree4300&ATTRIBUTE_UUID=26FBE9A694B6221958CF6DE2704F0ECA&ATTRIBUTE_IPADDRESS=10.80.97.209&cancelAutomatismLogin=false](http://120.202.164.10:8080/portal/servlets/LogoutServlet?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC520&ATTRIBUTE_USERNAME=iWuhanFree4300&ATTRIBUTE_UUID=26FBE9A694B6221958CF6DE2704F0ECA&ATTRIBUTE_IPADDRESS=10.80.97.209&cancelAutomatismLogin=false)\n\n表单实际内容\n\nwlanacname:1022.0027.270.00\n\nwlanuserip:10.80.97.209\n\nssid:CMCC520\n\nATTRIBUTE_USERNAME:iWuhanFree4300\n\nATTRIBUTE_UUID:26FBE9A694B6221958CF6DE2704F0ECA\n\nATTRIBUTE_IPADDRESS:10.80.97.209\n\ncancelAutomatismLogin:false\n\n\n\n\n\n\n\n\n","source":"_posts/chrome扩展开发手记2-登录原理分析.md","raw":"title: 'chrome扩展开发手记<2>-登录原理分析'\ndate: 2014-11-24 11:18\ntags:\n- chrome\n- cmcc-edu\n- 表单\ncategories:\n- chrome扩展\n---\n\n上一篇,我们 介绍了一下登录的流程,但是用程序进行登录的话,我们肯定不能那样一步一步,太过复杂,所以我们接下来分下一下登录的具体过程,看看能不能作一些简化\n\n我们接下来,给几个页面编个号,下面好分析一点\nA   最原始的跳转 [http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC-EDU](http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC-EDU)\nB  第一次改ssid  [http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=iWuhan-Free](http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC-EDU)\n\nC 第一次点击 请点击登录  以后的地址\n[http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=iWuhan-Free](http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=iWuhan-Free)\n\nD 第二次改ssid  \n[http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC520](http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=iWuhan-Free)\n\n\n\n\n\n1. 从www.baidu.com跳转到A地址,这个步骤没什么特别的,服务器那边做了一个302跳转,然后我们这边就自动跳转到A地址了\n1. 第一次改ssid,也就是从A到B,这个过程也没什么,只是一个单纯的地址跳转,B地址中有一个表单<br/>\n![](http://img.blog.csdn.net/20141124134725891?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)<br/>\n这个表单里面 主要包含四个字段,\n<br/>wlanacname:1022.0027.270.00\n<br/>wlanuserip:10.80.97.209\nssid:iWuhan-Free\n<br/>userAgent_1:Mozilla/5.0 (Windows NT 6.2)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36\n\n1. 我们第一次点击 请提交登录,所做的操作就是把上面的表单提交到  [http://120.202.164.10:8080/portal/servlets/SingleLoginServlet](http://120.202.164.10:8080/portal/servlets/SingleLoginServlet)<br/>\n服务器返回的地址是C,这一步的表单提交主要是为了获取C的地址,就是因为多了的那个loginFree.jsp,这样下一步才能改ssid为CMCC520,否则,如果你越过这一步直接改ssid为CMCC520,就会跳转到其他的页面,比如下面这个![](http://img.blog.csdn.net/20141124133708801?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)<br/>\n这个地址如果点击提交,是没有办法正常登陆的,我们必须要到武汉的那个页面才行.\n1. 在我们到达C那个页面以后,我们再次修改ssid,就到了D页面,然后在D页面点击  请点击登录,流程和上面的一样,页面效果也是一样,不过表单的值变了一个,具体表单post内容如下\n<br/>wlanacname:1022.0027.270.00\n<br/>wlanuserip:10.80.97.209\nssid:CMCC520\nuserAgent_1:Mozilla/5.0 (Windows NT 6.2)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36<br/>\n提交以后,我们就可以登录成功了,成功以后服务器会做一个302跳转,页面跳转到一个登录计时的页面.\n\n\n\n\n\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\n_<br/>\n_\n从整体来看,最核心的一个操作就是向[http://120.202.164.10:8080/portal/servlets/SingleLoginServlet](http://120.202.164.10:8080/portal/servlets/SingleLoginServlet)提交一个表单,表单内容是\nwlanacname:1022.0027.270.00\nwlanuserip:10.80.97.209\nssid:CMCC520\nuserAgent_1:Mozilla/5.0 (Windows NT 6.2)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36\n然后,然后就没有然后了,那个最后计时页面的跳转没有多大的实际作用,我们只需要post这一个请求就好了\n下一步我们开始制作chrome扩展,核心也是要实现这个post的请求\n_\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*_\n_退出登录也是如此,发一个get请求过去,然后从获得的内容中进行判断,判断成功与否_\n__\n\n下线请求\n[http://120.202.164.10:8080/portal/servlets/LogoutServlet?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC520&ATTRIBUTE_USERNAME=iWuhanFree4300&ATTRIBUTE_UUID=26FBE9A694B6221958CF6DE2704F0ECA&ATTRIBUTE_IPADDRESS=10.80.97.209&cancelAutomatismLogin=false](http://120.202.164.10:8080/portal/servlets/LogoutServlet?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC520&ATTRIBUTE_USERNAME=iWuhanFree4300&ATTRIBUTE_UUID=26FBE9A694B6221958CF6DE2704F0ECA&ATTRIBUTE_IPADDRESS=10.80.97.209&cancelAutomatismLogin=false)\n\n表单实际内容\n\nwlanacname:1022.0027.270.00\n\nwlanuserip:10.80.97.209\n\nssid:CMCC520\n\nATTRIBUTE_USERNAME:iWuhanFree4300\n\nATTRIBUTE_UUID:26FBE9A694B6221958CF6DE2704F0ECA\n\nATTRIBUTE_IPADDRESS:10.80.97.209\n\ncancelAutomatismLogin:false\n\n\n\n\n\n\n\n\n","slug":"chrome扩展开发手记2-登录原理分析","published":1,"updated":"2015-09-29T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yoe000cx8cd67q5es3b","content":"<p>上一篇,我们 介绍了一下登录的流程,但是用程序进行登录的话,我们肯定不能那样一步一步,太过复杂,所以我们接下来分下一下登录的具体过程,看看能不能作一些简化</p>\n<p>我们接下来,给几个页面编个号,下面好分析一点<br>A   最原始的跳转 <a href=\"http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC-EDU\" target=\"_blank\" rel=\"external\">http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC-EDU</a><br>B  第一次改ssid  <a href=\"http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC-EDU\" target=\"_blank\" rel=\"external\">http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=iWuhan-Free</a></p>\n<p>C 第一次点击 请点击登录  以后的地址<br><a href=\"http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=iWuhan-Free\" target=\"_blank\" rel=\"external\">http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=iWuhan-Free</a></p>\n<p>D 第二次改ssid<br><a href=\"http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=iWuhan-Free\" target=\"_blank\" rel=\"external\">http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC520</a></p>\n<ol>\n<li>从www.baidu.com跳转到A地址,这个步骤没什么特别的,服务器那边做了一个302跳转,然后我们这边就自动跳转到A地址了</li>\n<li><p>第一次改ssid,也就是从A到B,这个过程也没什么,只是一个单纯的地址跳转,B地址中有一个表单<br><br><img src=\"http://img.blog.csdn.net/20141124134725891?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br><br>这个表单里面 主要包含四个字段,<br><br>wlanacname:1022.0027.270.00<br><br>wlanuserip:10.80.97.209<br>ssid:iWuhan-Free<br><br>userAgent_1:Mozilla/5.0 (Windows NT 6.2)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36</p>\n</li>\n<li><p>我们第一次点击 请提交登录,所做的操作就是把上面的表单提交到  <a href=\"http://120.202.164.10:8080/portal/servlets/SingleLoginServlet\" target=\"_blank\" rel=\"external\">http://120.202.164.10:8080/portal/servlets/SingleLoginServlet</a><br><br>服务器返回的地址是C,这一步的表单提交主要是为了获取C的地址,就是因为多了的那个loginFree.jsp,这样下一步才能改ssid为CMCC520,否则,如果你越过这一步直接改ssid为CMCC520,就会跳转到其他的页面,比如下面这个<img src=\"http://img.blog.csdn.net/20141124133708801?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br><br>这个地址如果点击提交,是没有办法正常登陆的,我们必须要到武汉的那个页面才行.</p>\n</li>\n<li>在我们到达C那个页面以后,我们再次修改ssid,就到了D页面,然后在D页面点击  请点击登录,流程和上面的一样,页面效果也是一样,不过表单的值变了一个,具体表单post内容如下<br><br>wlanacname:1022.0027.270.00<br><br>wlanuserip:10.80.97.209<br>ssid:CMCC520<br>userAgent_1:Mozilla/5.0 (Windows NT 6.2)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36<br><br>提交以后,我们就可以登录成功了,成功以后服务器会做一个302跳转,页面跳转到一个登录计时的页面.</li>\n</ol>\n<p>************************************************************************************************************************************************************<br><em><br>\n</em><br>从整体来看,最核心的一个操作就是向<a href=\"http://120.202.164.10:8080/portal/servlets/SingleLoginServlet\" target=\"_blank\" rel=\"external\">http://120.202.164.10:8080/portal/servlets/SingleLoginServlet</a>提交一个表单,表单内容是<br>wlanacname:1022.0027.270.00<br>wlanuserip:10.80.97.209<br>ssid:CMCC520<br>userAgent<em>1:Mozilla/5.0 (Windows NT 6.2)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36<br>然后,然后就没有然后了,那个最后计时页面的跳转没有多大的实际作用,我们只需要post这一个请求就好了<br>下一步我们开始制作chrome扩展,核心也是要实现这个post的请求\n</em>************************************************************************************************************************************************************<em>\n</em>退出登录也是如此,发一个get请求过去,然后从获得的内容中进行判断,判断成功与否_<br>__</p>\n<p>下线请求<br><a href=\"http://120.202.164.10:8080/portal/servlets/LogoutServlet?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC520&amp;ATTRIBUTE_USERNAME=iWuhanFree4300&amp;ATTRIBUTE_UUID=26FBE9A694B6221958CF6DE2704F0ECA&amp;ATTRIBUTE_IPADDRESS=10.80.97.209&amp;cancelAutomatismLogin=false\" target=\"_blank\" rel=\"external\">http://120.202.164.10:8080/portal/servlets/LogoutServlet?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC520&amp;ATTRIBUTE_USERNAME=iWuhanFree4300&amp;ATTRIBUTE_UUID=26FBE9A694B6221958CF6DE2704F0ECA&amp;ATTRIBUTE_IPADDRESS=10.80.97.209&amp;cancelAutomatismLogin=false</a></p>\n<p>表单实际内容</p>\n<p>wlanacname:1022.0027.270.00</p>\n<p>wlanuserip:10.80.97.209</p>\n<p>ssid:CMCC520</p>\n<p>ATTRIBUTE_USERNAME:iWuhanFree4300</p>\n<p>ATTRIBUTE_UUID:26FBE9A694B6221958CF6DE2704F0ECA</p>\n<p>ATTRIBUTE_IPADDRESS:10.80.97.209</p>\n<p>cancelAutomatismLogin:false</p>\n","excerpt":"","more":"<p>上一篇,我们 介绍了一下登录的流程,但是用程序进行登录的话,我们肯定不能那样一步一步,太过复杂,所以我们接下来分下一下登录的具体过程,看看能不能作一些简化</p>\n<p>我们接下来,给几个页面编个号,下面好分析一点<br>A   最原始的跳转 <a href=\"http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC-EDU\">http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC-EDU</a><br>B  第一次改ssid  <a href=\"http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC-EDU\">http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=iWuhan-Free</a></p>\n<p>C 第一次点击 请点击登录  以后的地址<br><a href=\"http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=iWuhan-Free\">http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=iWuhan-Free</a></p>\n<p>D 第二次改ssid<br><a href=\"http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=iWuhan-Free\">http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC520</a></p>\n<ol>\n<li>从www.baidu.com跳转到A地址,这个步骤没什么特别的,服务器那边做了一个302跳转,然后我们这边就自动跳转到A地址了</li>\n<li><p>第一次改ssid,也就是从A到B,这个过程也没什么,只是一个单纯的地址跳转,B地址中有一个表单<br/><br><img src=\"http://img.blog.csdn.net/20141124134725891?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br/><br>这个表单里面 主要包含四个字段,<br><br/>wlanacname:1022.0027.270.00<br><br/>wlanuserip:10.80.97.209<br>ssid:iWuhan-Free<br><br/>userAgent_1:Mozilla/5.0 (Windows NT 6.2)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36</p>\n</li>\n<li><p>我们第一次点击 请提交登录,所做的操作就是把上面的表单提交到  <a href=\"http://120.202.164.10:8080/portal/servlets/SingleLoginServlet\">http://120.202.164.10:8080/portal/servlets/SingleLoginServlet</a><br/><br>服务器返回的地址是C,这一步的表单提交主要是为了获取C的地址,就是因为多了的那个loginFree.jsp,这样下一步才能改ssid为CMCC520,否则,如果你越过这一步直接改ssid为CMCC520,就会跳转到其他的页面,比如下面这个<img src=\"http://img.blog.csdn.net/20141124133708801?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br/><br>这个地址如果点击提交,是没有办法正常登陆的,我们必须要到武汉的那个页面才行.</p>\n</li>\n<li>在我们到达C那个页面以后,我们再次修改ssid,就到了D页面,然后在D页面点击  请点击登录,流程和上面的一样,页面效果也是一样,不过表单的值变了一个,具体表单post内容如下<br><br/>wlanacname:1022.0027.270.00<br><br/>wlanuserip:10.80.97.209<br>ssid:CMCC520<br>userAgent_1:Mozilla/5.0 (Windows NT 6.2)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36<br/><br>提交以后,我们就可以登录成功了,成功以后服务器会做一个302跳转,页面跳转到一个登录计时的页面.</li>\n</ol>\n<p>************************************************************************************************************************************************************<br><em><br/>\n</em><br>从整体来看,最核心的一个操作就是向<a href=\"http://120.202.164.10:8080/portal/servlets/SingleLoginServlet\">http://120.202.164.10:8080/portal/servlets/SingleLoginServlet</a>提交一个表单,表单内容是<br>wlanacname:1022.0027.270.00<br>wlanuserip:10.80.97.209<br>ssid:CMCC520<br>userAgent<em>1:Mozilla/5.0 (Windows NT 6.2)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36<br>然后,然后就没有然后了,那个最后计时页面的跳转没有多大的实际作用,我们只需要post这一个请求就好了<br>下一步我们开始制作chrome扩展,核心也是要实现这个post的请求\n</em>************************************************************************************************************************************************************<em>\n</em>退出登录也是如此,发一个get请求过去,然后从获得的内容中进行判断,判断成功与否_<br>__</p>\n<p>下线请求<br><a href=\"http://120.202.164.10:8080/portal/servlets/LogoutServlet?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC520&amp;ATTRIBUTE_USERNAME=iWuhanFree4300&amp;ATTRIBUTE_UUID=26FBE9A694B6221958CF6DE2704F0ECA&amp;ATTRIBUTE_IPADDRESS=10.80.97.209&amp;cancelAutomatismLogin=false\">http://120.202.164.10:8080/portal/servlets/LogoutServlet?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC520&amp;ATTRIBUTE_USERNAME=iWuhanFree4300&amp;ATTRIBUTE_UUID=26FBE9A694B6221958CF6DE2704F0ECA&amp;ATTRIBUTE_IPADDRESS=10.80.97.209&amp;cancelAutomatismLogin=false</a></p>\n<p>表单实际内容</p>\n<p>wlanacname:1022.0027.270.00</p>\n<p>wlanuserip:10.80.97.209</p>\n<p>ssid:CMCC520</p>\n<p>ATTRIBUTE_USERNAME:iWuhanFree4300</p>\n<p>ATTRIBUTE_UUID:26FBE9A694B6221958CF6DE2704F0ECA</p>\n<p>ATTRIBUTE_IPADDRESS:10.80.97.209</p>\n<p>cancelAutomatismLogin:false</p>\n"},{"title":"cmcc520扩展使用说明","date":"2014-11-24T13:56:00.000Z","_content":"\n我的cmcc520 2.0版本终于完成了,写个使用说明\n\n\n\n\n学校部分范围有CMCC-EDU可用,通过手动修改ssid,可以免费使用.\n\n写了个扩展来简化这个过程.\n\n1 安装扩展\n将保存下来的 \\*.crx 文件或\\*.js 文件直接拖拽到浏览器的“扩展程序”（[chrome://chrome/extensions](\"Chrome 扩展程序页面\")/）页面。\n![](http://img.blog.csdn.net/20141124215558921?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n\n( 注：只有拖动到此页面才能安装，其它页面无效)\n\n　　2. 按照提示安装\n![](http://img.blog.csdn.net/20141124215611765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n\n\n \n详细安装过程见[http://www.williamlong.info/archives/3160.html](http://www.williamlong.info/archives/3160.html)\n\n \n\n \n\n3,配置软件功能\n\n左键点击图标,可以选择开关扩展功能(默认为开启)\n ![](http://img.blog.csdn.net/20141124215702865?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n \n\n4.使用软件\n\n如果软件的功能打开,那么如果当你使用cmcc-edu的时候会自动跳转完成登录,不再需要手动操作,登录成功页面如下,你可以关闭这个页面了\n![](http://img.blog.csdn.net/20141124215651437?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n\n\n5.下线\n\n在任何页面按ALT+X   可以下线\n\nPs,如果按Alt+x无任何提示,可能是快捷键设置有问题\n ![](http://img.blog.csdn.net/20141124215717575?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n![](http://img.blog.csdn.net/20141124215740968?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n\n那就需要你按照上图手动设置快捷键\n\n \n\n \n\n6 反馈\n如果发现任何bug,可以和我联系\n\n\n\n新浪微博[http://weibo.com/517123263](http://weibo.com/517123263)\nGithub项目地址 [https://github.com/Jackroyal/cmcc520](https://github.com/Jackroyal/cmcc520)\n我的csdn博客[ http://blog.csdn.net/jackroyal](file:///C:/Users/chenhao/Desktop/%20http:/blog.csdn.net/jackroyal)\n\n \n\n \n\n \n\n2014/11/24\n","source":"_posts/cmcc520扩展使用说明.md","raw":"title: 'cmcc520扩展使用说明'\ndate: 2014-11-24 21:56\ntags:\n- chrome\n- cmcc-edu\n- 中国移动\n- 扩展\n- 脚本\ncategories:\n- chrome扩展\n---\n\n我的cmcc520 2.0版本终于完成了,写个使用说明\n\n\n\n\n学校部分范围有CMCC-EDU可用,通过手动修改ssid,可以免费使用.\n\n写了个扩展来简化这个过程.\n\n1 安装扩展\n将保存下来的 \\*.crx 文件或\\*.js 文件直接拖拽到浏览器的“扩展程序”（[chrome://chrome/extensions](\"Chrome 扩展程序页面\")/）页面。\n![](http://img.blog.csdn.net/20141124215558921?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n\n( 注：只有拖动到此页面才能安装，其它页面无效)\n\n　　2. 按照提示安装\n![](http://img.blog.csdn.net/20141124215611765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n\n\n \n详细安装过程见[http://www.williamlong.info/archives/3160.html](http://www.williamlong.info/archives/3160.html)\n\n \n\n \n\n3,配置软件功能\n\n左键点击图标,可以选择开关扩展功能(默认为开启)\n ![](http://img.blog.csdn.net/20141124215702865?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n \n\n4.使用软件\n\n如果软件的功能打开,那么如果当你使用cmcc-edu的时候会自动跳转完成登录,不再需要手动操作,登录成功页面如下,你可以关闭这个页面了\n![](http://img.blog.csdn.net/20141124215651437?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n\n\n5.下线\n\n在任何页面按ALT+X   可以下线\n\nPs,如果按Alt+x无任何提示,可能是快捷键设置有问题\n ![](http://img.blog.csdn.net/20141124215717575?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n![](http://img.blog.csdn.net/20141124215740968?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n\n那就需要你按照上图手动设置快捷键\n\n \n\n \n\n6 反馈\n如果发现任何bug,可以和我联系\n\n\n\n新浪微博[http://weibo.com/517123263](http://weibo.com/517123263)\nGithub项目地址 [https://github.com/Jackroyal/cmcc520](https://github.com/Jackroyal/cmcc520)\n我的csdn博客[ http://blog.csdn.net/jackroyal](file:///C:/Users/chenhao/Desktop/%20http:/blog.csdn.net/jackroyal)\n\n \n\n \n\n \n\n2014/11/24\n","slug":"cmcc520扩展使用说明","published":1,"updated":"2015-09-29T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yog000fx8cd39ly87tv","content":"<p>我的cmcc520 2.0版本终于完成了,写个使用说明</p>\n<p>学校部分范围有CMCC-EDU可用,通过手动修改ssid,可以免费使用.</p>\n<p>写了个扩展来简化这个过程.</p>\n<p>1 安装扩展<br>将保存下来的 *.crx 文件或*.js 文件直接拖拽到浏览器的“扩展程序”（<a href=\"&quot;Chrome 扩展程序页面&quot;\">chrome://chrome/extensions</a>/）页面。<br><img src=\"http://img.blog.csdn.net/20141124215558921?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>( 注：只有拖动到此页面才能安装，其它页面无效)</p>\n<p>　　2. 按照提示安装<br><img src=\"http://img.blog.csdn.net/20141124215611765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>详细安装过程见<a href=\"http://www.williamlong.info/archives/3160.html\" target=\"_blank\" rel=\"external\">http://www.williamlong.info/archives/3160.html</a></p>\n<p>3,配置软件功能</p>\n<p>左键点击图标,可以选择开关扩展功能(默认为开启)<br> <img src=\"http://img.blog.csdn.net/20141124215702865?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>4.使用软件</p>\n<p>如果软件的功能打开,那么如果当你使用cmcc-edu的时候会自动跳转完成登录,不再需要手动操作,登录成功页面如下,你可以关闭这个页面了<br><img src=\"http://img.blog.csdn.net/20141124215651437?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>5.下线</p>\n<p>在任何页面按ALT+X   可以下线</p>\n<p>Ps,如果按Alt+x无任何提示,可能是快捷键设置有问题<br> <img src=\"http://img.blog.csdn.net/20141124215717575?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p><img src=\"http://img.blog.csdn.net/20141124215740968?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>那就需要你按照上图手动设置快捷键</p>\n<p>6 反馈<br>如果发现任何bug,可以和我联系</p>\n<p>新浪微博<a href=\"http://weibo.com/517123263\" target=\"_blank\" rel=\"external\">http://weibo.com/517123263</a><br>Github项目地址 <a href=\"https://github.com/Jackroyal/cmcc520\" target=\"_blank\" rel=\"external\">https://github.com/Jackroyal/cmcc520</a><br>我的csdn博客<a href=\"file:///C:/Users/chenhao/Desktop/%20http:/blog.csdn.net/jackroyal\" target=\"_blank\" rel=\"external\"> http://blog.csdn.net/jackroyal</a></p>\n<p>2014/11/24</p>\n","excerpt":"","more":"<p>我的cmcc520 2.0版本终于完成了,写个使用说明</p>\n<p>学校部分范围有CMCC-EDU可用,通过手动修改ssid,可以免费使用.</p>\n<p>写了个扩展来简化这个过程.</p>\n<p>1 安装扩展<br>将保存下来的 *.crx 文件或*.js 文件直接拖拽到浏览器的“扩展程序”（<a href=\"&quot;Chrome 扩展程序页面&quot;\">chrome://chrome/extensions</a>/）页面。<br><img src=\"http://img.blog.csdn.net/20141124215558921?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>( 注：只有拖动到此页面才能安装，其它页面无效)</p>\n<p>　　2. 按照提示安装<br><img src=\"http://img.blog.csdn.net/20141124215611765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>详细安装过程见<a href=\"http://www.williamlong.info/archives/3160.html\">http://www.williamlong.info/archives/3160.html</a></p>\n<p>3,配置软件功能</p>\n<p>左键点击图标,可以选择开关扩展功能(默认为开启)<br> <img src=\"http://img.blog.csdn.net/20141124215702865?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>4.使用软件</p>\n<p>如果软件的功能打开,那么如果当你使用cmcc-edu的时候会自动跳转完成登录,不再需要手动操作,登录成功页面如下,你可以关闭这个页面了<br><img src=\"http://img.blog.csdn.net/20141124215651437?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>5.下线</p>\n<p>在任何页面按ALT+X   可以下线</p>\n<p>Ps,如果按Alt+x无任何提示,可能是快捷键设置有问题<br> <img src=\"http://img.blog.csdn.net/20141124215717575?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p><img src=\"http://img.blog.csdn.net/20141124215740968?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>那就需要你按照上图手动设置快捷键</p>\n<p>6 反馈<br>如果发现任何bug,可以和我联系</p>\n<p>新浪微博<a href=\"http://weibo.com/517123263\">http://weibo.com/517123263</a><br>Github项目地址 <a href=\"https://github.com/Jackroyal/cmcc520\">https://github.com/Jackroyal/cmcc520</a><br>我的csdn博客<a href=\"file:///C:/Users/chenhao/Desktop/%20http:/blog.csdn.net/jackroyal\"> http://blog.csdn.net/jackroyal</a></p>\n<p>2014/11/24</p>\n"},{"title":"使用opencv实现人脸检测","date":"2015-04-26T04:54:24.000Z","_content":"这两个星期，都在搞这个，就把代码都分享一下，太烂，就不分享到github了。\n<!-- more -->\n```python\n# !/usr/bin/env python\n# -*- coding:utf-8-*-\n__author__ = 'chen'\nimport cv2\nimport Image\nimport ImageDraw\nimport sys,os\ndef detectFaces(image_name):\n    img = cv2.imread(image_name)\n    face_cascade = cv2.CascadeClassifier('../data2/haarcascades/haarcascade_frontalface_alt.xml')# 加载级联分类器，这里使用的是intel训练出来的人脸识别分类器\n    if img.ndim == 3:# 判断图片是否是灰度图像，如果img.ndim==3那就表示不是灰度图像\n        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)# 将图片转化为灰度图像\n    else:\n        gray = img\n\n    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.2, minNeighbors=4, minSize=(30, 30), flags = cv2.CASCADE_SCALE_IMAGE)# 核心操作，返回图片中所有的人脸的坐标和宽高度\n    result = []\n    for (x, y, width, height) in faces:\n        print (x, y, width, height)\n        result.append((x, y, x+width, y+height))# 将原始数据，转化为人脸的四个点的坐标\n    return result\n\ndef drawFaces(image_name):\n    faces = detectFaces(image_name)# 此处的返回值是一个元组，(x, y, width, height)，每一个元组都包括人脸的（x,y）坐标，还有人脸的宽度和高度，有这些数据，我们就可以把人脸标记出来，比如画一个矩形框出来\n    print faces\n    if faces:\n        imga = cv2.imread(image_name)# 读取图片\n        draw_rects(imga, faces, (0,255,0))# 画矩形标记\n        cv2.imshow('img', imga)# 显示修改后的矩形\n        cv2.waitKey(0)\n\ndef draw_rects(img, rects, color):\n    for x1, y1, x2, y2 in rects:\n        cv2.rectangle(img, (x1, y1), (x2, y2), color, 2)# 调用cv2的矩形函数，画矩形\n\ndef saveFaces(image_name):# 将人脸截取并保存成图片\n    faces = detectFaces(image_name)\n    if faces:\n        save_dir = image_name.split('.')[0] + \"_faces_\"\n        if not os.path.isdir(save_dir):# 检测目录是否存在，如果不存在那就创建目录\n            os.mkdir(save_dir)\n        count = 0\n        for (x1, y1, x2, y2) in faces:\n            imga = cv2.imread(image_name)\n            file_name = os.path.join(save_dir,str(count)+\".jpg\")\n            roi = imga[y1:y2,x1:x2]# 这一步是重点，他就像取一个数组一样，把人脸的部分保存出来\n            cv2.imwrite(file_name,cv2.cvtColor(cv2.resize(roi,(92,112)), cv2.COLOR_BGR2GRAY))# 把图片的size重新设定维（92,112），并将图片转换为灰度图像\n            # cv2.imshow('aaa',imga)\n\n\ndrawFaces('../at/chen.jpg')\nsaveFaces('../at/chen.jpg')\n```\n这里面的截取人脸并保存的saveFaces函数，我觉得还不错。网上找到的代码，调用了Image库，我的代码全部都是用cv2搞定的，没有用Image库。画矩形也是，我也都是用cv2自带的东西完成的。\n我用以上代码生成的数据，去进行人脸识别，惨不忍睹。\n\n\n# 参考文献\n1 [Python-OpenCV人脸检测(代码)](http://blog.csdn.net/u012162613/article/details/43523507)\n2 [python os.path模块常用方法详解](http://wangwei007.blog.51cto.com/68019/1104940)\n","source":"_posts/face-detection.md","raw":"title: 使用opencv实现人脸检测\ndate: 2015-04-26 12:54:24\ntags:\n- opencv\n- 图像处理\n- python\ncategories:\n- 图像处理\n---\n这两个星期，都在搞这个，就把代码都分享一下，太烂，就不分享到github了。\n<!-- more -->\n```python\n# !/usr/bin/env python\n# -*- coding:utf-8-*-\n__author__ = 'chen'\nimport cv2\nimport Image\nimport ImageDraw\nimport sys,os\ndef detectFaces(image_name):\n    img = cv2.imread(image_name)\n    face_cascade = cv2.CascadeClassifier('../data2/haarcascades/haarcascade_frontalface_alt.xml')# 加载级联分类器，这里使用的是intel训练出来的人脸识别分类器\n    if img.ndim == 3:# 判断图片是否是灰度图像，如果img.ndim==3那就表示不是灰度图像\n        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)# 将图片转化为灰度图像\n    else:\n        gray = img\n\n    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.2, minNeighbors=4, minSize=(30, 30), flags = cv2.CASCADE_SCALE_IMAGE)# 核心操作，返回图片中所有的人脸的坐标和宽高度\n    result = []\n    for (x, y, width, height) in faces:\n        print (x, y, width, height)\n        result.append((x, y, x+width, y+height))# 将原始数据，转化为人脸的四个点的坐标\n    return result\n\ndef drawFaces(image_name):\n    faces = detectFaces(image_name)# 此处的返回值是一个元组，(x, y, width, height)，每一个元组都包括人脸的（x,y）坐标，还有人脸的宽度和高度，有这些数据，我们就可以把人脸标记出来，比如画一个矩形框出来\n    print faces\n    if faces:\n        imga = cv2.imread(image_name)# 读取图片\n        draw_rects(imga, faces, (0,255,0))# 画矩形标记\n        cv2.imshow('img', imga)# 显示修改后的矩形\n        cv2.waitKey(0)\n\ndef draw_rects(img, rects, color):\n    for x1, y1, x2, y2 in rects:\n        cv2.rectangle(img, (x1, y1), (x2, y2), color, 2)# 调用cv2的矩形函数，画矩形\n\ndef saveFaces(image_name):# 将人脸截取并保存成图片\n    faces = detectFaces(image_name)\n    if faces:\n        save_dir = image_name.split('.')[0] + \"_faces_\"\n        if not os.path.isdir(save_dir):# 检测目录是否存在，如果不存在那就创建目录\n            os.mkdir(save_dir)\n        count = 0\n        for (x1, y1, x2, y2) in faces:\n            imga = cv2.imread(image_name)\n            file_name = os.path.join(save_dir,str(count)+\".jpg\")\n            roi = imga[y1:y2,x1:x2]# 这一步是重点，他就像取一个数组一样，把人脸的部分保存出来\n            cv2.imwrite(file_name,cv2.cvtColor(cv2.resize(roi,(92,112)), cv2.COLOR_BGR2GRAY))# 把图片的size重新设定维（92,112），并将图片转换为灰度图像\n            # cv2.imshow('aaa',imga)\n\n\ndrawFaces('../at/chen.jpg')\nsaveFaces('../at/chen.jpg')\n```\n这里面的截取人脸并保存的saveFaces函数，我觉得还不错。网上找到的代码，调用了Image库，我的代码全部都是用cv2搞定的，没有用Image库。画矩形也是，我也都是用cv2自带的东西完成的。\n我用以上代码生成的数据，去进行人脸识别，惨不忍睹。\n\n\n# 参考文献\n1 [Python-OpenCV人脸检测(代码)](http://blog.csdn.net/u012162613/article/details/43523507)\n2 [python os.path模块常用方法详解](http://wangwei007.blog.51cto.com/68019/1104940)\n","slug":"face-detection","published":1,"updated":"2015-10-29T06:08:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yoj000hx8cdo7hm709g","content":"<p>这两个星期，都在搞这个，就把代码都分享一下，太烂，就不分享到github了。<br><a id=\"more\"></a><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># !/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8-*-</span></div><div class=\"line\">__author__ = <span class=\"string\">'chen'</span></div><div class=\"line\"><span class=\"keyword\">import</span> cv2</div><div class=\"line\"><span class=\"keyword\">import</span> Image</div><div class=\"line\"><span class=\"keyword\">import</span> ImageDraw</div><div class=\"line\"><span class=\"keyword\">import</span> sys,os</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detectFaces</span><span class=\"params\">(image_name)</span>:</span></div><div class=\"line\">    img = cv2.imread(image_name)</div><div class=\"line\">    face_cascade = cv2.CascadeClassifier(<span class=\"string\">'../data2/haarcascades/haarcascade_frontalface_alt.xml'</span>)<span class=\"comment\"># 加载级联分类器，这里使用的是intel训练出来的人脸识别分类器</span></div><div class=\"line\">    <span class=\"keyword\">if</span> img.ndim == <span class=\"number\">3</span>:<span class=\"comment\"># 判断图片是否是灰度图像，如果img.ndim==3那就表示不是灰度图像</span></div><div class=\"line\">        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<span class=\"comment\"># 将图片转化为灰度图像</span></div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        gray = img</div><div class=\"line\"></div><div class=\"line\">    faces = face_cascade.detectMultiScale(gray, scaleFactor=<span class=\"number\">1.2</span>, minNeighbors=<span class=\"number\">4</span>, minSize=(<span class=\"number\">30</span>, <span class=\"number\">30</span>), flags = cv2.CASCADE_SCALE_IMAGE)<span class=\"comment\"># 核心操作，返回图片中所有的人脸的坐标和宽高度</span></div><div class=\"line\">    result = []</div><div class=\"line\">    <span class=\"keyword\">for</span> (x, y, width, height) <span class=\"keyword\">in</span> faces:</div><div class=\"line\">        <span class=\"keyword\">print</span> (x, y, width, height)</div><div class=\"line\">        result.append((x, y, x+width, y+height))<span class=\"comment\"># 将原始数据，转化为人脸的四个点的坐标</span></div><div class=\"line\">    <span class=\"keyword\">return</span> result</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">drawFaces</span><span class=\"params\">(image_name)</span>:</span></div><div class=\"line\">    faces = detectFaces(image_name)<span class=\"comment\"># 此处的返回值是一个元组，(x, y, width, height)，每一个元组都包括人脸的（x,y）坐标，还有人脸的宽度和高度，有这些数据，我们就可以把人脸标记出来，比如画一个矩形框出来</span></div><div class=\"line\">    <span class=\"keyword\">print</span> faces</div><div class=\"line\">    <span class=\"keyword\">if</span> faces:</div><div class=\"line\">        imga = cv2.imread(image_name)<span class=\"comment\"># 读取图片</span></div><div class=\"line\">        draw_rects(imga, faces, (<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>))<span class=\"comment\"># 画矩形标记</span></div><div class=\"line\">        cv2.imshow(<span class=\"string\">'img'</span>, imga)<span class=\"comment\"># 显示修改后的矩形</span></div><div class=\"line\">        cv2.waitKey(<span class=\"number\">0</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">draw_rects</span><span class=\"params\">(img, rects, color)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> x1, y1, x2, y2 <span class=\"keyword\">in</span> rects:</div><div class=\"line\">        cv2.rectangle(img, (x1, y1), (x2, y2), color, <span class=\"number\">2</span>)<span class=\"comment\"># 调用cv2的矩形函数，画矩形</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">saveFaces</span><span class=\"params\">(image_name)</span>:</span><span class=\"comment\"># 将人脸截取并保存成图片</span></div><div class=\"line\">    faces = detectFaces(image_name)</div><div class=\"line\">    <span class=\"keyword\">if</span> faces:</div><div class=\"line\">        save_dir = image_name.split(<span class=\"string\">'.'</span>)[<span class=\"number\">0</span>] + <span class=\"string\">\"_faces_\"</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(save_dir):<span class=\"comment\"># 检测目录是否存在，如果不存在那就创建目录</span></div><div class=\"line\">            os.mkdir(save_dir)</div><div class=\"line\">        count = <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (x1, y1, x2, y2) <span class=\"keyword\">in</span> faces:</div><div class=\"line\">            imga = cv2.imread(image_name)</div><div class=\"line\">            file_name = os.path.join(save_dir,str(count)+<span class=\"string\">\".jpg\"</span>)</div><div class=\"line\">            roi = imga[y1:y2,x1:x2]<span class=\"comment\"># 这一步是重点，他就像取一个数组一样，把人脸的部分保存出来</span></div><div class=\"line\">            cv2.imwrite(file_name,cv2.cvtColor(cv2.resize(roi,(<span class=\"number\">92</span>,<span class=\"number\">112</span>)), cv2.COLOR_BGR2GRAY))<span class=\"comment\"># 把图片的size重新设定维（92,112），并将图片转换为灰度图像</span></div><div class=\"line\">            <span class=\"comment\"># cv2.imshow('aaa',imga)</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">drawFaces(<span class=\"string\">'../at/chen.jpg'</span>)</div><div class=\"line\">saveFaces(<span class=\"string\">'../at/chen.jpg'</span>)</div></pre></td></tr></table></figure></p>\n<p>这里面的截取人脸并保存的saveFaces函数，我觉得还不错。网上找到的代码，调用了Image库，我的代码全部都是用cv2搞定的，没有用Image库。画矩形也是，我也都是用cv2自带的东西完成的。<br>我用以上代码生成的数据，去进行人脸识别，惨不忍睹。</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"http://blog.csdn.net/u012162613/article/details/43523507\" target=\"_blank\" rel=\"external\">Python-OpenCV人脸检测(代码)</a><br>2 <a href=\"http://wangwei007.blog.51cto.com/68019/1104940\" target=\"_blank\" rel=\"external\">python os.path模块常用方法详解</a></p>\n","excerpt":"<p>这两个星期，都在搞这个，就把代码都分享一下，太烂，就不分享到github了。<br>","more":"<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># !/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8-*-</span></div><div class=\"line\">__author__ = <span class=\"string\">'chen'</span></div><div class=\"line\"><span class=\"keyword\">import</span> cv2</div><div class=\"line\"><span class=\"keyword\">import</span> Image</div><div class=\"line\"><span class=\"keyword\">import</span> ImageDraw</div><div class=\"line\"><span class=\"keyword\">import</span> sys,os</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detectFaces</span><span class=\"params\">(image_name)</span>:</span></div><div class=\"line\">    img = cv2.imread(image_name)</div><div class=\"line\">    face_cascade = cv2.CascadeClassifier(<span class=\"string\">'../data2/haarcascades/haarcascade_frontalface_alt.xml'</span>)<span class=\"comment\"># 加载级联分类器，这里使用的是intel训练出来的人脸识别分类器</span></div><div class=\"line\">    <span class=\"keyword\">if</span> img.ndim == <span class=\"number\">3</span>:<span class=\"comment\"># 判断图片是否是灰度图像，如果img.ndim==3那就表示不是灰度图像</span></div><div class=\"line\">        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<span class=\"comment\"># 将图片转化为灰度图像</span></div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        gray = img</div><div class=\"line\"></div><div class=\"line\">    faces = face_cascade.detectMultiScale(gray, scaleFactor=<span class=\"number\">1.2</span>, minNeighbors=<span class=\"number\">4</span>, minSize=(<span class=\"number\">30</span>, <span class=\"number\">30</span>), flags = cv2.CASCADE_SCALE_IMAGE)<span class=\"comment\"># 核心操作，返回图片中所有的人脸的坐标和宽高度</span></div><div class=\"line\">    result = []</div><div class=\"line\">    <span class=\"keyword\">for</span> (x, y, width, height) <span class=\"keyword\">in</span> faces:</div><div class=\"line\">        <span class=\"keyword\">print</span> (x, y, width, height)</div><div class=\"line\">        result.append((x, y, x+width, y+height))<span class=\"comment\"># 将原始数据，转化为人脸的四个点的坐标</span></div><div class=\"line\">    <span class=\"keyword\">return</span> result</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">drawFaces</span><span class=\"params\">(image_name)</span>:</span></div><div class=\"line\">    faces = detectFaces(image_name)<span class=\"comment\"># 此处的返回值是一个元组，(x, y, width, height)，每一个元组都包括人脸的（x,y）坐标，还有人脸的宽度和高度，有这些数据，我们就可以把人脸标记出来，比如画一个矩形框出来</span></div><div class=\"line\">    <span class=\"keyword\">print</span> faces</div><div class=\"line\">    <span class=\"keyword\">if</span> faces:</div><div class=\"line\">        imga = cv2.imread(image_name)<span class=\"comment\"># 读取图片</span></div><div class=\"line\">        draw_rects(imga, faces, (<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>))<span class=\"comment\"># 画矩形标记</span></div><div class=\"line\">        cv2.imshow(<span class=\"string\">'img'</span>, imga)<span class=\"comment\"># 显示修改后的矩形</span></div><div class=\"line\">        cv2.waitKey(<span class=\"number\">0</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">draw_rects</span><span class=\"params\">(img, rects, color)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> x1, y1, x2, y2 <span class=\"keyword\">in</span> rects:</div><div class=\"line\">        cv2.rectangle(img, (x1, y1), (x2, y2), color, <span class=\"number\">2</span>)<span class=\"comment\"># 调用cv2的矩形函数，画矩形</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">saveFaces</span><span class=\"params\">(image_name)</span>:</span><span class=\"comment\"># 将人脸截取并保存成图片</span></div><div class=\"line\">    faces = detectFaces(image_name)</div><div class=\"line\">    <span class=\"keyword\">if</span> faces:</div><div class=\"line\">        save_dir = image_name.split(<span class=\"string\">'.'</span>)[<span class=\"number\">0</span>] + <span class=\"string\">\"_faces_\"</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(save_dir):<span class=\"comment\"># 检测目录是否存在，如果不存在那就创建目录</span></div><div class=\"line\">            os.mkdir(save_dir)</div><div class=\"line\">        count = <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (x1, y1, x2, y2) <span class=\"keyword\">in</span> faces:</div><div class=\"line\">            imga = cv2.imread(image_name)</div><div class=\"line\">            file_name = os.path.join(save_dir,str(count)+<span class=\"string\">\".jpg\"</span>)</div><div class=\"line\">            roi = imga[y1:y2,x1:x2]<span class=\"comment\"># 这一步是重点，他就像取一个数组一样，把人脸的部分保存出来</span></div><div class=\"line\">            cv2.imwrite(file_name,cv2.cvtColor(cv2.resize(roi,(<span class=\"number\">92</span>,<span class=\"number\">112</span>)), cv2.COLOR_BGR2GRAY))<span class=\"comment\"># 把图片的size重新设定维（92,112），并将图片转换为灰度图像</span></div><div class=\"line\">            <span class=\"comment\"># cv2.imshow('aaa',imga)</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">drawFaces(<span class=\"string\">'../at/chen.jpg'</span>)</div><div class=\"line\">saveFaces(<span class=\"string\">'../at/chen.jpg'</span>)</div></pre></td></tr></table></figure></p>\n<p>这里面的截取人脸并保存的saveFaces函数，我觉得还不错。网上找到的代码，调用了Image库，我的代码全部都是用cv2搞定的，没有用Image库。画矩形也是，我也都是用cv2自带的东西完成的。<br>我用以上代码生成的数据，去进行人脸识别，惨不忍睹。</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"http://blog.csdn.net/u012162613/article/details/43523507\">Python-OpenCV人脸检测(代码)</a><br>2 <a href=\"http://wangwei007.blog.51cto.com/68019/1104940\">python os.path模块常用方法详解</a></p>"},{"title":"配置hexo","date":"2014-11-28T13:07:27.000Z","_content":"经过[上篇博客](http://jackroyal.github.io/2014/11/27/how-to-build-a-blog-with-hexo/),我们搭建起了自己的博客,接下来我们对它做些个性化的定制.\n在hexo中,配置文件一共两个(我的hexo安装在F:/blog/),分别是`F:/blog/_config.yml`和`F:/blog/themes/light/_config.yml`.第一个是全局的配置文件,第二个是主题的配置文件,在继续说之前,我们先来说一下主题安装.<!-- more -->\n# 主题安装\n这个很简单,在hexo的Github的主页上有个主题栏目,<https://github.com/hexojs/hexo/wiki/Themes>,里面列出了很多主题.\n安装方法很简单\n```\n$ git clone <repository> themes/<theme-name>\n```\n举个简单例子,我安装的主题名为`light`,请在`F:/blog/`目录下执行以下代码\n```\n$ git clone https://github.com/hexojs/hexo-theme-light themes/light\n```\n如果你不是在`F:/blog/`中执行,请修改后面的路径themes/light为你的路径.基本原理就是把主题下下来,放在themes目录下就OK了,主题安装完毕.\n# 修改全局配置文件 `F:/blog/_config.yml`\n```\n# Hexo Configuration\n# # Docs: http://hexo.io/docs/configuration.html\n# # Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: 搁浅St的blog  # 站点的名称\nsubtitle: 我最喜欢笨笨   # 站点的副标题\ndescription:             # 站点的描述,有利于搜索引擎的抓取\nauthor: 搁浅St       # 作者\nemail: geqianst@qq.com          # 你的邮箱\nlanguage: zh-CN           # 语言,一般应该都是这个吧\n\n# URL\n# # If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://jackroyal.github.io       # 网站的url,在页面上,可以调用配置中的url参数,就是这个,比如google自定义搜索,需要制定搜索范围,就是通过这个设置的\nroot: /\npermalink: :year/:month/:day/:title/\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post  \ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nhighlight:\n  enable: true\n  line_number: true\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized  \ncategory_map:\ntag_map:\n\n# Archives 默认值为2，这里都修改为1，相应页面就只会列出标题，而非全文\n# # 2: Enable pagination\n# # 1: Disable pagination\n# # 0: Fully Disable\narchive: 1\ncategory: 1\ntag: 1\n\n# Server\n# # Hexo uses Connect as a server\n# # You can customize the logger format as defined in\n# # http://www.senchalabs.org/connect/logger.html\nport: 4000\nserver_ip: localhost\nlogger: false\nlogger_format: dev\n\n# Date / Time format\n# # Hexo uses Moment.js to parse and display date\n# # You can customize the date format as defined in\n# # http://momentjs.com/docs/# /displaying/format/\ndate_format: MMM D YYYY\ntime_format: H:mm:ss\n\n# Pagination\n# # Set per_page to 0 to disable pagination\nper_page: 5\npagination_dir: page\n\n# Disqus\ndisqus_shortname:\n# 这一行是我添加的duoshuo_shortname,因为天朝disqus不好用,用多说\nduoshuo_shortname: jackroyal\n# Extensions\n# # Plugins: https://github.com/hexojs/hexo/wiki/Plugins\n# # Themes: https://github.com/hexojs/hexo/wiki/Themes\ntheme: light\nexclude_generator:\n\n# Deployment  发布相关设置\n# # Docs: http://hexo.io/docs/deployment.html\ndeploy:\n  type: github\n  repo: https://github.com/Jackroyal/Jackroyal.github.io.git\n  branch: master\n```\n至此,全局配置文件修改完毕,你可以`hexo g`和`hexo s`进行查看.\n```\nmenu:# 导航栏的设置默认只有这两个,还可以添加更多的导航\n  Home: /\n  Archives: /archives\n# 它就是你页面右边的侧边项目,比如搜索之类,你可以根据自己的需求进行修改,你能用几个widgets可以在F:\\blog\\themes\\light\\layout\\_widget中进行查看\nwidgets:# 我这里使用了所有的widgets\n- search\n- category\n- tag\n- recent_posts\n- tagcloud\n\nexcerpt_link: Read More  # 可以换成中文的  阅读全文\n\ntwitter:\n  username:\n  show_replies: false\n  tweet_count: 5\n//默认的一个分享组件,因为主要针对国外,不适合国内我们不使用它\naddthis:\n  enable: false  # 把true改为false\n  pubid:\n  facebook: true\n  twitter: true\n  google: true\n  pinterest: true\n\nfancybox: true\n\ngoogle_analytics:\nrss:\nduoshuo_shortname: jackroyal  # 多说的用户名\n\ncomment_provider:\n# Facebook comment\nfacebook:\n  appid: 123456789012345\n  comment_count: 5\n  comment_width: 840\n  comment_colorscheme: light\n```\n至此,配置文件修改完毕,上面提到了我们不适用disqus的评论组件,使用多说,下面教大家来配置多说\n\n# 创建多说\n首先我们去多说注册一个账号,[点击这里](http://duoshuo.com/ \"多说官网\")\n我们点击[我要安装](http://duoshuo.com/create-site/ \"我要安装\"),界面如下\n![duoshuo 创建界面](http://ww4.sinaimg.cn/large/692869a3gw1emtdlnpsqaj20wo0lp783.jpg \"创建多说账号\")\nshortname就是jackroyal,创建完成后,跳转到如下界面\n![获取多说代码](http://ww1.sinaimg.cn/large/692869a3gw1emtdp96x54j20us0jxn18.jpg \"获取多说代码\")\n我们选择`通用代码`,点击复制,就行了\n# 配置多说\n这里说一个前提,我使用的是light主题,如果你用的是其他主题,接下来的设置可能给我有点区别,但是原理差不多,参考看看\n1. 我们打开`F:\\blog\\themes\\light\\layout\\_partial\\comment.ejs`这个文件,然后修改后代码如下(如果你不是light主题,可能跟这个不一样,你去找下包含comment的section在哪里,改法还是这样.例如系统默认的landscape主题,下面这段代码就是在article.ejs,它没有comment.ejs)\n```\n<% if (page.comments){ %>\n<!-- 这里添加了一个导航,页面的下面会有一个上一篇,下一篇 -->\n <nav id=\"pagination\" >\n    <% if (page.prev) { %>\n    <a href=\"<%- config.root %><%- page.prev.path %>\" class=\"alignleft prev\" > <%=page.prev.title %> </a>\n    <% } %>\n    <% if (page.next) { %>\n    <a href=\"<%- config.root %><%- page.next.path %>\" class=\"alignright next\" > <%=page.next.title %> </a>\n    <% } %>\n    <div class=\"clearfix\"></div>\n</nav>\n<!-- 导航结束 -->\n<section id=\"comments\">\n<!-- 这里是多说的代码,直接把你的代码粘贴到这里就行 -->\n    <!-- 多说评论框 start -->\n    <div class=\"ds-thread\" data-thread-key=\"<%= page.layout %>-<%= page.slug %>\" data-title=\"<%= page.title %>\" data-url=\"<%= page.permalink %>\"></div>\n    <!-- 多说评论框 end -->\n    <!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n    <script type=\"text/javascript\">\n    var duoshuoQuery = {short_name:'<%= config.duoshuo_shortname %>'};\n      (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0]\n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n      })();\n      </script>\n    <!-- 多说公共JS代码 end -->\n  <!-- 多说结束 -->\n  </section>\n<% } %>\n```\n眼尖的同学可能已经看到我的上面第16行代码与你们的不同,这行代码包括了页面的标题和url,它会根据hexo的配置,由hexo动态生成,所以你把你的代码替换成我的这行代码.\n```\n<div class=\"ds-thread\" data-thread-key=\"<%= page.layout %>-<%= page.slug %>\" data-title=\"<%= page.title %>\" data-url=\"<%= page.permalink %>\"></div>\n```\n至此,多说添加完毕\n# 修复bug\n我发现light的主题貌似有个小bug,在`F:\\blog\\themes\\light\\layout\\_partial\\article.ejs`中间第27行有这样一行代码\n```\n        <% if (item.comment && config.disqus_shortname){ %>\n```\n首先我们,替换config.disqus_shortname为config.duoshuo_shortname.\n然后修改`item.comment`为`item.comments`,因为系统中没有comment这个变量,只有comments这个变量,如果不修改comments,那么`item.comment`一直为假,所以一直不成立,就不会显示comments字段了.修改后代码如下\n```\n <% if (item.comments && config.duoshuo_shortname){ %>\n```\n\n产生的效果如图![开启和关闭comment的区别](http://ww3.sinaimg.cn/large/692869a3gw1emteitia5uj20tl0fn412.jpg \"开启和关闭comment的区别\").\n至此,配置hexo,打完收工\nenjoy it\n\n---\n# 参考文献\n1 <http://zipperary.com/2013/05/29/hexo-guide-3/>\n2 [duoshuo官方Hexo使用教程](http://dev.duoshuo.com/threads/541d3b2b40b5abcd2e4df0e9)\n\n","source":"_posts/custom-hexo.md","raw":"title: 配置hexo\ndate: 2014-11-28 21:07:27\ntags:\n- hexo\ncategories: hexo\n---\n经过[上篇博客](http://jackroyal.github.io/2014/11/27/how-to-build-a-blog-with-hexo/),我们搭建起了自己的博客,接下来我们对它做些个性化的定制.\n在hexo中,配置文件一共两个(我的hexo安装在F:/blog/),分别是`F:/blog/_config.yml`和`F:/blog/themes/light/_config.yml`.第一个是全局的配置文件,第二个是主题的配置文件,在继续说之前,我们先来说一下主题安装.<!-- more -->\n# 主题安装\n这个很简单,在hexo的Github的主页上有个主题栏目,<https://github.com/hexojs/hexo/wiki/Themes>,里面列出了很多主题.\n安装方法很简单\n```\n$ git clone <repository> themes/<theme-name>\n```\n举个简单例子,我安装的主题名为`light`,请在`F:/blog/`目录下执行以下代码\n```\n$ git clone https://github.com/hexojs/hexo-theme-light themes/light\n```\n如果你不是在`F:/blog/`中执行,请修改后面的路径themes/light为你的路径.基本原理就是把主题下下来,放在themes目录下就OK了,主题安装完毕.\n# 修改全局配置文件 `F:/blog/_config.yml`\n```\n# Hexo Configuration\n# # Docs: http://hexo.io/docs/configuration.html\n# # Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: 搁浅St的blog  # 站点的名称\nsubtitle: 我最喜欢笨笨   # 站点的副标题\ndescription:             # 站点的描述,有利于搜索引擎的抓取\nauthor: 搁浅St       # 作者\nemail: geqianst@qq.com          # 你的邮箱\nlanguage: zh-CN           # 语言,一般应该都是这个吧\n\n# URL\n# # If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://jackroyal.github.io       # 网站的url,在页面上,可以调用配置中的url参数,就是这个,比如google自定义搜索,需要制定搜索范围,就是通过这个设置的\nroot: /\npermalink: :year/:month/:day/:title/\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post  \ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nhighlight:\n  enable: true\n  line_number: true\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized  \ncategory_map:\ntag_map:\n\n# Archives 默认值为2，这里都修改为1，相应页面就只会列出标题，而非全文\n# # 2: Enable pagination\n# # 1: Disable pagination\n# # 0: Fully Disable\narchive: 1\ncategory: 1\ntag: 1\n\n# Server\n# # Hexo uses Connect as a server\n# # You can customize the logger format as defined in\n# # http://www.senchalabs.org/connect/logger.html\nport: 4000\nserver_ip: localhost\nlogger: false\nlogger_format: dev\n\n# Date / Time format\n# # Hexo uses Moment.js to parse and display date\n# # You can customize the date format as defined in\n# # http://momentjs.com/docs/# /displaying/format/\ndate_format: MMM D YYYY\ntime_format: H:mm:ss\n\n# Pagination\n# # Set per_page to 0 to disable pagination\nper_page: 5\npagination_dir: page\n\n# Disqus\ndisqus_shortname:\n# 这一行是我添加的duoshuo_shortname,因为天朝disqus不好用,用多说\nduoshuo_shortname: jackroyal\n# Extensions\n# # Plugins: https://github.com/hexojs/hexo/wiki/Plugins\n# # Themes: https://github.com/hexojs/hexo/wiki/Themes\ntheme: light\nexclude_generator:\n\n# Deployment  发布相关设置\n# # Docs: http://hexo.io/docs/deployment.html\ndeploy:\n  type: github\n  repo: https://github.com/Jackroyal/Jackroyal.github.io.git\n  branch: master\n```\n至此,全局配置文件修改完毕,你可以`hexo g`和`hexo s`进行查看.\n```\nmenu:# 导航栏的设置默认只有这两个,还可以添加更多的导航\n  Home: /\n  Archives: /archives\n# 它就是你页面右边的侧边项目,比如搜索之类,你可以根据自己的需求进行修改,你能用几个widgets可以在F:\\blog\\themes\\light\\layout\\_widget中进行查看\nwidgets:# 我这里使用了所有的widgets\n- search\n- category\n- tag\n- recent_posts\n- tagcloud\n\nexcerpt_link: Read More  # 可以换成中文的  阅读全文\n\ntwitter:\n  username:\n  show_replies: false\n  tweet_count: 5\n//默认的一个分享组件,因为主要针对国外,不适合国内我们不使用它\naddthis:\n  enable: false  # 把true改为false\n  pubid:\n  facebook: true\n  twitter: true\n  google: true\n  pinterest: true\n\nfancybox: true\n\ngoogle_analytics:\nrss:\nduoshuo_shortname: jackroyal  # 多说的用户名\n\ncomment_provider:\n# Facebook comment\nfacebook:\n  appid: 123456789012345\n  comment_count: 5\n  comment_width: 840\n  comment_colorscheme: light\n```\n至此,配置文件修改完毕,上面提到了我们不适用disqus的评论组件,使用多说,下面教大家来配置多说\n\n# 创建多说\n首先我们去多说注册一个账号,[点击这里](http://duoshuo.com/ \"多说官网\")\n我们点击[我要安装](http://duoshuo.com/create-site/ \"我要安装\"),界面如下\n![duoshuo 创建界面](http://ww4.sinaimg.cn/large/692869a3gw1emtdlnpsqaj20wo0lp783.jpg \"创建多说账号\")\nshortname就是jackroyal,创建完成后,跳转到如下界面\n![获取多说代码](http://ww1.sinaimg.cn/large/692869a3gw1emtdp96x54j20us0jxn18.jpg \"获取多说代码\")\n我们选择`通用代码`,点击复制,就行了\n# 配置多说\n这里说一个前提,我使用的是light主题,如果你用的是其他主题,接下来的设置可能给我有点区别,但是原理差不多,参考看看\n1. 我们打开`F:\\blog\\themes\\light\\layout\\_partial\\comment.ejs`这个文件,然后修改后代码如下(如果你不是light主题,可能跟这个不一样,你去找下包含comment的section在哪里,改法还是这样.例如系统默认的landscape主题,下面这段代码就是在article.ejs,它没有comment.ejs)\n```\n<% if (page.comments){ %>\n<!-- 这里添加了一个导航,页面的下面会有一个上一篇,下一篇 -->\n <nav id=\"pagination\" >\n    <% if (page.prev) { %>\n    <a href=\"<%- config.root %><%- page.prev.path %>\" class=\"alignleft prev\" > <%=page.prev.title %> </a>\n    <% } %>\n    <% if (page.next) { %>\n    <a href=\"<%- config.root %><%- page.next.path %>\" class=\"alignright next\" > <%=page.next.title %> </a>\n    <% } %>\n    <div class=\"clearfix\"></div>\n</nav>\n<!-- 导航结束 -->\n<section id=\"comments\">\n<!-- 这里是多说的代码,直接把你的代码粘贴到这里就行 -->\n    <!-- 多说评论框 start -->\n    <div class=\"ds-thread\" data-thread-key=\"<%= page.layout %>-<%= page.slug %>\" data-title=\"<%= page.title %>\" data-url=\"<%= page.permalink %>\"></div>\n    <!-- 多说评论框 end -->\n    <!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n    <script type=\"text/javascript\">\n    var duoshuoQuery = {short_name:'<%= config.duoshuo_shortname %>'};\n      (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0]\n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n      })();\n      </script>\n    <!-- 多说公共JS代码 end -->\n  <!-- 多说结束 -->\n  </section>\n<% } %>\n```\n眼尖的同学可能已经看到我的上面第16行代码与你们的不同,这行代码包括了页面的标题和url,它会根据hexo的配置,由hexo动态生成,所以你把你的代码替换成我的这行代码.\n```\n<div class=\"ds-thread\" data-thread-key=\"<%= page.layout %>-<%= page.slug %>\" data-title=\"<%= page.title %>\" data-url=\"<%= page.permalink %>\"></div>\n```\n至此,多说添加完毕\n# 修复bug\n我发现light的主题貌似有个小bug,在`F:\\blog\\themes\\light\\layout\\_partial\\article.ejs`中间第27行有这样一行代码\n```\n        <% if (item.comment && config.disqus_shortname){ %>\n```\n首先我们,替换config.disqus_shortname为config.duoshuo_shortname.\n然后修改`item.comment`为`item.comments`,因为系统中没有comment这个变量,只有comments这个变量,如果不修改comments,那么`item.comment`一直为假,所以一直不成立,就不会显示comments字段了.修改后代码如下\n```\n <% if (item.comments && config.duoshuo_shortname){ %>\n```\n\n产生的效果如图![开启和关闭comment的区别](http://ww3.sinaimg.cn/large/692869a3gw1emteitia5uj20tl0fn412.jpg \"开启和关闭comment的区别\").\n至此,配置hexo,打完收工\nenjoy it\n\n---\n# 参考文献\n1 <http://zipperary.com/2013/05/29/hexo-guide-3/>\n2 [duoshuo官方Hexo使用教程](http://dev.duoshuo.com/threads/541d3b2b40b5abcd2e4df0e9)\n\n","slug":"custom-hexo","published":1,"updated":"2015-10-29T06:40:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yol000mx8cdf186kgo8","content":"<p>经过<a href=\"http://jackroyal.github.io/2014/11/27/how-to-build-a-blog-with-hexo/\" target=\"_blank\" rel=\"external\">上篇博客</a>,我们搭建起了自己的博客,接下来我们对它做些个性化的定制.<br>在hexo中,配置文件一共两个(我的hexo安装在F:/blog/),分别是<code>F:/blog/_config.yml</code>和<code>F:/blog/themes/light/_config.yml</code>.第一个是全局的配置文件,第二个是主题的配置文件,在继续说之前,我们先来说一下主题安装.<a id=\"more\"></a></p>\n<h1 id=\"主题安装\"><a href=\"#主题安装\" class=\"headerlink\" title=\"主题安装\"></a>主题安装</h1><p>这个很简单,在hexo的Github的主页上有个主题栏目,<a href=\"https://github.com/hexojs/hexo/wiki/Themes\" target=\"_blank\" rel=\"external\">https://github.com/hexojs/hexo/wiki/Themes</a>,里面列出了很多主题.<br>安装方法很简单<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">&lt;repository</span>&gt; themes/<span class=\"tag\">&lt;theme-name&gt;</span></div></pre></td></tr></table></figure></p>\n<p>举个简单例子,我安装的主题名为<code>light</code>,请在<code>F:/blog/</code>目录下执行以下代码<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">https</span>://github.com/hexojs/hexo-theme-light themes/light</div></pre></td></tr></table></figure></p>\n<p>如果你不是在<code>F:/blog/</code>中执行,请修改后面的路径themes/light为你的路径.基本原理就是把主题下下来,放在themes目录下就OK了,主题安装完毕.</p>\n<h1 id=\"修改全局配置文件-F-blog-config-yml\"><a href=\"#修改全局配置文件-F-blog-config-yml\" class=\"headerlink\" title=\"修改全局配置文件 F:/blog/_config.yml\"></a>修改全局配置文件 <code>F:/blog/_config.yml</code></h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Hexo Configuration</span></div><div class=\"line\"><span class=\"comment\"># # Docs: http://hexo.io/docs/configuration.html</span></div><div class=\"line\"><span class=\"comment\"># # Source: https://github.com/hexojs/hexo/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Site</span></div><div class=\"line\"><span class=\"attr\">title:</span> 搁浅St的blog  <span class=\"comment\"># 站点的名称</span></div><div class=\"line\"><span class=\"attr\">subtitle:</span> 我最喜欢笨笨   <span class=\"comment\"># 站点的副标题</span></div><div class=\"line\"><span class=\"attr\">description:</span>             <span class=\"comment\"># 站点的描述,有利于搜索引擎的抓取</span></div><div class=\"line\"><span class=\"attr\">author:</span> 搁浅St       <span class=\"comment\"># 作者</span></div><div class=\"line\"><span class=\"attr\">email:</span> geqianst@qq.com          <span class=\"comment\"># 你的邮箱</span></div><div class=\"line\"><span class=\"attr\">language:</span> zh-CN           <span class=\"comment\"># 语言,一般应该都是这个吧</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># URL</span></div><div class=\"line\"><span class=\"comment\"># # If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class=\"line\"><span class=\"attr\">url:</span> http://jackroyal.github.io       <span class=\"comment\"># 网站的url,在页面上,可以调用配置中的url参数,就是这个,比如google自定义搜索,需要制定搜索范围,就是通过这个设置的</span></div><div class=\"line\"><span class=\"attr\">root:</span> /</div><div class=\"line\"><span class=\"attr\">permalink:</span> :year/:month/:day/:title/</div><div class=\"line\"><span class=\"attr\">tag_dir:</span> tags</div><div class=\"line\"><span class=\"attr\">archive_dir:</span> archives</div><div class=\"line\"><span class=\"attr\">category_dir:</span> categories</div><div class=\"line\"><span class=\"attr\">code_dir:</span> downloads/code</div><div class=\"line\"><span class=\"attr\">permalink_defaults:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Directory</span></div><div class=\"line\"><span class=\"attr\">source_dir:</span> source</div><div class=\"line\"><span class=\"attr\">public_dir:</span> public</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Writing</span></div><div class=\"line\"><span class=\"attr\">new_post_name:</span> :title.md <span class=\"comment\"># File name of new posts</span></div><div class=\"line\"><span class=\"attr\">default_layout:</span> post  </div><div class=\"line\"><span class=\"attr\">titlecase:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Transform title into titlecase</span></div><div class=\"line\"><span class=\"attr\">external_link:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Open external links in new tab</span></div><div class=\"line\"><span class=\"attr\">filename_case:</span> <span class=\"number\">0</span></div><div class=\"line\"><span class=\"attr\">render_drafts:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">relative_link:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">highlight:</span></div><div class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  line_number:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  tab_replace:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Category &amp; Tag</span></div><div class=\"line\"><span class=\"attr\">default_category:</span> uncategorized  </div><div class=\"line\"><span class=\"attr\">category_map:</span></div><div class=\"line\"><span class=\"attr\">tag_map:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Archives 默认值为2，这里都修改为1，相应页面就只会列出标题，而非全文</span></div><div class=\"line\"><span class=\"comment\"># # 2: Enable pagination</span></div><div class=\"line\"><span class=\"comment\"># # 1: Disable pagination</span></div><div class=\"line\"><span class=\"comment\"># # 0: Fully Disable</span></div><div class=\"line\"><span class=\"attr\">archive:</span> <span class=\"number\">1</span></div><div class=\"line\"><span class=\"attr\">category:</span> <span class=\"number\">1</span></div><div class=\"line\"><span class=\"attr\">tag:</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Server</span></div><div class=\"line\"><span class=\"comment\"># # Hexo uses Connect as a server</span></div><div class=\"line\"><span class=\"comment\"># # You can customize the logger format as defined in</span></div><div class=\"line\"><span class=\"comment\"># # http://www.senchalabs.org/connect/logger.html</span></div><div class=\"line\"><span class=\"attr\">port:</span> <span class=\"number\">4000</span></div><div class=\"line\"><span class=\"attr\">server_ip:</span> localhost</div><div class=\"line\"><span class=\"attr\">logger:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">logger_format:</span> dev</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Date / Time format</span></div><div class=\"line\"><span class=\"comment\"># # Hexo uses Moment.js to parse and display date</span></div><div class=\"line\"><span class=\"comment\"># # You can customize the date format as defined in</span></div><div class=\"line\"><span class=\"comment\"># # http://momentjs.com/docs/# /displaying/format/</span></div><div class=\"line\"><span class=\"attr\">date_format:</span> MMM D YYYY</div><div class=\"line\"><span class=\"attr\">time_format:</span> H:mm:ss</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Pagination</span></div><div class=\"line\"><span class=\"comment\"># # Set per_page to 0 to disable pagination</span></div><div class=\"line\"><span class=\"attr\">per_page:</span> <span class=\"number\">5</span></div><div class=\"line\"><span class=\"attr\">pagination_dir:</span> page</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Disqus</span></div><div class=\"line\"><span class=\"attr\">disqus_shortname:</span></div><div class=\"line\"><span class=\"comment\"># 这一行是我添加的duoshuo_shortname,因为天朝disqus不好用,用多说</span></div><div class=\"line\"><span class=\"attr\">duoshuo_shortname:</span> jackroyal</div><div class=\"line\"><span class=\"comment\"># Extensions</span></div><div class=\"line\"><span class=\"comment\"># # Plugins: https://github.com/hexojs/hexo/wiki/Plugins</span></div><div class=\"line\"><span class=\"comment\"># # Themes: https://github.com/hexojs/hexo/wiki/Themes</span></div><div class=\"line\"><span class=\"attr\">theme:</span> light</div><div class=\"line\"><span class=\"attr\">exclude_generator:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Deployment  发布相关设置</span></div><div class=\"line\"><span class=\"comment\"># # Docs: http://hexo.io/docs/deployment.html</span></div><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">  type:</span> github</div><div class=\"line\"><span class=\"attr\">  repo:</span> https://github.com/Jackroyal/Jackroyal.github.io.git</div><div class=\"line\"><span class=\"attr\">  branch:</span> master</div></pre></td></tr></table></figure>\n<p>至此,全局配置文件修改完毕,你可以<code>hexo g</code>和<code>hexo s</code>进行查看.<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">menu:</span><span class=\"comment\"># 导航栏的设置默认只有这两个,还可以添加更多的导航</span></div><div class=\"line\"><span class=\"attr\">  Home:</span> /</div><div class=\"line\"><span class=\"attr\">  Archives:</span> /archives</div><div class=\"line\"><span class=\"comment\"># 它就是你页面右边的侧边项目,比如搜索之类,你可以根据自己的需求进行修改,你能用几个widgets可以在F:\\blog\\themes\\light\\layout\\_widget中进行查看</span></div><div class=\"line\"><span class=\"attr\">widgets:</span><span class=\"comment\"># 我这里使用了所有的widgets</span></div><div class=\"line\"><span class=\"bullet\">-</span> search</div><div class=\"line\"><span class=\"bullet\">-</span> category</div><div class=\"line\"><span class=\"bullet\">-</span> tag</div><div class=\"line\"><span class=\"bullet\">-</span> recent_posts</div><div class=\"line\"><span class=\"bullet\">-</span> tagcloud</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">excerpt_link:</span> Read More  <span class=\"comment\"># 可以换成中文的  阅读全文</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">twitter:</span></div><div class=\"line\"><span class=\"attr\">  username:</span></div><div class=\"line\"><span class=\"attr\">  show_replies:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">  tweet_count:</span> <span class=\"number\">5</span></div><div class=\"line\">//默认的一个分享组件,因为主要针对国外,不适合国内我们不使用它</div><div class=\"line\"><span class=\"attr\">addthis:</span></div><div class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">false</span>  <span class=\"comment\"># 把true改为false</span></div><div class=\"line\"><span class=\"attr\">  pubid:</span></div><div class=\"line\"><span class=\"attr\">  facebook:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  twitter:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  google:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  pinterest:</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">fancybox:</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">google_analytics:</span></div><div class=\"line\"><span class=\"attr\">rss:</span></div><div class=\"line\"><span class=\"attr\">duoshuo_shortname:</span> jackroyal  <span class=\"comment\"># 多说的用户名</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">comment_provider:</span></div><div class=\"line\"><span class=\"comment\"># Facebook comment</span></div><div class=\"line\"><span class=\"attr\">facebook:</span></div><div class=\"line\"><span class=\"attr\">  appid:</span> <span class=\"number\">123456789012345</span></div><div class=\"line\"><span class=\"attr\">  comment_count:</span> <span class=\"number\">5</span></div><div class=\"line\"><span class=\"attr\">  comment_width:</span> <span class=\"number\">840</span></div><div class=\"line\"><span class=\"attr\">  comment_colorscheme:</span> light</div></pre></td></tr></table></figure></p>\n<p>至此,配置文件修改完毕,上面提到了我们不适用disqus的评论组件,使用多说,下面教大家来配置多说</p>\n<h1 id=\"创建多说\"><a href=\"#创建多说\" class=\"headerlink\" title=\"创建多说\"></a>创建多说</h1><p>首先我们去多说注册一个账号,<a href=\"http://duoshuo.com/\" title=\"多说官网\" target=\"_blank\" rel=\"external\">点击这里</a><br>我们点击<a href=\"http://duoshuo.com/create-site/\" title=\"我要安装\" target=\"_blank\" rel=\"external\">我要安装</a>,界面如下<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1emtdlnpsqaj20wo0lp783.jpg\" alt=\"duoshuo 创建界面\" title=\"创建多说账号\"><br>shortname就是jackroyal,创建完成后,跳转到如下界面<br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1emtdp96x54j20us0jxn18.jpg\" alt=\"获取多说代码\" title=\"获取多说代码\"><br>我们选择<code>通用代码</code>,点击复制,就行了</p>\n<h1 id=\"配置多说\"><a href=\"#配置多说\" class=\"headerlink\" title=\"配置多说\"></a>配置多说</h1><p>这里说一个前提,我使用的是light主题,如果你用的是其他主题,接下来的设置可能给我有点区别,但是原理差不多,参考看看</p>\n<ol>\n<li>我们打开<code>F:\\blog\\themes\\light\\layout\\_partial\\comment.ejs</code>这个文件,然后修改后代码如下(如果你不是light主题,可能跟这个不一样,你去找下包含comment的section在哪里,改法还是这样.例如系统默认的landscape主题,下面这段代码就是在article.ejs,它没有comment.ejs)<figure class=\"highlight erb\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><span class=\"ruby\"> <span class=\"keyword\">if</span> (page.comments)&#123; </span><span class=\"xml\"><span class=\"tag\">%&gt;</span></span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 这里添加了一个导航,页面的下面会有一个上一篇,下一篇 --&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pagination\"</span> &gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%</span></span><span class=\"ruby\"> <span class=\"keyword\">if</span> (page.prev) &#123; </span><span class=\"xml\"><span class=\"tag\">%&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;%-</span></span><span class=\"ruby\"> config.root </span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">%&gt;&lt;%-</span></span></span><span class=\"ruby\"> page.prev.path </span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">%&gt;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"alignleft prev\"</span> &gt;</span> <span class=\"tag\">&lt;<span class=\"name\">%=</span></span></span><span class=\"ruby\">page.prev.title </span><span class=\"xml\"><span class=\"tag\">%&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%</span></span><span class=\"ruby\"> &#125; </span><span class=\"xml\"><span class=\"tag\">%&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%</span></span><span class=\"ruby\"> <span class=\"keyword\">if</span> (page.<span class=\"keyword\">next</span>) &#123; </span><span class=\"xml\"><span class=\"tag\">%&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;%-</span></span><span class=\"ruby\"> config.root </span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">%&gt;&lt;%-</span></span></span><span class=\"ruby\"> page.<span class=\"keyword\">next</span>.path </span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">%&gt;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"alignright next\"</span> &gt;</span> <span class=\"tag\">&lt;<span class=\"name\">%=</span></span></span><span class=\"ruby\">page.<span class=\"keyword\">next</span>.title </span><span class=\"xml\"><span class=\"tag\">%&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%</span></span><span class=\"ruby\"> &#125; </span><span class=\"xml\"><span class=\"tag\">%&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"clearfix\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 导航结束 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"comments\"</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 这里是多说的代码,直接把你的代码粘贴到这里就行 --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 多说评论框 start --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ds-thread\"</span> <span class=\"attr\">data-thread-key</span>=<span class=\"string\">\"&lt;%=</span></span><span class=\"ruby\"> page.layout </span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">%&gt;-&lt;%=</span></span></span><span class=\"ruby\"> page.slug </span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">%&gt;\"</span> <span class=\"attr\">data-title</span>=<span class=\"string\">\"&lt;%=</span></span></span><span class=\"ruby\"> page.title </span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">%&gt;\"</span> <span class=\"attr\">data-url</span>=<span class=\"string\">\"&lt;%=</span></span></span><span class=\"ruby\"> page.permalink </span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">%&gt;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 多说评论框 end --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\"></span></div><div class=\"line\">    <span class=\"keyword\">var</span> duoshuoQuery = &#123;short_name:<span class=\"string\">'&lt;%=</span><span class=\"ruby\"> config.duoshuo_shortname </span><span class=\"xml\"><span class=\"undefined\">%&gt;'&#125;;</span></span></div><div class=\"line\">      (function() &#123;</div><div class=\"line\">        var ds = document.createElement('script');</div><div class=\"line\">        ds.type = 'text/javascript';ds.async = true;</div><div class=\"line\">        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';</div><div class=\"line\">        ds.charset = 'UTF-8';</div><div class=\"line\">        (document.getElementsByTagName('head')[0]</div><div class=\"line\">         || document.getElementsByTagName('body')[0]).appendChild(ds);</div><div class=\"line\">      &#125;)();</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 多说公共JS代码 end --&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 多说结束 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span><span class=\"ruby\"> &#125; </span><span class=\"xml\"><span class=\"tag\">%&gt;</span></span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>眼尖的同学可能已经看到我的上面第16行代码与你们的不同,这行代码包括了页面的标题和url,它会根据hexo的配置,由hexo动态生成,所以你把你的代码替换成我的这行代码.<br><figure class=\"highlight erb\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ds-thread\"</span> <span class=\"attr\">data-thread-key</span>=<span class=\"string\">\"&lt;%=</span></span></span><span class=\"ruby\"> page.layout </span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">%&gt;-&lt;%=</span></span></span><span class=\"ruby\"> page.slug </span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">%&gt;\"</span> <span class=\"attr\">data-title</span>=<span class=\"string\">\"&lt;%=</span></span></span><span class=\"ruby\"> page.title </span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">%&gt;\"</span> <span class=\"attr\">data-url</span>=<span class=\"string\">\"&lt;%=</span></span></span><span class=\"ruby\"> page.permalink </span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">%&gt;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div></pre></td></tr></table></figure></p>\n<p>至此,多说添加完毕</p>\n<h1 id=\"修复bug\"><a href=\"#修复bug\" class=\"headerlink\" title=\"修复bug\"></a>修复bug</h1><p>我发现light的主题貌似有个小bug,在<code>F:\\blog\\themes\\light\\layout\\_partial\\article.ejs</code>中间第27行有这样一行代码<br><figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"meta\">%</span> <span class=\"keyword\">if</span> <span class=\"comment\">(item.comment &amp;&amp; config.disqus_shortname)</span>&#123; <span class=\"meta\">%</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>首先我们,替换config.disqus_shortname为config.duoshuo_shortname.<br>然后修改<code>item.comment</code>为<code>item.comments</code>,因为系统中没有comment这个变量,只有comments这个变量,如果不修改comments,那么<code>item.comment</code>一直为假,所以一直不成立,就不会显示comments字段了.修改后代码如下<br><figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"meta\">%</span> <span class=\"keyword\">if</span> <span class=\"comment\">(item.comments &amp;&amp; config.duoshuo_shortname)</span>&#123; <span class=\"meta\">%</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>产生的效果如图<img src=\"http://ww3.sinaimg.cn/large/692869a3gw1emteitia5uj20tl0fn412.jpg\" alt=\"开启和关闭comment的区别\" title=\"开启和关闭comment的区别\">.<br>至此,配置hexo,打完收工<br>enjoy it</p>\n<hr>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"http://zipperary.com/2013/05/29/hexo-guide-3/\" target=\"_blank\" rel=\"external\">http://zipperary.com/2013/05/29/hexo-guide-3/</a><br>2 <a href=\"http://dev.duoshuo.com/threads/541d3b2b40b5abcd2e4df0e9\" target=\"_blank\" rel=\"external\">duoshuo官方Hexo使用教程</a></p>\n","excerpt":"<p>经过<a href=\"http://jackroyal.github.io/2014/11/27/how-to-build-a-blog-with-hexo/\">上篇博客</a>,我们搭建起了自己的博客,接下来我们对它做些个性化的定制.<br>在hexo中,配置文件一共两个(我的hexo安装在F:/blog/),分别是<code>F:/blog/_config.yml</code>和<code>F:/blog/themes/light/_config.yml</code>.第一个是全局的配置文件,第二个是主题的配置文件,在继续说之前,我们先来说一下主题安装.","more":"</p>\n<h1 id=\"主题安装\"><a href=\"#主题安装\" class=\"headerlink\" title=\"主题安装\"></a>主题安装</h1><p>这个很简单,在hexo的Github的主页上有个主题栏目,<a href=\"https://github.com/hexojs/hexo/wiki/Themes\">https://github.com/hexojs/hexo/wiki/Themes</a>,里面列出了很多主题.<br>安装方法很简单<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">&lt;repository</span>&gt; themes/<span class=\"tag\">&lt;theme-name&gt;</span></div></pre></td></tr></table></figure></p>\n<p>举个简单例子,我安装的主题名为<code>light</code>,请在<code>F:/blog/</code>目录下执行以下代码<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">https</span>://github.com/hexojs/hexo-theme-light themes/light</div></pre></td></tr></table></figure></p>\n<p>如果你不是在<code>F:/blog/</code>中执行,请修改后面的路径themes/light为你的路径.基本原理就是把主题下下来,放在themes目录下就OK了,主题安装完毕.</p>\n<h1 id=\"修改全局配置文件-F-blog-config-yml\"><a href=\"#修改全局配置文件-F-blog-config-yml\" class=\"headerlink\" title=\"修改全局配置文件 F:/blog/_config.yml\"></a>修改全局配置文件 <code>F:/blog/_config.yml</code></h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Hexo Configuration</span></div><div class=\"line\"><span class=\"comment\"># # Docs: http://hexo.io/docs/configuration.html</span></div><div class=\"line\"><span class=\"comment\"># # Source: https://github.com/hexojs/hexo/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Site</span></div><div class=\"line\"><span class=\"attr\">title:</span> 搁浅St的blog  <span class=\"comment\"># 站点的名称</span></div><div class=\"line\"><span class=\"attr\">subtitle:</span> 我最喜欢笨笨   <span class=\"comment\"># 站点的副标题</span></div><div class=\"line\"><span class=\"attr\">description:</span>             <span class=\"comment\"># 站点的描述,有利于搜索引擎的抓取</span></div><div class=\"line\"><span class=\"attr\">author:</span> 搁浅St       <span class=\"comment\"># 作者</span></div><div class=\"line\"><span class=\"attr\">email:</span> geqianst@qq.com          <span class=\"comment\"># 你的邮箱</span></div><div class=\"line\"><span class=\"attr\">language:</span> zh-CN           <span class=\"comment\"># 语言,一般应该都是这个吧</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># URL</span></div><div class=\"line\"><span class=\"comment\"># # If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class=\"line\"><span class=\"attr\">url:</span> http://jackroyal.github.io       <span class=\"comment\"># 网站的url,在页面上,可以调用配置中的url参数,就是这个,比如google自定义搜索,需要制定搜索范围,就是通过这个设置的</span></div><div class=\"line\"><span class=\"attr\">root:</span> /</div><div class=\"line\"><span class=\"attr\">permalink:</span> :year/:month/:day/:title/</div><div class=\"line\"><span class=\"attr\">tag_dir:</span> tags</div><div class=\"line\"><span class=\"attr\">archive_dir:</span> archives</div><div class=\"line\"><span class=\"attr\">category_dir:</span> categories</div><div class=\"line\"><span class=\"attr\">code_dir:</span> downloads/code</div><div class=\"line\"><span class=\"attr\">permalink_defaults:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Directory</span></div><div class=\"line\"><span class=\"attr\">source_dir:</span> source</div><div class=\"line\"><span class=\"attr\">public_dir:</span> public</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Writing</span></div><div class=\"line\"><span class=\"attr\">new_post_name:</span> :title.md <span class=\"comment\"># File name of new posts</span></div><div class=\"line\"><span class=\"attr\">default_layout:</span> post  </div><div class=\"line\"><span class=\"attr\">titlecase:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Transform title into titlecase</span></div><div class=\"line\"><span class=\"attr\">external_link:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Open external links in new tab</span></div><div class=\"line\"><span class=\"attr\">filename_case:</span> <span class=\"number\">0</span></div><div class=\"line\"><span class=\"attr\">render_drafts:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">relative_link:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">highlight:</span></div><div class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  line_number:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  tab_replace:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Category &amp; Tag</span></div><div class=\"line\"><span class=\"attr\">default_category:</span> uncategorized  </div><div class=\"line\"><span class=\"attr\">category_map:</span></div><div class=\"line\"><span class=\"attr\">tag_map:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Archives 默认值为2，这里都修改为1，相应页面就只会列出标题，而非全文</span></div><div class=\"line\"><span class=\"comment\"># # 2: Enable pagination</span></div><div class=\"line\"><span class=\"comment\"># # 1: Disable pagination</span></div><div class=\"line\"><span class=\"comment\"># # 0: Fully Disable</span></div><div class=\"line\"><span class=\"attr\">archive:</span> <span class=\"number\">1</span></div><div class=\"line\"><span class=\"attr\">category:</span> <span class=\"number\">1</span></div><div class=\"line\"><span class=\"attr\">tag:</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Server</span></div><div class=\"line\"><span class=\"comment\"># # Hexo uses Connect as a server</span></div><div class=\"line\"><span class=\"comment\"># # You can customize the logger format as defined in</span></div><div class=\"line\"><span class=\"comment\"># # http://www.senchalabs.org/connect/logger.html</span></div><div class=\"line\"><span class=\"attr\">port:</span> <span class=\"number\">4000</span></div><div class=\"line\"><span class=\"attr\">server_ip:</span> localhost</div><div class=\"line\"><span class=\"attr\">logger:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">logger_format:</span> dev</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Date / Time format</span></div><div class=\"line\"><span class=\"comment\"># # Hexo uses Moment.js to parse and display date</span></div><div class=\"line\"><span class=\"comment\"># # You can customize the date format as defined in</span></div><div class=\"line\"><span class=\"comment\"># # http://momentjs.com/docs/# /displaying/format/</span></div><div class=\"line\"><span class=\"attr\">date_format:</span> MMM D YYYY</div><div class=\"line\"><span class=\"attr\">time_format:</span> H:mm:ss</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Pagination</span></div><div class=\"line\"><span class=\"comment\"># # Set per_page to 0 to disable pagination</span></div><div class=\"line\"><span class=\"attr\">per_page:</span> <span class=\"number\">5</span></div><div class=\"line\"><span class=\"attr\">pagination_dir:</span> page</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Disqus</span></div><div class=\"line\"><span class=\"attr\">disqus_shortname:</span></div><div class=\"line\"><span class=\"comment\"># 这一行是我添加的duoshuo_shortname,因为天朝disqus不好用,用多说</span></div><div class=\"line\"><span class=\"attr\">duoshuo_shortname:</span> jackroyal</div><div class=\"line\"><span class=\"comment\"># Extensions</span></div><div class=\"line\"><span class=\"comment\"># # Plugins: https://github.com/hexojs/hexo/wiki/Plugins</span></div><div class=\"line\"><span class=\"comment\"># # Themes: https://github.com/hexojs/hexo/wiki/Themes</span></div><div class=\"line\"><span class=\"attr\">theme:</span> light</div><div class=\"line\"><span class=\"attr\">exclude_generator:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Deployment  发布相关设置</span></div><div class=\"line\"><span class=\"comment\"># # Docs: http://hexo.io/docs/deployment.html</span></div><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">  type:</span> github</div><div class=\"line\"><span class=\"attr\">  repo:</span> https://github.com/Jackroyal/Jackroyal.github.io.git</div><div class=\"line\"><span class=\"attr\">  branch:</span> master</div></pre></td></tr></table></figure>\n<p>至此,全局配置文件修改完毕,你可以<code>hexo g</code>和<code>hexo s</code>进行查看.<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">menu:</span><span class=\"comment\"># 导航栏的设置默认只有这两个,还可以添加更多的导航</span></div><div class=\"line\"><span class=\"attr\">  Home:</span> /</div><div class=\"line\"><span class=\"attr\">  Archives:</span> /archives</div><div class=\"line\"><span class=\"comment\"># 它就是你页面右边的侧边项目,比如搜索之类,你可以根据自己的需求进行修改,你能用几个widgets可以在F:\\blog\\themes\\light\\layout\\_widget中进行查看</span></div><div class=\"line\"><span class=\"attr\">widgets:</span><span class=\"comment\"># 我这里使用了所有的widgets</span></div><div class=\"line\"><span class=\"bullet\">-</span> search</div><div class=\"line\"><span class=\"bullet\">-</span> category</div><div class=\"line\"><span class=\"bullet\">-</span> tag</div><div class=\"line\"><span class=\"bullet\">-</span> recent_posts</div><div class=\"line\"><span class=\"bullet\">-</span> tagcloud</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">excerpt_link:</span> Read More  <span class=\"comment\"># 可以换成中文的  阅读全文</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">twitter:</span></div><div class=\"line\"><span class=\"attr\">  username:</span></div><div class=\"line\"><span class=\"attr\">  show_replies:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">  tweet_count:</span> <span class=\"number\">5</span></div><div class=\"line\">//默认的一个分享组件,因为主要针对国外,不适合国内我们不使用它</div><div class=\"line\"><span class=\"attr\">addthis:</span></div><div class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">false</span>  <span class=\"comment\"># 把true改为false</span></div><div class=\"line\"><span class=\"attr\">  pubid:</span></div><div class=\"line\"><span class=\"attr\">  facebook:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  twitter:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  google:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  pinterest:</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">fancybox:</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">google_analytics:</span></div><div class=\"line\"><span class=\"attr\">rss:</span></div><div class=\"line\"><span class=\"attr\">duoshuo_shortname:</span> jackroyal  <span class=\"comment\"># 多说的用户名</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">comment_provider:</span></div><div class=\"line\"><span class=\"comment\"># Facebook comment</span></div><div class=\"line\"><span class=\"attr\">facebook:</span></div><div class=\"line\"><span class=\"attr\">  appid:</span> <span class=\"number\">123456789012345</span></div><div class=\"line\"><span class=\"attr\">  comment_count:</span> <span class=\"number\">5</span></div><div class=\"line\"><span class=\"attr\">  comment_width:</span> <span class=\"number\">840</span></div><div class=\"line\"><span class=\"attr\">  comment_colorscheme:</span> light</div></pre></td></tr></table></figure></p>\n<p>至此,配置文件修改完毕,上面提到了我们不适用disqus的评论组件,使用多说,下面教大家来配置多说</p>\n<h1 id=\"创建多说\"><a href=\"#创建多说\" class=\"headerlink\" title=\"创建多说\"></a>创建多说</h1><p>首先我们去多说注册一个账号,<a href=\"http://duoshuo.com/\" title=\"多说官网\">点击这里</a><br>我们点击<a href=\"http://duoshuo.com/create-site/\" title=\"我要安装\">我要安装</a>,界面如下<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1emtdlnpsqaj20wo0lp783.jpg\" alt=\"duoshuo 创建界面\" title=\"创建多说账号\"><br>shortname就是jackroyal,创建完成后,跳转到如下界面<br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1emtdp96x54j20us0jxn18.jpg\" alt=\"获取多说代码\" title=\"获取多说代码\"><br>我们选择<code>通用代码</code>,点击复制,就行了</p>\n<h1 id=\"配置多说\"><a href=\"#配置多说\" class=\"headerlink\" title=\"配置多说\"></a>配置多说</h1><p>这里说一个前提,我使用的是light主题,如果你用的是其他主题,接下来的设置可能给我有点区别,但是原理差不多,参考看看</p>\n<ol>\n<li>我们打开<code>F:\\blog\\themes\\light\\layout\\_partial\\comment.ejs</code>这个文件,然后修改后代码如下(如果你不是light主题,可能跟这个不一样,你去找下包含comment的section在哪里,改法还是这样.例如系统默认的landscape主题,下面这段代码就是在article.ejs,它没有comment.ejs)<figure class=\"highlight erb\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><span class=\"ruby\"> <span class=\"keyword\">if</span> (page.comments)&#123; </span><span class=\"xml\"><span class=\"tag\">%&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 这里添加了一个导航,页面的下面会有一个上一篇,下一篇 --&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pagination\"</span> &gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><span class=\"ruby\"> <span class=\"keyword\">if</span> (page.prev) &#123; </span><span class=\"xml\"><span class=\"tag\">%&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;%-</span></span></span><span class=\"ruby\"> config.root </span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">%&gt;&lt;%-</span></span></span><span class=\"ruby\"> page.prev.path </span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">%&gt;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"alignleft prev\"</span> &gt;</span> <span class=\"tag\">&lt;<span class=\"name\">%=</span></span></span><span class=\"ruby\">page.prev.title </span><span class=\"xml\"><span class=\"tag\">%&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><span class=\"ruby\"> &#125; </span><span class=\"xml\"><span class=\"tag\">%&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><span class=\"ruby\"> <span class=\"keyword\">if</span> (page.<span class=\"keyword\">next</span>) &#123; </span><span class=\"xml\"><span class=\"tag\">%&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;%-</span></span></span><span class=\"ruby\"> config.root </span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">%&gt;&lt;%-</span></span></span><span class=\"ruby\"> page.<span class=\"keyword\">next</span>.path </span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">%&gt;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"alignright next\"</span> &gt;</span> <span class=\"tag\">&lt;<span class=\"name\">%=</span></span></span><span class=\"ruby\">page.<span class=\"keyword\">next</span>.title </span><span class=\"xml\"><span class=\"tag\">%&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><span class=\"ruby\"> &#125; </span><span class=\"xml\"><span class=\"tag\">%&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"clearfix\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 导航结束 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"comments\"</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 这里是多说的代码,直接把你的代码粘贴到这里就行 --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 多说评论框 start --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ds-thread\"</span> <span class=\"attr\">data-thread-key</span>=<span class=\"string\">\"&lt;%=</span></span></span><span class=\"ruby\"> page.layout </span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">%&gt;-&lt;%=</span></span></span><span class=\"ruby\"> page.slug </span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">%&gt;\"</span> <span class=\"attr\">data-title</span>=<span class=\"string\">\"&lt;%=</span></span></span><span class=\"ruby\"> page.title </span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">%&gt;\"</span> <span class=\"attr\">data-url</span>=<span class=\"string\">\"&lt;%=</span></span></span><span class=\"ruby\"> page.permalink </span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">%&gt;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 多说评论框 end --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\"></div><div class=\"line\">    <span class=\"keyword\">var</span> duoshuoQuery = &#123;short_name:<span class=\"string\">'&lt;%=</span></span></span><span class=\"ruby\"> config.duoshuo_shortname </span><span class=\"xml\"><span class=\"undefined\">%&gt;'&#125;;</div><div class=\"line\">      (function() &#123;</div><div class=\"line\">        var ds = document.createElement('script');</div><div class=\"line\">        ds.type = 'text/javascript';ds.async = true;</div><div class=\"line\">        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';</div><div class=\"line\">        ds.charset = 'UTF-8';</div><div class=\"line\">        (document.getElementsByTagName('head')[0]</div><div class=\"line\">         || document.getElementsByTagName('body')[0]).appendChild(ds);</div><div class=\"line\">      &#125;)();</div><div class=\"line\">      </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 多说公共JS代码 end --&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 多说结束 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><span class=\"ruby\"> &#125; </span><span class=\"xml\"><span class=\"tag\">%&gt;</span></span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>眼尖的同学可能已经看到我的上面第16行代码与你们的不同,这行代码包括了页面的标题和url,它会根据hexo的配置,由hexo动态生成,所以你把你的代码替换成我的这行代码.<br><figure class=\"highlight erb\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ds-thread\"</span> <span class=\"attr\">data-thread-key</span>=<span class=\"string\">\"&lt;%=</span></span></span><span class=\"ruby\"> page.layout </span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">%&gt;-&lt;%=</span></span></span><span class=\"ruby\"> page.slug </span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">%&gt;\"</span> <span class=\"attr\">data-title</span>=<span class=\"string\">\"&lt;%=</span></span></span><span class=\"ruby\"> page.title </span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">%&gt;\"</span> <span class=\"attr\">data-url</span>=<span class=\"string\">\"&lt;%=</span></span></span><span class=\"ruby\"> page.permalink </span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">%&gt;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div></pre></td></tr></table></figure></p>\n<p>至此,多说添加完毕</p>\n<h1 id=\"修复bug\"><a href=\"#修复bug\" class=\"headerlink\" title=\"修复bug\"></a>修复bug</h1><p>我发现light的主题貌似有个小bug,在<code>F:\\blog\\themes\\light\\layout\\_partial\\article.ejs</code>中间第27行有这样一行代码<br><figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"meta\">%</span> <span class=\"keyword\">if</span> <span class=\"comment\">(item.comment &amp;&amp; config.disqus_shortname)</span>&#123; <span class=\"meta\">%</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>首先我们,替换config.disqus_shortname为config.duoshuo_shortname.<br>然后修改<code>item.comment</code>为<code>item.comments</code>,因为系统中没有comment这个变量,只有comments这个变量,如果不修改comments,那么<code>item.comment</code>一直为假,所以一直不成立,就不会显示comments字段了.修改后代码如下<br><figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"meta\">%</span> <span class=\"keyword\">if</span> <span class=\"comment\">(item.comments &amp;&amp; config.duoshuo_shortname)</span>&#123; <span class=\"meta\">%</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>产生的效果如图<img src=\"http://ww3.sinaimg.cn/large/692869a3gw1emteitia5uj20tl0fn412.jpg\" alt=\"开启和关闭comment的区别\" title=\"开启和关闭comment的区别\">.<br>至此,配置hexo,打完收工<br>enjoy it</p>\n<hr>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"http://zipperary.com/2013/05/29/hexo-guide-3/\">http://zipperary.com/2013/05/29/hexo-guide-3/</a><br>2 <a href=\"http://dev.duoshuo.com/threads/541d3b2b40b5abcd2e4df0e9\">duoshuo官方Hexo使用教程</a></p>"},{"title":"使用opencv实现人脸识别","date":"2015-04-26T02:50:00.000Z","_content":"最近搞了两个星期的opencv，人脸识别方向，感觉没有什么前途，看不到论文在哪里啊。\n<!-- more -->\n```python\n# !/usr/bin/env python\n# -*- coding:utf-8-*-\nimport os\nimport sys\nimport cv2\nimport numpy as np\n\nz = {} # 存储关于每张图片对应的lable\nfor_pre = []  # 存储用来进行测试的图片，规则是每个人10张图，5张用来训练，5张用来测试\ndef normalize(X, low, high, dtype=None):\n    \"\"\"对数据进行正常化处理，让其处于最高和最低值之间.\"\"\"\n    X = np.asarray(X)\n    minX, maxX = np.min(X), np.max(X)\n    # normalize to [0...1].\n    X = X - float(minX)\n    X = X / float((maxX - minX))\n    # scale to [low...high].\n    X = X * (high-low)\n    X = X + low\n    if dtype is None:\n        return np.asarray(X)\n    return np.asarray(X, dtype=dtype)\n\n\ndef read_images(path, sz=None):\n    \"\"\"从文件夹中读取图像，并且将其大小限制在一定范围之内\n\n    参数:\n        path: 图片的路径\n        sz: 设定图像的大小以元组的形式，例如(92,112)\n\n    返回值:\n        返回一个list的数据[X,y]\n\n            X: 一个numpy的数组，里面存储的是所有的图片的矩阵.\n            y:一个list存储的，都是与X中图片对应的lable\n    \"\"\"\n    c = 0\n    X,y = [], []\n    for dirname, dirnames, filenames in os.walk(path):\n        for subdirname in dirnames:\n            subject_path = os.path.join(dirname, subdirname)\n            for filename in os.listdir(subject_path):\n                try:\n                    im = cv2.imread(os.path.join(subject_path, filename), cv2.IMREAD_GRAYSCALE)\n                    # resize to given size (if given)\n                    if (sz is not None):\n                        im = cv2.resize(im, sz)\n                    if y.count(c) > 4:\n                        for_pre.append({'no':c,'src':np.asarray(im, dtype=np.uint8)})\n                    else:\n                        X.append(np.asarray(im, dtype=np.uint8))\n                        y.append(c)\n                    global z\n                    z[os.path.join(subject_path, filename)] = c\n                except IOError, (errno, strerror):\n                    print \"I/O error({0}): {1}\".format(errno, strerror)\n                except:\n                    print \"Unexpected error:\", sys.exc_info()[0]\n                    raise\n            c = c+1\n    return [X,y]\n\ndef prediction(model):\n    \"\"\"图像预测\n\n    参数:\n        model: 就是图片训练的那个model\n\n    数据集中每个人存储了10张图片，我把其中的5张存储到for_pre，作为训练数据。用已知的lable和预测的lable作比较，得出图片识别正确的概率\n    \"\"\"\n    tn = 0 # 识别正确的图片数\n    for item in for_pre:\n        [p_label, p_confidence] = model.predict(cv2.resize(item['src'],(92,112)))\n        if p_label == item['no']:\n            tn = tn+1\n        else:\n            print 'the answer is %d,' % item['no'],\n            print \"Predicted label = %d (confidence=%.2f)\" % (p_label, p_confidence)\n\n    print \"总共有%d次预测，其中正确次数为%d\" %(len(for_pre),tn)\n\nif __name__ == \"__main__\":\n    # This is where we write the images, if an output_dir is given\n    # in command line:\n    out_dir = None\n    # You'll need at least a path to your image data, please see\n    # the tutorial coming with this source code on how to prepare\n    # your image data:\n    if len(sys.argv) < 2:\n        print \"USAGE: face_rec.py </path/to/images> [</path/to/store/images/at>]\"\n        sys.exit()\n    # Now read in the image data. This must be a valid path!\n    [X,y] = read_images(sys.argv[1], (92, 112))\n \n    # Convert labels to 32bit integers. This is a workaround for 64bit machines,\n    # because the labels will truncated else. This will be fixed in code as\n    # soon as possible, so Python users don't need to know about this.\n    # Thanks to Leo Dirac for reporting:\n    y = np.asarray(y, dtype=np.int32)\n    # If a out_dir is given, set it:\n    if len(sys.argv) == 3:\n        out_dir = sys.argv[2]\n    # Create the Eigenfaces model. We are going to use the default\n    # parameters for this simple example, please read the documentation\n    # for thresholding:\n    model = cv2.createEigenFaceRecognizer()\n    # Read\n    # Learn the model. Remember our function returns Python lists,\n    # so we use np.asarray to turn them into NumPy lists to make\n    # the OpenCV wrapper happy:\n    model.train(np.asarray(X), np.asarray(y))\n    prediction(model) # 图片预测\n    #\n    #\n    # You can see the available parameters with getParams():\n    print model.getParams()\n    # Now let's get some data:\n    mean = model.getMat(\"mean\")\n    print out_dir + '/out.xml'\n    f = open(out_dir + '/out.xml','w')\n    model.save(out_dir + '/out.xml')\n    eigenvectors = model.getMat(\"eigenvectors\")\n    # We'll save the mean, by first normalizing it:\n    mean_norm = normalize(mean, 0, 255, dtype=np.uint8)\n    mean_resized = mean_norm.reshape(X[0].shape)\n    if out_dir is None:\n        cv2.imshow(\"mean\", mean_resized)\n    else:\n        cv2.imwrite(\"%s/mean.png\" % (out_dir), mean_resized)\n    # Turn the first (at most) 16 eigenvectors into grayscale\n    # images. You could also use cv::normalize here, but sticking\n    # to NumPy is much easier for now.\n    # Note: eigenvectors are stored by column:\n    # for i in xrange(min(len(X), 16)):\n    #     eigenvector_i = eigenvectors[:,i].reshape(X[0].shape)\n    #     eigenvector_i_norm = normalize(eigenvector_i, 0, 255, dtype=np.uint8)\n    #     # Show or save the images:\n    #     if out_dir is None:\n    #         cv2.imshow(\"%s/eigenface_%d\" % (out_dir,i), eigenvector_i_norm)\n    #     else:\n    #         cv2.imwrite(\"%s/eigenface_%d.png\" % (out_dir,i), eigenvector_i_norm)\n    # Show the images:\n    print z\n    if out_dir is None:\n        cv2.waitKey(0)\n```\n\n代码执行效果如下\n![人脸识别执行效果](http://ww1.sinaimg.cn/large/692869a3gw1eriuc3wsckj20nr08qn2q.jpg)\n我在这里输出的是那些预测错误的。`总共有200次预测，其中正确次数为186。`这预测率有点低啊，我用的数据都是来自于[ AT&T Facedatabase](http://www.cl.cam.ac.uk/research/dtg/attarchive/facedatabase.html)。一共40个人，每个人10张图，图片宽高是92*112像素，全部是灰度图像。\n至于如何提高图片识别的效率，我也不知道。\n\n# 参考文献\n1 <http://docs.opencv.org/modules/contrib/doc/facerec/facerec_tutorial.html>\n2 [python调用opencv实现人脸识别](https://code.google.com/p/pythonxy/source/browse/src/python/OpenCV/DOC/samples/python2/facerec_demo.py?repo=xy-27&r=a2e41c7a3cb6db536b948747872cab71c696b44e)\n","source":"_posts/face-recognizer.md","raw":"title: 使用opencv实现人脸识别\ndate: 2015-04-26 10:50:00\ntags:\n- opencv\n- 图像处理\n- python\ncategories:\n- 图像处理\n---\n最近搞了两个星期的opencv，人脸识别方向，感觉没有什么前途，看不到论文在哪里啊。\n<!-- more -->\n```python\n# !/usr/bin/env python\n# -*- coding:utf-8-*-\nimport os\nimport sys\nimport cv2\nimport numpy as np\n\nz = {} # 存储关于每张图片对应的lable\nfor_pre = []  # 存储用来进行测试的图片，规则是每个人10张图，5张用来训练，5张用来测试\ndef normalize(X, low, high, dtype=None):\n    \"\"\"对数据进行正常化处理，让其处于最高和最低值之间.\"\"\"\n    X = np.asarray(X)\n    minX, maxX = np.min(X), np.max(X)\n    # normalize to [0...1].\n    X = X - float(minX)\n    X = X / float((maxX - minX))\n    # scale to [low...high].\n    X = X * (high-low)\n    X = X + low\n    if dtype is None:\n        return np.asarray(X)\n    return np.asarray(X, dtype=dtype)\n\n\ndef read_images(path, sz=None):\n    \"\"\"从文件夹中读取图像，并且将其大小限制在一定范围之内\n\n    参数:\n        path: 图片的路径\n        sz: 设定图像的大小以元组的形式，例如(92,112)\n\n    返回值:\n        返回一个list的数据[X,y]\n\n            X: 一个numpy的数组，里面存储的是所有的图片的矩阵.\n            y:一个list存储的，都是与X中图片对应的lable\n    \"\"\"\n    c = 0\n    X,y = [], []\n    for dirname, dirnames, filenames in os.walk(path):\n        for subdirname in dirnames:\n            subject_path = os.path.join(dirname, subdirname)\n            for filename in os.listdir(subject_path):\n                try:\n                    im = cv2.imread(os.path.join(subject_path, filename), cv2.IMREAD_GRAYSCALE)\n                    # resize to given size (if given)\n                    if (sz is not None):\n                        im = cv2.resize(im, sz)\n                    if y.count(c) > 4:\n                        for_pre.append({'no':c,'src':np.asarray(im, dtype=np.uint8)})\n                    else:\n                        X.append(np.asarray(im, dtype=np.uint8))\n                        y.append(c)\n                    global z\n                    z[os.path.join(subject_path, filename)] = c\n                except IOError, (errno, strerror):\n                    print \"I/O error({0}): {1}\".format(errno, strerror)\n                except:\n                    print \"Unexpected error:\", sys.exc_info()[0]\n                    raise\n            c = c+1\n    return [X,y]\n\ndef prediction(model):\n    \"\"\"图像预测\n\n    参数:\n        model: 就是图片训练的那个model\n\n    数据集中每个人存储了10张图片，我把其中的5张存储到for_pre，作为训练数据。用已知的lable和预测的lable作比较，得出图片识别正确的概率\n    \"\"\"\n    tn = 0 # 识别正确的图片数\n    for item in for_pre:\n        [p_label, p_confidence] = model.predict(cv2.resize(item['src'],(92,112)))\n        if p_label == item['no']:\n            tn = tn+1\n        else:\n            print 'the answer is %d,' % item['no'],\n            print \"Predicted label = %d (confidence=%.2f)\" % (p_label, p_confidence)\n\n    print \"总共有%d次预测，其中正确次数为%d\" %(len(for_pre),tn)\n\nif __name__ == \"__main__\":\n    # This is where we write the images, if an output_dir is given\n    # in command line:\n    out_dir = None\n    # You'll need at least a path to your image data, please see\n    # the tutorial coming with this source code on how to prepare\n    # your image data:\n    if len(sys.argv) < 2:\n        print \"USAGE: face_rec.py </path/to/images> [</path/to/store/images/at>]\"\n        sys.exit()\n    # Now read in the image data. This must be a valid path!\n    [X,y] = read_images(sys.argv[1], (92, 112))\n \n    # Convert labels to 32bit integers. This is a workaround for 64bit machines,\n    # because the labels will truncated else. This will be fixed in code as\n    # soon as possible, so Python users don't need to know about this.\n    # Thanks to Leo Dirac for reporting:\n    y = np.asarray(y, dtype=np.int32)\n    # If a out_dir is given, set it:\n    if len(sys.argv) == 3:\n        out_dir = sys.argv[2]\n    # Create the Eigenfaces model. We are going to use the default\n    # parameters for this simple example, please read the documentation\n    # for thresholding:\n    model = cv2.createEigenFaceRecognizer()\n    # Read\n    # Learn the model. Remember our function returns Python lists,\n    # so we use np.asarray to turn them into NumPy lists to make\n    # the OpenCV wrapper happy:\n    model.train(np.asarray(X), np.asarray(y))\n    prediction(model) # 图片预测\n    #\n    #\n    # You can see the available parameters with getParams():\n    print model.getParams()\n    # Now let's get some data:\n    mean = model.getMat(\"mean\")\n    print out_dir + '/out.xml'\n    f = open(out_dir + '/out.xml','w')\n    model.save(out_dir + '/out.xml')\n    eigenvectors = model.getMat(\"eigenvectors\")\n    # We'll save the mean, by first normalizing it:\n    mean_norm = normalize(mean, 0, 255, dtype=np.uint8)\n    mean_resized = mean_norm.reshape(X[0].shape)\n    if out_dir is None:\n        cv2.imshow(\"mean\", mean_resized)\n    else:\n        cv2.imwrite(\"%s/mean.png\" % (out_dir), mean_resized)\n    # Turn the first (at most) 16 eigenvectors into grayscale\n    # images. You could also use cv::normalize here, but sticking\n    # to NumPy is much easier for now.\n    # Note: eigenvectors are stored by column:\n    # for i in xrange(min(len(X), 16)):\n    #     eigenvector_i = eigenvectors[:,i].reshape(X[0].shape)\n    #     eigenvector_i_norm = normalize(eigenvector_i, 0, 255, dtype=np.uint8)\n    #     # Show or save the images:\n    #     if out_dir is None:\n    #         cv2.imshow(\"%s/eigenface_%d\" % (out_dir,i), eigenvector_i_norm)\n    #     else:\n    #         cv2.imwrite(\"%s/eigenface_%d.png\" % (out_dir,i), eigenvector_i_norm)\n    # Show the images:\n    print z\n    if out_dir is None:\n        cv2.waitKey(0)\n```\n\n代码执行效果如下\n![人脸识别执行效果](http://ww1.sinaimg.cn/large/692869a3gw1eriuc3wsckj20nr08qn2q.jpg)\n我在这里输出的是那些预测错误的。`总共有200次预测，其中正确次数为186。`这预测率有点低啊，我用的数据都是来自于[ AT&T Facedatabase](http://www.cl.cam.ac.uk/research/dtg/attarchive/facedatabase.html)。一共40个人，每个人10张图，图片宽高是92*112像素，全部是灰度图像。\n至于如何提高图片识别的效率，我也不知道。\n\n# 参考文献\n1 <http://docs.opencv.org/modules/contrib/doc/facerec/facerec_tutorial.html>\n2 [python调用opencv实现人脸识别](https://code.google.com/p/pythonxy/source/browse/src/python/OpenCV/DOC/samples/python2/facerec_demo.py?repo=xy-27&r=a2e41c7a3cb6db536b948747872cab71c696b44e)\n","slug":"face-recognizer","published":1,"updated":"2015-10-29T06:08:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yom000nx8cdqgf30lbk","content":"<p>最近搞了两个星期的opencv，人脸识别方向，感觉没有什么前途，看不到论文在哪里啊。<br><a id=\"more\"></a><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># !/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8-*-</span></div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> cv2</div><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div><div class=\"line\"></div><div class=\"line\">z = &#123;&#125; <span class=\"comment\"># 存储关于每张图片对应的lable</span></div><div class=\"line\">for_pre = []  <span class=\"comment\"># 存储用来进行测试的图片，规则是每个人10张图，5张用来训练，5张用来测试</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">normalize</span><span class=\"params\">(X, low, high, dtype=None)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"对数据进行正常化处理，让其处于最高和最低值之间.\"\"\"</span></div><div class=\"line\">    X = np.asarray(X)</div><div class=\"line\">    minX, maxX = np.min(X), np.max(X)</div><div class=\"line\">    <span class=\"comment\"># normalize to [0...1].</span></div><div class=\"line\">    X = X - float(minX)</div><div class=\"line\">    X = X / float((maxX - minX))</div><div class=\"line\">    <span class=\"comment\"># scale to [low...high].</span></div><div class=\"line\">    X = X * (high-low)</div><div class=\"line\">    X = X + low</div><div class=\"line\">    <span class=\"keyword\">if</span> dtype <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> np.asarray(X)</div><div class=\"line\">    <span class=\"keyword\">return</span> np.asarray(X, dtype=dtype)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read_images</span><span class=\"params\">(path, sz=None)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"从文件夹中读取图像，并且将其大小限制在一定范围之内</span></div><div class=\"line\"></div><div class=\"line\">    参数:</div><div class=\"line\">        path: 图片的路径</div><div class=\"line\">        sz: 设定图像的大小以元组的形式，例如(92,112)</div><div class=\"line\"></div><div class=\"line\">    返回值:</div><div class=\"line\">        返回一个list的数据[X,y]</div><div class=\"line\"></div><div class=\"line\">            X: 一个numpy的数组，里面存储的是所有的图片的矩阵.</div><div class=\"line\">            y:一个list存储的，都是与X中图片对应的lable</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    c = <span class=\"number\">0</span></div><div class=\"line\">    X,y = [], []</div><div class=\"line\">    <span class=\"keyword\">for</span> dirname, dirnames, filenames <span class=\"keyword\">in</span> os.walk(path):</div><div class=\"line\">        <span class=\"keyword\">for</span> subdirname <span class=\"keyword\">in</span> dirnames:</div><div class=\"line\">            subject_path = os.path.join(dirname, subdirname)</div><div class=\"line\">            <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> os.listdir(subject_path):</div><div class=\"line\">                <span class=\"keyword\">try</span>:</div><div class=\"line\">                    im = cv2.imread(os.path.join(subject_path, filename), cv2.IMREAD_GRAYSCALE)</div><div class=\"line\">                    <span class=\"comment\"># resize to given size (if given)</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (sz <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>):</div><div class=\"line\">                        im = cv2.resize(im, sz)</div><div class=\"line\">                    <span class=\"keyword\">if</span> y.count(c) &gt; <span class=\"number\">4</span>:</div><div class=\"line\">                        for_pre.append(&#123;<span class=\"string\">'no'</span>:c,<span class=\"string\">'src'</span>:np.asarray(im, dtype=np.uint8)&#125;)</div><div class=\"line\">                    <span class=\"keyword\">else</span>:</div><div class=\"line\">                        X.append(np.asarray(im, dtype=np.uint8))</div><div class=\"line\">                        y.append(c)</div><div class=\"line\">                    <span class=\"keyword\">global</span> z</div><div class=\"line\">                    z[os.path.join(subject_path, filename)] = c</div><div class=\"line\">                <span class=\"keyword\">except</span> IOError, (errno, strerror):</div><div class=\"line\">                    <span class=\"keyword\">print</span> <span class=\"string\">\"I/O error(&#123;0&#125;): &#123;1&#125;\"</span>.format(errno, strerror)</div><div class=\"line\">                <span class=\"keyword\">except</span>:</div><div class=\"line\">                    <span class=\"keyword\">print</span> <span class=\"string\">\"Unexpected error:\"</span>, sys.exc_info()[<span class=\"number\">0</span>]</div><div class=\"line\">                    <span class=\"keyword\">raise</span></div><div class=\"line\">            c = c+<span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> [X,y]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">prediction</span><span class=\"params\">(model)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"图像预测</span></div><div class=\"line\"></div><div class=\"line\">    参数:</div><div class=\"line\">        model: 就是图片训练的那个model</div><div class=\"line\"></div><div class=\"line\">    数据集中每个人存储了10张图片，我把其中的5张存储到for_pre，作为训练数据。用已知的lable和预测的lable作比较，得出图片识别正确的概率</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    tn = <span class=\"number\">0</span> <span class=\"comment\"># 识别正确的图片数</span></div><div class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> for_pre:</div><div class=\"line\">        [p_label, p_confidence] = model.predict(cv2.resize(item[<span class=\"string\">'src'</span>],(<span class=\"number\">92</span>,<span class=\"number\">112</span>)))</div><div class=\"line\">        <span class=\"keyword\">if</span> p_label == item[<span class=\"string\">'no'</span>]:</div><div class=\"line\">            tn = tn+<span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">'the answer is %d,'</span> % item[<span class=\"string\">'no'</span>],</div><div class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">\"Predicted label = %d (confidence=%.2f)\"</span> % (p_label, p_confidence)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"总共有%d次预测，其中正确次数为%d\"</span> %(len(for_pre),tn)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    <span class=\"comment\"># This is where we write the images, if an output_dir is given</span></div><div class=\"line\">    <span class=\"comment\"># in command line:</span></div><div class=\"line\">    out_dir = <span class=\"keyword\">None</span></div><div class=\"line\">    <span class=\"comment\"># You'll need at least a path to your image data, please see</span></div><div class=\"line\">    <span class=\"comment\"># the tutorial coming with this source code on how to prepare</span></div><div class=\"line\">    <span class=\"comment\"># your image data:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> len(sys.argv) &lt; <span class=\"number\">2</span>:</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"USAGE: face_rec.py &lt;/path/to/images&gt; [&lt;/path/to/store/images/at&gt;]\"</span></div><div class=\"line\">        sys.exit()</div><div class=\"line\">    <span class=\"comment\"># Now read in the image data. This must be a valid path!</span></div><div class=\"line\">    [X,y] = read_images(sys.argv[<span class=\"number\">1</span>], (<span class=\"number\">92</span>, <span class=\"number\">112</span>))</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\"># Convert labels to 32bit integers. This is a workaround for 64bit machines,</span></div><div class=\"line\">    <span class=\"comment\"># because the labels will truncated else. This will be fixed in code as</span></div><div class=\"line\">    <span class=\"comment\"># soon as possible, so Python users don't need to know about this.</span></div><div class=\"line\">    <span class=\"comment\"># Thanks to Leo Dirac for reporting:</span></div><div class=\"line\">    y = np.asarray(y, dtype=np.int32)</div><div class=\"line\">    <span class=\"comment\"># If a out_dir is given, set it:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> len(sys.argv) == <span class=\"number\">3</span>:</div><div class=\"line\">        out_dir = sys.argv[<span class=\"number\">2</span>]</div><div class=\"line\">    <span class=\"comment\"># Create the Eigenfaces model. We are going to use the default</span></div><div class=\"line\">    <span class=\"comment\"># parameters for this simple example, please read the documentation</span></div><div class=\"line\">    <span class=\"comment\"># for thresholding:</span></div><div class=\"line\">    model = cv2.createEigenFaceRecognizer()</div><div class=\"line\">    <span class=\"comment\"># Read</span></div><div class=\"line\">    <span class=\"comment\"># Learn the model. Remember our function returns Python lists,</span></div><div class=\"line\">    <span class=\"comment\"># so we use np.asarray to turn them into NumPy lists to make</span></div><div class=\"line\">    <span class=\"comment\"># the OpenCV wrapper happy:</span></div><div class=\"line\">    model.train(np.asarray(X), np.asarray(y))</div><div class=\"line\">    prediction(model) <span class=\"comment\"># 图片预测</span></div><div class=\"line\">    <span class=\"comment\">#</span></div><div class=\"line\">    <span class=\"comment\">#</span></div><div class=\"line\">    <span class=\"comment\"># You can see the available parameters with getParams():</span></div><div class=\"line\">    <span class=\"keyword\">print</span> model.getParams()</div><div class=\"line\">    <span class=\"comment\"># Now let's get some data:</span></div><div class=\"line\">    mean = model.getMat(<span class=\"string\">\"mean\"</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> out_dir + <span class=\"string\">'/out.xml'</span></div><div class=\"line\">    f = open(out_dir + <span class=\"string\">'/out.xml'</span>,<span class=\"string\">'w'</span>)</div><div class=\"line\">    model.save(out_dir + <span class=\"string\">'/out.xml'</span>)</div><div class=\"line\">    eigenvectors = model.getMat(<span class=\"string\">\"eigenvectors\"</span>)</div><div class=\"line\">    <span class=\"comment\"># We'll save the mean, by first normalizing it:</span></div><div class=\"line\">    mean_norm = normalize(mean, <span class=\"number\">0</span>, <span class=\"number\">255</span>, dtype=np.uint8)</div><div class=\"line\">    mean_resized = mean_norm.reshape(X[<span class=\"number\">0</span>].shape)</div><div class=\"line\">    <span class=\"keyword\">if</span> out_dir <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        cv2.imshow(<span class=\"string\">\"mean\"</span>, mean_resized)</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        cv2.imwrite(<span class=\"string\">\"%s/mean.png\"</span> % (out_dir), mean_resized)</div><div class=\"line\">    <span class=\"comment\"># Turn the first (at most) 16 eigenvectors into grayscale</span></div><div class=\"line\">    <span class=\"comment\"># images. You could also use cv::normalize here, but sticking</span></div><div class=\"line\">    <span class=\"comment\"># to NumPy is much easier for now.</span></div><div class=\"line\">    <span class=\"comment\"># <span class=\"doctag\">Note:</span> eigenvectors are stored by column:</span></div><div class=\"line\">    <span class=\"comment\"># for i in xrange(min(len(X), 16)):</span></div><div class=\"line\">    <span class=\"comment\">#     eigenvector_i = eigenvectors[:,i].reshape(X[0].shape)</span></div><div class=\"line\">    <span class=\"comment\">#     eigenvector_i_norm = normalize(eigenvector_i, 0, 255, dtype=np.uint8)</span></div><div class=\"line\">    <span class=\"comment\">#     # Show or save the images:</span></div><div class=\"line\">    <span class=\"comment\">#     if out_dir is None:</span></div><div class=\"line\">    <span class=\"comment\">#         cv2.imshow(\"%s/eigenface_%d\" % (out_dir,i), eigenvector_i_norm)</span></div><div class=\"line\">    <span class=\"comment\">#     else:</span></div><div class=\"line\">    <span class=\"comment\">#         cv2.imwrite(\"%s/eigenface_%d.png\" % (out_dir,i), eigenvector_i_norm)</span></div><div class=\"line\">    <span class=\"comment\"># Show the images:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> z</div><div class=\"line\">    <span class=\"keyword\">if</span> out_dir <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        cv2.waitKey(<span class=\"number\">0</span>)</div></pre></td></tr></table></figure></p>\n<p>代码执行效果如下<br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1eriuc3wsckj20nr08qn2q.jpg\" alt=\"人脸识别执行效果\"><br>我在这里输出的是那些预测错误的。<code>总共有200次预测，其中正确次数为186。</code>这预测率有点低啊，我用的数据都是来自于<a href=\"http://www.cl.cam.ac.uk/research/dtg/attarchive/facedatabase.html\" target=\"_blank\" rel=\"external\"> AT&amp;T Facedatabase</a>。一共40个人，每个人10张图，图片宽高是92*112像素，全部是灰度图像。<br>至于如何提高图片识别的效率，我也不知道。</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"http://docs.opencv.org/modules/contrib/doc/facerec/facerec_tutorial.html\" target=\"_blank\" rel=\"external\">http://docs.opencv.org/modules/contrib/doc/facerec/facerec_tutorial.html</a><br>2 <a href=\"https://code.google.com/p/pythonxy/source/browse/src/python/OpenCV/DOC/samples/python2/facerec_demo.py?repo=xy-27&amp;r=a2e41c7a3cb6db536b948747872cab71c696b44e\" target=\"_blank\" rel=\"external\">python调用opencv实现人脸识别</a></p>\n","excerpt":"<p>最近搞了两个星期的opencv，人脸识别方向，感觉没有什么前途，看不到论文在哪里啊。<br>","more":"<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># !/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8-*-</span></div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> cv2</div><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div><div class=\"line\"></div><div class=\"line\">z = &#123;&#125; <span class=\"comment\"># 存储关于每张图片对应的lable</span></div><div class=\"line\">for_pre = []  <span class=\"comment\"># 存储用来进行测试的图片，规则是每个人10张图，5张用来训练，5张用来测试</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">normalize</span><span class=\"params\">(X, low, high, dtype=None)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"对数据进行正常化处理，让其处于最高和最低值之间.\"\"\"</span></div><div class=\"line\">    X = np.asarray(X)</div><div class=\"line\">    minX, maxX = np.min(X), np.max(X)</div><div class=\"line\">    <span class=\"comment\"># normalize to [0...1].</span></div><div class=\"line\">    X = X - float(minX)</div><div class=\"line\">    X = X / float((maxX - minX))</div><div class=\"line\">    <span class=\"comment\"># scale to [low...high].</span></div><div class=\"line\">    X = X * (high-low)</div><div class=\"line\">    X = X + low</div><div class=\"line\">    <span class=\"keyword\">if</span> dtype <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> np.asarray(X)</div><div class=\"line\">    <span class=\"keyword\">return</span> np.asarray(X, dtype=dtype)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read_images</span><span class=\"params\">(path, sz=None)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"从文件夹中读取图像，并且将其大小限制在一定范围之内</div><div class=\"line\"></div><div class=\"line\">    参数:</div><div class=\"line\">        path: 图片的路径</div><div class=\"line\">        sz: 设定图像的大小以元组的形式，例如(92,112)</div><div class=\"line\"></div><div class=\"line\">    返回值:</div><div class=\"line\">        返回一个list的数据[X,y]</div><div class=\"line\"></div><div class=\"line\">            X: 一个numpy的数组，里面存储的是所有的图片的矩阵.</div><div class=\"line\">            y:一个list存储的，都是与X中图片对应的lable</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    c = <span class=\"number\">0</span></div><div class=\"line\">    X,y = [], []</div><div class=\"line\">    <span class=\"keyword\">for</span> dirname, dirnames, filenames <span class=\"keyword\">in</span> os.walk(path):</div><div class=\"line\">        <span class=\"keyword\">for</span> subdirname <span class=\"keyword\">in</span> dirnames:</div><div class=\"line\">            subject_path = os.path.join(dirname, subdirname)</div><div class=\"line\">            <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> os.listdir(subject_path):</div><div class=\"line\">                <span class=\"keyword\">try</span>:</div><div class=\"line\">                    im = cv2.imread(os.path.join(subject_path, filename), cv2.IMREAD_GRAYSCALE)</div><div class=\"line\">                    <span class=\"comment\"># resize to given size (if given)</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (sz <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>):</div><div class=\"line\">                        im = cv2.resize(im, sz)</div><div class=\"line\">                    <span class=\"keyword\">if</span> y.count(c) &gt; <span class=\"number\">4</span>:</div><div class=\"line\">                        for_pre.append(&#123;<span class=\"string\">'no'</span>:c,<span class=\"string\">'src'</span>:np.asarray(im, dtype=np.uint8)&#125;)</div><div class=\"line\">                    <span class=\"keyword\">else</span>:</div><div class=\"line\">                        X.append(np.asarray(im, dtype=np.uint8))</div><div class=\"line\">                        y.append(c)</div><div class=\"line\">                    <span class=\"keyword\">global</span> z</div><div class=\"line\">                    z[os.path.join(subject_path, filename)] = c</div><div class=\"line\">                <span class=\"keyword\">except</span> IOError, (errno, strerror):</div><div class=\"line\">                    <span class=\"keyword\">print</span> <span class=\"string\">\"I/O error(&#123;0&#125;): &#123;1&#125;\"</span>.format(errno, strerror)</div><div class=\"line\">                <span class=\"keyword\">except</span>:</div><div class=\"line\">                    <span class=\"keyword\">print</span> <span class=\"string\">\"Unexpected error:\"</span>, sys.exc_info()[<span class=\"number\">0</span>]</div><div class=\"line\">                    <span class=\"keyword\">raise</span></div><div class=\"line\">            c = c+<span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> [X,y]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">prediction</span><span class=\"params\">(model)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"图像预测</div><div class=\"line\"></div><div class=\"line\">    参数:</div><div class=\"line\">        model: 就是图片训练的那个model</div><div class=\"line\"></div><div class=\"line\">    数据集中每个人存储了10张图片，我把其中的5张存储到for_pre，作为训练数据。用已知的lable和预测的lable作比较，得出图片识别正确的概率</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    tn = <span class=\"number\">0</span> <span class=\"comment\"># 识别正确的图片数</span></div><div class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> for_pre:</div><div class=\"line\">        [p_label, p_confidence] = model.predict(cv2.resize(item[<span class=\"string\">'src'</span>],(<span class=\"number\">92</span>,<span class=\"number\">112</span>)))</div><div class=\"line\">        <span class=\"keyword\">if</span> p_label == item[<span class=\"string\">'no'</span>]:</div><div class=\"line\">            tn = tn+<span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">'the answer is %d,'</span> % item[<span class=\"string\">'no'</span>],</div><div class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">\"Predicted label = %d (confidence=%.2f)\"</span> % (p_label, p_confidence)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"总共有%d次预测，其中正确次数为%d\"</span> %(len(for_pre),tn)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    <span class=\"comment\"># This is where we write the images, if an output_dir is given</span></div><div class=\"line\">    <span class=\"comment\"># in command line:</span></div><div class=\"line\">    out_dir = <span class=\"keyword\">None</span></div><div class=\"line\">    <span class=\"comment\"># You'll need at least a path to your image data, please see</span></div><div class=\"line\">    <span class=\"comment\"># the tutorial coming with this source code on how to prepare</span></div><div class=\"line\">    <span class=\"comment\"># your image data:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> len(sys.argv) &lt; <span class=\"number\">2</span>:</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"USAGE: face_rec.py &lt;/path/to/images&gt; [&lt;/path/to/store/images/at&gt;]\"</span></div><div class=\"line\">        sys.exit()</div><div class=\"line\">    <span class=\"comment\"># Now read in the image data. This must be a valid path!</span></div><div class=\"line\">    [X,y] = read_images(sys.argv[<span class=\"number\">1</span>], (<span class=\"number\">92</span>, <span class=\"number\">112</span>))</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\"># Convert labels to 32bit integers. This is a workaround for 64bit machines,</span></div><div class=\"line\">    <span class=\"comment\"># because the labels will truncated else. This will be fixed in code as</span></div><div class=\"line\">    <span class=\"comment\"># soon as possible, so Python users don't need to know about this.</span></div><div class=\"line\">    <span class=\"comment\"># Thanks to Leo Dirac for reporting:</span></div><div class=\"line\">    y = np.asarray(y, dtype=np.int32)</div><div class=\"line\">    <span class=\"comment\"># If a out_dir is given, set it:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> len(sys.argv) == <span class=\"number\">3</span>:</div><div class=\"line\">        out_dir = sys.argv[<span class=\"number\">2</span>]</div><div class=\"line\">    <span class=\"comment\"># Create the Eigenfaces model. We are going to use the default</span></div><div class=\"line\">    <span class=\"comment\"># parameters for this simple example, please read the documentation</span></div><div class=\"line\">    <span class=\"comment\"># for thresholding:</span></div><div class=\"line\">    model = cv2.createEigenFaceRecognizer()</div><div class=\"line\">    <span class=\"comment\"># Read</span></div><div class=\"line\">    <span class=\"comment\"># Learn the model. Remember our function returns Python lists,</span></div><div class=\"line\">    <span class=\"comment\"># so we use np.asarray to turn them into NumPy lists to make</span></div><div class=\"line\">    <span class=\"comment\"># the OpenCV wrapper happy:</span></div><div class=\"line\">    model.train(np.asarray(X), np.asarray(y))</div><div class=\"line\">    prediction(model) <span class=\"comment\"># 图片预测</span></div><div class=\"line\">    <span class=\"comment\">#</span></div><div class=\"line\">    <span class=\"comment\">#</span></div><div class=\"line\">    <span class=\"comment\"># You can see the available parameters with getParams():</span></div><div class=\"line\">    <span class=\"keyword\">print</span> model.getParams()</div><div class=\"line\">    <span class=\"comment\"># Now let's get some data:</span></div><div class=\"line\">    mean = model.getMat(<span class=\"string\">\"mean\"</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> out_dir + <span class=\"string\">'/out.xml'</span></div><div class=\"line\">    f = open(out_dir + <span class=\"string\">'/out.xml'</span>,<span class=\"string\">'w'</span>)</div><div class=\"line\">    model.save(out_dir + <span class=\"string\">'/out.xml'</span>)</div><div class=\"line\">    eigenvectors = model.getMat(<span class=\"string\">\"eigenvectors\"</span>)</div><div class=\"line\">    <span class=\"comment\"># We'll save the mean, by first normalizing it:</span></div><div class=\"line\">    mean_norm = normalize(mean, <span class=\"number\">0</span>, <span class=\"number\">255</span>, dtype=np.uint8)</div><div class=\"line\">    mean_resized = mean_norm.reshape(X[<span class=\"number\">0</span>].shape)</div><div class=\"line\">    <span class=\"keyword\">if</span> out_dir <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        cv2.imshow(<span class=\"string\">\"mean\"</span>, mean_resized)</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        cv2.imwrite(<span class=\"string\">\"%s/mean.png\"</span> % (out_dir), mean_resized)</div><div class=\"line\">    <span class=\"comment\"># Turn the first (at most) 16 eigenvectors into grayscale</span></div><div class=\"line\">    <span class=\"comment\"># images. You could also use cv::normalize here, but sticking</span></div><div class=\"line\">    <span class=\"comment\"># to NumPy is much easier for now.</span></div><div class=\"line\">    <span class=\"comment\"># <span class=\"doctag\">Note:</span> eigenvectors are stored by column:</span></div><div class=\"line\">    <span class=\"comment\"># for i in xrange(min(len(X), 16)):</span></div><div class=\"line\">    <span class=\"comment\">#     eigenvector_i = eigenvectors[:,i].reshape(X[0].shape)</span></div><div class=\"line\">    <span class=\"comment\">#     eigenvector_i_norm = normalize(eigenvector_i, 0, 255, dtype=np.uint8)</span></div><div class=\"line\">    <span class=\"comment\">#     # Show or save the images:</span></div><div class=\"line\">    <span class=\"comment\">#     if out_dir is None:</span></div><div class=\"line\">    <span class=\"comment\">#         cv2.imshow(\"%s/eigenface_%d\" % (out_dir,i), eigenvector_i_norm)</span></div><div class=\"line\">    <span class=\"comment\">#     else:</span></div><div class=\"line\">    <span class=\"comment\">#         cv2.imwrite(\"%s/eigenface_%d.png\" % (out_dir,i), eigenvector_i_norm)</span></div><div class=\"line\">    <span class=\"comment\"># Show the images:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> z</div><div class=\"line\">    <span class=\"keyword\">if</span> out_dir <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        cv2.waitKey(<span class=\"number\">0</span>)</div></pre></td></tr></table></figure></p>\n<p>代码执行效果如下<br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1eriuc3wsckj20nr08qn2q.jpg\" alt=\"人脸识别执行效果\"><br>我在这里输出的是那些预测错误的。<code>总共有200次预测，其中正确次数为186。</code>这预测率有点低啊，我用的数据都是来自于<a href=\"http://www.cl.cam.ac.uk/research/dtg/attarchive/facedatabase.html\"> AT&amp;T Facedatabase</a>。一共40个人，每个人10张图，图片宽高是92*112像素，全部是灰度图像。<br>至于如何提高图片识别的效率，我也不知道。</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"http://docs.opencv.org/modules/contrib/doc/facerec/facerec_tutorial.html\">http://docs.opencv.org/modules/contrib/doc/facerec/facerec_tutorial.html</a><br>2 <a href=\"https://code.google.com/p/pythonxy/source/browse/src/python/OpenCV/DOC/samples/python2/facerec_demo.py?repo=xy-27&amp;r=a2e41c7a3cb6db536b948747872cab71c696b44e\">python调用opencv实现人脸识别</a></p>"},{"title":"digitalocean下ubuntu切换内核,使用锐速","date":"2016-01-28T08:59:10.000Z","_content":"最近在网上看到,锐速可以用来给服务器加速,然后有人用这个软件来给翻墙服务器加速,据说效果还不错,今天就折腾一下.\n<!-- more -->\n我去锐速官网注册了账号,可惜,在官方支持的linux版本中并没有我这个内核版本.我用的是`3.13.0-37-generic`的`32`位版本,锐速官网并没有支持.`32`位版本支持的相对较少,支持的最新版本是`3.13.0-29-generic`.\n![锐速官网linux支持列表](http://ww3.sinaimg.cn/large/692869a3gw1f0fbk1mp65j213c0ozdru.jpg)\n所以没办法,只能把我的`ubuntu`降级回去,还是小折腾了一下.下面就来说下降级\n# 实验环境：\ndigitalocean的云服务器\nLinux OS:   Ubuntu\nVersion:    14.04\nKernel:     3.13.0-37-generic\nBits:       32-bit\n\n# 实验步骤\nssh登录服务器,然后安装新内核,blablabla...\n你要是这样想就跟我一样,想错了.\n因为我们使用的是`digitalocean`的云服务器,不是普通的个人单机,所以那套方法不顶用,我照着那个方法,安装了新的内核,然后更新`grub`,怎么弄都没用,最后才找到答案.\n**争取的做法:**\n1 登录你的`digitalocean`控制台\n2 点击`setting->kernel`,效果如下图\n![控制台的kernel页面](http://ww2.sinaimg.cn/large/692869a3gw1f0fbvo209sj20vd0kkdkf.jpg)\n3 点击下拉列表,找到你要的`kernel`,比如我要的是`Ubuntu 14.04 x32 vmlinuz-3.13.0-29-generic`,然后点击`change`,等一会儿,页面会自动刷新,内核更新就成功了\n4 重要的一步,我就是这步有点问题,又浪费了点时间.更新完内核,我们发现自己的服务器查看内核的时候并没有变化,我们首先想到的是重启服务器.我们直接在终端`sudo reboot`.但是启动以后,你会发现还是没有变化,什么鬼?\n真正的答案是,我们现在终端关机,也即是执行`sudo poweroff`,先关机.然后我们在控制台的power选项卡中,有个`power on`的按钮,我们启动服务器,就发现内核已经更新了.\nok 打完收工\n\n\n# 参考文献\n1 [How to Upgrade Ubuntu 12.04 LTS to Ubuntu 14.04 LTS](https://www.digitalocean.com/community/tutorials/how-to-upgrade-ubuntu-12-04-lts-to-ubuntu-14-04-lts)\n2 [How To Update a DigitalOcean Server's Kernel](https://www.digitalocean.com/community/tutorials/how-to-update-a-digitalocean-server-s-kernel)\n","source":"_posts/digitalocean-switch-kernel.md","raw":"title: digitalocean下ubuntu切换内核,使用锐速\ndate: 2016-01-28 16:59:10\ntags:\n- digitalocean\n- Linux\ncategories:\n- 服务器\n---\n最近在网上看到,锐速可以用来给服务器加速,然后有人用这个软件来给翻墙服务器加速,据说效果还不错,今天就折腾一下.\n<!-- more -->\n我去锐速官网注册了账号,可惜,在官方支持的linux版本中并没有我这个内核版本.我用的是`3.13.0-37-generic`的`32`位版本,锐速官网并没有支持.`32`位版本支持的相对较少,支持的最新版本是`3.13.0-29-generic`.\n![锐速官网linux支持列表](http://ww3.sinaimg.cn/large/692869a3gw1f0fbk1mp65j213c0ozdru.jpg)\n所以没办法,只能把我的`ubuntu`降级回去,还是小折腾了一下.下面就来说下降级\n# 实验环境：\ndigitalocean的云服务器\nLinux OS:   Ubuntu\nVersion:    14.04\nKernel:     3.13.0-37-generic\nBits:       32-bit\n\n# 实验步骤\nssh登录服务器,然后安装新内核,blablabla...\n你要是这样想就跟我一样,想错了.\n因为我们使用的是`digitalocean`的云服务器,不是普通的个人单机,所以那套方法不顶用,我照着那个方法,安装了新的内核,然后更新`grub`,怎么弄都没用,最后才找到答案.\n**争取的做法:**\n1 登录你的`digitalocean`控制台\n2 点击`setting->kernel`,效果如下图\n![控制台的kernel页面](http://ww2.sinaimg.cn/large/692869a3gw1f0fbvo209sj20vd0kkdkf.jpg)\n3 点击下拉列表,找到你要的`kernel`,比如我要的是`Ubuntu 14.04 x32 vmlinuz-3.13.0-29-generic`,然后点击`change`,等一会儿,页面会自动刷新,内核更新就成功了\n4 重要的一步,我就是这步有点问题,又浪费了点时间.更新完内核,我们发现自己的服务器查看内核的时候并没有变化,我们首先想到的是重启服务器.我们直接在终端`sudo reboot`.但是启动以后,你会发现还是没有变化,什么鬼?\n真正的答案是,我们现在终端关机,也即是执行`sudo poweroff`,先关机.然后我们在控制台的power选项卡中,有个`power on`的按钮,我们启动服务器,就发现内核已经更新了.\nok 打完收工\n\n\n# 参考文献\n1 [How to Upgrade Ubuntu 12.04 LTS to Ubuntu 14.04 LTS](https://www.digitalocean.com/community/tutorials/how-to-upgrade-ubuntu-12-04-lts-to-ubuntu-14-04-lts)\n2 [How To Update a DigitalOcean Server's Kernel](https://www.digitalocean.com/community/tutorials/how-to-update-a-digitalocean-server-s-kernel)\n","slug":"digitalocean-switch-kernel","published":1,"updated":"2016-01-28T09:25:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yoo000rx8cdolcw2wir","content":"<p>最近在网上看到,锐速可以用来给服务器加速,然后有人用这个软件来给翻墙服务器加速,据说效果还不错,今天就折腾一下.<br><a id=\"more\"></a><br>我去锐速官网注册了账号,可惜,在官方支持的linux版本中并没有我这个内核版本.我用的是<code>3.13.0-37-generic</code>的<code>32</code>位版本,锐速官网并没有支持.<code>32</code>位版本支持的相对较少,支持的最新版本是<code>3.13.0-29-generic</code>.<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1f0fbk1mp65j213c0ozdru.jpg\" alt=\"锐速官网linux支持列表\"><br>所以没办法,只能把我的<code>ubuntu</code>降级回去,还是小折腾了一下.下面就来说下降级</p>\n<h1 id=\"实验环境：\"><a href=\"#实验环境：\" class=\"headerlink\" title=\"实验环境：\"></a>实验环境：</h1><p>digitalocean的云服务器<br>Linux OS:   Ubuntu<br>Version:    14.04<br>Kernel:     3.13.0-37-generic<br>Bits:       32-bit</p>\n<h1 id=\"实验步骤\"><a href=\"#实验步骤\" class=\"headerlink\" title=\"实验步骤\"></a>实验步骤</h1><p>ssh登录服务器,然后安装新内核,blablabla…<br>你要是这样想就跟我一样,想错了.<br>因为我们使用的是<code>digitalocean</code>的云服务器,不是普通的个人单机,所以那套方法不顶用,我照着那个方法,安装了新的内核,然后更新<code>grub</code>,怎么弄都没用,最后才找到答案.<br><strong>争取的做法:</strong><br>1 登录你的<code>digitalocean</code>控制台<br>2 点击<code>setting-&gt;kernel</code>,效果如下图<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1f0fbvo209sj20vd0kkdkf.jpg\" alt=\"控制台的kernel页面\"><br>3 点击下拉列表,找到你要的<code>kernel</code>,比如我要的是<code>Ubuntu 14.04 x32 vmlinuz-3.13.0-29-generic</code>,然后点击<code>change</code>,等一会儿,页面会自动刷新,内核更新就成功了<br>4 重要的一步,我就是这步有点问题,又浪费了点时间.更新完内核,我们发现自己的服务器查看内核的时候并没有变化,我们首先想到的是重启服务器.我们直接在终端<code>sudo reboot</code>.但是启动以后,你会发现还是没有变化,什么鬼?<br>真正的答案是,我们现在终端关机,也即是执行<code>sudo poweroff</code>,先关机.然后我们在控制台的power选项卡中,有个<code>power on</code>的按钮,我们启动服务器,就发现内核已经更新了.<br>ok 打完收工</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"https://www.digitalocean.com/community/tutorials/how-to-upgrade-ubuntu-12-04-lts-to-ubuntu-14-04-lts\" target=\"_blank\" rel=\"external\">How to Upgrade Ubuntu 12.04 LTS to Ubuntu 14.04 LTS</a><br>2 <a href=\"https://www.digitalocean.com/community/tutorials/how-to-update-a-digitalocean-server-s-kernel\" target=\"_blank\" rel=\"external\">How To Update a DigitalOcean Server’s Kernel</a></p>\n","excerpt":"<p>最近在网上看到,锐速可以用来给服务器加速,然后有人用这个软件来给翻墙服务器加速,据说效果还不错,今天就折腾一下.<br>","more":"<br>我去锐速官网注册了账号,可惜,在官方支持的linux版本中并没有我这个内核版本.我用的是<code>3.13.0-37-generic</code>的<code>32</code>位版本,锐速官网并没有支持.<code>32</code>位版本支持的相对较少,支持的最新版本是<code>3.13.0-29-generic</code>.<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1f0fbk1mp65j213c0ozdru.jpg\" alt=\"锐速官网linux支持列表\"><br>所以没办法,只能把我的<code>ubuntu</code>降级回去,还是小折腾了一下.下面就来说下降级</p>\n<h1 id=\"实验环境：\"><a href=\"#实验环境：\" class=\"headerlink\" title=\"实验环境：\"></a>实验环境：</h1><p>digitalocean的云服务器<br>Linux OS:   Ubuntu<br>Version:    14.04<br>Kernel:     3.13.0-37-generic<br>Bits:       32-bit</p>\n<h1 id=\"实验步骤\"><a href=\"#实验步骤\" class=\"headerlink\" title=\"实验步骤\"></a>实验步骤</h1><p>ssh登录服务器,然后安装新内核,blablabla…<br>你要是这样想就跟我一样,想错了.<br>因为我们使用的是<code>digitalocean</code>的云服务器,不是普通的个人单机,所以那套方法不顶用,我照着那个方法,安装了新的内核,然后更新<code>grub</code>,怎么弄都没用,最后才找到答案.<br><strong>争取的做法:</strong><br>1 登录你的<code>digitalocean</code>控制台<br>2 点击<code>setting-&gt;kernel</code>,效果如下图<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1f0fbvo209sj20vd0kkdkf.jpg\" alt=\"控制台的kernel页面\"><br>3 点击下拉列表,找到你要的<code>kernel</code>,比如我要的是<code>Ubuntu 14.04 x32 vmlinuz-3.13.0-29-generic</code>,然后点击<code>change</code>,等一会儿,页面会自动刷新,内核更新就成功了<br>4 重要的一步,我就是这步有点问题,又浪费了点时间.更新完内核,我们发现自己的服务器查看内核的时候并没有变化,我们首先想到的是重启服务器.我们直接在终端<code>sudo reboot</code>.但是启动以后,你会发现还是没有变化,什么鬼?<br>真正的答案是,我们现在终端关机,也即是执行<code>sudo poweroff</code>,先关机.然后我们在控制台的power选项卡中,有个<code>power on</code>的按钮,我们启动服务器,就发现内核已经更新了.<br>ok 打完收工</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"https://www.digitalocean.com/community/tutorials/how-to-upgrade-ubuntu-12-04-lts-to-ubuntu-14-04-lts\">How to Upgrade Ubuntu 12.04 LTS to Ubuntu 14.04 LTS</a><br>2 <a href=\"https://www.digitalocean.com/community/tutorials/how-to-update-a-digitalocean-server-s-kernel\">How To Update a DigitalOcean Server’s Kernel</a></p>"},{"title":"digitalocean配置ipv6","date":"2015-06-16T14:24:18.000Z","_content":"之前配置了ubuntu的shadowsocks,用来做代理翻墙.不过,google scholar一直无解,因为digitalocean的ipv4的地址都被google scholar墙掉了.今天(其实离现在已经好多天了),看到一篇文章,很受启发,决定使用ipv6来试试.\n<!-- more -->\n# 前提条件\n首先你得有一台digitalocean的vps,建议选择洛杉矶的服务器,\n选个5美元的就够了.\n\n# 1 新建droplet\n如果你以前没有搭建droplet,今天新建的话,比较简单,我们直接启用ipv6支持.\n![新建droplet,尤其注意勾选ipv6](http://ww3.sinaimg.cn/large/692869a3gw1etfo3h9svlj211h1tidny.jpg)\n注意勾选ipv6,后面的步骤,请参考第3步\n# 2 修改droplet\n我的droplet已经搭建好了,所以只能修改,添加ipv6的支持.\n你打开droplet的`setting`,在`network`中应该可以看到`enable ipv6`\n![带有启用ipv6选项的页面](http://ww1.sinaimg.cn/large/692869a3gw1etfosgf63kj207w05ujrn.jpg)\n启用后,稍后片刻,页面如下.\n![在droplet的setting中启用ipv6后的页面](http://ww4.sinaimg.cn/large/692869a3gw1etfohrljtmj20se0i2tb7.jpg)\n# 3 设置ipv6\n当我们启用ipv6支持以后,还需要对服务器进行设置.\n## 第一步  我们把ipv6的地址添加到网卡中\n我们编辑`/etc/network/interfaces`这个文件,使用命令`sudo vi /etc/network/interfaces`\n修改后内容如下\n```\n# This file describes the network interfaces available on your\n# system and how to activate them. For more information, see\n# interfaces(5).\n\n# The loopback network interface\nauto lo\niface lo inet loopback\n\n# The primary network interface\nauto eth0\niface eth0 inet static\n        address 你的ipv4\n        netmask 255.255.192.0\n        gateway 你的ipv4网关\n        dns-nameservers 8.8.8.8 8.8.4.4\n# 以上内容不需要修改,只需要添加下面的部分\niface eth0 inet6 static\n    address 上图中的ipv6地址\n    netmask 64\n    gateway 网关地址\n    autoconf 0\n    dns-nameservers 2001:4860:4860::8844 2001:4860:4860::8888 209.244.0.3\n\n```\n修改完成后,我们重启下服务器(因为我的重启网络服务没有效果,所以我重启了),<br>如果你看到如下图片,就表示你的ipv6配置好了,我们后面来测试一下\n![ipv6成功启用后](http://ww2.sinaimg.cn/large/692869a3gw1etfp7pj65dj20hs04fzlv.jpg)\n## 第二步 测试ipv6 是否配置成功\n我们使用ping命令来测试,ping是测试ipv4的,测试ipv6是用ping6,命令如下:\n```bash\nping6 ipv6.google.com\n\nPING ipv6.google.com(nuq04s29-in-x0e.1e100.net) 56 data bytes\n64 bytes from nuq04s29-in-x0e.1e100.net: icmp_seq=1 ttl=57 time=2.23 ms\n64 bytes from nuq04s29-in-x0e.1e100.net: icmp_seq=2 ttl=57 time=1.97 ms\n64 bytes from nuq04s29-in-x0e.1e100.net: icmp_seq=3 ttl=57 time=1.95 ms\n64 bytes from nuq04s29-in-x0e.1e100.net: icmp_seq=4 ttl=57 time=2.14 ms\n64 bytes from nuq04s29-in-x0e.1e100.net: icmp_seq=5 ttl=57 time=1.93 ms\n\n```\n如果发包成功,那就可以进行下一步了\n# 4 修改hosts\n因为ipv4无法访问google scholar,所以我们配置下hosts,让所有对访问google学术的,都使用ipv6去访问.执行命令如下:\n```bash\nsudo vi /etc/hosts\n```\n我们在hosts文件的后面,添加如下内容:\n```\n2607:f8b0:4007:805::100f scholar.google.cn\n2607:f8b0:4007:805::100f scholar.google.com\n2607:f8b0:4007:805::100f scholar.google.com.hk\n2607:f8b0:4007:805::100f scholar.l.google.com\n```\nok,打完收工,睡觉\n\n\n# 参考文献\n1 [一个解决 Google Scholar block DigitalOcean SFO IP 的方法](https://www.v2ex.com/t/163133)\n2 [How To Enable IPv6 for DigitalOcean Droplets](https://www.digitalocean.com/community/tutorials/how-to-enable-ipv6-for-digitalocean-droplets)\n","source":"_posts/digitalocean-support-google-scholar-by-ipv6.md","raw":"title: digitalocean配置ipv6\ndate: 2015-06-16 22:24:18\ntags:\n- ubuntu\n- ipv6\n- digitalocean\n- shadowsocks\ncategories:\n- Linux\n---\n之前配置了ubuntu的shadowsocks,用来做代理翻墙.不过,google scholar一直无解,因为digitalocean的ipv4的地址都被google scholar墙掉了.今天(其实离现在已经好多天了),看到一篇文章,很受启发,决定使用ipv6来试试.\n<!-- more -->\n# 前提条件\n首先你得有一台digitalocean的vps,建议选择洛杉矶的服务器,\n选个5美元的就够了.\n\n# 1 新建droplet\n如果你以前没有搭建droplet,今天新建的话,比较简单,我们直接启用ipv6支持.\n![新建droplet,尤其注意勾选ipv6](http://ww3.sinaimg.cn/large/692869a3gw1etfo3h9svlj211h1tidny.jpg)\n注意勾选ipv6,后面的步骤,请参考第3步\n# 2 修改droplet\n我的droplet已经搭建好了,所以只能修改,添加ipv6的支持.\n你打开droplet的`setting`,在`network`中应该可以看到`enable ipv6`\n![带有启用ipv6选项的页面](http://ww1.sinaimg.cn/large/692869a3gw1etfosgf63kj207w05ujrn.jpg)\n启用后,稍后片刻,页面如下.\n![在droplet的setting中启用ipv6后的页面](http://ww4.sinaimg.cn/large/692869a3gw1etfohrljtmj20se0i2tb7.jpg)\n# 3 设置ipv6\n当我们启用ipv6支持以后,还需要对服务器进行设置.\n## 第一步  我们把ipv6的地址添加到网卡中\n我们编辑`/etc/network/interfaces`这个文件,使用命令`sudo vi /etc/network/interfaces`\n修改后内容如下\n```\n# This file describes the network interfaces available on your\n# system and how to activate them. For more information, see\n# interfaces(5).\n\n# The loopback network interface\nauto lo\niface lo inet loopback\n\n# The primary network interface\nauto eth0\niface eth0 inet static\n        address 你的ipv4\n        netmask 255.255.192.0\n        gateway 你的ipv4网关\n        dns-nameservers 8.8.8.8 8.8.4.4\n# 以上内容不需要修改,只需要添加下面的部分\niface eth0 inet6 static\n    address 上图中的ipv6地址\n    netmask 64\n    gateway 网关地址\n    autoconf 0\n    dns-nameservers 2001:4860:4860::8844 2001:4860:4860::8888 209.244.0.3\n\n```\n修改完成后,我们重启下服务器(因为我的重启网络服务没有效果,所以我重启了),<br>如果你看到如下图片,就表示你的ipv6配置好了,我们后面来测试一下\n![ipv6成功启用后](http://ww2.sinaimg.cn/large/692869a3gw1etfp7pj65dj20hs04fzlv.jpg)\n## 第二步 测试ipv6 是否配置成功\n我们使用ping命令来测试,ping是测试ipv4的,测试ipv6是用ping6,命令如下:\n```bash\nping6 ipv6.google.com\n\nPING ipv6.google.com(nuq04s29-in-x0e.1e100.net) 56 data bytes\n64 bytes from nuq04s29-in-x0e.1e100.net: icmp_seq=1 ttl=57 time=2.23 ms\n64 bytes from nuq04s29-in-x0e.1e100.net: icmp_seq=2 ttl=57 time=1.97 ms\n64 bytes from nuq04s29-in-x0e.1e100.net: icmp_seq=3 ttl=57 time=1.95 ms\n64 bytes from nuq04s29-in-x0e.1e100.net: icmp_seq=4 ttl=57 time=2.14 ms\n64 bytes from nuq04s29-in-x0e.1e100.net: icmp_seq=5 ttl=57 time=1.93 ms\n\n```\n如果发包成功,那就可以进行下一步了\n# 4 修改hosts\n因为ipv4无法访问google scholar,所以我们配置下hosts,让所有对访问google学术的,都使用ipv6去访问.执行命令如下:\n```bash\nsudo vi /etc/hosts\n```\n我们在hosts文件的后面,添加如下内容:\n```\n2607:f8b0:4007:805::100f scholar.google.cn\n2607:f8b0:4007:805::100f scholar.google.com\n2607:f8b0:4007:805::100f scholar.google.com.hk\n2607:f8b0:4007:805::100f scholar.l.google.com\n```\nok,打完收工,睡觉\n\n\n# 参考文献\n1 [一个解决 Google Scholar block DigitalOcean SFO IP 的方法](https://www.v2ex.com/t/163133)\n2 [How To Enable IPv6 for DigitalOcean Droplets](https://www.digitalocean.com/community/tutorials/how-to-enable-ipv6-for-digitalocean-droplets)\n","slug":"digitalocean-support-google-scholar-by-ipv6","published":1,"updated":"2015-10-29T06:08:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yoq000sx8cd6bve6lsp","content":"<p>之前配置了ubuntu的shadowsocks,用来做代理翻墙.不过,google scholar一直无解,因为digitalocean的ipv4的地址都被google scholar墙掉了.今天(其实离现在已经好多天了),看到一篇文章,很受启发,决定使用ipv6来试试.<br><a id=\"more\"></a></p>\n<h1 id=\"前提条件\"><a href=\"#前提条件\" class=\"headerlink\" title=\"前提条件\"></a>前提条件</h1><p>首先你得有一台digitalocean的vps,建议选择洛杉矶的服务器,<br>选个5美元的就够了.</p>\n<h1 id=\"1-新建droplet\"><a href=\"#1-新建droplet\" class=\"headerlink\" title=\"1 新建droplet\"></a>1 新建droplet</h1><p>如果你以前没有搭建droplet,今天新建的话,比较简单,我们直接启用ipv6支持.<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1etfo3h9svlj211h1tidny.jpg\" alt=\"新建droplet,尤其注意勾选ipv6\"><br>注意勾选ipv6,后面的步骤,请参考第3步</p>\n<h1 id=\"2-修改droplet\"><a href=\"#2-修改droplet\" class=\"headerlink\" title=\"2 修改droplet\"></a>2 修改droplet</h1><p>我的droplet已经搭建好了,所以只能修改,添加ipv6的支持.<br>你打开droplet的<code>setting</code>,在<code>network</code>中应该可以看到<code>enable ipv6</code><br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1etfosgf63kj207w05ujrn.jpg\" alt=\"带有启用ipv6选项的页面\"><br>启用后,稍后片刻,页面如下.<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1etfohrljtmj20se0i2tb7.jpg\" alt=\"在droplet的setting中启用ipv6后的页面\"></p>\n<h1 id=\"3-设置ipv6\"><a href=\"#3-设置ipv6\" class=\"headerlink\" title=\"3 设置ipv6\"></a>3 设置ipv6</h1><p>当我们启用ipv6支持以后,还需要对服务器进行设置.</p>\n<h2 id=\"第一步-我们把ipv6的地址添加到网卡中\"><a href=\"#第一步-我们把ipv6的地址添加到网卡中\" class=\"headerlink\" title=\"第一步  我们把ipv6的地址添加到网卡中\"></a>第一步  我们把ipv6的地址添加到网卡中</h2><p>我们编辑<code>/etc/network/interfaces</code>这个文件,使用命令<code>sudo vi /etc/network/interfaces</code><br>修改后内容如下<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"># <span class=\"selector-tag\">This</span> <span class=\"selector-tag\">file</span> <span class=\"selector-tag\">describes</span> <span class=\"selector-tag\">the</span> <span class=\"selector-tag\">network</span> <span class=\"selector-tag\">interfaces</span> <span class=\"selector-tag\">available</span> <span class=\"selector-tag\">on</span> <span class=\"selector-tag\">your</span></div><div class=\"line\"># <span class=\"selector-tag\">system</span> <span class=\"selector-tag\">and</span> <span class=\"selector-tag\">how</span> <span class=\"selector-tag\">to</span> <span class=\"selector-tag\">activate</span> <span class=\"selector-tag\">them</span>. <span class=\"selector-tag\">For</span> <span class=\"selector-tag\">more</span> <span class=\"selector-tag\">information</span>, <span class=\"selector-tag\">see</span></div><div class=\"line\"># <span class=\"selector-tag\">interfaces</span>(5).</div><div class=\"line\"></div><div class=\"line\"># <span class=\"selector-tag\">The</span> <span class=\"selector-tag\">loopback</span> <span class=\"selector-tag\">network</span> <span class=\"selector-tag\">interface</span></div><div class=\"line\"><span class=\"selector-tag\">auto</span> <span class=\"selector-tag\">lo</span></div><div class=\"line\"><span class=\"selector-tag\">iface</span> <span class=\"selector-tag\">lo</span> <span class=\"selector-tag\">inet</span> <span class=\"selector-tag\">loopback</span></div><div class=\"line\"></div><div class=\"line\"># <span class=\"selector-tag\">The</span> <span class=\"selector-tag\">primary</span> <span class=\"selector-tag\">network</span> <span class=\"selector-tag\">interface</span></div><div class=\"line\"><span class=\"selector-tag\">auto</span> <span class=\"selector-tag\">eth0</span></div><div class=\"line\"><span class=\"selector-tag\">iface</span> <span class=\"selector-tag\">eth0</span> <span class=\"selector-tag\">inet</span> <span class=\"selector-tag\">static</span></div><div class=\"line\">        <span class=\"selector-tag\">address</span> 你的<span class=\"selector-tag\">ipv4</span></div><div class=\"line\">        <span class=\"selector-tag\">netmask</span> 255<span class=\"selector-class\">.255</span><span class=\"selector-class\">.192</span><span class=\"selector-class\">.0</span></div><div class=\"line\">        <span class=\"selector-tag\">gateway</span> 你的<span class=\"selector-tag\">ipv4</span>网关</div><div class=\"line\">        <span class=\"selector-tag\">dns-nameservers</span> 8<span class=\"selector-class\">.8</span><span class=\"selector-class\">.8</span><span class=\"selector-class\">.8</span> 8<span class=\"selector-class\">.8</span><span class=\"selector-class\">.4</span><span class=\"selector-class\">.4</span></div><div class=\"line\"># 以上内容不需要修改,只需要添加下面的部分</div><div class=\"line\"><span class=\"selector-tag\">iface</span> <span class=\"selector-tag\">eth0</span> <span class=\"selector-tag\">inet6</span> <span class=\"selector-tag\">static</span></div><div class=\"line\">    <span class=\"selector-tag\">address</span> 上图中的<span class=\"selector-tag\">ipv6</span>地址</div><div class=\"line\">    <span class=\"selector-tag\">netmask</span> 64</div><div class=\"line\">    <span class=\"selector-tag\">gateway</span> 网关地址</div><div class=\"line\">    <span class=\"selector-tag\">autoconf</span> 0</div><div class=\"line\">    <span class=\"selector-tag\">dns-nameservers</span> 2001<span class=\"selector-pseudo\">:4860</span><span class=\"selector-pseudo\">:4860</span><span class=\"selector-pseudo\">::8844</span> 2001<span class=\"selector-pseudo\">:4860</span><span class=\"selector-pseudo\">:4860</span><span class=\"selector-pseudo\">::8888</span> 209<span class=\"selector-class\">.244</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.3</span></div></pre></td></tr></table></figure></p>\n<p>修改完成后,我们重启下服务器(因为我的重启网络服务没有效果,所以我重启了),<br>如果你看到如下图片,就表示你的ipv6配置好了,我们后面来测试一下<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1etfp7pj65dj20hs04fzlv.jpg\" alt=\"ipv6成功启用后\"></p>\n<h2 id=\"第二步-测试ipv6-是否配置成功\"><a href=\"#第二步-测试ipv6-是否配置成功\" class=\"headerlink\" title=\"第二步 测试ipv6 是否配置成功\"></a>第二步 测试ipv6 是否配置成功</h2><p>我们使用ping命令来测试,ping是测试ipv4的,测试ipv6是用ping6,命令如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">ping6 ipv6.google.com</div><div class=\"line\"></div><div class=\"line\">PING ipv6.google.com(nuq04s29-in-x0e.1e100.net) 56 data bytes</div><div class=\"line\">64 bytes from nuq04s29-in-x0e.1e100.net: icmp_seq=1 ttl=57 time=2.23 ms</div><div class=\"line\">64 bytes from nuq04s29-in-x0e.1e100.net: icmp_seq=2 ttl=57 time=1.97 ms</div><div class=\"line\">64 bytes from nuq04s29-in-x0e.1e100.net: icmp_seq=3 ttl=57 time=1.95 ms</div><div class=\"line\">64 bytes from nuq04s29-in-x0e.1e100.net: icmp_seq=4 ttl=57 time=2.14 ms</div><div class=\"line\">64 bytes from nuq04s29-in-x0e.1e100.net: icmp_seq=5 ttl=57 time=1.93 ms</div></pre></td></tr></table></figure></p>\n<p>如果发包成功,那就可以进行下一步了</p>\n<h1 id=\"4-修改hosts\"><a href=\"#4-修改hosts\" class=\"headerlink\" title=\"4 修改hosts\"></a>4 修改hosts</h1><p>因为ipv4无法访问google scholar,所以我们配置下hosts,让所有对访问google学术的,都使用ipv6去访问.执行命令如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vi /etc/hosts</div></pre></td></tr></table></figure></p>\n<p>我们在hosts文件的后面,添加如下内容:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">2607<span class=\"selector-pseudo\">:f8b0</span><span class=\"selector-pseudo\">:4007</span><span class=\"selector-pseudo\">:805</span><span class=\"selector-pseudo\">::100f</span> <span class=\"selector-tag\">scholar</span><span class=\"selector-class\">.google</span><span class=\"selector-class\">.cn</span></div><div class=\"line\">2607<span class=\"selector-pseudo\">:f8b0</span><span class=\"selector-pseudo\">:4007</span><span class=\"selector-pseudo\">:805</span><span class=\"selector-pseudo\">::100f</span> <span class=\"selector-tag\">scholar</span><span class=\"selector-class\">.google</span><span class=\"selector-class\">.com</span></div><div class=\"line\">2607<span class=\"selector-pseudo\">:f8b0</span><span class=\"selector-pseudo\">:4007</span><span class=\"selector-pseudo\">:805</span><span class=\"selector-pseudo\">::100f</span> <span class=\"selector-tag\">scholar</span><span class=\"selector-class\">.google</span><span class=\"selector-class\">.com</span><span class=\"selector-class\">.hk</span></div><div class=\"line\">2607<span class=\"selector-pseudo\">:f8b0</span><span class=\"selector-pseudo\">:4007</span><span class=\"selector-pseudo\">:805</span><span class=\"selector-pseudo\">::100f</span> <span class=\"selector-tag\">scholar</span><span class=\"selector-class\">.l</span><span class=\"selector-class\">.google</span><span class=\"selector-class\">.com</span></div></pre></td></tr></table></figure></p>\n<p>ok,打完收工,睡觉</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"https://www.v2ex.com/t/163133\" target=\"_blank\" rel=\"external\">一个解决 Google Scholar block DigitalOcean SFO IP 的方法</a><br>2 <a href=\"https://www.digitalocean.com/community/tutorials/how-to-enable-ipv6-for-digitalocean-droplets\" target=\"_blank\" rel=\"external\">How To Enable IPv6 for DigitalOcean Droplets</a></p>\n","excerpt":"<p>之前配置了ubuntu的shadowsocks,用来做代理翻墙.不过,google scholar一直无解,因为digitalocean的ipv4的地址都被google scholar墙掉了.今天(其实离现在已经好多天了),看到一篇文章,很受启发,决定使用ipv6来试试.<br>","more":"</p>\n<h1 id=\"前提条件\"><a href=\"#前提条件\" class=\"headerlink\" title=\"前提条件\"></a>前提条件</h1><p>首先你得有一台digitalocean的vps,建议选择洛杉矶的服务器,<br>选个5美元的就够了.</p>\n<h1 id=\"1-新建droplet\"><a href=\"#1-新建droplet\" class=\"headerlink\" title=\"1 新建droplet\"></a>1 新建droplet</h1><p>如果你以前没有搭建droplet,今天新建的话,比较简单,我们直接启用ipv6支持.<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1etfo3h9svlj211h1tidny.jpg\" alt=\"新建droplet,尤其注意勾选ipv6\"><br>注意勾选ipv6,后面的步骤,请参考第3步</p>\n<h1 id=\"2-修改droplet\"><a href=\"#2-修改droplet\" class=\"headerlink\" title=\"2 修改droplet\"></a>2 修改droplet</h1><p>我的droplet已经搭建好了,所以只能修改,添加ipv6的支持.<br>你打开droplet的<code>setting</code>,在<code>network</code>中应该可以看到<code>enable ipv6</code><br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1etfosgf63kj207w05ujrn.jpg\" alt=\"带有启用ipv6选项的页面\"><br>启用后,稍后片刻,页面如下.<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1etfohrljtmj20se0i2tb7.jpg\" alt=\"在droplet的setting中启用ipv6后的页面\"></p>\n<h1 id=\"3-设置ipv6\"><a href=\"#3-设置ipv6\" class=\"headerlink\" title=\"3 设置ipv6\"></a>3 设置ipv6</h1><p>当我们启用ipv6支持以后,还需要对服务器进行设置.</p>\n<h2 id=\"第一步-我们把ipv6的地址添加到网卡中\"><a href=\"#第一步-我们把ipv6的地址添加到网卡中\" class=\"headerlink\" title=\"第一步  我们把ipv6的地址添加到网卡中\"></a>第一步  我们把ipv6的地址添加到网卡中</h2><p>我们编辑<code>/etc/network/interfaces</code>这个文件,使用命令<code>sudo vi /etc/network/interfaces</code><br>修改后内容如下<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"># <span class=\"selector-tag\">This</span> <span class=\"selector-tag\">file</span> <span class=\"selector-tag\">describes</span> <span class=\"selector-tag\">the</span> <span class=\"selector-tag\">network</span> <span class=\"selector-tag\">interfaces</span> <span class=\"selector-tag\">available</span> <span class=\"selector-tag\">on</span> <span class=\"selector-tag\">your</span></div><div class=\"line\"># <span class=\"selector-tag\">system</span> <span class=\"selector-tag\">and</span> <span class=\"selector-tag\">how</span> <span class=\"selector-tag\">to</span> <span class=\"selector-tag\">activate</span> <span class=\"selector-tag\">them</span>. <span class=\"selector-tag\">For</span> <span class=\"selector-tag\">more</span> <span class=\"selector-tag\">information</span>, <span class=\"selector-tag\">see</span></div><div class=\"line\"># <span class=\"selector-tag\">interfaces</span>(5).</div><div class=\"line\"></div><div class=\"line\"># <span class=\"selector-tag\">The</span> <span class=\"selector-tag\">loopback</span> <span class=\"selector-tag\">network</span> <span class=\"selector-tag\">interface</span></div><div class=\"line\"><span class=\"selector-tag\">auto</span> <span class=\"selector-tag\">lo</span></div><div class=\"line\"><span class=\"selector-tag\">iface</span> <span class=\"selector-tag\">lo</span> <span class=\"selector-tag\">inet</span> <span class=\"selector-tag\">loopback</span></div><div class=\"line\"></div><div class=\"line\"># <span class=\"selector-tag\">The</span> <span class=\"selector-tag\">primary</span> <span class=\"selector-tag\">network</span> <span class=\"selector-tag\">interface</span></div><div class=\"line\"><span class=\"selector-tag\">auto</span> <span class=\"selector-tag\">eth0</span></div><div class=\"line\"><span class=\"selector-tag\">iface</span> <span class=\"selector-tag\">eth0</span> <span class=\"selector-tag\">inet</span> <span class=\"selector-tag\">static</span></div><div class=\"line\">        <span class=\"selector-tag\">address</span> 你的<span class=\"selector-tag\">ipv4</span></div><div class=\"line\">        <span class=\"selector-tag\">netmask</span> 255<span class=\"selector-class\">.255</span><span class=\"selector-class\">.192</span><span class=\"selector-class\">.0</span></div><div class=\"line\">        <span class=\"selector-tag\">gateway</span> 你的<span class=\"selector-tag\">ipv4</span>网关</div><div class=\"line\">        <span class=\"selector-tag\">dns-nameservers</span> 8<span class=\"selector-class\">.8</span><span class=\"selector-class\">.8</span><span class=\"selector-class\">.8</span> 8<span class=\"selector-class\">.8</span><span class=\"selector-class\">.4</span><span class=\"selector-class\">.4</span></div><div class=\"line\"># 以上内容不需要修改,只需要添加下面的部分</div><div class=\"line\"><span class=\"selector-tag\">iface</span> <span class=\"selector-tag\">eth0</span> <span class=\"selector-tag\">inet6</span> <span class=\"selector-tag\">static</span></div><div class=\"line\">    <span class=\"selector-tag\">address</span> 上图中的<span class=\"selector-tag\">ipv6</span>地址</div><div class=\"line\">    <span class=\"selector-tag\">netmask</span> 64</div><div class=\"line\">    <span class=\"selector-tag\">gateway</span> 网关地址</div><div class=\"line\">    <span class=\"selector-tag\">autoconf</span> 0</div><div class=\"line\">    <span class=\"selector-tag\">dns-nameservers</span> 2001<span class=\"selector-pseudo\">:4860</span><span class=\"selector-pseudo\">:4860</span><span class=\"selector-pseudo\">::8844</span> 2001<span class=\"selector-pseudo\">:4860</span><span class=\"selector-pseudo\">:4860</span><span class=\"selector-pseudo\">::8888</span> 209<span class=\"selector-class\">.244</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.3</span></div></pre></td></tr></table></figure></p>\n<p>修改完成后,我们重启下服务器(因为我的重启网络服务没有效果,所以我重启了),<br>如果你看到如下图片,就表示你的ipv6配置好了,我们后面来测试一下<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1etfp7pj65dj20hs04fzlv.jpg\" alt=\"ipv6成功启用后\"></p>\n<h2 id=\"第二步-测试ipv6-是否配置成功\"><a href=\"#第二步-测试ipv6-是否配置成功\" class=\"headerlink\" title=\"第二步 测试ipv6 是否配置成功\"></a>第二步 测试ipv6 是否配置成功</h2><p>我们使用ping命令来测试,ping是测试ipv4的,测试ipv6是用ping6,命令如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">ping6 ipv6.google.com</div><div class=\"line\"></div><div class=\"line\">PING ipv6.google.com(nuq04s29-in-x0e.1e100.net) 56 data bytes</div><div class=\"line\">64 bytes from nuq04s29-in-x0e.1e100.net: icmp_seq=1 ttl=57 time=2.23 ms</div><div class=\"line\">64 bytes from nuq04s29-in-x0e.1e100.net: icmp_seq=2 ttl=57 time=1.97 ms</div><div class=\"line\">64 bytes from nuq04s29-in-x0e.1e100.net: icmp_seq=3 ttl=57 time=1.95 ms</div><div class=\"line\">64 bytes from nuq04s29-in-x0e.1e100.net: icmp_seq=4 ttl=57 time=2.14 ms</div><div class=\"line\">64 bytes from nuq04s29-in-x0e.1e100.net: icmp_seq=5 ttl=57 time=1.93 ms</div></pre></td></tr></table></figure></p>\n<p>如果发包成功,那就可以进行下一步了</p>\n<h1 id=\"4-修改hosts\"><a href=\"#4-修改hosts\" class=\"headerlink\" title=\"4 修改hosts\"></a>4 修改hosts</h1><p>因为ipv4无法访问google scholar,所以我们配置下hosts,让所有对访问google学术的,都使用ipv6去访问.执行命令如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vi /etc/hosts</div></pre></td></tr></table></figure></p>\n<p>我们在hosts文件的后面,添加如下内容:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">2607<span class=\"selector-pseudo\">:f8b0</span><span class=\"selector-pseudo\">:4007</span><span class=\"selector-pseudo\">:805</span><span class=\"selector-pseudo\">::100f</span> <span class=\"selector-tag\">scholar</span><span class=\"selector-class\">.google</span><span class=\"selector-class\">.cn</span></div><div class=\"line\">2607<span class=\"selector-pseudo\">:f8b0</span><span class=\"selector-pseudo\">:4007</span><span class=\"selector-pseudo\">:805</span><span class=\"selector-pseudo\">::100f</span> <span class=\"selector-tag\">scholar</span><span class=\"selector-class\">.google</span><span class=\"selector-class\">.com</span></div><div class=\"line\">2607<span class=\"selector-pseudo\">:f8b0</span><span class=\"selector-pseudo\">:4007</span><span class=\"selector-pseudo\">:805</span><span class=\"selector-pseudo\">::100f</span> <span class=\"selector-tag\">scholar</span><span class=\"selector-class\">.google</span><span class=\"selector-class\">.com</span><span class=\"selector-class\">.hk</span></div><div class=\"line\">2607<span class=\"selector-pseudo\">:f8b0</span><span class=\"selector-pseudo\">:4007</span><span class=\"selector-pseudo\">:805</span><span class=\"selector-pseudo\">::100f</span> <span class=\"selector-tag\">scholar</span><span class=\"selector-class\">.l</span><span class=\"selector-class\">.google</span><span class=\"selector-class\">.com</span></div></pre></td></tr></table></figure></p>\n<p>ok,打完收工,睡觉</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"https://www.v2ex.com/t/163133\">一个解决 Google Scholar block DigitalOcean SFO IP 的方法</a><br>2 <a href=\"https://www.digitalocean.com/community/tutorials/how-to-enable-ipv6-for-digitalocean-droplets\">How To Enable IPv6 for DigitalOcean Droplets</a></p>"},{"title":"安装和配置hexo 3.0","date":"2015-06-16T14:22:43.000Z","_content":"update：2015-06-24 16:56\n额，谁会相信，其实这篇文章是拖了一周之后才写的。\n\n因为最近换回了win7，所以之前搭建的hexo环境都没了，需要重新搭建。在网上看到hexo 3.0 还可以，而且，我妹子也换3.0了，so  我也换成hexo 3.0的。\n<!-- more -->\n# 安装环境\n**操作系统**：win7\n**相关版本**：  \n            hexo-cli: 0.1.7\n            os: Windows_NT 6.1.7601 win32 x64\n            node: 0.12.4\n\n\n# 安装过程\n# # 1. 安装Github for windows\n因为我之前就在用Github,所以早就安装了这个.已经装过的同学请忽略这一段.\n下载 [Github for windows](https://windows.github.com/ \"Github for windows\") 并执行即可完成安装(*在线安装,会有点慢*)。这个软件的的好处是有一个带GUI的界面,还有一个终端界面.如图所示\n![Github for windows](http://ww2.sinaimg.cn/large/692869a3jw1emplp1lz31j204w033mx0.jpg)\n![GUI and Bash](http://ww2.sinaimg.cn/large/692869a3gw1empluh6hvej210b0j741r.jpg)\n\n# # 2. 安装Node.js\n在 Windows 环境下安装 [Node.js](http://nodejs.org/ \"Node.js 官网\") 非常简单，仅须下载安装文件并执行即可完成安装。（win下建议下载msi格式的，因为这样可以不用配置环境变量之类的）\n\n# # 3. 测试node.js是否安装\n在任何控制台输入(可以按windows键+R,输入cmd,然后输入npm,一般来说不会有问题)\n```\nnpm\n```\n返回值如下\n```\nUsage: npm <command>\n\nwhere <command> is one of:\n    add-user, adduser, apihelp, author, bin, bugs, c, cache,\n    completion, config, ddp, dedupe, deprecate, docs, edit,\n    explore, faq, find, find-dupes, get, help, help-search,\n    home, i, info, init, install, isntall, issues, la, link,\n    list, ll, ln, login, ls, outdated, owner, pack, prefix,\n    prune, publish, r, rb, rebuild, remove, repo, restart, rm,\n    root, run-script, s, se, search, set, show, shrinkwrap,\n    star, stars, start, stop, submodule, t, tag, test, tst, un,\n    uninstall, unlink, unpublish, unstar, up, update, v,\n    version, view, whoami\n\nnpm <cmd> -h     quick help on <cmd>\nnpm -l           display full usage info\nnpm faq          commonly asked questions\nnpm help <term>  search for help on <term>\nnpm help npm     involved overview\n\nSpecify configs in the ini-formatted file:\n    C:\\Users\\chenhao\\.npmrc\nor on the command line via: npm <command> --key value\nConfig info can be viewed via: npm help config\n\nnpm@1.4.28 D:\\Program Files (x86)\\nodejs\\node_modules\\npm\n```\n看到这个结果,就表示你的node.js已经安装上去了\n*感谢我们家笨笨的反馈：*此处如果npm无效，首先确定win下你采用的是msi格式的安装文件，然后**重启**下电脑，应该就正常了。\n# # 4. 安装hexo\n接下来的操作我都是用**Github for windows**自带的Bash来完成的,因为后面会涉及到SSH,用**Github for windows**,就可以避免这个问题.\n- 在Bash中输入以下命令\n```\nnpm install hexo-cli -g\n```\n- 创建hexo文件夹\n创建你hexo放置的文件夹,先用Bash进入到目标文件夹,比如我的是F:/blog/,接下来初始化hexo,自动生成相关的文件,在F:/blog/环境下,输入\n```\ncd /f/blog  # 这个命令表示当前进入目录为f：/blog/\nhexo init\n```\n- 安装依赖包\n```\nnpm install\n```\n- 本地预览,做完以上操作,可以本地预览一下\n```\nhexo g\nhexo s\n```\n以上两条命令的意思是:\n生成相关文件(就是生成目标html,静态博客嘛,就是很多html组成)\n打开本地服务器预览(node.js就是干这事的,点击访问<http://localhost:4000>,就可以看到了)\n**update-2015-09-29:**在3.0版本中将`hexo server`(简写命令就是`hexo s`),独立成模块,需要手动安装,不然你执行`hexo s`,就会出现无法识别这个命令\n安装方法和后面配置模块一样\n```bash\nnpm install hexo-server --save\n```\n**ok**,到这里,博客搭建基本完成,现在要做的就是把它发布到你的Github上去\n---\n接下来,教你怎么发布到Github上去\n# 注册Github\n这一步没什么说的,如果你连简单的注册都不会,我也不会教你╮(╯▽╰)╭\n# 创建公共库\n在自己Github主页右下角，创建一个新的repository([点这里](https://github.com/new '点我新建'))。比如我的Github账号是Jackroyal，那么我应该创建的repository名字应该是Jackroyal.github.io(注意你的repository名字就是Jackroyal.github.io,我之前用的是Jackroyal怎么尝试都不行)。\n> PS:有个大小写的问题其实我注册的是Jackroyal,大写的J,但是我访问的时候特别是带https的链接,他会自动转为小写访问.怎么说呢?简单点,你就按照你的用户名来,该大写大写,该小写小写\n\n# 部署\n现在万事俱备,只差部署了.\nhexo3.0,跟2.0不同,deploy插件我们需要手动去安装,执行如下命令:\n```\nnpm install hexo-deployer-git --save\n```\n接下来,我们来配置deploy的信息,修改`_config.yml`.\n这个文件在路径是F:/blog/_config.yml.\n用编辑器把它打开,修改最后一段\n```\ndeploy:\n  type: git\n  repo: https://github.com/Jackroyal/Jackroyal.github.io.git\n  branch: master\n```\n照着我的这个格式修改就好了,把我里面的用户名替换成你的.\n至此基本完成所有搭建步骤.\n# 上传\n我们开始上传项目的代码,再重复一次,我一直以来用的工具都是_Github for windows_自带的Bash,所以我没有配置SSH,如果你用的windows自带的终端或者其他比如msysgit,可能需要配置SSH,不然无法使用Github(点击[`这里`](https://help.github.com/articles/generating-ssh-keys/ \"https://help.github.com/articles/generating-ssh-keys/\")查看官方教程).\n我们输入以下命令\n```\nhexo g\nhexo d\n```\n或者偷个懒\n```\nhexo d -g\n```\nok,现在就可以去看看你的个人主页了,逼格满满有木有.\n如果发布不成功,继续往下面看.\n# 配置hexo\n上面的内容和之前一样,接下来写,配置hexo 3.0的步骤.\n\n## 1 安装rss支持\n执行如下命令:\n```\nnpm install hexo-generator-feed --save\n```\n我们接下来修改配置文件,编辑`_config.yml`\n```\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n```\n## 2 安装sitemap支持\n执行如下命令:\n```\nnpm install hexo-generator-sitemap --save\n```\n我们接下来修改配置文件,编辑`_config.yml`\n```\nsitemap:\n    path: sitemap.xml\n```\n\n**PS:类似的,还可以安装其他的插件,尤其注意`hexo-deployer-git`这个插件,如果你发布不成功,可能是这个插件没有装**\n```\nnpm install hexo-generator-index --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-tag --save\nnpm install hexo-deployer-git --save\n```\n## 3 最终修改后的配置文件\n我把我的配置文件分享出来给大家参考下:\n```\n# Hexo Configuration\n# # Docs: http://hexo.io/docs/configuration.html\n# # Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: 搁浅St的blog\nsubtitle: 我最喜欢笨笨\ndescription: jackroyal 博客 搁浅St 笨笨\nauthor: 搁浅St\nauthor: John Doe\nlanguage: zh-CN\ntimezone:\n\n# URL\n# # If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://jackroyal.github.io\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: true\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format\n# # Hexo uses Moment.js to parse and display date\n# # You can customize the date format as defined in\n# # http://momentjs.com/docs/# /displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n# # Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n\n# Extensions\n# # Plugins: http://hexo.io/plugins/\n\nindex_generator:\n  per_page: 10 ## 首页默认10篇文章标题 如果值为0不分页\n\narchive_generator:\n    per_page: 10 ## 归档页面默认10篇文章标题\n    yearly: true  ## 生成年视图\n    monthly: true ## 生成月视图\n\ntag_generator:\n    per_page: 10 ## 标签分类页面默认10篇文章\n\ncategory_generator:\n    per_page: 10 ### 分类页面默认10篇文章\n\nsitemap:\n    path: sitemap.xml\n\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n\nduoshuo_shortname: jackroyal  ## 这里填写你的多说的短网址\n# # Themes: http://hexo.io/themes/\ntheme: light   ## 主题的名称,我用的是light,默认的是landscape\n\n# Deployment\n# # Docs: http://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: https://github.com/Jackroyal/Jackroyal.github.io.git\n  branch: master\n```\n\nhexo 3.0有一些新的特性,插件的封装更好了,插件安装和管理很方便.\nhexo还支持多发布,可以同时发布到github和gitcafe.\n\n# 参考文献\n1 [hexo 服务器](https://hexo.io/zh-cn/docs/server.html)\n","source":"_posts/hexo-3-0-update.md","raw":"title: 安装和配置hexo 3.0\ndate: 2015-06-16 22:22:43\ntags:\n- hexo\ncategories:\n- hexo\n---\nupdate：2015-06-24 16:56\n额，谁会相信，其实这篇文章是拖了一周之后才写的。\n\n因为最近换回了win7，所以之前搭建的hexo环境都没了，需要重新搭建。在网上看到hexo 3.0 还可以，而且，我妹子也换3.0了，so  我也换成hexo 3.0的。\n<!-- more -->\n# 安装环境\n**操作系统**：win7\n**相关版本**：  \n            hexo-cli: 0.1.7\n            os: Windows_NT 6.1.7601 win32 x64\n            node: 0.12.4\n\n\n# 安装过程\n# # 1. 安装Github for windows\n因为我之前就在用Github,所以早就安装了这个.已经装过的同学请忽略这一段.\n下载 [Github for windows](https://windows.github.com/ \"Github for windows\") 并执行即可完成安装(*在线安装,会有点慢*)。这个软件的的好处是有一个带GUI的界面,还有一个终端界面.如图所示\n![Github for windows](http://ww2.sinaimg.cn/large/692869a3jw1emplp1lz31j204w033mx0.jpg)\n![GUI and Bash](http://ww2.sinaimg.cn/large/692869a3gw1empluh6hvej210b0j741r.jpg)\n\n# # 2. 安装Node.js\n在 Windows 环境下安装 [Node.js](http://nodejs.org/ \"Node.js 官网\") 非常简单，仅须下载安装文件并执行即可完成安装。（win下建议下载msi格式的，因为这样可以不用配置环境变量之类的）\n\n# # 3. 测试node.js是否安装\n在任何控制台输入(可以按windows键+R,输入cmd,然后输入npm,一般来说不会有问题)\n```\nnpm\n```\n返回值如下\n```\nUsage: npm <command>\n\nwhere <command> is one of:\n    add-user, adduser, apihelp, author, bin, bugs, c, cache,\n    completion, config, ddp, dedupe, deprecate, docs, edit,\n    explore, faq, find, find-dupes, get, help, help-search,\n    home, i, info, init, install, isntall, issues, la, link,\n    list, ll, ln, login, ls, outdated, owner, pack, prefix,\n    prune, publish, r, rb, rebuild, remove, repo, restart, rm,\n    root, run-script, s, se, search, set, show, shrinkwrap,\n    star, stars, start, stop, submodule, t, tag, test, tst, un,\n    uninstall, unlink, unpublish, unstar, up, update, v,\n    version, view, whoami\n\nnpm <cmd> -h     quick help on <cmd>\nnpm -l           display full usage info\nnpm faq          commonly asked questions\nnpm help <term>  search for help on <term>\nnpm help npm     involved overview\n\nSpecify configs in the ini-formatted file:\n    C:\\Users\\chenhao\\.npmrc\nor on the command line via: npm <command> --key value\nConfig info can be viewed via: npm help config\n\nnpm@1.4.28 D:\\Program Files (x86)\\nodejs\\node_modules\\npm\n```\n看到这个结果,就表示你的node.js已经安装上去了\n*感谢我们家笨笨的反馈：*此处如果npm无效，首先确定win下你采用的是msi格式的安装文件，然后**重启**下电脑，应该就正常了。\n# # 4. 安装hexo\n接下来的操作我都是用**Github for windows**自带的Bash来完成的,因为后面会涉及到SSH,用**Github for windows**,就可以避免这个问题.\n- 在Bash中输入以下命令\n```\nnpm install hexo-cli -g\n```\n- 创建hexo文件夹\n创建你hexo放置的文件夹,先用Bash进入到目标文件夹,比如我的是F:/blog/,接下来初始化hexo,自动生成相关的文件,在F:/blog/环境下,输入\n```\ncd /f/blog  # 这个命令表示当前进入目录为f：/blog/\nhexo init\n```\n- 安装依赖包\n```\nnpm install\n```\n- 本地预览,做完以上操作,可以本地预览一下\n```\nhexo g\nhexo s\n```\n以上两条命令的意思是:\n生成相关文件(就是生成目标html,静态博客嘛,就是很多html组成)\n打开本地服务器预览(node.js就是干这事的,点击访问<http://localhost:4000>,就可以看到了)\n**update-2015-09-29:**在3.0版本中将`hexo server`(简写命令就是`hexo s`),独立成模块,需要手动安装,不然你执行`hexo s`,就会出现无法识别这个命令\n安装方法和后面配置模块一样\n```bash\nnpm install hexo-server --save\n```\n**ok**,到这里,博客搭建基本完成,现在要做的就是把它发布到你的Github上去\n---\n接下来,教你怎么发布到Github上去\n# 注册Github\n这一步没什么说的,如果你连简单的注册都不会,我也不会教你╮(╯▽╰)╭\n# 创建公共库\n在自己Github主页右下角，创建一个新的repository([点这里](https://github.com/new '点我新建'))。比如我的Github账号是Jackroyal，那么我应该创建的repository名字应该是Jackroyal.github.io(注意你的repository名字就是Jackroyal.github.io,我之前用的是Jackroyal怎么尝试都不行)。\n> PS:有个大小写的问题其实我注册的是Jackroyal,大写的J,但是我访问的时候特别是带https的链接,他会自动转为小写访问.怎么说呢?简单点,你就按照你的用户名来,该大写大写,该小写小写\n\n# 部署\n现在万事俱备,只差部署了.\nhexo3.0,跟2.0不同,deploy插件我们需要手动去安装,执行如下命令:\n```\nnpm install hexo-deployer-git --save\n```\n接下来,我们来配置deploy的信息,修改`_config.yml`.\n这个文件在路径是F:/blog/_config.yml.\n用编辑器把它打开,修改最后一段\n```\ndeploy:\n  type: git\n  repo: https://github.com/Jackroyal/Jackroyal.github.io.git\n  branch: master\n```\n照着我的这个格式修改就好了,把我里面的用户名替换成你的.\n至此基本完成所有搭建步骤.\n# 上传\n我们开始上传项目的代码,再重复一次,我一直以来用的工具都是_Github for windows_自带的Bash,所以我没有配置SSH,如果你用的windows自带的终端或者其他比如msysgit,可能需要配置SSH,不然无法使用Github(点击[`这里`](https://help.github.com/articles/generating-ssh-keys/ \"https://help.github.com/articles/generating-ssh-keys/\")查看官方教程).\n我们输入以下命令\n```\nhexo g\nhexo d\n```\n或者偷个懒\n```\nhexo d -g\n```\nok,现在就可以去看看你的个人主页了,逼格满满有木有.\n如果发布不成功,继续往下面看.\n# 配置hexo\n上面的内容和之前一样,接下来写,配置hexo 3.0的步骤.\n\n## 1 安装rss支持\n执行如下命令:\n```\nnpm install hexo-generator-feed --save\n```\n我们接下来修改配置文件,编辑`_config.yml`\n```\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n```\n## 2 安装sitemap支持\n执行如下命令:\n```\nnpm install hexo-generator-sitemap --save\n```\n我们接下来修改配置文件,编辑`_config.yml`\n```\nsitemap:\n    path: sitemap.xml\n```\n\n**PS:类似的,还可以安装其他的插件,尤其注意`hexo-deployer-git`这个插件,如果你发布不成功,可能是这个插件没有装**\n```\nnpm install hexo-generator-index --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-tag --save\nnpm install hexo-deployer-git --save\n```\n## 3 最终修改后的配置文件\n我把我的配置文件分享出来给大家参考下:\n```\n# Hexo Configuration\n# # Docs: http://hexo.io/docs/configuration.html\n# # Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: 搁浅St的blog\nsubtitle: 我最喜欢笨笨\ndescription: jackroyal 博客 搁浅St 笨笨\nauthor: 搁浅St\nauthor: John Doe\nlanguage: zh-CN\ntimezone:\n\n# URL\n# # If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://jackroyal.github.io\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: true\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format\n# # Hexo uses Moment.js to parse and display date\n# # You can customize the date format as defined in\n# # http://momentjs.com/docs/# /displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n# # Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n\n# Extensions\n# # Plugins: http://hexo.io/plugins/\n\nindex_generator:\n  per_page: 10 ## 首页默认10篇文章标题 如果值为0不分页\n\narchive_generator:\n    per_page: 10 ## 归档页面默认10篇文章标题\n    yearly: true  ## 生成年视图\n    monthly: true ## 生成月视图\n\ntag_generator:\n    per_page: 10 ## 标签分类页面默认10篇文章\n\ncategory_generator:\n    per_page: 10 ### 分类页面默认10篇文章\n\nsitemap:\n    path: sitemap.xml\n\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n\nduoshuo_shortname: jackroyal  ## 这里填写你的多说的短网址\n# # Themes: http://hexo.io/themes/\ntheme: light   ## 主题的名称,我用的是light,默认的是landscape\n\n# Deployment\n# # Docs: http://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: https://github.com/Jackroyal/Jackroyal.github.io.git\n  branch: master\n```\n\nhexo 3.0有一些新的特性,插件的封装更好了,插件安装和管理很方便.\nhexo还支持多发布,可以同时发布到github和gitcafe.\n\n# 参考文献\n1 [hexo 服务器](https://hexo.io/zh-cn/docs/server.html)\n","slug":"hexo-3-0-update","published":1,"updated":"2015-10-29T06:08:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yot000vx8cditp16qpo","content":"<p>update：2015-06-24 16:56<br>额，谁会相信，其实这篇文章是拖了一周之后才写的。</p>\n<p>因为最近换回了win7，所以之前搭建的hexo环境都没了，需要重新搭建。在网上看到hexo 3.0 还可以，而且，我妹子也换3.0了，so  我也换成hexo 3.0的。<br><a id=\"more\"></a></p>\n<h1 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h1><p><strong>操作系统</strong>：win7<br><strong>相关版本</strong>：<br>            hexo-cli: 0.1.7<br>            os: Windows_NT 6.1.7601 win32 x64<br>            node: 0.12.4</p>\n<h1 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h1><h1 id=\"1-安装Github-for-windows\"><a href=\"#1-安装Github-for-windows\" class=\"headerlink\" title=\"# 1. 安装Github for windows\"></a># 1. 安装Github for windows</h1><p>因为我之前就在用Github,所以早就安装了这个.已经装过的同学请忽略这一段.<br>下载 <a href=\"https://windows.github.com/\" title=\"Github for windows\" target=\"_blank\" rel=\"external\">Github for windows</a> 并执行即可完成安装(<em>在线安装,会有点慢</em>)。这个软件的的好处是有一个带GUI的界面,还有一个终端界面.如图所示<br><img src=\"http://ww2.sinaimg.cn/large/692869a3jw1emplp1lz31j204w033mx0.jpg\" alt=\"Github for windows\"><br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1empluh6hvej210b0j741r.jpg\" alt=\"GUI and Bash\"></p>\n<h1 id=\"2-安装Node-js\"><a href=\"#2-安装Node-js\" class=\"headerlink\" title=\"# 2. 安装Node.js\"></a># 2. 安装Node.js</h1><p>在 Windows 环境下安装 <a href=\"http://nodejs.org/\" title=\"Node.js 官网\" target=\"_blank\" rel=\"external\">Node.js</a> 非常简单，仅须下载安装文件并执行即可完成安装。（win下建议下载msi格式的，因为这样可以不用配置环境变量之类的）</p>\n<h1 id=\"3-测试node-js是否安装\"><a href=\"#3-测试node-js是否安装\" class=\"headerlink\" title=\"# 3. 测试node.js是否安装\"></a># 3. 测试node.js是否安装</h1><p>在任何控制台输入(可以按windows键+R,输入cmd,然后输入npm,一般来说不会有问题)<br><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">npm</span></div></pre></td></tr></table></figure></p>\n<p>返回值如下<br><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Usage</span>: npm &lt;command&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"vim\">where <span class=\"symbol\">&lt;command&gt;</span> <span class=\"keyword\">is</span> one of:</span></div><div class=\"line\">    <span class=\"built_in\">add</span>-user, adduser, apihelp, author, bin, bugs, <span class=\"keyword\">c</span>, cache,</div><div class=\"line\">    completion, config, ddp, dedupe, deprecate, docs, <span class=\"keyword\">edit</span>,</div><div class=\"line\">    explore, faq, <span class=\"keyword\">find</span>, <span class=\"keyword\">find</span>-dupes, <span class=\"built_in\">get</span>, <span class=\"keyword\">help</span>, <span class=\"keyword\">help</span>-<span class=\"built_in\">search</span>,</div><div class=\"line\">    home, i, info, init, install, isntall, issues, <span class=\"keyword\">la</span>, link,</div><div class=\"line\">    <span class=\"keyword\">list</span>, <span class=\"keyword\">ll</span>, <span class=\"keyword\">ln</span>, login, <span class=\"keyword\">ls</span>, outdated, owner, pack, prefix,</div><div class=\"line\">    prune, publish, r, rb, rebuild, <span class=\"built_in\">remove</span>, repo, restart, rm,</div><div class=\"line\">    root, run-script, s, <span class=\"keyword\">se</span>, <span class=\"built_in\">search</span>, <span class=\"keyword\">set</span>, show, shrinkwrap,</div><div class=\"line\">    <span class=\"keyword\">star</span>, stars, start, <span class=\"keyword\">stop</span>, submodule, t, <span class=\"keyword\">tag</span>, test, tst, un,</div><div class=\"line\">    uninstall, unlink, unpublish, unstar, <span class=\"keyword\">up</span>, <span class=\"keyword\">update</span>, v,</div><div class=\"line\">    <span class=\"keyword\">version</span>, <span class=\"keyword\">view</span>, whoami</div><div class=\"line\"></div><div class=\"line\">npm <span class=\"symbol\">&lt;cmd&gt;</span> -h     quick <span class=\"keyword\">help</span> <span class=\"keyword\">on</span> <span class=\"symbol\">&lt;cmd&gt;</span></div><div class=\"line\">npm -<span class=\"keyword\">l</span>           <span class=\"keyword\">display</span> full usage info</div><div class=\"line\">npm faq          commonly asked questions</div><div class=\"line\">npm <span class=\"keyword\">help</span> <span class=\"symbol\">&lt;term&gt;</span>  <span class=\"built_in\">search</span> <span class=\"keyword\">for</span> <span class=\"keyword\">help</span> <span class=\"keyword\">on</span> <span class=\"symbol\">&lt;term&gt;</span></div><div class=\"line\">npm <span class=\"keyword\">help</span> npm     involved overview</div><div class=\"line\"></div><div class=\"line\">Specify configs in the ini-formatted <span class=\"keyword\">file</span>:</div><div class=\"line\">    C:\\Users\\chenhao\\.npmrc</div><div class=\"line\"><span class=\"built_in\">or</span> <span class=\"keyword\">on</span> the <span class=\"keyword\">command</span> <span class=\"built_in\">line</span> <span class=\"keyword\">vi</span><span class=\"variable\">a:</span> npm <span class=\"symbol\">&lt;command&gt;</span> --key value</div><div class=\"line\">Config info can <span class=\"keyword\">be</span> viewed <span class=\"keyword\">vi</span><span class=\"variable\">a:</span> npm <span class=\"keyword\">help</span> config</div><div class=\"line\"></div><div class=\"line\">npm@<span class=\"number\">1.4</span>.<span class=\"number\">28</span> D:\\Program Files (x86)\\nodejs\\node_modules\\npm</div></pre></td></tr></table></figure></p>\n<p>看到这个结果,就表示你的node.js已经安装上去了<br><em>感谢我们家笨笨的反馈：</em>此处如果npm无效，首先确定win下你采用的是msi格式的安装文件，然后<strong>重启</strong>下电脑，应该就正常了。</p>\n<h1 id=\"4-安装hexo\"><a href=\"#4-安装hexo\" class=\"headerlink\" title=\"# 4. 安装hexo\"></a># 4. 安装hexo</h1><p>接下来的操作我都是用<strong>Github for windows</strong>自带的Bash来完成的,因为后面会涉及到SSH,用<strong>Github for windows</strong>,就可以避免这个问题.</p>\n<ul>\n<li><p>在Bash中输入以下命令</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-<span class=\"keyword\">cli</span> -g</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建hexo文件夹<br>创建你hexo放置的文件夹,先用Bash进入到目标文件夹,比如我的是F:/blog/,接下来初始化hexo,自动生成相关的文件,在F:/blog/环境下,输入</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">cd</span> /f/<span class=\"keyword\">blog </span> # 这个命令表示当前进入目录为f：/<span class=\"keyword\">blog/</span></div><div class=\"line\"><span class=\"symbol\">hexo</span> init</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装依赖包</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>本地预览,做完以上操作,可以本地预览一下</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">hexo g</span></div><div class=\"line\">hexo s</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>以上两条命令的意思是:<br>生成相关文件(就是生成目标html,静态博客嘛,就是很多html组成)<br>打开本地服务器预览(node.js就是干这事的,点击访问<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a>,就可以看到了)<br><strong>update-2015-09-29:</strong>在3.0版本中将<code>hexo server</code>(简写命令就是<code>hexo s</code>),独立成模块,需要手动安装,不然你执行<code>hexo s</code>,就会出现无法识别这个命令<br>安装方法和后面配置模块一样<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-server --save</div></pre></td></tr></table></figure></p>\n<h2 id=\"ok-到这里-博客搭建基本完成-现在要做的就是把它发布到你的Github上去\"><a href=\"#ok-到这里-博客搭建基本完成-现在要做的就是把它发布到你的Github上去\" class=\"headerlink\" title=\"ok,到这里,博客搭建基本完成,现在要做的就是把它发布到你的Github上去\"></a><strong>ok</strong>,到这里,博客搭建基本完成,现在要做的就是把它发布到你的Github上去</h2><p>接下来,教你怎么发布到Github上去</p>\n<h1 id=\"注册Github\"><a href=\"#注册Github\" class=\"headerlink\" title=\"注册Github\"></a>注册Github</h1><p>这一步没什么说的,如果你连简单的注册都不会,我也不会教你╮(╯▽╰)╭</p>\n<h1 id=\"创建公共库\"><a href=\"#创建公共库\" class=\"headerlink\" title=\"创建公共库\"></a>创建公共库</h1><p>在自己Github主页右下角，创建一个新的repository(<a href=\"https://github.com/new\" title=\"点我新建\" target=\"_blank\" rel=\"external\">点这里</a>)。比如我的Github账号是Jackroyal，那么我应该创建的repository名字应该是Jackroyal.github.io(注意你的repository名字就是Jackroyal.github.io,我之前用的是Jackroyal怎么尝试都不行)。</p>\n<blockquote>\n<p>PS:有个大小写的问题其实我注册的是Jackroyal,大写的J,但是我访问的时候特别是带https的链接,他会自动转为小写访问.怎么说呢?简单点,你就按照你的用户名来,该大写大写,该小写小写</p>\n</blockquote>\n<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><p>现在万事俱备,只差部署了.<br>hexo3.0,跟2.0不同,deploy插件我们需要手动去安装,执行如下命令:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> hexo-deployer-git <span class=\"comment\">--save</span></div></pre></td></tr></table></figure></p>\n<p>接下来,我们来配置deploy的信息,修改<code>_config.yml</code>.<br>这个文件在路径是F:/blog/_config.yml.<br>用编辑器把它打开,修改最后一段<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">  <span class=\"attribute\">type</span>: git</div><div class=\"line\">  <span class=\"attribute\">repo</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/Jackroyal/Jackroyal.github.io.git</span></div><div class=\"line\">  <span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure></p>\n<p>照着我的这个格式修改就好了,把我里面的用户名替换成你的.<br>至此基本完成所有搭建步骤.</p>\n<h1 id=\"上传\"><a href=\"#上传\" class=\"headerlink\" title=\"上传\"></a>上传</h1><p>我们开始上传项目的代码,再重复一次,我一直以来用的工具都是<em>Github for windows</em>自带的Bash,所以我没有配置SSH,如果你用的windows自带的终端或者其他比如msysgit,可能需要配置SSH,不然无法使用Github(点击<a href=\"https://help.github.com/articles/generating-ssh-keys/\" title=\"https://help.github.com/articles/generating-ssh-keys/\" target=\"_blank\" rel=\"external\"><code>这里</code></a>查看官方教程).<br>我们输入以下命令<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">hexo g</span></div><div class=\"line\">hexo d</div></pre></td></tr></table></figure></p>\n<p>或者偷个懒<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">hexo d -g</span></div></pre></td></tr></table></figure></p>\n<p>ok,现在就可以去看看你的个人主页了,逼格满满有木有.<br>如果发布不成功,继续往下面看.</p>\n<h1 id=\"配置hexo\"><a href=\"#配置hexo\" class=\"headerlink\" title=\"配置hexo\"></a>配置hexo</h1><p>上面的内容和之前一样,接下来写,配置hexo 3.0的步骤.</p>\n<h2 id=\"1-安装rss支持\"><a href=\"#1-安装rss支持\" class=\"headerlink\" title=\"1 安装rss支持\"></a>1 安装rss支持</h2><p>执行如下命令:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> hexo-generator-feed <span class=\"comment\">--save</span></div></pre></td></tr></table></figure></p>\n<p>我们接下来修改配置文件,编辑<code>_config.yml</code><br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">feed:</div><div class=\"line\">  <span class=\"keyword\">type</span>: atom</div><div class=\"line\">  path: atom.<span class=\"keyword\">xml</span></div><div class=\"line\">  <span class=\"title\">limit</span>: <span class=\"number\">20</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"2-安装sitemap支持\"><a href=\"#2-安装sitemap支持\" class=\"headerlink\" title=\"2 安装sitemap支持\"></a>2 安装sitemap支持</h2><p>执行如下命令:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> hexo-generator-sitemap <span class=\"comment\">--save</span></div></pre></td></tr></table></figure></p>\n<p>我们接下来修改配置文件,编辑<code>_config.yml</code><br><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">sitemap:</span></div><div class=\"line\"><span class=\"symbol\">    path:</span> sitemap.xml</div></pre></td></tr></table></figure></p>\n<p><strong>PS:类似的,还可以安装其他的插件,尤其注意<code>hexo-deployer-git</code>这个插件,如果你发布不成功,可能是这个插件没有装</strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> hexo-generator-<span class=\"keyword\">index</span> <span class=\"comment\">--save</span></div><div class=\"line\">npm <span class=\"keyword\">install</span> hexo-generator-<span class=\"keyword\">archive</span> <span class=\"comment\">--save</span></div><div class=\"line\">npm <span class=\"keyword\">install</span> hexo-generator-<span class=\"keyword\">category</span> <span class=\"comment\">--save</span></div><div class=\"line\">npm <span class=\"keyword\">install</span> hexo-generator-tag <span class=\"comment\">--save</span></div><div class=\"line\">npm <span class=\"keyword\">install</span> hexo-deployer-git <span class=\"comment\">--save</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"3-最终修改后的配置文件\"><a href=\"#3-最终修改后的配置文件\" class=\"headerlink\" title=\"3 最终修改后的配置文件\"></a>3 最终修改后的配置文件</h2><p>我把我的配置文件分享出来给大家参考下:<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Hexo Configuration</span></div><div class=\"line\"><span class=\"comment\"># # Docs: http://hexo.io/docs/configuration.html</span></div><div class=\"line\"><span class=\"comment\"># # Source: https://github.com/hexojs/hexo/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Site</span></div><div class=\"line\"><span class=\"attr\">title:</span> 搁浅St的blog</div><div class=\"line\"><span class=\"attr\">subtitle:</span> 我最喜欢笨笨</div><div class=\"line\"><span class=\"attr\">description:</span> jackroyal 博客 搁浅St 笨笨</div><div class=\"line\"><span class=\"attr\">author:</span> 搁浅St</div><div class=\"line\"><span class=\"attr\">author:</span> John Doe</div><div class=\"line\"><span class=\"attr\">language:</span> zh-CN</div><div class=\"line\"><span class=\"attr\">timezone:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># URL</span></div><div class=\"line\"><span class=\"comment\"># # If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class=\"line\"><span class=\"attr\">url:</span> http://jackroyal.github.io</div><div class=\"line\"><span class=\"attr\">root:</span> /</div><div class=\"line\"><span class=\"attr\">permalink:</span> :year/:month/:day/:title/</div><div class=\"line\"><span class=\"attr\">permalink_defaults:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Directory</span></div><div class=\"line\"><span class=\"attr\">source_dir:</span> source</div><div class=\"line\"><span class=\"attr\">public_dir:</span> public</div><div class=\"line\"><span class=\"attr\">tag_dir:</span> tags</div><div class=\"line\"><span class=\"attr\">archive_dir:</span> archives</div><div class=\"line\"><span class=\"attr\">category_dir:</span> categories</div><div class=\"line\"><span class=\"attr\">code_dir:</span> downloads/code</div><div class=\"line\"><span class=\"attr\">i18n_dir:</span> :lang</div><div class=\"line\"><span class=\"attr\">skip_render:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Writing</span></div><div class=\"line\"><span class=\"attr\">new_post_name:</span> :title.md <span class=\"comment\"># File name of new posts</span></div><div class=\"line\"><span class=\"attr\">default_layout:</span> post</div><div class=\"line\"><span class=\"attr\">titlecase:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Transform title into titlecase</span></div><div class=\"line\"><span class=\"attr\">external_link:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Open external links in new tab</span></div><div class=\"line\"><span class=\"attr\">filename_case:</span> <span class=\"number\">0</span></div><div class=\"line\"><span class=\"attr\">render_drafts:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">relative_link:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">future:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">highlight:</span></div><div class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  line_number:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  auto_detect:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  tab_replace:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Category &amp; Tag</span></div><div class=\"line\"><span class=\"attr\">default_category:</span> uncategorized</div><div class=\"line\"><span class=\"attr\">category_map:</span></div><div class=\"line\"><span class=\"attr\">tag_map:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Date / Time format</span></div><div class=\"line\"><span class=\"comment\"># # Hexo uses Moment.js to parse and display date</span></div><div class=\"line\"><span class=\"comment\"># # You can customize the date format as defined in</span></div><div class=\"line\"><span class=\"comment\"># # http://momentjs.com/docs/# /displaying/format/</span></div><div class=\"line\"><span class=\"attr\">date_format:</span> YYYY-MM-DD</div><div class=\"line\"><span class=\"attr\">time_format:</span> HH:mm:ss</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Pagination</span></div><div class=\"line\"><span class=\"comment\"># # Set per_page to 0 to disable pagination</span></div><div class=\"line\"><span class=\"attr\">per_page:</span> <span class=\"number\">10</span></div><div class=\"line\"><span class=\"attr\">pagination_dir:</span> page</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Extensions</span></div><div class=\"line\"><span class=\"comment\"># # Plugins: http://hexo.io/plugins/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">index_generator:</span></div><div class=\"line\"><span class=\"attr\">  per_page:</span> <span class=\"number\">10</span> <span class=\"comment\">## 首页默认10篇文章标题 如果值为0不分页</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">archive_generator:</span></div><div class=\"line\"><span class=\"attr\">    per_page:</span> <span class=\"number\">10</span> <span class=\"comment\">## 归档页面默认10篇文章标题</span></div><div class=\"line\"><span class=\"attr\">    yearly:</span> <span class=\"literal\">true</span>  <span class=\"comment\">## 生成年视图</span></div><div class=\"line\"><span class=\"attr\">    monthly:</span> <span class=\"literal\">true</span> <span class=\"comment\">## 生成月视图</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">tag_generator:</span></div><div class=\"line\"><span class=\"attr\">    per_page:</span> <span class=\"number\">10</span> <span class=\"comment\">## 标签分类页面默认10篇文章</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">category_generator:</span></div><div class=\"line\"><span class=\"attr\">    per_page:</span> <span class=\"number\">10</span> <span class=\"comment\">### 分类页面默认10篇文章</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">sitemap:</span></div><div class=\"line\"><span class=\"attr\">    path:</span> sitemap.xml</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">feed:</span></div><div class=\"line\"><span class=\"attr\">  type:</span> atom</div><div class=\"line\"><span class=\"attr\">  path:</span> atom.xml</div><div class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">20</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">duoshuo_shortname:</span> jackroyal  <span class=\"comment\">## 这里填写你的多说的短网址</span></div><div class=\"line\"><span class=\"comment\"># # Themes: http://hexo.io/themes/</span></div><div class=\"line\"><span class=\"attr\">theme:</span> light   <span class=\"comment\">## 主题的名称,我用的是light,默认的是landscape</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Deployment</span></div><div class=\"line\"><span class=\"comment\"># # Docs: http://hexo.io/docs/deployment.html</span></div><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">  type:</span> git</div><div class=\"line\"><span class=\"attr\">  repo:</span> https://github.com/Jackroyal/Jackroyal.github.io.git</div><div class=\"line\"><span class=\"attr\">  branch:</span> master</div></pre></td></tr></table></figure></p>\n<p>hexo 3.0有一些新的特性,插件的封装更好了,插件安装和管理很方便.<br>hexo还支持多发布,可以同时发布到github和gitcafe.</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"https://hexo.io/zh-cn/docs/server.html\" target=\"_blank\" rel=\"external\">hexo 服务器</a></p>\n","excerpt":"<p>update：2015-06-24 16:56<br>额，谁会相信，其实这篇文章是拖了一周之后才写的。</p>\n<p>因为最近换回了win7，所以之前搭建的hexo环境都没了，需要重新搭建。在网上看到hexo 3.0 还可以，而且，我妹子也换3.0了，so  我也换成hexo 3.0的。<br>","more":"</p>\n<h1 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h1><p><strong>操作系统</strong>：win7<br><strong>相关版本</strong>：<br>            hexo-cli: 0.1.7<br>            os: Windows_NT 6.1.7601 win32 x64<br>            node: 0.12.4</p>\n<h1 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h1><h1 id=\"1-安装Github-for-windows\"><a href=\"#1-安装Github-for-windows\" class=\"headerlink\" title=\"# 1. 安装Github for windows\"></a># 1. 安装Github for windows</h1><p>因为我之前就在用Github,所以早就安装了这个.已经装过的同学请忽略这一段.<br>下载 <a href=\"https://windows.github.com/\" title=\"Github for windows\">Github for windows</a> 并执行即可完成安装(<em>在线安装,会有点慢</em>)。这个软件的的好处是有一个带GUI的界面,还有一个终端界面.如图所示<br><img src=\"http://ww2.sinaimg.cn/large/692869a3jw1emplp1lz31j204w033mx0.jpg\" alt=\"Github for windows\"><br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1empluh6hvej210b0j741r.jpg\" alt=\"GUI and Bash\"></p>\n<h1 id=\"2-安装Node-js\"><a href=\"#2-安装Node-js\" class=\"headerlink\" title=\"# 2. 安装Node.js\"></a># 2. 安装Node.js</h1><p>在 Windows 环境下安装 <a href=\"http://nodejs.org/\" title=\"Node.js 官网\">Node.js</a> 非常简单，仅须下载安装文件并执行即可完成安装。（win下建议下载msi格式的，因为这样可以不用配置环境变量之类的）</p>\n<h1 id=\"3-测试node-js是否安装\"><a href=\"#3-测试node-js是否安装\" class=\"headerlink\" title=\"# 3. 测试node.js是否安装\"></a># 3. 测试node.js是否安装</h1><p>在任何控制台输入(可以按windows键+R,输入cmd,然后输入npm,一般来说不会有问题)<br><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">npm</span></div></pre></td></tr></table></figure></p>\n<p>返回值如下<br><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Usage</span>: npm &lt;command&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"vim\">where <span class=\"symbol\">&lt;command&gt;</span> <span class=\"keyword\">is</span> one of:</div><div class=\"line\">    <span class=\"built_in\">add</span>-user, adduser, apihelp, author, bin, bugs, <span class=\"keyword\">c</span>, cache,</div><div class=\"line\">    completion, config, ddp, dedupe, deprecate, docs, <span class=\"keyword\">edit</span>,</div><div class=\"line\">    explore, faq, <span class=\"keyword\">find</span>, <span class=\"keyword\">find</span>-dupes, <span class=\"built_in\">get</span>, <span class=\"keyword\">help</span>, <span class=\"keyword\">help</span>-<span class=\"built_in\">search</span>,</div><div class=\"line\">    home, i, info, init, install, isntall, issues, <span class=\"keyword\">la</span>, link,</div><div class=\"line\">    <span class=\"keyword\">list</span>, <span class=\"keyword\">ll</span>, <span class=\"keyword\">ln</span>, login, <span class=\"keyword\">ls</span>, outdated, owner, pack, prefix,</div><div class=\"line\">    prune, publish, r, rb, rebuild, <span class=\"built_in\">remove</span>, repo, restart, rm,</div><div class=\"line\">    root, run-script, s, <span class=\"keyword\">se</span>, <span class=\"built_in\">search</span>, <span class=\"keyword\">set</span>, show, shrinkwrap,</div><div class=\"line\">    <span class=\"keyword\">star</span>, stars, start, <span class=\"keyword\">stop</span>, submodule, t, <span class=\"keyword\">tag</span>, test, tst, un,</div><div class=\"line\">    uninstall, unlink, unpublish, unstar, <span class=\"keyword\">up</span>, <span class=\"keyword\">update</span>, v,</div><div class=\"line\">    <span class=\"keyword\">version</span>, <span class=\"keyword\">view</span>, whoami</div><div class=\"line\"></div><div class=\"line\">npm <span class=\"symbol\">&lt;cmd&gt;</span> -h     quick <span class=\"keyword\">help</span> <span class=\"keyword\">on</span> <span class=\"symbol\">&lt;cmd&gt;</span></div><div class=\"line\">npm -<span class=\"keyword\">l</span>           <span class=\"keyword\">display</span> full usage info</div><div class=\"line\">npm faq          commonly asked questions</div><div class=\"line\">npm <span class=\"keyword\">help</span> <span class=\"symbol\">&lt;term&gt;</span>  <span class=\"built_in\">search</span> <span class=\"keyword\">for</span> <span class=\"keyword\">help</span> <span class=\"keyword\">on</span> <span class=\"symbol\">&lt;term&gt;</span></div><div class=\"line\">npm <span class=\"keyword\">help</span> npm     involved overview</div><div class=\"line\"></div><div class=\"line\">Specify configs in the ini-formatted <span class=\"keyword\">file</span>:</div><div class=\"line\">    C:\\Users\\chenhao\\.npmrc</div><div class=\"line\"><span class=\"built_in\">or</span> <span class=\"keyword\">on</span> the <span class=\"keyword\">command</span> <span class=\"built_in\">line</span> <span class=\"keyword\">vi</span><span class=\"variable\">a:</span> npm <span class=\"symbol\">&lt;command&gt;</span> --key value</div><div class=\"line\">Config info can <span class=\"keyword\">be</span> viewed <span class=\"keyword\">vi</span><span class=\"variable\">a:</span> npm <span class=\"keyword\">help</span> config</div><div class=\"line\"></div><div class=\"line\">npm@<span class=\"number\">1.4</span>.<span class=\"number\">28</span> D:\\Program Files (x86)\\nodejs\\node_modules\\npm</span></div></pre></td></tr></table></figure></p>\n<p>看到这个结果,就表示你的node.js已经安装上去了<br><em>感谢我们家笨笨的反馈：</em>此处如果npm无效，首先确定win下你采用的是msi格式的安装文件，然后<strong>重启</strong>下电脑，应该就正常了。</p>\n<h1 id=\"4-安装hexo\"><a href=\"#4-安装hexo\" class=\"headerlink\" title=\"# 4. 安装hexo\"></a># 4. 安装hexo</h1><p>接下来的操作我都是用<strong>Github for windows</strong>自带的Bash来完成的,因为后面会涉及到SSH,用<strong>Github for windows</strong>,就可以避免这个问题.</p>\n<ul>\n<li><p>在Bash中输入以下命令</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-<span class=\"keyword\">cli</span> -g</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建hexo文件夹<br>创建你hexo放置的文件夹,先用Bash进入到目标文件夹,比如我的是F:/blog/,接下来初始化hexo,自动生成相关的文件,在F:/blog/环境下,输入</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">cd</span> /f/<span class=\"keyword\">blog </span> # 这个命令表示当前进入目录为f：/<span class=\"keyword\">blog/</div><div class=\"line\"></span><span class=\"symbol\">hexo</span> init</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装依赖包</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>本地预览,做完以上操作,可以本地预览一下</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">hexo g</div><div class=\"line\">hexo s</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>以上两条命令的意思是:<br>生成相关文件(就是生成目标html,静态博客嘛,就是很多html组成)<br>打开本地服务器预览(node.js就是干这事的,点击访问<a href=\"http://localhost:4000\">http://localhost:4000</a>,就可以看到了)<br><strong>update-2015-09-29:</strong>在3.0版本中将<code>hexo server</code>(简写命令就是<code>hexo s</code>),独立成模块,需要手动安装,不然你执行<code>hexo s</code>,就会出现无法识别这个命令<br>安装方法和后面配置模块一样<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-server --save</div></pre></td></tr></table></figure></p>\n<h2 id=\"ok-到这里-博客搭建基本完成-现在要做的就是把它发布到你的Github上去\"><a href=\"#ok-到这里-博客搭建基本完成-现在要做的就是把它发布到你的Github上去\" class=\"headerlink\" title=\"ok,到这里,博客搭建基本完成,现在要做的就是把它发布到你的Github上去\"></a><strong>ok</strong>,到这里,博客搭建基本完成,现在要做的就是把它发布到你的Github上去</h2><p>接下来,教你怎么发布到Github上去</p>\n<h1 id=\"注册Github\"><a href=\"#注册Github\" class=\"headerlink\" title=\"注册Github\"></a>注册Github</h1><p>这一步没什么说的,如果你连简单的注册都不会,我也不会教你╮(╯▽╰)╭</p>\n<h1 id=\"创建公共库\"><a href=\"#创建公共库\" class=\"headerlink\" title=\"创建公共库\"></a>创建公共库</h1><p>在自己Github主页右下角，创建一个新的repository(<a href=\"https://github.com/new\" title=\"点我新建\">点这里</a>)。比如我的Github账号是Jackroyal，那么我应该创建的repository名字应该是Jackroyal.github.io(注意你的repository名字就是Jackroyal.github.io,我之前用的是Jackroyal怎么尝试都不行)。</p>\n<blockquote>\n<p>PS:有个大小写的问题其实我注册的是Jackroyal,大写的J,但是我访问的时候特别是带https的链接,他会自动转为小写访问.怎么说呢?简单点,你就按照你的用户名来,该大写大写,该小写小写</p>\n</blockquote>\n<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><p>现在万事俱备,只差部署了.<br>hexo3.0,跟2.0不同,deploy插件我们需要手动去安装,执行如下命令:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> hexo-deployer-git <span class=\"comment\">--save</span></div></pre></td></tr></table></figure></p>\n<p>接下来,我们来配置deploy的信息,修改<code>_config.yml</code>.<br>这个文件在路径是F:/blog/_config.yml.<br>用编辑器把它打开,修改最后一段<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">  <span class=\"attribute\">type</span>: git</div><div class=\"line\">  <span class=\"attribute\">repo</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/Jackroyal/Jackroyal.github.io.git</span></div><div class=\"line\">  <span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure></p>\n<p>照着我的这个格式修改就好了,把我里面的用户名替换成你的.<br>至此基本完成所有搭建步骤.</p>\n<h1 id=\"上传\"><a href=\"#上传\" class=\"headerlink\" title=\"上传\"></a>上传</h1><p>我们开始上传项目的代码,再重复一次,我一直以来用的工具都是<em>Github for windows</em>自带的Bash,所以我没有配置SSH,如果你用的windows自带的终端或者其他比如msysgit,可能需要配置SSH,不然无法使用Github(点击<a href=\"https://help.github.com/articles/generating-ssh-keys/\" title=\"https://help.github.com/articles/generating-ssh-keys/\"><code>这里</code></a>查看官方教程).<br>我们输入以下命令<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">hexo g</div><div class=\"line\">hexo d</span></div></pre></td></tr></table></figure></p>\n<p>或者偷个懒<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">hexo d -g</span></div></pre></td></tr></table></figure></p>\n<p>ok,现在就可以去看看你的个人主页了,逼格满满有木有.<br>如果发布不成功,继续往下面看.</p>\n<h1 id=\"配置hexo\"><a href=\"#配置hexo\" class=\"headerlink\" title=\"配置hexo\"></a>配置hexo</h1><p>上面的内容和之前一样,接下来写,配置hexo 3.0的步骤.</p>\n<h2 id=\"1-安装rss支持\"><a href=\"#1-安装rss支持\" class=\"headerlink\" title=\"1 安装rss支持\"></a>1 安装rss支持</h2><p>执行如下命令:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> hexo-generator-feed <span class=\"comment\">--save</span></div></pre></td></tr></table></figure></p>\n<p>我们接下来修改配置文件,编辑<code>_config.yml</code><br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">feed:</div><div class=\"line\">  <span class=\"keyword\">type</span>: atom</div><div class=\"line\">  path: atom.<span class=\"keyword\">xml</span></div><div class=\"line\">  <span class=\"title\">limit</span>: <span class=\"number\">20</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"2-安装sitemap支持\"><a href=\"#2-安装sitemap支持\" class=\"headerlink\" title=\"2 安装sitemap支持\"></a>2 安装sitemap支持</h2><p>执行如下命令:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> hexo-generator-sitemap <span class=\"comment\">--save</span></div></pre></td></tr></table></figure></p>\n<p>我们接下来修改配置文件,编辑<code>_config.yml</code><br><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">sitemap:</span></div><div class=\"line\"><span class=\"symbol\">    path:</span> sitemap.xml</div></pre></td></tr></table></figure></p>\n<p><strong>PS:类似的,还可以安装其他的插件,尤其注意<code>hexo-deployer-git</code>这个插件,如果你发布不成功,可能是这个插件没有装</strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> hexo-generator-<span class=\"keyword\">index</span> <span class=\"comment\">--save</span></div><div class=\"line\">npm <span class=\"keyword\">install</span> hexo-generator-<span class=\"keyword\">archive</span> <span class=\"comment\">--save</span></div><div class=\"line\">npm <span class=\"keyword\">install</span> hexo-generator-<span class=\"keyword\">category</span> <span class=\"comment\">--save</span></div><div class=\"line\">npm <span class=\"keyword\">install</span> hexo-generator-tag <span class=\"comment\">--save</span></div><div class=\"line\">npm <span class=\"keyword\">install</span> hexo-deployer-git <span class=\"comment\">--save</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"3-最终修改后的配置文件\"><a href=\"#3-最终修改后的配置文件\" class=\"headerlink\" title=\"3 最终修改后的配置文件\"></a>3 最终修改后的配置文件</h2><p>我把我的配置文件分享出来给大家参考下:<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Hexo Configuration</span></div><div class=\"line\"><span class=\"comment\"># # Docs: http://hexo.io/docs/configuration.html</span></div><div class=\"line\"><span class=\"comment\"># # Source: https://github.com/hexojs/hexo/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Site</span></div><div class=\"line\"><span class=\"attr\">title:</span> 搁浅St的blog</div><div class=\"line\"><span class=\"attr\">subtitle:</span> 我最喜欢笨笨</div><div class=\"line\"><span class=\"attr\">description:</span> jackroyal 博客 搁浅St 笨笨</div><div class=\"line\"><span class=\"attr\">author:</span> 搁浅St</div><div class=\"line\"><span class=\"attr\">author:</span> John Doe</div><div class=\"line\"><span class=\"attr\">language:</span> zh-CN</div><div class=\"line\"><span class=\"attr\">timezone:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># URL</span></div><div class=\"line\"><span class=\"comment\"># # If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class=\"line\"><span class=\"attr\">url:</span> http://jackroyal.github.io</div><div class=\"line\"><span class=\"attr\">root:</span> /</div><div class=\"line\"><span class=\"attr\">permalink:</span> :year/:month/:day/:title/</div><div class=\"line\"><span class=\"attr\">permalink_defaults:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Directory</span></div><div class=\"line\"><span class=\"attr\">source_dir:</span> source</div><div class=\"line\"><span class=\"attr\">public_dir:</span> public</div><div class=\"line\"><span class=\"attr\">tag_dir:</span> tags</div><div class=\"line\"><span class=\"attr\">archive_dir:</span> archives</div><div class=\"line\"><span class=\"attr\">category_dir:</span> categories</div><div class=\"line\"><span class=\"attr\">code_dir:</span> downloads/code</div><div class=\"line\"><span class=\"attr\">i18n_dir:</span> :lang</div><div class=\"line\"><span class=\"attr\">skip_render:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Writing</span></div><div class=\"line\"><span class=\"attr\">new_post_name:</span> :title.md <span class=\"comment\"># File name of new posts</span></div><div class=\"line\"><span class=\"attr\">default_layout:</span> post</div><div class=\"line\"><span class=\"attr\">titlecase:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Transform title into titlecase</span></div><div class=\"line\"><span class=\"attr\">external_link:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Open external links in new tab</span></div><div class=\"line\"><span class=\"attr\">filename_case:</span> <span class=\"number\">0</span></div><div class=\"line\"><span class=\"attr\">render_drafts:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">relative_link:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">future:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">highlight:</span></div><div class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  line_number:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  auto_detect:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  tab_replace:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Category &amp; Tag</span></div><div class=\"line\"><span class=\"attr\">default_category:</span> uncategorized</div><div class=\"line\"><span class=\"attr\">category_map:</span></div><div class=\"line\"><span class=\"attr\">tag_map:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Date / Time format</span></div><div class=\"line\"><span class=\"comment\"># # Hexo uses Moment.js to parse and display date</span></div><div class=\"line\"><span class=\"comment\"># # You can customize the date format as defined in</span></div><div class=\"line\"><span class=\"comment\"># # http://momentjs.com/docs/# /displaying/format/</span></div><div class=\"line\"><span class=\"attr\">date_format:</span> YYYY-MM-DD</div><div class=\"line\"><span class=\"attr\">time_format:</span> HH:mm:ss</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Pagination</span></div><div class=\"line\"><span class=\"comment\"># # Set per_page to 0 to disable pagination</span></div><div class=\"line\"><span class=\"attr\">per_page:</span> <span class=\"number\">10</span></div><div class=\"line\"><span class=\"attr\">pagination_dir:</span> page</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Extensions</span></div><div class=\"line\"><span class=\"comment\"># # Plugins: http://hexo.io/plugins/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">index_generator:</span></div><div class=\"line\"><span class=\"attr\">  per_page:</span> <span class=\"number\">10</span> <span class=\"comment\">## 首页默认10篇文章标题 如果值为0不分页</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">archive_generator:</span></div><div class=\"line\"><span class=\"attr\">    per_page:</span> <span class=\"number\">10</span> <span class=\"comment\">## 归档页面默认10篇文章标题</span></div><div class=\"line\"><span class=\"attr\">    yearly:</span> <span class=\"literal\">true</span>  <span class=\"comment\">## 生成年视图</span></div><div class=\"line\"><span class=\"attr\">    monthly:</span> <span class=\"literal\">true</span> <span class=\"comment\">## 生成月视图</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">tag_generator:</span></div><div class=\"line\"><span class=\"attr\">    per_page:</span> <span class=\"number\">10</span> <span class=\"comment\">## 标签分类页面默认10篇文章</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">category_generator:</span></div><div class=\"line\"><span class=\"attr\">    per_page:</span> <span class=\"number\">10</span> <span class=\"comment\">### 分类页面默认10篇文章</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">sitemap:</span></div><div class=\"line\"><span class=\"attr\">    path:</span> sitemap.xml</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">feed:</span></div><div class=\"line\"><span class=\"attr\">  type:</span> atom</div><div class=\"line\"><span class=\"attr\">  path:</span> atom.xml</div><div class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">20</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">duoshuo_shortname:</span> jackroyal  <span class=\"comment\">## 这里填写你的多说的短网址</span></div><div class=\"line\"><span class=\"comment\"># # Themes: http://hexo.io/themes/</span></div><div class=\"line\"><span class=\"attr\">theme:</span> light   <span class=\"comment\">## 主题的名称,我用的是light,默认的是landscape</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Deployment</span></div><div class=\"line\"><span class=\"comment\"># # Docs: http://hexo.io/docs/deployment.html</span></div><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">  type:</span> git</div><div class=\"line\"><span class=\"attr\">  repo:</span> https://github.com/Jackroyal/Jackroyal.github.io.git</div><div class=\"line\"><span class=\"attr\">  branch:</span> master</div></pre></td></tr></table></figure></p>\n<p>hexo 3.0有一些新的特性,插件的封装更好了,插件安装和管理很方便.<br>hexo还支持多发布,可以同时发布到github和gitcafe.</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"https://hexo.io/zh-cn/docs/server.html\">hexo 服务器</a></p>"},{"title":"给hexo配置上评论和访问量","date":"2015-05-30T06:08:49.000Z","_content":"哈哈,我们家笨笨,绝对是我学习技术的很大很大很大大的动力.更开始用github pages的时候,就觉得没法看访问量和评论数量这事,很蛋疼,不过也没折腾.\n今天上午,我们家笨笨说没有评论和访问量不好,都不知道多少人看了.妹子都发话了,果断要搞定.\n<!-- more -->\ngoogle一番找到解决方法:\n#### 1 关于评论数量的显示,我们可以直接使用多说官网提供的方法,很简单\n#### 2 关于访问量统计这事儿,不太好搞,我找到了这个[不蒜子](http://ibruce.info/2015/04/04/busuanzi/),这位非著名码农自己做的访问统计,哈哈,点个赞\n#### 3 今天还看到了font-awesome,可以显示一些小图标,为了显示效果更好,一并加上去\n先展示一下最终的效果:<br>\n![页底关于整站访问量的显示](http://ww1.sinaimg.cn/large/692869a3gw1esm9snxfcuj20su0ad74x.jpg)\n![文章页面关于访问量和评论数量的显示](http://ww4.sinaimg.cn/large/692869a3gw1esm9tcczdij20r00doq4t.jpg)\n\n下面,开始动手\n# 1 配置评论数量的显示\n首先,确认你的评论系统用的是多说,如果不是,那就不用继续往下看了(参考[这里](http://localhost:4000/2014/11/28/custom-hexo/)配置多说).\n我使用的主题是`light`,其他主题原理类似.我们打开`themes/light/layout/_partial/article.ejs`,我们在`header`标签的尾部添加上下面的代码:\n```html\n    <% if (item.excerpt && index){ %>\n     <% } else { %>\n     <div class=\"busuanzi_container_page_pv\">\n       <span class=\"head-plus\">\n       <i class=\"fa fa-user\"></i><span id=\"busuanzi_value_page_pv\"><i class=\"fa fa-spinner fa-spin\"></i></span>次访问\n       </span>\n       <span class=\"head-plus\">\n       <i class=\"fa fa-comments\"></i><span class=\"ds-thread-count\" data-thread-key=\"<%= page.layout %>-<%= page.slug %>\"><i class=\"fa fa-spinner fa-spin\"></i></span>条评论\n       </span>\n     </div>\n     <% } %>\n```\n最终效果如图<br>\n![修改后的article.ejs](http://ww2.sinaimg.cn/large/692869a3gw1esmas5d58oj20x50jc46f.jpg)\n以上代码,是最终成型的代码,我加入了一些美化的东西,最核心的就是\n```html\n<span class=\"ds-thread-count\" data-thread-key=\"<%= page.layout %>-<%= page.slug %>\"></span>\n```\n尤其注意`data-thread-key`的设置,他和你之前配置多说的时候是一致的,每篇文章有一个独一无二的key,你可以去你的`themes/light/layout/_partial/comment.ejs`里找到关于data-thread-key的内容,直接复制过来即可.\n\nPs:这里我们可能还需要配置下数据显示的格式,在你的多说后台管理里面,进入设置界面如图\n![多说后台设置](http://ww3.sinaimg.cn/large/692869a3gw1esmayan2utj20w50mx0ya.jpg)\n我们找到`暂无评论`,`1条评论`,`{num}条评论`,这几个设置,修改成自己要的格式,也可以参照我的修改,`0`,`1`,`{num}`\n\n# 2 配置文章访问量的显示\n这个更简单了,按照作者的说法,只需要引入一个js,再添加一个span就完成了.由于js一般放置在页面的最底部,所以我们找到`themes/light/layout/_partial/after_footer.ejs`,我们在最后添加上下面的代码:\n```javascript\n<script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\">\n</script>\n```\n上面就完成了js文件的引入,我们再在要显示访问量的地方添加一个span就行了.比如我想显示在标题的下面,那就打开`themes/light/layout/_partial/article.ejs`,添加的代码,就是`第一步`里面添加的那个.如果你想简洁一点,也可以只添加下面核心代码就行:\n```html\n本站总访问量<span id=\"busuanzi_value_site_pv\"></span>次\n本站访客数<span id=\"busuanzi_value_site_uv\"></span>人次\n本文总阅读量<span id=\"busuanzi_value_page_pv\"></span>次\n```\n# 3  经过美化后最终的代码\n如果只用官方提供的代码,没有优化,很丑,我优化了下,分享一下.\n\n1.修改`themes/light/layout/_partial/article.ejs`,在header标签的末尾添加以下代码\n```html\n    <% if (item.excerpt && index){ %>\n     <% } else { %>\n     <div class=\"busuanzi_container_page_pv\">\n       <span class=\"head-plus\">\n       <i class=\"fa fa-user\"></i><span id=\"busuanzi_value_page_pv\"><i class=\"fa fa-spinner fa-spin\"></i></span>次访问\n       </span>\n       <span class=\"head-plus\">\n       <i class=\"fa fa-comments\"></i><span class=\"ds-thread-count\" data-thread-key=\"<%= page.layout %>-<%= page.slug %>\"><i class=\"fa fa-spinner fa-spin\"></i></span>条评论\n       </span>\n     </div>\n     <% } %>\n```\n![修改后的article.ejs](http://ww2.sinaimg.cn/large/692869a3gw1esmas5d58oj20x50jc46f.jpg)<br>2.修改`themes/light/layout/_partial/footer.ejs`,下面是footer.ejs的**全部代码**:\n```html\n<div class=\"alignleft\">\n  <% if (config.author){ %>\n  &copy; <%= new Date().getFullYear() %> <%= config.author %>\n  <% } else { %>\n  &copy; <%= new Date().getFullYear() %> <%= config.title %>\n  <% } %>\n<span id=\"busuanzi_container_site_pv\">\n     <i class=\"fa fa-flag\"></i>    你是第<span id=\"busuanzi_value_site_pv\"><i class=\"fa fa-spinner fa-spin\"></i></span>个到访的小伙伴\n</span>\n</div>\n<div class=\"clearfix\"></div>\n```\n<br>3.修改`themes/light/layout/_partial/after_footer.ejs`,我们在**最后**添加上下面的代码:\n\n```javascript\n<script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\">\n</script>\n```\n\n4.修改`themes\\light\\source\\css\\_partial\\article.styl`,我们在第124行,在`.entry`之前添加上以下代码,尤其注意与左右的间距,因为它是一个树形结构,它与左侧的距离,影响着它的层级.我们这里应该和entry平级,下面代码应该与`.entry`对齐\n```\n  .busuanzi_container_page_pv\n      margin:20px 0\n      color: # 817C7C\n      font-size: 12px\n  # busuanzi_value_page_pv\n      padding-left:4px\n  .head-plus\n      padding-left:4px\n  .ds-thread-count\n      padding-left:4px\n\n```\n最终效果如图:\n![添加css,注意左对齐](http://ww4.sinaimg.cn/large/692869a3gw1esmajbsx38j20k30gwadu.jpg)<br>5.修改`themes\\light\\source\\css\\_partial\\footer.styl`,在最后添加上以下代码\n```\n# busuanzi_value_site_pv\n  color:black\n  padding:4px\n# busuanzi_container_site_pv\n  padding-left:2em\n```\n6.修改`themes\\light\\source\\css\\_partial\\variable.styl`,在最后添加以下代码\n```\n@import url(\"http://libs.useso.com/js/font-awesome/4.2.0/css/font-awesome.min.css\")\n```\n\nok  打完收工\n\n# 参考文献\n1 博客访问技术工具--不蒜子 <http://ibruce.info/2015/04/04/busuanzi/>\n2 [多说-代码显示【文章评论数】方法](http://dev.duoshuo.com/docs/5016427f77cf5fa30500000e)\n\n# 致谢\n这里，要感谢我最亲爱的笨笨<http://huirong.github.io>\n","source":"_posts/hexo-setting-with-comments-and-visitors.md","raw":"title: 给hexo配置上评论和访问量\ndate: 2015-05-30 14:08:49\ntags:\n- hexo\ncategories:\n- hexo\n---\n哈哈,我们家笨笨,绝对是我学习技术的很大很大很大大的动力.更开始用github pages的时候,就觉得没法看访问量和评论数量这事,很蛋疼,不过也没折腾.\n今天上午,我们家笨笨说没有评论和访问量不好,都不知道多少人看了.妹子都发话了,果断要搞定.\n<!-- more -->\ngoogle一番找到解决方法:\n#### 1 关于评论数量的显示,我们可以直接使用多说官网提供的方法,很简单\n#### 2 关于访问量统计这事儿,不太好搞,我找到了这个[不蒜子](http://ibruce.info/2015/04/04/busuanzi/),这位非著名码农自己做的访问统计,哈哈,点个赞\n#### 3 今天还看到了font-awesome,可以显示一些小图标,为了显示效果更好,一并加上去\n先展示一下最终的效果:<br>\n![页底关于整站访问量的显示](http://ww1.sinaimg.cn/large/692869a3gw1esm9snxfcuj20su0ad74x.jpg)\n![文章页面关于访问量和评论数量的显示](http://ww4.sinaimg.cn/large/692869a3gw1esm9tcczdij20r00doq4t.jpg)\n\n下面,开始动手\n# 1 配置评论数量的显示\n首先,确认你的评论系统用的是多说,如果不是,那就不用继续往下看了(参考[这里](http://localhost:4000/2014/11/28/custom-hexo/)配置多说).\n我使用的主题是`light`,其他主题原理类似.我们打开`themes/light/layout/_partial/article.ejs`,我们在`header`标签的尾部添加上下面的代码:\n```html\n    <% if (item.excerpt && index){ %>\n     <% } else { %>\n     <div class=\"busuanzi_container_page_pv\">\n       <span class=\"head-plus\">\n       <i class=\"fa fa-user\"></i><span id=\"busuanzi_value_page_pv\"><i class=\"fa fa-spinner fa-spin\"></i></span>次访问\n       </span>\n       <span class=\"head-plus\">\n       <i class=\"fa fa-comments\"></i><span class=\"ds-thread-count\" data-thread-key=\"<%= page.layout %>-<%= page.slug %>\"><i class=\"fa fa-spinner fa-spin\"></i></span>条评论\n       </span>\n     </div>\n     <% } %>\n```\n最终效果如图<br>\n![修改后的article.ejs](http://ww2.sinaimg.cn/large/692869a3gw1esmas5d58oj20x50jc46f.jpg)\n以上代码,是最终成型的代码,我加入了一些美化的东西,最核心的就是\n```html\n<span class=\"ds-thread-count\" data-thread-key=\"<%= page.layout %>-<%= page.slug %>\"></span>\n```\n尤其注意`data-thread-key`的设置,他和你之前配置多说的时候是一致的,每篇文章有一个独一无二的key,你可以去你的`themes/light/layout/_partial/comment.ejs`里找到关于data-thread-key的内容,直接复制过来即可.\n\nPs:这里我们可能还需要配置下数据显示的格式,在你的多说后台管理里面,进入设置界面如图\n![多说后台设置](http://ww3.sinaimg.cn/large/692869a3gw1esmayan2utj20w50mx0ya.jpg)\n我们找到`暂无评论`,`1条评论`,`{num}条评论`,这几个设置,修改成自己要的格式,也可以参照我的修改,`0`,`1`,`{num}`\n\n# 2 配置文章访问量的显示\n这个更简单了,按照作者的说法,只需要引入一个js,再添加一个span就完成了.由于js一般放置在页面的最底部,所以我们找到`themes/light/layout/_partial/after_footer.ejs`,我们在最后添加上下面的代码:\n```javascript\n<script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\">\n</script>\n```\n上面就完成了js文件的引入,我们再在要显示访问量的地方添加一个span就行了.比如我想显示在标题的下面,那就打开`themes/light/layout/_partial/article.ejs`,添加的代码,就是`第一步`里面添加的那个.如果你想简洁一点,也可以只添加下面核心代码就行:\n```html\n本站总访问量<span id=\"busuanzi_value_site_pv\"></span>次\n本站访客数<span id=\"busuanzi_value_site_uv\"></span>人次\n本文总阅读量<span id=\"busuanzi_value_page_pv\"></span>次\n```\n# 3  经过美化后最终的代码\n如果只用官方提供的代码,没有优化,很丑,我优化了下,分享一下.\n\n1.修改`themes/light/layout/_partial/article.ejs`,在header标签的末尾添加以下代码\n```html\n    <% if (item.excerpt && index){ %>\n     <% } else { %>\n     <div class=\"busuanzi_container_page_pv\">\n       <span class=\"head-plus\">\n       <i class=\"fa fa-user\"></i><span id=\"busuanzi_value_page_pv\"><i class=\"fa fa-spinner fa-spin\"></i></span>次访问\n       </span>\n       <span class=\"head-plus\">\n       <i class=\"fa fa-comments\"></i><span class=\"ds-thread-count\" data-thread-key=\"<%= page.layout %>-<%= page.slug %>\"><i class=\"fa fa-spinner fa-spin\"></i></span>条评论\n       </span>\n     </div>\n     <% } %>\n```\n![修改后的article.ejs](http://ww2.sinaimg.cn/large/692869a3gw1esmas5d58oj20x50jc46f.jpg)<br>2.修改`themes/light/layout/_partial/footer.ejs`,下面是footer.ejs的**全部代码**:\n```html\n<div class=\"alignleft\">\n  <% if (config.author){ %>\n  &copy; <%= new Date().getFullYear() %> <%= config.author %>\n  <% } else { %>\n  &copy; <%= new Date().getFullYear() %> <%= config.title %>\n  <% } %>\n<span id=\"busuanzi_container_site_pv\">\n     <i class=\"fa fa-flag\"></i>    你是第<span id=\"busuanzi_value_site_pv\"><i class=\"fa fa-spinner fa-spin\"></i></span>个到访的小伙伴\n</span>\n</div>\n<div class=\"clearfix\"></div>\n```\n<br>3.修改`themes/light/layout/_partial/after_footer.ejs`,我们在**最后**添加上下面的代码:\n\n```javascript\n<script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\">\n</script>\n```\n\n4.修改`themes\\light\\source\\css\\_partial\\article.styl`,我们在第124行,在`.entry`之前添加上以下代码,尤其注意与左右的间距,因为它是一个树形结构,它与左侧的距离,影响着它的层级.我们这里应该和entry平级,下面代码应该与`.entry`对齐\n```\n  .busuanzi_container_page_pv\n      margin:20px 0\n      color: # 817C7C\n      font-size: 12px\n  # busuanzi_value_page_pv\n      padding-left:4px\n  .head-plus\n      padding-left:4px\n  .ds-thread-count\n      padding-left:4px\n\n```\n最终效果如图:\n![添加css,注意左对齐](http://ww4.sinaimg.cn/large/692869a3gw1esmajbsx38j20k30gwadu.jpg)<br>5.修改`themes\\light\\source\\css\\_partial\\footer.styl`,在最后添加上以下代码\n```\n# busuanzi_value_site_pv\n  color:black\n  padding:4px\n# busuanzi_container_site_pv\n  padding-left:2em\n```\n6.修改`themes\\light\\source\\css\\_partial\\variable.styl`,在最后添加以下代码\n```\n@import url(\"http://libs.useso.com/js/font-awesome/4.2.0/css/font-awesome.min.css\")\n```\n\nok  打完收工\n\n# 参考文献\n1 博客访问技术工具--不蒜子 <http://ibruce.info/2015/04/04/busuanzi/>\n2 [多说-代码显示【文章评论数】方法](http://dev.duoshuo.com/docs/5016427f77cf5fa30500000e)\n\n# 致谢\n这里，要感谢我最亲爱的笨笨<http://huirong.github.io>\n","slug":"hexo-setting-with-comments-and-visitors","published":1,"updated":"2015-10-29T06:08:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yox000xx8cdxqecq8nk","content":"<p>哈哈,我们家笨笨,绝对是我学习技术的很大很大很大大的动力.更开始用github pages的时候,就觉得没法看访问量和评论数量这事,很蛋疼,不过也没折腾.<br>今天上午,我们家笨笨说没有评论和访问量不好,都不知道多少人看了.妹子都发话了,果断要搞定.<br><a id=\"more\"></a><br>google一番找到解决方法:</p>\n<h4 id=\"1-关于评论数量的显示-我们可以直接使用多说官网提供的方法-很简单\"><a href=\"#1-关于评论数量的显示-我们可以直接使用多说官网提供的方法-很简单\" class=\"headerlink\" title=\"1 关于评论数量的显示,我们可以直接使用多说官网提供的方法,很简单\"></a>1 关于评论数量的显示,我们可以直接使用多说官网提供的方法,很简单</h4><h4 id=\"2-关于访问量统计这事儿-不太好搞-我找到了这个不蒜子-这位非著名码农自己做的访问统计-哈哈-点个赞\"><a href=\"#2-关于访问量统计这事儿-不太好搞-我找到了这个不蒜子-这位非著名码农自己做的访问统计-哈哈-点个赞\" class=\"headerlink\" title=\"2 关于访问量统计这事儿,不太好搞,我找到了这个不蒜子,这位非著名码农自己做的访问统计,哈哈,点个赞\"></a>2 关于访问量统计这事儿,不太好搞,我找到了这个<a href=\"http://ibruce.info/2015/04/04/busuanzi/\" target=\"_blank\" rel=\"external\">不蒜子</a>,这位非著名码农自己做的访问统计,哈哈,点个赞</h4><h4 id=\"3-今天还看到了font-awesome-可以显示一些小图标-为了显示效果更好-一并加上去\"><a href=\"#3-今天还看到了font-awesome-可以显示一些小图标-为了显示效果更好-一并加上去\" class=\"headerlink\" title=\"3 今天还看到了font-awesome,可以显示一些小图标,为了显示效果更好,一并加上去\"></a>3 今天还看到了font-awesome,可以显示一些小图标,为了显示效果更好,一并加上去</h4><p>先展示一下最终的效果:<br><br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1esm9snxfcuj20su0ad74x.jpg\" alt=\"页底关于整站访问量的显示\"><br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1esm9tcczdij20r00doq4t.jpg\" alt=\"文章页面关于访问量和评论数量的显示\"></p>\n<p>下面,开始动手</p>\n<h1 id=\"1-配置评论数量的显示\"><a href=\"#1-配置评论数量的显示\" class=\"headerlink\" title=\"1 配置评论数量的显示\"></a>1 配置评论数量的显示</h1><p>首先,确认你的评论系统用的是多说,如果不是,那就不用继续往下看了(参考<a href=\"http://localhost:4000/2014/11/28/custom-hexo/\" target=\"_blank\" rel=\"external\">这里</a>配置多说).<br>我使用的主题是<code>light</code>,其他主题原理类似.我们打开<code>themes/light/layout/_partial/article.ejs</code>,我们在<code>header</code>标签的尾部添加上下面的代码:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (<span class=\"attr\">item.excerpt</span> &amp;&amp; <span class=\"attr\">index</span>)&#123; %&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; <span class=\"attr\">else</span> &#123; %&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"busuanzi_container_page_pv\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"head-plus\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-user\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"busuanzi_value_page_pv\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-spinner fa-spin\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>次访问</div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"head-plus\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-comments\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ds-thread-count\"</span> <span class=\"attr\">data-thread-key</span>=<span class=\"string\">\"&lt;%= page.layout %&gt;-&lt;%= page.slug %&gt;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-spinner fa-spin\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>条评论</div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure></p>\n<p>最终效果如图<br><br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1esmas5d58oj20x50jc46f.jpg\" alt=\"修改后的article.ejs\"><br>以上代码,是最终成型的代码,我加入了一些美化的东西,最核心的就是<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ds-thread-count\"</span> <span class=\"attr\">data-thread-key</span>=<span class=\"string\">\"&lt;%= page.layout %&gt;-&lt;%= page.slug %&gt;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>尤其注意<code>data-thread-key</code>的设置,他和你之前配置多说的时候是一致的,每篇文章有一个独一无二的key,你可以去你的<code>themes/light/layout/_partial/comment.ejs</code>里找到关于data-thread-key的内容,直接复制过来即可.</p>\n<p>Ps:这里我们可能还需要配置下数据显示的格式,在你的多说后台管理里面,进入设置界面如图<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1esmayan2utj20w50mx0ya.jpg\" alt=\"多说后台设置\"><br>我们找到<code>暂无评论</code>,<code>1条评论</code>,<code>{num}条评论</code>,这几个设置,修改成自己要的格式,也可以参照我的修改,<code>0</code>,<code>1</code>,<code>{num}</code></p>\n<h1 id=\"2-配置文章访问量的显示\"><a href=\"#2-配置文章访问量的显示\" class=\"headerlink\" title=\"2 配置文章访问量的显示\"></a>2 配置文章访问量的显示</h1><p>这个更简单了,按照作者的说法,只需要引入一个js,再添加一个span就完成了.由于js一般放置在页面的最底部,所以我们找到<code>themes/light/layout/_partial/after_footer.ejs</code>,我们在最后添加上下面的代码:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script <span class=\"keyword\">async</span> src=<span class=\"string\">\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"</span>&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>\n<p>上面就完成了js文件的引入,我们再在要显示访问量的地方添加一个span就行了.比如我想显示在标题的下面,那就打开<code>themes/light/layout/_partial/article.ejs</code>,添加的代码,就是<code>第一步</code>里面添加的那个.如果你想简洁一点,也可以只添加下面核心代码就行:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">本站总访问量<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"busuanzi_value_site_pv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>次</div><div class=\"line\">本站访客数<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"busuanzi_value_site_uv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>人次</div><div class=\"line\">本文总阅读量<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"busuanzi_value_page_pv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>次</div></pre></td></tr></table></figure></p>\n<h1 id=\"3-经过美化后最终的代码\"><a href=\"#3-经过美化后最终的代码\" class=\"headerlink\" title=\"3  经过美化后最终的代码\"></a>3  经过美化后最终的代码</h1><p>如果只用官方提供的代码,没有优化,很丑,我优化了下,分享一下.</p>\n<p>1.修改<code>themes/light/layout/_partial/article.ejs</code>,在header标签的末尾添加以下代码<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (<span class=\"attr\">item.excerpt</span> &amp;&amp; <span class=\"attr\">index</span>)&#123; %&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; <span class=\"attr\">else</span> &#123; %&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"busuanzi_container_page_pv\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"head-plus\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-user\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"busuanzi_value_page_pv\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-spinner fa-spin\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>次访问</div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"head-plus\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-comments\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ds-thread-count\"</span> <span class=\"attr\">data-thread-key</span>=<span class=\"string\">\"&lt;%= page.layout %&gt;-&lt;%= page.slug %&gt;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-spinner fa-spin\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>条评论</div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1esmas5d58oj20x50jc46f.jpg\" alt=\"修改后的article.ejs\"><br>2.修改<code>themes/light/layout/_partial/footer.ejs</code>,下面是footer.ejs的<strong>全部代码</strong>:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"alignleft\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (<span class=\"attr\">config.author</span>)&#123; %&gt;</span></div><div class=\"line\">  &amp;copy; <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">new</span> <span class=\"attr\">Date</span>()<span class=\"attr\">.getFullYear</span>() %&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">config.author</span> %&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; <span class=\"attr\">else</span> &#123; %&gt;</span></div><div class=\"line\">  &amp;copy; <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">new</span> <span class=\"attr\">Date</span>()<span class=\"attr\">.getFullYear</span>() %&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">config.title</span> %&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"busuanzi_container_site_pv\"</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-flag\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>    你是第<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"busuanzi_value_site_pv\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-spinner fa-spin\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>个到访的小伙伴</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"clearfix\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><br>3.修改<code>themes/light/layout/_partial/after_footer.ejs</code>,我们在<strong>最后</strong>添加上下面的代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script <span class=\"keyword\">async</span> src=<span class=\"string\">\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"</span>&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<p>4.修改<code>themes\\light\\source\\css\\_partial\\article.styl</code>,我们在第124行,在<code>.entry</code>之前添加上以下代码,尤其注意与左右的间距,因为它是一个树形结构,它与左侧的距离,影响着它的层级.我们这里应该和entry平级,下面代码应该与<code>.entry</code>对齐<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">.busuanzi_container_page_pv</div><div class=\"line\"><span class=\"attr\">    margin:</span><span class=\"number\">20</span>px <span class=\"number\">0</span></div><div class=\"line\"><span class=\"attr\">    color:</span> <span class=\"comment\"># 817C7C</span></div><div class=\"line\"><span class=\"attr\">    font-size:</span> <span class=\"number\">12</span>px</div><div class=\"line\"><span class=\"comment\"># busuanzi_value_page_pv</span></div><div class=\"line\"><span class=\"attr\">    padding-left:</span><span class=\"number\">4</span>px</div><div class=\"line\">.head-plus</div><div class=\"line\"><span class=\"attr\">    padding-left:</span><span class=\"number\">4</span>px</div><div class=\"line\">.ds-thread-count</div><div class=\"line\"><span class=\"attr\">    padding-left:</span><span class=\"number\">4</span>px</div></pre></td></tr></table></figure></p>\n<p>最终效果如图:<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1esmajbsx38j20k30gwadu.jpg\" alt=\"添加css,注意左对齐\"><br>5.修改<code>themes\\light\\source\\css\\_partial\\footer.styl</code>,在最后添加上以下代码<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># busuanzi_value_site_pv</span></div><div class=\"line\"><span class=\"attr\">  color:</span>black</div><div class=\"line\"><span class=\"attr\">  padding:</span><span class=\"number\">4</span>px</div><div class=\"line\"><span class=\"comment\"># busuanzi_container_site_pv</span></div><div class=\"line\"><span class=\"attr\">  padding-left:</span><span class=\"number\">2</span>em</div></pre></td></tr></table></figure></p>\n<p>6.修改<code>themes\\light\\source\\css\\_partial\\variable.styl</code>,在最后添加以下代码<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@import</span> url(<span class=\"string\">\"http://libs.useso.com/js/font-awesome/4.2.0/css/font-awesome.min.css\"</span>)</div></pre></td></tr></table></figure></p>\n<p>ok  打完收工</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 博客访问技术工具–不蒜子 <a href=\"http://ibruce.info/2015/04/04/busuanzi/\" target=\"_blank\" rel=\"external\">http://ibruce.info/2015/04/04/busuanzi/</a><br>2 <a href=\"http://dev.duoshuo.com/docs/5016427f77cf5fa30500000e\" target=\"_blank\" rel=\"external\">多说-代码显示【文章评论数】方法</a></p>\n<h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p>这里，要感谢我最亲爱的笨笨<a href=\"http://huirong.github.io\" target=\"_blank\" rel=\"external\">http://huirong.github.io</a></p>\n","excerpt":"<p>哈哈,我们家笨笨,绝对是我学习技术的很大很大很大大的动力.更开始用github pages的时候,就觉得没法看访问量和评论数量这事,很蛋疼,不过也没折腾.<br>今天上午,我们家笨笨说没有评论和访问量不好,都不知道多少人看了.妹子都发话了,果断要搞定.<br>","more":"<br>google一番找到解决方法:</p>\n<h4 id=\"1-关于评论数量的显示-我们可以直接使用多说官网提供的方法-很简单\"><a href=\"#1-关于评论数量的显示-我们可以直接使用多说官网提供的方法-很简单\" class=\"headerlink\" title=\"1 关于评论数量的显示,我们可以直接使用多说官网提供的方法,很简单\"></a>1 关于评论数量的显示,我们可以直接使用多说官网提供的方法,很简单</h4><h4 id=\"2-关于访问量统计这事儿-不太好搞-我找到了这个不蒜子-这位非著名码农自己做的访问统计-哈哈-点个赞\"><a href=\"#2-关于访问量统计这事儿-不太好搞-我找到了这个不蒜子-这位非著名码农自己做的访问统计-哈哈-点个赞\" class=\"headerlink\" title=\"2 关于访问量统计这事儿,不太好搞,我找到了这个不蒜子,这位非著名码农自己做的访问统计,哈哈,点个赞\"></a>2 关于访问量统计这事儿,不太好搞,我找到了这个<a href=\"http://ibruce.info/2015/04/04/busuanzi/\">不蒜子</a>,这位非著名码农自己做的访问统计,哈哈,点个赞</h4><h4 id=\"3-今天还看到了font-awesome-可以显示一些小图标-为了显示效果更好-一并加上去\"><a href=\"#3-今天还看到了font-awesome-可以显示一些小图标-为了显示效果更好-一并加上去\" class=\"headerlink\" title=\"3 今天还看到了font-awesome,可以显示一些小图标,为了显示效果更好,一并加上去\"></a>3 今天还看到了font-awesome,可以显示一些小图标,为了显示效果更好,一并加上去</h4><p>先展示一下最终的效果:<br><br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1esm9snxfcuj20su0ad74x.jpg\" alt=\"页底关于整站访问量的显示\"><br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1esm9tcczdij20r00doq4t.jpg\" alt=\"文章页面关于访问量和评论数量的显示\"></p>\n<p>下面,开始动手</p>\n<h1 id=\"1-配置评论数量的显示\"><a href=\"#1-配置评论数量的显示\" class=\"headerlink\" title=\"1 配置评论数量的显示\"></a>1 配置评论数量的显示</h1><p>首先,确认你的评论系统用的是多说,如果不是,那就不用继续往下看了(参考<a href=\"http://localhost:4000/2014/11/28/custom-hexo/\">这里</a>配置多说).<br>我使用的主题是<code>light</code>,其他主题原理类似.我们打开<code>themes/light/layout/_partial/article.ejs</code>,我们在<code>header</code>标签的尾部添加上下面的代码:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (<span class=\"attr\">item.excerpt</span> &amp;&amp; <span class=\"attr\">index</span>)&#123; %&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; <span class=\"attr\">else</span> &#123; %&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"busuanzi_container_page_pv\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"head-plus\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-user\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"busuanzi_value_page_pv\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-spinner fa-spin\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>次访问</div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"head-plus\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-comments\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ds-thread-count\"</span> <span class=\"attr\">data-thread-key</span>=<span class=\"string\">\"&lt;%= page.layout %&gt;-&lt;%= page.slug %&gt;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-spinner fa-spin\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>条评论</div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure></p>\n<p>最终效果如图<br><br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1esmas5d58oj20x50jc46f.jpg\" alt=\"修改后的article.ejs\"><br>以上代码,是最终成型的代码,我加入了一些美化的东西,最核心的就是<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ds-thread-count\"</span> <span class=\"attr\">data-thread-key</span>=<span class=\"string\">\"&lt;%= page.layout %&gt;-&lt;%= page.slug %&gt;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>尤其注意<code>data-thread-key</code>的设置,他和你之前配置多说的时候是一致的,每篇文章有一个独一无二的key,你可以去你的<code>themes/light/layout/_partial/comment.ejs</code>里找到关于data-thread-key的内容,直接复制过来即可.</p>\n<p>Ps:这里我们可能还需要配置下数据显示的格式,在你的多说后台管理里面,进入设置界面如图<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1esmayan2utj20w50mx0ya.jpg\" alt=\"多说后台设置\"><br>我们找到<code>暂无评论</code>,<code>1条评论</code>,<code>{num}条评论</code>,这几个设置,修改成自己要的格式,也可以参照我的修改,<code>0</code>,<code>1</code>,<code>{num}</code></p>\n<h1 id=\"2-配置文章访问量的显示\"><a href=\"#2-配置文章访问量的显示\" class=\"headerlink\" title=\"2 配置文章访问量的显示\"></a>2 配置文章访问量的显示</h1><p>这个更简单了,按照作者的说法,只需要引入一个js,再添加一个span就完成了.由于js一般放置在页面的最底部,所以我们找到<code>themes/light/layout/_partial/after_footer.ejs</code>,我们在最后添加上下面的代码:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script <span class=\"keyword\">async</span> src=<span class=\"string\">\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"</span>&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>\n<p>上面就完成了js文件的引入,我们再在要显示访问量的地方添加一个span就行了.比如我想显示在标题的下面,那就打开<code>themes/light/layout/_partial/article.ejs</code>,添加的代码,就是<code>第一步</code>里面添加的那个.如果你想简洁一点,也可以只添加下面核心代码就行:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">本站总访问量<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"busuanzi_value_site_pv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>次</div><div class=\"line\">本站访客数<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"busuanzi_value_site_uv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>人次</div><div class=\"line\">本文总阅读量<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"busuanzi_value_page_pv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>次</div></pre></td></tr></table></figure></p>\n<h1 id=\"3-经过美化后最终的代码\"><a href=\"#3-经过美化后最终的代码\" class=\"headerlink\" title=\"3  经过美化后最终的代码\"></a>3  经过美化后最终的代码</h1><p>如果只用官方提供的代码,没有优化,很丑,我优化了下,分享一下.</p>\n<p>1.修改<code>themes/light/layout/_partial/article.ejs</code>,在header标签的末尾添加以下代码<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (<span class=\"attr\">item.excerpt</span> &amp;&amp; <span class=\"attr\">index</span>)&#123; %&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; <span class=\"attr\">else</span> &#123; %&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"busuanzi_container_page_pv\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"head-plus\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-user\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"busuanzi_value_page_pv\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-spinner fa-spin\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>次访问</div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"head-plus\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-comments\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ds-thread-count\"</span> <span class=\"attr\">data-thread-key</span>=<span class=\"string\">\"&lt;%= page.layout %&gt;-&lt;%= page.slug %&gt;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-spinner fa-spin\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>条评论</div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1esmas5d58oj20x50jc46f.jpg\" alt=\"修改后的article.ejs\"><br>2.修改<code>themes/light/layout/_partial/footer.ejs</code>,下面是footer.ejs的<strong>全部代码</strong>:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"alignleft\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (<span class=\"attr\">config.author</span>)&#123; %&gt;</span></div><div class=\"line\">  &amp;copy; <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">new</span> <span class=\"attr\">Date</span>()<span class=\"attr\">.getFullYear</span>() %&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">config.author</span> %&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; <span class=\"attr\">else</span> &#123; %&gt;</span></div><div class=\"line\">  &amp;copy; <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">new</span> <span class=\"attr\">Date</span>()<span class=\"attr\">.getFullYear</span>() %&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">config.title</span> %&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"busuanzi_container_site_pv\"</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-flag\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>    你是第<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"busuanzi_value_site_pv\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-spinner fa-spin\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>个到访的小伙伴</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"clearfix\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><br>3.修改<code>themes/light/layout/_partial/after_footer.ejs</code>,我们在<strong>最后</strong>添加上下面的代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script <span class=\"keyword\">async</span> src=<span class=\"string\">\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"</span>&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<p>4.修改<code>themes\\light\\source\\css\\_partial\\article.styl</code>,我们在第124行,在<code>.entry</code>之前添加上以下代码,尤其注意与左右的间距,因为它是一个树形结构,它与左侧的距离,影响着它的层级.我们这里应该和entry平级,下面代码应该与<code>.entry</code>对齐<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">.busuanzi_container_page_pv</div><div class=\"line\"><span class=\"attr\">    margin:</span><span class=\"number\">20</span>px <span class=\"number\">0</span></div><div class=\"line\"><span class=\"attr\">    color:</span> <span class=\"comment\"># 817C7C</span></div><div class=\"line\"><span class=\"attr\">    font-size:</span> <span class=\"number\">12</span>px</div><div class=\"line\"><span class=\"comment\"># busuanzi_value_page_pv</span></div><div class=\"line\"><span class=\"attr\">    padding-left:</span><span class=\"number\">4</span>px</div><div class=\"line\">.head-plus</div><div class=\"line\"><span class=\"attr\">    padding-left:</span><span class=\"number\">4</span>px</div><div class=\"line\">.ds-thread-count</div><div class=\"line\"><span class=\"attr\">    padding-left:</span><span class=\"number\">4</span>px</div></pre></td></tr></table></figure></p>\n<p>最终效果如图:<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1esmajbsx38j20k30gwadu.jpg\" alt=\"添加css,注意左对齐\"><br>5.修改<code>themes\\light\\source\\css\\_partial\\footer.styl</code>,在最后添加上以下代码<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># busuanzi_value_site_pv</span></div><div class=\"line\"><span class=\"attr\">  color:</span>black</div><div class=\"line\"><span class=\"attr\">  padding:</span><span class=\"number\">4</span>px</div><div class=\"line\"><span class=\"comment\"># busuanzi_container_site_pv</span></div><div class=\"line\"><span class=\"attr\">  padding-left:</span><span class=\"number\">2</span>em</div></pre></td></tr></table></figure></p>\n<p>6.修改<code>themes\\light\\source\\css\\_partial\\variable.styl</code>,在最后添加以下代码<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@import</span> url(<span class=\"string\">\"http://libs.useso.com/js/font-awesome/4.2.0/css/font-awesome.min.css\"</span>)</div></pre></td></tr></table></figure></p>\n<p>ok  打完收工</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 博客访问技术工具–不蒜子 <a href=\"http://ibruce.info/2015/04/04/busuanzi/\">http://ibruce.info/2015/04/04/busuanzi/</a><br>2 <a href=\"http://dev.duoshuo.com/docs/5016427f77cf5fa30500000e\">多说-代码显示【文章评论数】方法</a></p>\n<h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p>这里，要感谢我最亲爱的笨笨<a href=\"http://huirong.github.io\">http://huirong.github.io</a></p>"},{"title":"hexo发布失败","date":"2015-03-29T10:09:28.000Z","_content":"可能受到上次ddos的问题,这两天国内访问github,总是感觉不顺畅.\n<!-- more -->\n今天下午写了一篇博客,可是却发布不成功,一直卡在这一步:\n![hexo发布的时候卡住](http://ww3.sinaimg.cn/large/692869a3gw1eqmrrf20j1j20g006676y.jpg)\n\n然后我继续等,得到如下错误:\n```\nhexo Failed to receive SOCKS4 connect request ack.\n```\n我执行了`hexo clean`命令,手动删掉了`.deploy`文件夹,可是还是不行\n最后报错\n无法连接`https://github.com/Jackroyal/Jackroyal.github.io.git`\n\n*(ps:此处已经无法重现了,抽风啊)*\n\n最后我换了下这条链接\n我修改了博客目录下的`_config.yml`,改了deploy参数\n原参数设置\n```\ndeploy:\n  type: github\n  repo: https://github.com/Jackroyal/Jackroyal.github.io.git\n  branch: master\n```\n修改以后:\n```\ndeploy:\n  type: github\n  repo: git@github.com:Jackroyal/Jackroyal.github.io.git\n  branch: master\n```\n然后就deploy成功了.\n\n*PPPS:千万注意,上面的参数设置repo:后面有一个空格,没有空格会报错*\n\n\n# update:\nrepo的两种方式分别为ssh和https\n昨天没搞清楚,专门去查了一下,ssh和https两种提交的区别\n官方推荐用https,因为这回要求你输入用户名和密码,这样更安全\n用ssh的话,只要你的ssh-key(可以设置一道类似密码的东西,和你的key一起加密,这样使用的时候会要求输入这段密码)对,那么就都可以提交,没有了更多的验证过程(可以设置一个para加密,提交会要求输入这段para)\n\n2015-05-06\n最近又发现，使用ssh提交的话，github不会计算到你的conribute里面去，也就是你今天提交了，但是github的contribute不会变化，所以还是改成https吧，不然怎么装B呢？\n\n### 友情链接\n[ubuntu  shadowsocks 全局 代理](http://rolight.cn/blog/?p=34)\n","source":"_posts/hexo-deploy-error.md","raw":"title: hexo发布失败\ndate: 2015-03-29 18:09:28\ntags:\n- hexo\ncategories:\n- hexo\n---\n可能受到上次ddos的问题,这两天国内访问github,总是感觉不顺畅.\n<!-- more -->\n今天下午写了一篇博客,可是却发布不成功,一直卡在这一步:\n![hexo发布的时候卡住](http://ww3.sinaimg.cn/large/692869a3gw1eqmrrf20j1j20g006676y.jpg)\n\n然后我继续等,得到如下错误:\n```\nhexo Failed to receive SOCKS4 connect request ack.\n```\n我执行了`hexo clean`命令,手动删掉了`.deploy`文件夹,可是还是不行\n最后报错\n无法连接`https://github.com/Jackroyal/Jackroyal.github.io.git`\n\n*(ps:此处已经无法重现了,抽风啊)*\n\n最后我换了下这条链接\n我修改了博客目录下的`_config.yml`,改了deploy参数\n原参数设置\n```\ndeploy:\n  type: github\n  repo: https://github.com/Jackroyal/Jackroyal.github.io.git\n  branch: master\n```\n修改以后:\n```\ndeploy:\n  type: github\n  repo: git@github.com:Jackroyal/Jackroyal.github.io.git\n  branch: master\n```\n然后就deploy成功了.\n\n*PPPS:千万注意,上面的参数设置repo:后面有一个空格,没有空格会报错*\n\n\n# update:\nrepo的两种方式分别为ssh和https\n昨天没搞清楚,专门去查了一下,ssh和https两种提交的区别\n官方推荐用https,因为这回要求你输入用户名和密码,这样更安全\n用ssh的话,只要你的ssh-key(可以设置一道类似密码的东西,和你的key一起加密,这样使用的时候会要求输入这段密码)对,那么就都可以提交,没有了更多的验证过程(可以设置一个para加密,提交会要求输入这段para)\n\n2015-05-06\n最近又发现，使用ssh提交的话，github不会计算到你的conribute里面去，也就是你今天提交了，但是github的contribute不会变化，所以还是改成https吧，不然怎么装B呢？\n\n### 友情链接\n[ubuntu  shadowsocks 全局 代理](http://rolight.cn/blog/?p=34)\n","slug":"hexo-deploy-error","published":1,"updated":"2015-10-29T06:08:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yoz0010x8cdynbhqhll","content":"<p>可能受到上次ddos的问题,这两天国内访问github,总是感觉不顺畅.<br><a id=\"more\"></a><br>今天下午写了一篇博客,可是却发布不成功,一直卡在这一步:<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1eqmrrf20j1j20g006676y.jpg\" alt=\"hexo发布的时候卡住\"></p>\n<p>然后我继续等,得到如下错误:<br><figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo Failed to <span class=\"keyword\">receive</span> SOCKS4 connect request ack.</div></pre></td></tr></table></figure></p>\n<p>我执行了<code>hexo clean</code>命令,手动删掉了<code>.deploy</code>文件夹,可是还是不行<br>最后报错<br>无法连接<code>https://github.com/Jackroyal/Jackroyal.github.io.git</code></p>\n<p><em>(ps:此处已经无法重现了,抽风啊)</em></p>\n<p>最后我换了下这条链接<br>我修改了博客目录下的<code>_config.yml</code>,改了deploy参数<br>原参数设置<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">  <span class=\"attribute\">type</span>: github</div><div class=\"line\">  <span class=\"attribute\">repo</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/Jackroyal/Jackroyal.github.io.git</span></div><div class=\"line\">  <span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure></p>\n<p>修改以后:<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">  <span class=\"attribute\">type</span>: github</div><div class=\"line\">  <span class=\"attribute\">repo</span>: git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:Jackroyal/Jackroyal.github.io.git</div><div class=\"line\">  <span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure></p>\n<p>然后就deploy成功了.</p>\n<p><em>PPPS:千万注意,上面的参数设置repo:后面有一个空格,没有空格会报错</em></p>\n<h1 id=\"update\"><a href=\"#update\" class=\"headerlink\" title=\"update:\"></a>update:</h1><p>repo的两种方式分别为ssh和https<br>昨天没搞清楚,专门去查了一下,ssh和https两种提交的区别<br>官方推荐用https,因为这回要求你输入用户名和密码,这样更安全<br>用ssh的话,只要你的ssh-key(可以设置一道类似密码的东西,和你的key一起加密,这样使用的时候会要求输入这段密码)对,那么就都可以提交,没有了更多的验证过程(可以设置一个para加密,提交会要求输入这段para)</p>\n<p>2015-05-06<br>最近又发现，使用ssh提交的话，github不会计算到你的conribute里面去，也就是你今天提交了，但是github的contribute不会变化，所以还是改成https吧，不然怎么装B呢？</p>\n<h3 id=\"友情链接\"><a href=\"#友情链接\" class=\"headerlink\" title=\"友情链接\"></a>友情链接</h3><p><a href=\"http://rolight.cn/blog/?p=34\" target=\"_blank\" rel=\"external\">ubuntu  shadowsocks 全局 代理</a></p>\n","excerpt":"<p>可能受到上次ddos的问题,这两天国内访问github,总是感觉不顺畅.<br>","more":"<br>今天下午写了一篇博客,可是却发布不成功,一直卡在这一步:<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1eqmrrf20j1j20g006676y.jpg\" alt=\"hexo发布的时候卡住\"></p>\n<p>然后我继续等,得到如下错误:<br><figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo Failed to <span class=\"keyword\">receive</span> SOCKS4 connect request ack.</div></pre></td></tr></table></figure></p>\n<p>我执行了<code>hexo clean</code>命令,手动删掉了<code>.deploy</code>文件夹,可是还是不行<br>最后报错<br>无法连接<code>https://github.com/Jackroyal/Jackroyal.github.io.git</code></p>\n<p><em>(ps:此处已经无法重现了,抽风啊)</em></p>\n<p>最后我换了下这条链接<br>我修改了博客目录下的<code>_config.yml</code>,改了deploy参数<br>原参数设置<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">  <span class=\"attribute\">type</span>: github</div><div class=\"line\">  <span class=\"attribute\">repo</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/Jackroyal/Jackroyal.github.io.git</span></div><div class=\"line\">  <span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure></p>\n<p>修改以后:<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">  <span class=\"attribute\">type</span>: github</div><div class=\"line\">  <span class=\"attribute\">repo</span>: git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:Jackroyal/Jackroyal.github.io.git</div><div class=\"line\">  <span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure></p>\n<p>然后就deploy成功了.</p>\n<p><em>PPPS:千万注意,上面的参数设置repo:后面有一个空格,没有空格会报错</em></p>\n<h1 id=\"update\"><a href=\"#update\" class=\"headerlink\" title=\"update:\"></a>update:</h1><p>repo的两种方式分别为ssh和https<br>昨天没搞清楚,专门去查了一下,ssh和https两种提交的区别<br>官方推荐用https,因为这回要求你输入用户名和密码,这样更安全<br>用ssh的话,只要你的ssh-key(可以设置一道类似密码的东西,和你的key一起加密,这样使用的时候会要求输入这段密码)对,那么就都可以提交,没有了更多的验证过程(可以设置一个para加密,提交会要求输入这段para)</p>\n<p>2015-05-06<br>最近又发现，使用ssh提交的话，github不会计算到你的conribute里面去，也就是你今天提交了，但是github的contribute不会变化，所以还是改成https吧，不然怎么装B呢？</p>\n<h3 id=\"友情链接\"><a href=\"#友情链接\" class=\"headerlink\" title=\"友情链接\"></a>友情链接</h3><p><a href=\"http://rolight.cn/blog/?p=34\">ubuntu  shadowsocks 全局 代理</a></p>"},{"title":"解决 Github Pages 禁止百度爬虫的方法","date":"2015-11-25T03:06:50.000Z","_content":"*update*:因为gitcafe在5月31号就关闭了,所以要将文章中的gitcafe换掉,我重新写了一篇,在这里[解决 Github Pages 禁止百度爬虫的方法2--从gitcafe迁移到coding.net](http://jackroyal.github.io/2016/03/06/migrate-pages-from-gitcafe-to-coding/)\n\n最近,我的github student package里面送的一个namecheap域名终于下来了.That is to say:我终于有自己的域名了,这就是我的域名[http://bblove.me](http://bblove.me),欢迎来访.\n<!-- more -->\n有域名以后,就在想办法解决百度爬虫的问题.\n```\nHi Jackroyal,\n\nWe are currently blocking the Baidu user agent from crawling GitHub Pages\nsites in response to this user agent being responsible for an excessive amount\nof requests, which was causing availability issues for other GitHub customers.\nThis is unlikely to change any time soon, so if you need the Baidu user agent\nto be able to crawl your site you will need to host it elsewhere.\n\nCheers,\nScott\n```\n这是我之前跟github反映百度spider无法抓取我的github pages,他们给我的回复邮件.也就是说他们把百度spider给禁掉了,桑不起.\n直接说解决方法:\n`把博客同时发布到github pages和gitcafe pages.然后使用dnspod设置域名解析,国内线路解析到gitcafe,国外线路解析到github.`\n# 实现方法\n# 1 准备条件\n一共需要一下这几个东西:\n+ 一个github账户\n+ 一个gitcafe账户\n+ 一个dnspod账号\n+ 一个域名\n+ github for windows(或者git客户端也行)\n没了,就这么多就行.\n\n# 2 初始操作\n我们在github和gitcafe上面把自己的博客搭建起来,首先要建仓库.\n**github**:\n    首先登录你的github,然后新建一个公共仓库,仓库名是你的用户名加上`yourname.github.io`,如下图所示,我的用户名是`Jackroyal`\n    ![github新建仓库](http://ww1.sinaimg.cn/large/692869a3gw1eye6fpc3w8j20ue0idjv0.jpg)\n\n\n**gitcafe**:\n    操作方法差不多,不过有点区别是,gitcafe新建的公开项目,是和用户名一致的,比如我的用户名是`Jackroyal`,那我新建的仓库名就是`Jackroyal`\n\n仓库新建成功后,你获取到的链接应该是类似下面的\n```\nhttps://github.com/Jackroyal/Jackroyal.github.io.git\nhttps://gitcafe.com/Jackroyal/Jackroyal.git\n\n```\n这就是你的两个page对应的仓库.\n# 3 搭建博客\n## 3.1 搭建github pages\n当你的仓库建好了,我们就开始搭建博客,因为之前的博客有写,具体过程就不赘述[安装和配置hexo 3.0](http://jackroyal.github.io/2015/06/16/hexo-3-0-update/).\n\n按照上面的教程一步一步,就能搭建好博客,然后你就可以访问你的gihub pages了,访问链接就是`http://yourname.github.io`,比如我的即使`http://jackroyal.github.io`.\n现在我们开始搭建gitcafe上面的pages了.由于hexo现在已经支持多发布,所以很简单,我们只需要配置deploy的信息,修改`_config.yml`.添加gitcafe的仓库信息.我的修改结果如下,\n```\ndeploy:\n- type: git\n  repo: 'https://github.com/Jackroyal/Jackroyal.github.io.git'\n  branch: master\n- type: git\n  repo: 'https://gitcafe.com/Jackroyal/Jackroyal.git'\n  branch: gitcafe-pages\n```\n尤其需要注意的是,两个的branch是不同的,`github`默认分支是`master`,`gitcafe`默认分支是`gitcafe-pages`.\n## 3.2 添加gitcafe的ssh公钥\n由于我使用的是`github for windows`的终端界面,也就是github官方提供的客户端,他的好处是,我使用github的时候,不需要配置ssh公钥,密钥之类的东西.如果你用的不是这个,用的是git的客户端,那就需要配置ssh公钥,参考这里[github配置公钥](https://help.github.com/articles/generating-ssh-keys/).\n对的,你猜到了,我们现在需要配置gitcafe的ssh公钥,因为`github for windows`会自动帮我们上传公钥,gitcafe就只能手动了.\n\n### 3.2.1 查看本地公钥\n我们打开你使用的git终端,首先切回用户目录,然后进入`.ssh`目录,里面就有公钥和私钥,如下图所示\n![使用git客户端查看ssh公钥私钥](http://ww2.sinaimg.cn/large/692869a3gw1eye75djqo9j20gj09475k.jpg)\n![使用github for windows查看ssh公钥私钥](http://ww2.sinaimg.cn/large/692869a3gw1eye78gs0hvj20it0ca761.jpg)\n我们就是要读取后缀是`.pub`的那个文件,比如我的读取命令就是`cat github_rsa.pub`,执行结果如下\n![查看公钥](http://ww3.sinaimg.cn/large/692869a3gw1eye7c2xpavj20if06dt9w.jpg)\n### 3.2.2 添加公钥到gitcafe\n我们在[这里](https://gitcafe.com/account/public_keys)来设置gitcafe的公钥.\n*PS:需要注意的是,公钥后面的chen@chen-pc是不需要的,我的带上以后,gitcafe说是公钥非法,不过不怕,gitcafe会帮你正确格式化*\n![正确的ssh格式](http://ww1.sinaimg.cn/large/692869a3gw1eye7h4ha7dj20v105n0ve.jpg)\n反正就是把公钥加上去,就ok了\n## 3.4 同步博客到gitcafe\n上面的配置好了以后,我们就可以把博客内容同步到gitcafe了,方法很简单,执行\n```bash\nhexo d -g\n```\n然后就可以啦.\n# 4 配置域名\n首先你得有个域名,像我一样,哈哈.\n## 4.1 修改域名注册的解析服务器\n我们在要把域名解析服务,设置到dnspod,因为他是国内的,而且服务很好.我们登录自己的域名管理后台,选择对应的域名进行管理,然后找到`nameservers`的设置,如图所示\n![修改nameservers的设置](http://ww3.sinaimg.cn/large/692869a3gw1eye7orkymjj210j0i7tde.jpg)\n修改的值是\n```\n f1g1ns1.dnspod.net\n f1g1ns2.dnspod.net\n```\n常见的域名注册商修改到dnspod,官方提供了教程,看[这里](https://support.dnspod.cn/Kb/guide/)-\n改完以后可能要等一段时间才能生效,最多72小时\nok,改完以后,这边就完了,我们登录dnspod\n\n## 4.2 修改dnspod解析记录\n我们登录dnspod,然后添加域名\n如果4.1中的设置生效了,你的域名就会添加成功了,我们直接进行下一步,修改解析记录,上图\n![dns解析记录](http://ww2.sinaimg.cn/large/692869a3gw1eye9mfkri4j20mt0efad6.jpg)\n我们一共添加了5条记录,其中一条泛解析和www解析是针对国内的,所以执行gitcafe;2条泛解析和www解析是针对国外的,所以指向github.\n就是添加\n```\n@       A      默认  192.30.252.153\n@       A      默认  192.30.252.154\n@       CNAME  国内  gitcafe.io.\nwww     CNAME  默认  jackroyal.github.io.\nwww     CNAME  国内  gitcafe.io.\n```\n其他设置项目默认就行了,上面的配置完了,如果你走国外ip访问你的域名的话,会出现404,因为我们还差一步.走国内线路访问一样会出错,都是没绑定的结果.\n\n## 4.3 添加github的CNAME文件,添加gitcafe自定义域名\n现在只差最后一步了,我们先来配置github的CNAME文件,官网有个教程[配置CNAME文件](https://help.github.com/articles/adding-a-cname-file-to-your-repository/).说白了,就是在你的网站根目录,添加一个名为`CNAME`的文件,里面的内容就是你的域名\n```\nbblove.me\n```\n没有任何多余的信息,如下图\n![配置github的CNAME](http://ww1.sinaimg.cn/large/692869a3gw1eyea41g3amj20uz0a4jtg.jpg)\n上面的配置现在访问没问题,但是你一重新发布博客,就需要重新手动添加`CNAME`文件,太麻烦.\n一劳永逸的方法,在你的`hexo`目录下的`source`目录中,新建一个`CNAME`文件夹,然后他每次在你发布博客的时候,都会在你的网站根目录生成一个`CNAME`文件.\n![添加CNAME的目录结构](http://ww2.sinaimg.cn/large/692869a3gw1eyea9pgd8cj20ko06ct9v.jpg)\n现在github的配置彻底结束.\n\n接下来配置gitcafe:\n1 我们在gitcafe的项目主页,点击`项目设置`,如下图(之所以截图,是因为我找半天才看到...)\n![gitcafe点击'项目设置'](http://ww1.sinaimg.cn/large/692869a3gw1eyeadedmh1j20z508eadm.jpg)\n2 然后我们点击`pages服务`标签,然后添加自己的域名,这些域名是我们之前在dnspod中设置了解析的\n![gitcafe配置自定义域名](http://ww3.sinaimg.cn/large/692869a3gw1eyeaftjlagj20sp0dvn1i.jpg)\n\n彻底打完收工了\n\n# 5 总结\n总算写完了,写到这里,我一共写了,141行了,写了个把小时.这次主要参考了下面的几篇文章,都写在友情链接里面了.参考了他们的思路,因为他们的方法里面需要自己单独购买vps或者购买CDN,共同的问题是增加了开销,买vps会导致你每次写博客都需要单独发布一次到vps上太麻烦.我后来在网上看到gitcafe也有`gitcafe pages`服务,如果用这个来处理的话,一来,不会增加多余的开销,他们都是免费的;二来,由于hexo对于多部署的支持,多部署很简单,一次配置,以后就可以不用理会了.\nok,收工\n\n\n# 友情链接\n1 [解决 Github Pages 禁止百度爬虫的方法与可行性分析](http://jerryzou.com/posts/feasibility-of-allowing-baiduSpider-for-Github-Pages/)\n2 [利用 CDN 解决百度爬虫被 Github Pages 拒绝的问题](http://www.dozer.cc/2015/06/github-pages-and-cdn.html)\n3 [gitcafe官方文档--pages服务](https://help.gitcafe.com/manuals/help/pages-services)\n4 [gitcafe官方文档--配置ssh公钥](https://help.gitcafe.com/manuals/help/ssh-key)\n\n","source":"_posts/how-to-solve-the-problem-that-github-blocks-the-baidu-spider.md","raw":"title: 解决 Github Pages 禁止百度爬虫的方法\ndate: 2015-11-25 11:06:50\ntags:\n- hexo\n- github\n- baidu\ncategories:\n- hexo\n---\n*update*:因为gitcafe在5月31号就关闭了,所以要将文章中的gitcafe换掉,我重新写了一篇,在这里[解决 Github Pages 禁止百度爬虫的方法2--从gitcafe迁移到coding.net](http://jackroyal.github.io/2016/03/06/migrate-pages-from-gitcafe-to-coding/)\n\n最近,我的github student package里面送的一个namecheap域名终于下来了.That is to say:我终于有自己的域名了,这就是我的域名[http://bblove.me](http://bblove.me),欢迎来访.\n<!-- more -->\n有域名以后,就在想办法解决百度爬虫的问题.\n```\nHi Jackroyal,\n\nWe are currently blocking the Baidu user agent from crawling GitHub Pages\nsites in response to this user agent being responsible for an excessive amount\nof requests, which was causing availability issues for other GitHub customers.\nThis is unlikely to change any time soon, so if you need the Baidu user agent\nto be able to crawl your site you will need to host it elsewhere.\n\nCheers,\nScott\n```\n这是我之前跟github反映百度spider无法抓取我的github pages,他们给我的回复邮件.也就是说他们把百度spider给禁掉了,桑不起.\n直接说解决方法:\n`把博客同时发布到github pages和gitcafe pages.然后使用dnspod设置域名解析,国内线路解析到gitcafe,国外线路解析到github.`\n# 实现方法\n# 1 准备条件\n一共需要一下这几个东西:\n+ 一个github账户\n+ 一个gitcafe账户\n+ 一个dnspod账号\n+ 一个域名\n+ github for windows(或者git客户端也行)\n没了,就这么多就行.\n\n# 2 初始操作\n我们在github和gitcafe上面把自己的博客搭建起来,首先要建仓库.\n**github**:\n    首先登录你的github,然后新建一个公共仓库,仓库名是你的用户名加上`yourname.github.io`,如下图所示,我的用户名是`Jackroyal`\n    ![github新建仓库](http://ww1.sinaimg.cn/large/692869a3gw1eye6fpc3w8j20ue0idjv0.jpg)\n\n\n**gitcafe**:\n    操作方法差不多,不过有点区别是,gitcafe新建的公开项目,是和用户名一致的,比如我的用户名是`Jackroyal`,那我新建的仓库名就是`Jackroyal`\n\n仓库新建成功后,你获取到的链接应该是类似下面的\n```\nhttps://github.com/Jackroyal/Jackroyal.github.io.git\nhttps://gitcafe.com/Jackroyal/Jackroyal.git\n\n```\n这就是你的两个page对应的仓库.\n# 3 搭建博客\n## 3.1 搭建github pages\n当你的仓库建好了,我们就开始搭建博客,因为之前的博客有写,具体过程就不赘述[安装和配置hexo 3.0](http://jackroyal.github.io/2015/06/16/hexo-3-0-update/).\n\n按照上面的教程一步一步,就能搭建好博客,然后你就可以访问你的gihub pages了,访问链接就是`http://yourname.github.io`,比如我的即使`http://jackroyal.github.io`.\n现在我们开始搭建gitcafe上面的pages了.由于hexo现在已经支持多发布,所以很简单,我们只需要配置deploy的信息,修改`_config.yml`.添加gitcafe的仓库信息.我的修改结果如下,\n```\ndeploy:\n- type: git\n  repo: 'https://github.com/Jackroyal/Jackroyal.github.io.git'\n  branch: master\n- type: git\n  repo: 'https://gitcafe.com/Jackroyal/Jackroyal.git'\n  branch: gitcafe-pages\n```\n尤其需要注意的是,两个的branch是不同的,`github`默认分支是`master`,`gitcafe`默认分支是`gitcafe-pages`.\n## 3.2 添加gitcafe的ssh公钥\n由于我使用的是`github for windows`的终端界面,也就是github官方提供的客户端,他的好处是,我使用github的时候,不需要配置ssh公钥,密钥之类的东西.如果你用的不是这个,用的是git的客户端,那就需要配置ssh公钥,参考这里[github配置公钥](https://help.github.com/articles/generating-ssh-keys/).\n对的,你猜到了,我们现在需要配置gitcafe的ssh公钥,因为`github for windows`会自动帮我们上传公钥,gitcafe就只能手动了.\n\n### 3.2.1 查看本地公钥\n我们打开你使用的git终端,首先切回用户目录,然后进入`.ssh`目录,里面就有公钥和私钥,如下图所示\n![使用git客户端查看ssh公钥私钥](http://ww2.sinaimg.cn/large/692869a3gw1eye75djqo9j20gj09475k.jpg)\n![使用github for windows查看ssh公钥私钥](http://ww2.sinaimg.cn/large/692869a3gw1eye78gs0hvj20it0ca761.jpg)\n我们就是要读取后缀是`.pub`的那个文件,比如我的读取命令就是`cat github_rsa.pub`,执行结果如下\n![查看公钥](http://ww3.sinaimg.cn/large/692869a3gw1eye7c2xpavj20if06dt9w.jpg)\n### 3.2.2 添加公钥到gitcafe\n我们在[这里](https://gitcafe.com/account/public_keys)来设置gitcafe的公钥.\n*PS:需要注意的是,公钥后面的chen@chen-pc是不需要的,我的带上以后,gitcafe说是公钥非法,不过不怕,gitcafe会帮你正确格式化*\n![正确的ssh格式](http://ww1.sinaimg.cn/large/692869a3gw1eye7h4ha7dj20v105n0ve.jpg)\n反正就是把公钥加上去,就ok了\n## 3.4 同步博客到gitcafe\n上面的配置好了以后,我们就可以把博客内容同步到gitcafe了,方法很简单,执行\n```bash\nhexo d -g\n```\n然后就可以啦.\n# 4 配置域名\n首先你得有个域名,像我一样,哈哈.\n## 4.1 修改域名注册的解析服务器\n我们在要把域名解析服务,设置到dnspod,因为他是国内的,而且服务很好.我们登录自己的域名管理后台,选择对应的域名进行管理,然后找到`nameservers`的设置,如图所示\n![修改nameservers的设置](http://ww3.sinaimg.cn/large/692869a3gw1eye7orkymjj210j0i7tde.jpg)\n修改的值是\n```\n f1g1ns1.dnspod.net\n f1g1ns2.dnspod.net\n```\n常见的域名注册商修改到dnspod,官方提供了教程,看[这里](https://support.dnspod.cn/Kb/guide/)-\n改完以后可能要等一段时间才能生效,最多72小时\nok,改完以后,这边就完了,我们登录dnspod\n\n## 4.2 修改dnspod解析记录\n我们登录dnspod,然后添加域名\n如果4.1中的设置生效了,你的域名就会添加成功了,我们直接进行下一步,修改解析记录,上图\n![dns解析记录](http://ww2.sinaimg.cn/large/692869a3gw1eye9mfkri4j20mt0efad6.jpg)\n我们一共添加了5条记录,其中一条泛解析和www解析是针对国内的,所以执行gitcafe;2条泛解析和www解析是针对国外的,所以指向github.\n就是添加\n```\n@       A      默认  192.30.252.153\n@       A      默认  192.30.252.154\n@       CNAME  国内  gitcafe.io.\nwww     CNAME  默认  jackroyal.github.io.\nwww     CNAME  国内  gitcafe.io.\n```\n其他设置项目默认就行了,上面的配置完了,如果你走国外ip访问你的域名的话,会出现404,因为我们还差一步.走国内线路访问一样会出错,都是没绑定的结果.\n\n## 4.3 添加github的CNAME文件,添加gitcafe自定义域名\n现在只差最后一步了,我们先来配置github的CNAME文件,官网有个教程[配置CNAME文件](https://help.github.com/articles/adding-a-cname-file-to-your-repository/).说白了,就是在你的网站根目录,添加一个名为`CNAME`的文件,里面的内容就是你的域名\n```\nbblove.me\n```\n没有任何多余的信息,如下图\n![配置github的CNAME](http://ww1.sinaimg.cn/large/692869a3gw1eyea41g3amj20uz0a4jtg.jpg)\n上面的配置现在访问没问题,但是你一重新发布博客,就需要重新手动添加`CNAME`文件,太麻烦.\n一劳永逸的方法,在你的`hexo`目录下的`source`目录中,新建一个`CNAME`文件夹,然后他每次在你发布博客的时候,都会在你的网站根目录生成一个`CNAME`文件.\n![添加CNAME的目录结构](http://ww2.sinaimg.cn/large/692869a3gw1eyea9pgd8cj20ko06ct9v.jpg)\n现在github的配置彻底结束.\n\n接下来配置gitcafe:\n1 我们在gitcafe的项目主页,点击`项目设置`,如下图(之所以截图,是因为我找半天才看到...)\n![gitcafe点击'项目设置'](http://ww1.sinaimg.cn/large/692869a3gw1eyeadedmh1j20z508eadm.jpg)\n2 然后我们点击`pages服务`标签,然后添加自己的域名,这些域名是我们之前在dnspod中设置了解析的\n![gitcafe配置自定义域名](http://ww3.sinaimg.cn/large/692869a3gw1eyeaftjlagj20sp0dvn1i.jpg)\n\n彻底打完收工了\n\n# 5 总结\n总算写完了,写到这里,我一共写了,141行了,写了个把小时.这次主要参考了下面的几篇文章,都写在友情链接里面了.参考了他们的思路,因为他们的方法里面需要自己单独购买vps或者购买CDN,共同的问题是增加了开销,买vps会导致你每次写博客都需要单独发布一次到vps上太麻烦.我后来在网上看到gitcafe也有`gitcafe pages`服务,如果用这个来处理的话,一来,不会增加多余的开销,他们都是免费的;二来,由于hexo对于多部署的支持,多部署很简单,一次配置,以后就可以不用理会了.\nok,收工\n\n\n# 友情链接\n1 [解决 Github Pages 禁止百度爬虫的方法与可行性分析](http://jerryzou.com/posts/feasibility-of-allowing-baiduSpider-for-Github-Pages/)\n2 [利用 CDN 解决百度爬虫被 Github Pages 拒绝的问题](http://www.dozer.cc/2015/06/github-pages-and-cdn.html)\n3 [gitcafe官方文档--pages服务](https://help.gitcafe.com/manuals/help/pages-services)\n4 [gitcafe官方文档--配置ssh公钥](https://help.gitcafe.com/manuals/help/ssh-key)\n\n","slug":"how-to-solve-the-problem-that-github-blocks-the-baidu-spider","published":1,"updated":"2016-03-06T10:23:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yp10013x8cd1f93zr29","content":"<p><em>update</em>:因为gitcafe在5月31号就关闭了,所以要将文章中的gitcafe换掉,我重新写了一篇,在这里<a href=\"http://jackroyal.github.io/2016/03/06/migrate-pages-from-gitcafe-to-coding/\" target=\"_blank\" rel=\"external\">解决 Github Pages 禁止百度爬虫的方法2–从gitcafe迁移到coding.net</a></p>\n<p>最近,我的github student package里面送的一个namecheap域名终于下来了.That is to say:我终于有自己的域名了,这就是我的域名<a href=\"http://bblove.me\">http://bblove.me</a>,欢迎来访.<br><a id=\"more\"></a><br>有域名以后,就在想办法解决百度爬虫的问题.<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hi Jackroyal,</div><div class=\"line\"></div><div class=\"line\">We are currently blocking <span class=\"keyword\">the</span> Baidu user agent <span class=\"built_in\">from</span> crawling GitHub Pages</div><div class=\"line\">sites <span class=\"keyword\">in</span> response <span class=\"built_in\">to</span> this user agent being responsible <span class=\"keyword\">for</span> <span class=\"keyword\">an</span> excessive amount</div><div class=\"line\"><span class=\"keyword\">of</span> requests, which was causing availability issues <span class=\"keyword\">for</span> other GitHub customers.</div><div class=\"line\">This is unlikely <span class=\"built_in\">to</span> change <span class=\"keyword\">any</span> <span class=\"built_in\">time</span> soon, so <span class=\"keyword\">if</span> you need <span class=\"keyword\">the</span> Baidu user agent</div><div class=\"line\"><span class=\"built_in\">to</span> be able <span class=\"built_in\">to</span> crawl your site you will need <span class=\"built_in\">to</span> host <span class=\"keyword\">it</span> elsewhere.</div><div class=\"line\"></div><div class=\"line\">Cheers,</div><div class=\"line\">Scott</div></pre></td></tr></table></figure></p>\n<p>这是我之前跟github反映百度spider无法抓取我的github pages,他们给我的回复邮件.也就是说他们把百度spider给禁掉了,桑不起.<br>直接说解决方法:<br><code>把博客同时发布到github pages和gitcafe pages.然后使用dnspod设置域名解析,国内线路解析到gitcafe,国外线路解析到github.</code></p>\n<h1 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h1><h1 id=\"1-准备条件\"><a href=\"#1-准备条件\" class=\"headerlink\" title=\"1 准备条件\"></a>1 准备条件</h1><p>一共需要一下这几个东西:</p>\n<ul>\n<li>一个github账户</li>\n<li>一个gitcafe账户</li>\n<li>一个dnspod账号</li>\n<li>一个域名</li>\n<li>github for windows(或者git客户端也行)<br>没了,就这么多就行.</li>\n</ul>\n<h1 id=\"2-初始操作\"><a href=\"#2-初始操作\" class=\"headerlink\" title=\"2 初始操作\"></a>2 初始操作</h1><p>我们在github和gitcafe上面把自己的博客搭建起来,首先要建仓库.<br><strong>github</strong>:<br>    首先登录你的github,然后新建一个公共仓库,仓库名是你的用户名加上<code>yourname.github.io</code>,如下图所示,我的用户名是<code>Jackroyal</code><br>    <img src=\"http://ww1.sinaimg.cn/large/692869a3gw1eye6fpc3w8j20ue0idjv0.jpg\" alt=\"github新建仓库\"></p>\n<p><strong>gitcafe</strong>:<br>    操作方法差不多,不过有点区别是,gitcafe新建的公开项目,是和用户名一致的,比如我的用户名是<code>Jackroyal</code>,那我新建的仓库名就是<code>Jackroyal</code></p>\n<p>仓库新建成功后,你获取到的链接应该是类似下面的<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/Jackroyal/</span>Jackroyal.github.io.git</div><div class=\"line\">https:<span class=\"regexp\">//gi</span>tcafe.com<span class=\"regexp\">/Jackroyal/</span>Jackroyal.git</div></pre></td></tr></table></figure></p>\n<p>这就是你的两个page对应的仓库.</p>\n<h1 id=\"3-搭建博客\"><a href=\"#3-搭建博客\" class=\"headerlink\" title=\"3 搭建博客\"></a>3 搭建博客</h1><h2 id=\"3-1-搭建github-pages\"><a href=\"#3-1-搭建github-pages\" class=\"headerlink\" title=\"3.1 搭建github pages\"></a>3.1 搭建github pages</h2><p>当你的仓库建好了,我们就开始搭建博客,因为之前的博客有写,具体过程就不赘述<a href=\"http://jackroyal.github.io/2015/06/16/hexo-3-0-update/\" target=\"_blank\" rel=\"external\">安装和配置hexo 3.0</a>.</p>\n<p>按照上面的教程一步一步,就能搭建好博客,然后你就可以访问你的gihub pages了,访问链接就是<code>http://yourname.github.io</code>,比如我的即使<code>http://jackroyal.github.io</code>.<br>现在我们开始搭建gitcafe上面的pages了.由于hexo现在已经支持多发布,所以很简单,我们只需要配置deploy的信息,修改<code>_config.yml</code>.添加gitcafe的仓库信息.我的修改结果如下,<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">- <span class=\"attribute\">type</span>: git</div><div class=\"line\">  <span class=\"attribute\">repo</span>: <span class=\"string\">'https://github.com/Jackroyal/Jackroyal.github.io.git'</span></div><div class=\"line\">  <span class=\"attribute\">branch</span>: master</div><div class=\"line\">- <span class=\"attribute\">type</span>: git</div><div class=\"line\">  <span class=\"attribute\">repo</span>: <span class=\"string\">'https://gitcafe.com/Jackroyal/Jackroyal.git'</span></div><div class=\"line\">  <span class=\"attribute\">branch</span>: gitcafe-pages</div></pre></td></tr></table></figure></p>\n<p>尤其需要注意的是,两个的branch是不同的,<code>github</code>默认分支是<code>master</code>,<code>gitcafe</code>默认分支是<code>gitcafe-pages</code>.</p>\n<h2 id=\"3-2-添加gitcafe的ssh公钥\"><a href=\"#3-2-添加gitcafe的ssh公钥\" class=\"headerlink\" title=\"3.2 添加gitcafe的ssh公钥\"></a>3.2 添加gitcafe的ssh公钥</h2><p>由于我使用的是<code>github for windows</code>的终端界面,也就是github官方提供的客户端,他的好处是,我使用github的时候,不需要配置ssh公钥,密钥之类的东西.如果你用的不是这个,用的是git的客户端,那就需要配置ssh公钥,参考这里<a href=\"https://help.github.com/articles/generating-ssh-keys/\" target=\"_blank\" rel=\"external\">github配置公钥</a>.<br>对的,你猜到了,我们现在需要配置gitcafe的ssh公钥,因为<code>github for windows</code>会自动帮我们上传公钥,gitcafe就只能手动了.</p>\n<h3 id=\"3-2-1-查看本地公钥\"><a href=\"#3-2-1-查看本地公钥\" class=\"headerlink\" title=\"3.2.1 查看本地公钥\"></a>3.2.1 查看本地公钥</h3><p>我们打开你使用的git终端,首先切回用户目录,然后进入<code>.ssh</code>目录,里面就有公钥和私钥,如下图所示<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1eye75djqo9j20gj09475k.jpg\" alt=\"使用git客户端查看ssh公钥私钥\"><br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1eye78gs0hvj20it0ca761.jpg\" alt=\"使用github for windows查看ssh公钥私钥\"><br>我们就是要读取后缀是<code>.pub</code>的那个文件,比如我的读取命令就是<code>cat github_rsa.pub</code>,执行结果如下<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1eye7c2xpavj20if06dt9w.jpg\" alt=\"查看公钥\"></p>\n<h3 id=\"3-2-2-添加公钥到gitcafe\"><a href=\"#3-2-2-添加公钥到gitcafe\" class=\"headerlink\" title=\"3.2.2 添加公钥到gitcafe\"></a>3.2.2 添加公钥到gitcafe</h3><p>我们在<a href=\"https://gitcafe.com/account/public_keys\" target=\"_blank\" rel=\"external\">这里</a>来设置gitcafe的公钥.<br><em>PS:需要注意的是,公钥后面的chen@chen-pc是不需要的,我的带上以后,gitcafe说是公钥非法,不过不怕,gitcafe会帮你正确格式化</em><br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1eye7h4ha7dj20v105n0ve.jpg\" alt=\"正确的ssh格式\"><br>反正就是把公钥加上去,就ok了</p>\n<h2 id=\"3-4-同步博客到gitcafe\"><a href=\"#3-4-同步博客到gitcafe\" class=\"headerlink\" title=\"3.4 同步博客到gitcafe\"></a>3.4 同步博客到gitcafe</h2><p>上面的配置好了以后,我们就可以把博客内容同步到gitcafe了,方法很简单,执行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo d -g</div></pre></td></tr></table></figure></p>\n<p>然后就可以啦.</p>\n<h1 id=\"4-配置域名\"><a href=\"#4-配置域名\" class=\"headerlink\" title=\"4 配置域名\"></a>4 配置域名</h1><p>首先你得有个域名,像我一样,哈哈.</p>\n<h2 id=\"4-1-修改域名注册的解析服务器\"><a href=\"#4-1-修改域名注册的解析服务器\" class=\"headerlink\" title=\"4.1 修改域名注册的解析服务器\"></a>4.1 修改域名注册的解析服务器</h2><p>我们在要把域名解析服务,设置到dnspod,因为他是国内的,而且服务很好.我们登录自己的域名管理后台,选择对应的域名进行管理,然后找到<code>nameservers</code>的设置,如图所示<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1eye7orkymjj210j0i7tde.jpg\" alt=\"修改nameservers的设置\"><br>修改的值是<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">f1g1ns1<span class=\"selector-class\">.dnspod</span><span class=\"selector-class\">.net</span></div><div class=\"line\">f1g1ns2<span class=\"selector-class\">.dnspod</span><span class=\"selector-class\">.net</span></div></pre></td></tr></table></figure></p>\n<p>常见的域名注册商修改到dnspod,官方提供了教程,看<a href=\"https://support.dnspod.cn/Kb/guide/\" target=\"_blank\" rel=\"external\">这里</a>-<br>改完以后可能要等一段时间才能生效,最多72小时<br>ok,改完以后,这边就完了,我们登录dnspod</p>\n<h2 id=\"4-2-修改dnspod解析记录\"><a href=\"#4-2-修改dnspod解析记录\" class=\"headerlink\" title=\"4.2 修改dnspod解析记录\"></a>4.2 修改dnspod解析记录</h2><p>我们登录dnspod,然后添加域名<br>如果4.1中的设置生效了,你的域名就会添加成功了,我们直接进行下一步,修改解析记录,上图<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1eye9mfkri4j20mt0efad6.jpg\" alt=\"dns解析记录\"><br>我们一共添加了5条记录,其中一条泛解析和www解析是针对国内的,所以执行gitcafe;2条泛解析和www解析是针对国外的,所以指向github.<br>就是添加<br><figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@       <span class=\"keyword\">A</span>      默认  <span class=\"number\">192.30.252.153</span></div><div class=\"line\">@       <span class=\"keyword\">A</span>      默认  <span class=\"number\">192.30.252.154</span></div><div class=\"line\">@       <span class=\"keyword\">CNAME</span>  国内  gitcafe.io.</div><div class=\"line\">www     <span class=\"keyword\">CNAME</span>  默认  jackroyal.github.io.</div><div class=\"line\">www     <span class=\"keyword\">CNAME</span>  国内  gitcafe.io.</div></pre></td></tr></table></figure></p>\n<p>其他设置项目默认就行了,上面的配置完了,如果你走国外ip访问你的域名的话,会出现404,因为我们还差一步.走国内线路访问一样会出错,都是没绑定的结果.</p>\n<h2 id=\"4-3-添加github的CNAME文件-添加gitcafe自定义域名\"><a href=\"#4-3-添加github的CNAME文件-添加gitcafe自定义域名\" class=\"headerlink\" title=\"4.3 添加github的CNAME文件,添加gitcafe自定义域名\"></a>4.3 添加github的CNAME文件,添加gitcafe自定义域名</h2><p>现在只差最后一步了,我们先来配置github的CNAME文件,官网有个教程<a href=\"https://help.github.com/articles/adding-a-cname-file-to-your-repository/\" target=\"_blank\" rel=\"external\">配置CNAME文件</a>.说白了,就是在你的网站根目录,添加一个名为<code>CNAME</code>的文件,里面的内容就是你的域名<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bblove.<span class=\"keyword\">me</span></div></pre></td></tr></table></figure></p>\n<p>没有任何多余的信息,如下图<br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1eyea41g3amj20uz0a4jtg.jpg\" alt=\"配置github的CNAME\"><br>上面的配置现在访问没问题,但是你一重新发布博客,就需要重新手动添加<code>CNAME</code>文件,太麻烦.<br>一劳永逸的方法,在你的<code>hexo</code>目录下的<code>source</code>目录中,新建一个<code>CNAME</code>文件夹,然后他每次在你发布博客的时候,都会在你的网站根目录生成一个<code>CNAME</code>文件.<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1eyea9pgd8cj20ko06ct9v.jpg\" alt=\"添加CNAME的目录结构\"><br>现在github的配置彻底结束.</p>\n<p>接下来配置gitcafe:<br>1 我们在gitcafe的项目主页,点击<code>项目设置</code>,如下图(之所以截图,是因为我找半天才看到…)<br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1eyeadedmh1j20z508eadm.jpg\" alt=\"gitcafe点击&#39;项目设置&#39;\"><br>2 然后我们点击<code>pages服务</code>标签,然后添加自己的域名,这些域名是我们之前在dnspod中设置了解析的<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1eyeaftjlagj20sp0dvn1i.jpg\" alt=\"gitcafe配置自定义域名\"></p>\n<p>彻底打完收工了</p>\n<h1 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5 总结\"></a>5 总结</h1><p>总算写完了,写到这里,我一共写了,141行了,写了个把小时.这次主要参考了下面的几篇文章,都写在友情链接里面了.参考了他们的思路,因为他们的方法里面需要自己单独购买vps或者购买CDN,共同的问题是增加了开销,买vps会导致你每次写博客都需要单独发布一次到vps上太麻烦.我后来在网上看到gitcafe也有<code>gitcafe pages</code>服务,如果用这个来处理的话,一来,不会增加多余的开销,他们都是免费的;二来,由于hexo对于多部署的支持,多部署很简单,一次配置,以后就可以不用理会了.<br>ok,收工</p>\n<h1 id=\"友情链接\"><a href=\"#友情链接\" class=\"headerlink\" title=\"友情链接\"></a>友情链接</h1><p>1 <a href=\"http://jerryzou.com/posts/feasibility-of-allowing-baiduSpider-for-Github-Pages/\" target=\"_blank\" rel=\"external\">解决 Github Pages 禁止百度爬虫的方法与可行性分析</a><br>2 <a href=\"http://www.dozer.cc/2015/06/github-pages-and-cdn.html\" target=\"_blank\" rel=\"external\">利用 CDN 解决百度爬虫被 Github Pages 拒绝的问题</a><br>3 <a href=\"https://help.gitcafe.com/manuals/help/pages-services\" target=\"_blank\" rel=\"external\">gitcafe官方文档–pages服务</a><br>4 <a href=\"https://help.gitcafe.com/manuals/help/ssh-key\" target=\"_blank\" rel=\"external\">gitcafe官方文档–配置ssh公钥</a></p>\n","excerpt":"<p><em>update</em>:因为gitcafe在5月31号就关闭了,所以要将文章中的gitcafe换掉,我重新写了一篇,在这里<a href=\"http://jackroyal.github.io/2016/03/06/migrate-pages-from-gitcafe-to-coding/\">解决 Github Pages 禁止百度爬虫的方法2–从gitcafe迁移到coding.net</a></p>\n<p>最近,我的github student package里面送的一个namecheap域名终于下来了.That is to say:我终于有自己的域名了,这就是我的域名<a href=\"http://bblove.me\">http://bblove.me</a>,欢迎来访.<br>","more":"<br>有域名以后,就在想办法解决百度爬虫的问题.<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hi Jackroyal,</div><div class=\"line\"></div><div class=\"line\">We are currently blocking <span class=\"keyword\">the</span> Baidu user agent <span class=\"built_in\">from</span> crawling GitHub Pages</div><div class=\"line\">sites <span class=\"keyword\">in</span> response <span class=\"built_in\">to</span> this user agent being responsible <span class=\"keyword\">for</span> <span class=\"keyword\">an</span> excessive amount</div><div class=\"line\"><span class=\"keyword\">of</span> requests, which was causing availability issues <span class=\"keyword\">for</span> other GitHub customers.</div><div class=\"line\">This is unlikely <span class=\"built_in\">to</span> change <span class=\"keyword\">any</span> <span class=\"built_in\">time</span> soon, so <span class=\"keyword\">if</span> you need <span class=\"keyword\">the</span> Baidu user agent</div><div class=\"line\"><span class=\"built_in\">to</span> be able <span class=\"built_in\">to</span> crawl your site you will need <span class=\"built_in\">to</span> host <span class=\"keyword\">it</span> elsewhere.</div><div class=\"line\"></div><div class=\"line\">Cheers,</div><div class=\"line\">Scott</div></pre></td></tr></table></figure></p>\n<p>这是我之前跟github反映百度spider无法抓取我的github pages,他们给我的回复邮件.也就是说他们把百度spider给禁掉了,桑不起.<br>直接说解决方法:<br><code>把博客同时发布到github pages和gitcafe pages.然后使用dnspod设置域名解析,国内线路解析到gitcafe,国外线路解析到github.</code></p>\n<h1 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h1><h1 id=\"1-准备条件\"><a href=\"#1-准备条件\" class=\"headerlink\" title=\"1 准备条件\"></a>1 准备条件</h1><p>一共需要一下这几个东西:</p>\n<ul>\n<li>一个github账户</li>\n<li>一个gitcafe账户</li>\n<li>一个dnspod账号</li>\n<li>一个域名</li>\n<li>github for windows(或者git客户端也行)<br>没了,就这么多就行.</li>\n</ul>\n<h1 id=\"2-初始操作\"><a href=\"#2-初始操作\" class=\"headerlink\" title=\"2 初始操作\"></a>2 初始操作</h1><p>我们在github和gitcafe上面把自己的博客搭建起来,首先要建仓库.<br><strong>github</strong>:<br>    首先登录你的github,然后新建一个公共仓库,仓库名是你的用户名加上<code>yourname.github.io</code>,如下图所示,我的用户名是<code>Jackroyal</code><br>    <img src=\"http://ww1.sinaimg.cn/large/692869a3gw1eye6fpc3w8j20ue0idjv0.jpg\" alt=\"github新建仓库\"></p>\n<p><strong>gitcafe</strong>:<br>    操作方法差不多,不过有点区别是,gitcafe新建的公开项目,是和用户名一致的,比如我的用户名是<code>Jackroyal</code>,那我新建的仓库名就是<code>Jackroyal</code></p>\n<p>仓库新建成功后,你获取到的链接应该是类似下面的<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/Jackroyal/</span>Jackroyal.github.io.git</div><div class=\"line\">https:<span class=\"regexp\">//gi</span>tcafe.com<span class=\"regexp\">/Jackroyal/</span>Jackroyal.git</div></pre></td></tr></table></figure></p>\n<p>这就是你的两个page对应的仓库.</p>\n<h1 id=\"3-搭建博客\"><a href=\"#3-搭建博客\" class=\"headerlink\" title=\"3 搭建博客\"></a>3 搭建博客</h1><h2 id=\"3-1-搭建github-pages\"><a href=\"#3-1-搭建github-pages\" class=\"headerlink\" title=\"3.1 搭建github pages\"></a>3.1 搭建github pages</h2><p>当你的仓库建好了,我们就开始搭建博客,因为之前的博客有写,具体过程就不赘述<a href=\"http://jackroyal.github.io/2015/06/16/hexo-3-0-update/\">安装和配置hexo 3.0</a>.</p>\n<p>按照上面的教程一步一步,就能搭建好博客,然后你就可以访问你的gihub pages了,访问链接就是<code>http://yourname.github.io</code>,比如我的即使<code>http://jackroyal.github.io</code>.<br>现在我们开始搭建gitcafe上面的pages了.由于hexo现在已经支持多发布,所以很简单,我们只需要配置deploy的信息,修改<code>_config.yml</code>.添加gitcafe的仓库信息.我的修改结果如下,<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">- <span class=\"attribute\">type</span>: git</div><div class=\"line\">  <span class=\"attribute\">repo</span>: <span class=\"string\">'https://github.com/Jackroyal/Jackroyal.github.io.git'</span></div><div class=\"line\">  <span class=\"attribute\">branch</span>: master</div><div class=\"line\">- <span class=\"attribute\">type</span>: git</div><div class=\"line\">  <span class=\"attribute\">repo</span>: <span class=\"string\">'https://gitcafe.com/Jackroyal/Jackroyal.git'</span></div><div class=\"line\">  <span class=\"attribute\">branch</span>: gitcafe-pages</div></pre></td></tr></table></figure></p>\n<p>尤其需要注意的是,两个的branch是不同的,<code>github</code>默认分支是<code>master</code>,<code>gitcafe</code>默认分支是<code>gitcafe-pages</code>.</p>\n<h2 id=\"3-2-添加gitcafe的ssh公钥\"><a href=\"#3-2-添加gitcafe的ssh公钥\" class=\"headerlink\" title=\"3.2 添加gitcafe的ssh公钥\"></a>3.2 添加gitcafe的ssh公钥</h2><p>由于我使用的是<code>github for windows</code>的终端界面,也就是github官方提供的客户端,他的好处是,我使用github的时候,不需要配置ssh公钥,密钥之类的东西.如果你用的不是这个,用的是git的客户端,那就需要配置ssh公钥,参考这里<a href=\"https://help.github.com/articles/generating-ssh-keys/\">github配置公钥</a>.<br>对的,你猜到了,我们现在需要配置gitcafe的ssh公钥,因为<code>github for windows</code>会自动帮我们上传公钥,gitcafe就只能手动了.</p>\n<h3 id=\"3-2-1-查看本地公钥\"><a href=\"#3-2-1-查看本地公钥\" class=\"headerlink\" title=\"3.2.1 查看本地公钥\"></a>3.2.1 查看本地公钥</h3><p>我们打开你使用的git终端,首先切回用户目录,然后进入<code>.ssh</code>目录,里面就有公钥和私钥,如下图所示<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1eye75djqo9j20gj09475k.jpg\" alt=\"使用git客户端查看ssh公钥私钥\"><br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1eye78gs0hvj20it0ca761.jpg\" alt=\"使用github for windows查看ssh公钥私钥\"><br>我们就是要读取后缀是<code>.pub</code>的那个文件,比如我的读取命令就是<code>cat github_rsa.pub</code>,执行结果如下<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1eye7c2xpavj20if06dt9w.jpg\" alt=\"查看公钥\"></p>\n<h3 id=\"3-2-2-添加公钥到gitcafe\"><a href=\"#3-2-2-添加公钥到gitcafe\" class=\"headerlink\" title=\"3.2.2 添加公钥到gitcafe\"></a>3.2.2 添加公钥到gitcafe</h3><p>我们在<a href=\"https://gitcafe.com/account/public_keys\">这里</a>来设置gitcafe的公钥.<br><em>PS:需要注意的是,公钥后面的chen@chen-pc是不需要的,我的带上以后,gitcafe说是公钥非法,不过不怕,gitcafe会帮你正确格式化</em><br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1eye7h4ha7dj20v105n0ve.jpg\" alt=\"正确的ssh格式\"><br>反正就是把公钥加上去,就ok了</p>\n<h2 id=\"3-4-同步博客到gitcafe\"><a href=\"#3-4-同步博客到gitcafe\" class=\"headerlink\" title=\"3.4 同步博客到gitcafe\"></a>3.4 同步博客到gitcafe</h2><p>上面的配置好了以后,我们就可以把博客内容同步到gitcafe了,方法很简单,执行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo d -g</div></pre></td></tr></table></figure></p>\n<p>然后就可以啦.</p>\n<h1 id=\"4-配置域名\"><a href=\"#4-配置域名\" class=\"headerlink\" title=\"4 配置域名\"></a>4 配置域名</h1><p>首先你得有个域名,像我一样,哈哈.</p>\n<h2 id=\"4-1-修改域名注册的解析服务器\"><a href=\"#4-1-修改域名注册的解析服务器\" class=\"headerlink\" title=\"4.1 修改域名注册的解析服务器\"></a>4.1 修改域名注册的解析服务器</h2><p>我们在要把域名解析服务,设置到dnspod,因为他是国内的,而且服务很好.我们登录自己的域名管理后台,选择对应的域名进行管理,然后找到<code>nameservers</code>的设置,如图所示<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1eye7orkymjj210j0i7tde.jpg\" alt=\"修改nameservers的设置\"><br>修改的值是<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">f1g1ns1<span class=\"selector-class\">.dnspod</span><span class=\"selector-class\">.net</span></div><div class=\"line\">f1g1ns2<span class=\"selector-class\">.dnspod</span><span class=\"selector-class\">.net</span></div></pre></td></tr></table></figure></p>\n<p>常见的域名注册商修改到dnspod,官方提供了教程,看<a href=\"https://support.dnspod.cn/Kb/guide/\">这里</a>-<br>改完以后可能要等一段时间才能生效,最多72小时<br>ok,改完以后,这边就完了,我们登录dnspod</p>\n<h2 id=\"4-2-修改dnspod解析记录\"><a href=\"#4-2-修改dnspod解析记录\" class=\"headerlink\" title=\"4.2 修改dnspod解析记录\"></a>4.2 修改dnspod解析记录</h2><p>我们登录dnspod,然后添加域名<br>如果4.1中的设置生效了,你的域名就会添加成功了,我们直接进行下一步,修改解析记录,上图<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1eye9mfkri4j20mt0efad6.jpg\" alt=\"dns解析记录\"><br>我们一共添加了5条记录,其中一条泛解析和www解析是针对国内的,所以执行gitcafe;2条泛解析和www解析是针对国外的,所以指向github.<br>就是添加<br><figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@       <span class=\"keyword\">A</span>      默认  <span class=\"number\">192.30.252.153</span></div><div class=\"line\">@       <span class=\"keyword\">A</span>      默认  <span class=\"number\">192.30.252.154</span></div><div class=\"line\">@       <span class=\"keyword\">CNAME</span>  国内  gitcafe.io.</div><div class=\"line\">www     <span class=\"keyword\">CNAME</span>  默认  jackroyal.github.io.</div><div class=\"line\">www     <span class=\"keyword\">CNAME</span>  国内  gitcafe.io.</div></pre></td></tr></table></figure></p>\n<p>其他设置项目默认就行了,上面的配置完了,如果你走国外ip访问你的域名的话,会出现404,因为我们还差一步.走国内线路访问一样会出错,都是没绑定的结果.</p>\n<h2 id=\"4-3-添加github的CNAME文件-添加gitcafe自定义域名\"><a href=\"#4-3-添加github的CNAME文件-添加gitcafe自定义域名\" class=\"headerlink\" title=\"4.3 添加github的CNAME文件,添加gitcafe自定义域名\"></a>4.3 添加github的CNAME文件,添加gitcafe自定义域名</h2><p>现在只差最后一步了,我们先来配置github的CNAME文件,官网有个教程<a href=\"https://help.github.com/articles/adding-a-cname-file-to-your-repository/\">配置CNAME文件</a>.说白了,就是在你的网站根目录,添加一个名为<code>CNAME</code>的文件,里面的内容就是你的域名<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bblove.<span class=\"keyword\">me</span></div></pre></td></tr></table></figure></p>\n<p>没有任何多余的信息,如下图<br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1eyea41g3amj20uz0a4jtg.jpg\" alt=\"配置github的CNAME\"><br>上面的配置现在访问没问题,但是你一重新发布博客,就需要重新手动添加<code>CNAME</code>文件,太麻烦.<br>一劳永逸的方法,在你的<code>hexo</code>目录下的<code>source</code>目录中,新建一个<code>CNAME</code>文件夹,然后他每次在你发布博客的时候,都会在你的网站根目录生成一个<code>CNAME</code>文件.<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1eyea9pgd8cj20ko06ct9v.jpg\" alt=\"添加CNAME的目录结构\"><br>现在github的配置彻底结束.</p>\n<p>接下来配置gitcafe:<br>1 我们在gitcafe的项目主页,点击<code>项目设置</code>,如下图(之所以截图,是因为我找半天才看到…)<br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1eyeadedmh1j20z508eadm.jpg\" alt=\"gitcafe点击&#39;项目设置&#39;\"><br>2 然后我们点击<code>pages服务</code>标签,然后添加自己的域名,这些域名是我们之前在dnspod中设置了解析的<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1eyeaftjlagj20sp0dvn1i.jpg\" alt=\"gitcafe配置自定义域名\"></p>\n<p>彻底打完收工了</p>\n<h1 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5 总结\"></a>5 总结</h1><p>总算写完了,写到这里,我一共写了,141行了,写了个把小时.这次主要参考了下面的几篇文章,都写在友情链接里面了.参考了他们的思路,因为他们的方法里面需要自己单独购买vps或者购买CDN,共同的问题是增加了开销,买vps会导致你每次写博客都需要单独发布一次到vps上太麻烦.我后来在网上看到gitcafe也有<code>gitcafe pages</code>服务,如果用这个来处理的话,一来,不会增加多余的开销,他们都是免费的;二来,由于hexo对于多部署的支持,多部署很简单,一次配置,以后就可以不用理会了.<br>ok,收工</p>\n<h1 id=\"友情链接\"><a href=\"#友情链接\" class=\"headerlink\" title=\"友情链接\"></a>友情链接</h1><p>1 <a href=\"http://jerryzou.com/posts/feasibility-of-allowing-baiduSpider-for-Github-Pages/\">解决 Github Pages 禁止百度爬虫的方法与可行性分析</a><br>2 <a href=\"http://www.dozer.cc/2015/06/github-pages-and-cdn.html\">利用 CDN 解决百度爬虫被 Github Pages 拒绝的问题</a><br>3 <a href=\"https://help.gitcafe.com/manuals/help/pages-services\">gitcafe官方文档–pages服务</a><br>4 <a href=\"https://help.gitcafe.com/manuals/help/ssh-key\">gitcafe官方文档–配置ssh公钥</a></p>"},{"title":"使用hexo建立自己的Github pages","date":"2014-11-27T06:48:29.000Z","_content":"昨天经过一天的[折腾](http://jackroyal.github.io/2014/11/26/new-start/ '生命在于折腾'),总算把博客搭建起来了,今天就来写个博客总结一下.\n网上的资料很多,我主要参考的是这篇博客,一路很顺利.\n>http://zipperary.com/2013/05/28/hexo-guide-2/\n\n一个很重要的原因就是他是针对windows的,刚好我也在用windows.\n# 安装过程\n# # 1. 安装Github for windows\n因为我之前就在用Github,所以早就安装了这个.已经装过的同学请忽略这一段.\n下载 [Github for windows](https://windows.github.com/ \"Github for windows\") 并执行即可完成安装(*在线安装,会有点慢*)。这个软件的的好处是有一个带GUI的界面,还有一个终端界面.如图所示<!-- more -->\n![Github for windows](http://ww2.sinaimg.cn/large/692869a3jw1emplp1lz31j204w033mx0.jpg)\n![GUI and Bash](http://ww2.sinaimg.cn/large/692869a3gw1empluh6hvej210b0j741r.jpg)\n如果你不喜欢用这个,也可以用上面的博客推荐的[msysgit](http://code.google.com/p/msysgit/).\n\n# # 2. 安装Node.js\n在 Windows 环境下安装 [Node.js](http://nodejs.org/ \"Node.js 官网\") 非常简单，仅须下载安装文件并执行即可完成安装。（win下建议下载msi格式的，因为这样可以不用配置环境变量之类的）\n\n# # 3. 测试node.js是否安装\n在任何控制台输入(可以按windows键+R,输入cmd,然后输入npm,一般来说不会有问题)\n```\nnpm\n```\n返回值如下\n```\nUsage: npm <command>\n\nwhere <command> is one of:\n    add-user, adduser, apihelp, author, bin, bugs, c, cache,\n    completion, config, ddp, dedupe, deprecate, docs, edit,\n    explore, faq, find, find-dupes, get, help, help-search,\n    home, i, info, init, install, isntall, issues, la, link,\n    list, ll, ln, login, ls, outdated, owner, pack, prefix,\n    prune, publish, r, rb, rebuild, remove, repo, restart, rm,\n    root, run-script, s, se, search, set, show, shrinkwrap,\n    star, stars, start, stop, submodule, t, tag, test, tst, un,\n    uninstall, unlink, unpublish, unstar, up, update, v,\n    version, view, whoami\n\nnpm <cmd> -h     quick help on <cmd>\nnpm -l           display full usage info\nnpm faq          commonly asked questions\nnpm help <term>  search for help on <term>\nnpm help npm     involved overview\n\nSpecify configs in the ini-formatted file:\n    C:\\Users\\chenhao\\.npmrc\nor on the command line via: npm <command> --key value\nConfig info can be viewed via: npm help config\n\nnpm@1.4.28 D:\\Program Files (x86)\\nodejs\\node_modules\\npm\n```\n看到这个结果,就表示你的node.js已经安装上去了\n*感谢我们家笨笨的反馈：*此处如果npm无效，首先确定win下你采用的是msi格式的安装文件，然后重启下电脑，应该就正常了。\n# # 4. 安装hexo\n接下来的操作我都是用**Github for windows**自带的Bash来完成的,因为后面会涉及到SSH,用**Github for windows**,就可以避免这个问题.\n- 在Bash中输入以下命令\n```\nnpm install -g hexo\n```\n- 创建hexo文件夹\n创建你hexo放置的文件夹,先用Bash进入到目标文件夹,比如我的是F:/blog/,接下来初始化hexo,自动生成相关的文件,在F:/blog/环境下,输入\n```\ncd /f/blog  # 这个命令表示当前进入目录为f：/blog/\nhexo init\n```\n- 安装依赖包\n```\nnpm install\n```\n- 本地预览,做完以上操作,可以本地预览一下\n```\nhexo g\nhexo s\n```\n以上两条命令的意思是:\n生成相关文件(就是生成目标html,静态博客嘛,就是很多html组成)\n打开本地服务器预览(node.js就是干这事的,点击访问<http://localhost:4000>,就可以看到了)\n**ok**,到这里,博客搭建基本完成,现在要做的就是把它发布到你的Github上去\n---\n接下来,教你怎么发布到Github上去\n# 注册Github\n这一步没什么说的,如果你连简单的注册都不会,我也不会教你╮(╯▽╰)╭\n# 创建公共库\n在自己Github主页右下角，创建一个新的repository([点这里](https://github.com/new '点我新建'))。比如我的Github账号是Jackroyal，那么我应该创建的repository名字应该是Jackroyal.github.io(注意你的repository名字就是Jackroyal.github.io,我之前用的是Jackroyal怎么尝试都不行)。\n> PS:有个大小写的问题其实我注册的是Jackroyal,大写的J,但是我访问的时候特别是带https的链接,他会自动转为小写访问.怎么说呢?简单点,你就按照你的用户名来,该大写大写,该小写小写\n\n# 部署\n现在万事俱备,只差部署了,我们来配置下`_config.yml`.\n这个文件在路径是F:/blog/_config.yml.\n用编辑器把它打开,修改最后一段\nps:以下为hexo 2.8x的配置方法,不适用于3.0\n```\ndeploy:\n  type: github\n  repo: https://github.com/Jackroyal/Jackroyal.github.io.git\n  branch: master\n```\n\n*update 2015-06-16:*\n现在hexo由2.8升级到3.0了,按照上面的方式安装,你的hexo版本是hexo 3.0,3.0的这段代码的设置内容如下:\n```\ndeploy:\n  type: git\n  repo: https://github.com/Jackroyal/Jackroyal.github.io.git\n  branch: master\n```\n照着我的这个格式修改就好了,把我里面的用户名替换成你的.\n至此基本完成所有搭建步骤.\n# 上传\n我们开始上传项目的代码,再重复一次,我一直以来用的工具都是_Github for windows_自带的Bash,所以我没有配置SSH,如果你用的windows自带的终端或者其他比如msysgit,可能需要配置SSH,不然无法使用Github(点击[`这里`](https://help.github.com/articles/generating-ssh-keys/ \"https://help.github.com/articles/generating-ssh-keys/\")查看官方教程).\n我们输入以下命令\n```\nhexo g\nhexo d\n```\n或者偷个懒\n```\nhexo d -g\n```\nok,现在就可以去看看你的个人主页了,逼格满满有木有.\n# 问题\n我的中间出过一些问题:\n1. 我的`hexo d`的时候出错,可以尝试手动删除`.deploy`文件夹,然后执行`hexo clean`还有可能出现的情况是,`deploy`没错但是一直没有提示`deploy done`,那就是骚年,你访问Github网速太慢\n1. 我`deploy d`成功以后,在Github里面已经看到生成的页面了,访问<http://jackroyal.github.io>或者<https://jackroyal.github.io>一直报404的错误,这种时候等一等就好了,一般等几分钟.如果一直不好那就给官方发个邮件,他们很快会回复你的,有什么问题说清楚就行.\n# 致谢\n这里，要感谢我最亲爱的笨笨，是她给我测试和反馈的<http://huirong.github.io>\n\n","source":"_posts/how-to-build-a-blog-with-hexo.md","raw":"title: 使用hexo建立自己的Github pages\ndate: 2014-11-27 14:48:29\ntags:\n- hexo\n- github\ncategories: hexo\n---\n昨天经过一天的[折腾](http://jackroyal.github.io/2014/11/26/new-start/ '生命在于折腾'),总算把博客搭建起来了,今天就来写个博客总结一下.\n网上的资料很多,我主要参考的是这篇博客,一路很顺利.\n>http://zipperary.com/2013/05/28/hexo-guide-2/\n\n一个很重要的原因就是他是针对windows的,刚好我也在用windows.\n# 安装过程\n# # 1. 安装Github for windows\n因为我之前就在用Github,所以早就安装了这个.已经装过的同学请忽略这一段.\n下载 [Github for windows](https://windows.github.com/ \"Github for windows\") 并执行即可完成安装(*在线安装,会有点慢*)。这个软件的的好处是有一个带GUI的界面,还有一个终端界面.如图所示<!-- more -->\n![Github for windows](http://ww2.sinaimg.cn/large/692869a3jw1emplp1lz31j204w033mx0.jpg)\n![GUI and Bash](http://ww2.sinaimg.cn/large/692869a3gw1empluh6hvej210b0j741r.jpg)\n如果你不喜欢用这个,也可以用上面的博客推荐的[msysgit](http://code.google.com/p/msysgit/).\n\n# # 2. 安装Node.js\n在 Windows 环境下安装 [Node.js](http://nodejs.org/ \"Node.js 官网\") 非常简单，仅须下载安装文件并执行即可完成安装。（win下建议下载msi格式的，因为这样可以不用配置环境变量之类的）\n\n# # 3. 测试node.js是否安装\n在任何控制台输入(可以按windows键+R,输入cmd,然后输入npm,一般来说不会有问题)\n```\nnpm\n```\n返回值如下\n```\nUsage: npm <command>\n\nwhere <command> is one of:\n    add-user, adduser, apihelp, author, bin, bugs, c, cache,\n    completion, config, ddp, dedupe, deprecate, docs, edit,\n    explore, faq, find, find-dupes, get, help, help-search,\n    home, i, info, init, install, isntall, issues, la, link,\n    list, ll, ln, login, ls, outdated, owner, pack, prefix,\n    prune, publish, r, rb, rebuild, remove, repo, restart, rm,\n    root, run-script, s, se, search, set, show, shrinkwrap,\n    star, stars, start, stop, submodule, t, tag, test, tst, un,\n    uninstall, unlink, unpublish, unstar, up, update, v,\n    version, view, whoami\n\nnpm <cmd> -h     quick help on <cmd>\nnpm -l           display full usage info\nnpm faq          commonly asked questions\nnpm help <term>  search for help on <term>\nnpm help npm     involved overview\n\nSpecify configs in the ini-formatted file:\n    C:\\Users\\chenhao\\.npmrc\nor on the command line via: npm <command> --key value\nConfig info can be viewed via: npm help config\n\nnpm@1.4.28 D:\\Program Files (x86)\\nodejs\\node_modules\\npm\n```\n看到这个结果,就表示你的node.js已经安装上去了\n*感谢我们家笨笨的反馈：*此处如果npm无效，首先确定win下你采用的是msi格式的安装文件，然后重启下电脑，应该就正常了。\n# # 4. 安装hexo\n接下来的操作我都是用**Github for windows**自带的Bash来完成的,因为后面会涉及到SSH,用**Github for windows**,就可以避免这个问题.\n- 在Bash中输入以下命令\n```\nnpm install -g hexo\n```\n- 创建hexo文件夹\n创建你hexo放置的文件夹,先用Bash进入到目标文件夹,比如我的是F:/blog/,接下来初始化hexo,自动生成相关的文件,在F:/blog/环境下,输入\n```\ncd /f/blog  # 这个命令表示当前进入目录为f：/blog/\nhexo init\n```\n- 安装依赖包\n```\nnpm install\n```\n- 本地预览,做完以上操作,可以本地预览一下\n```\nhexo g\nhexo s\n```\n以上两条命令的意思是:\n生成相关文件(就是生成目标html,静态博客嘛,就是很多html组成)\n打开本地服务器预览(node.js就是干这事的,点击访问<http://localhost:4000>,就可以看到了)\n**ok**,到这里,博客搭建基本完成,现在要做的就是把它发布到你的Github上去\n---\n接下来,教你怎么发布到Github上去\n# 注册Github\n这一步没什么说的,如果你连简单的注册都不会,我也不会教你╮(╯▽╰)╭\n# 创建公共库\n在自己Github主页右下角，创建一个新的repository([点这里](https://github.com/new '点我新建'))。比如我的Github账号是Jackroyal，那么我应该创建的repository名字应该是Jackroyal.github.io(注意你的repository名字就是Jackroyal.github.io,我之前用的是Jackroyal怎么尝试都不行)。\n> PS:有个大小写的问题其实我注册的是Jackroyal,大写的J,但是我访问的时候特别是带https的链接,他会自动转为小写访问.怎么说呢?简单点,你就按照你的用户名来,该大写大写,该小写小写\n\n# 部署\n现在万事俱备,只差部署了,我们来配置下`_config.yml`.\n这个文件在路径是F:/blog/_config.yml.\n用编辑器把它打开,修改最后一段\nps:以下为hexo 2.8x的配置方法,不适用于3.0\n```\ndeploy:\n  type: github\n  repo: https://github.com/Jackroyal/Jackroyal.github.io.git\n  branch: master\n```\n\n*update 2015-06-16:*\n现在hexo由2.8升级到3.0了,按照上面的方式安装,你的hexo版本是hexo 3.0,3.0的这段代码的设置内容如下:\n```\ndeploy:\n  type: git\n  repo: https://github.com/Jackroyal/Jackroyal.github.io.git\n  branch: master\n```\n照着我的这个格式修改就好了,把我里面的用户名替换成你的.\n至此基本完成所有搭建步骤.\n# 上传\n我们开始上传项目的代码,再重复一次,我一直以来用的工具都是_Github for windows_自带的Bash,所以我没有配置SSH,如果你用的windows自带的终端或者其他比如msysgit,可能需要配置SSH,不然无法使用Github(点击[`这里`](https://help.github.com/articles/generating-ssh-keys/ \"https://help.github.com/articles/generating-ssh-keys/\")查看官方教程).\n我们输入以下命令\n```\nhexo g\nhexo d\n```\n或者偷个懒\n```\nhexo d -g\n```\nok,现在就可以去看看你的个人主页了,逼格满满有木有.\n# 问题\n我的中间出过一些问题:\n1. 我的`hexo d`的时候出错,可以尝试手动删除`.deploy`文件夹,然后执行`hexo clean`还有可能出现的情况是,`deploy`没错但是一直没有提示`deploy done`,那就是骚年,你访问Github网速太慢\n1. 我`deploy d`成功以后,在Github里面已经看到生成的页面了,访问<http://jackroyal.github.io>或者<https://jackroyal.github.io>一直报404的错误,这种时候等一等就好了,一般等几分钟.如果一直不好那就给官方发个邮件,他们很快会回复你的,有什么问题说清楚就行.\n# 致谢\n这里，要感谢我最亲爱的笨笨，是她给我测试和反馈的<http://huirong.github.io>\n\n","slug":"how-to-build-a-blog-with-hexo","published":1,"updated":"2015-10-29T06:08:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yp40017x8cdioim2gxw","content":"<p>昨天经过一天的<a href=\"http://jackroyal.github.io/2014/11/26/new-start/\" title=\"生命在于折腾\" target=\"_blank\" rel=\"external\">折腾</a>,总算把博客搭建起来了,今天就来写个博客总结一下.<br>网上的资料很多,我主要参考的是这篇博客,一路很顺利.</p>\n<blockquote>\n<p><a href=\"http://zipperary.com/2013/05/28/hexo-guide-2/\" target=\"_blank\" rel=\"external\">http://zipperary.com/2013/05/28/hexo-guide-2/</a></p>\n</blockquote>\n<p>一个很重要的原因就是他是针对windows的,刚好我也在用windows.</p>\n<h1 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h1><h1 id=\"1-安装Github-for-windows\"><a href=\"#1-安装Github-for-windows\" class=\"headerlink\" title=\"# 1. 安装Github for windows\"></a># 1. 安装Github for windows</h1><p>因为我之前就在用Github,所以早就安装了这个.已经装过的同学请忽略这一段.<br>下载 <a href=\"https://windows.github.com/\" title=\"Github for windows\" target=\"_blank\" rel=\"external\">Github for windows</a> 并执行即可完成安装(<em>在线安装,会有点慢</em>)。这个软件的的好处是有一个带GUI的界面,还有一个终端界面.如图所示<a id=\"more\"></a><br><img src=\"http://ww2.sinaimg.cn/large/692869a3jw1emplp1lz31j204w033mx0.jpg\" alt=\"Github for windows\"><br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1empluh6hvej210b0j741r.jpg\" alt=\"GUI and Bash\"><br>如果你不喜欢用这个,也可以用上面的博客推荐的<a href=\"http://code.google.com/p/msysgit/\" target=\"_blank\" rel=\"external\">msysgit</a>.</p>\n<h1 id=\"2-安装Node-js\"><a href=\"#2-安装Node-js\" class=\"headerlink\" title=\"# 2. 安装Node.js\"></a># 2. 安装Node.js</h1><p>在 Windows 环境下安装 <a href=\"http://nodejs.org/\" title=\"Node.js 官网\" target=\"_blank\" rel=\"external\">Node.js</a> 非常简单，仅须下载安装文件并执行即可完成安装。（win下建议下载msi格式的，因为这样可以不用配置环境变量之类的）</p>\n<h1 id=\"3-测试node-js是否安装\"><a href=\"#3-测试node-js是否安装\" class=\"headerlink\" title=\"# 3. 测试node.js是否安装\"></a># 3. 测试node.js是否安装</h1><p>在任何控制台输入(可以按windows键+R,输入cmd,然后输入npm,一般来说不会有问题)<br><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">npm</span></div></pre></td></tr></table></figure></p>\n<p>返回值如下<br><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Usage</span>: npm &lt;command&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"vim\">where <span class=\"symbol\">&lt;command&gt;</span> <span class=\"keyword\">is</span> one of:</span></div><div class=\"line\">    <span class=\"built_in\">add</span>-user, adduser, apihelp, author, bin, bugs, <span class=\"keyword\">c</span>, cache,</div><div class=\"line\">    completion, config, ddp, dedupe, deprecate, docs, <span class=\"keyword\">edit</span>,</div><div class=\"line\">    explore, faq, <span class=\"keyword\">find</span>, <span class=\"keyword\">find</span>-dupes, <span class=\"built_in\">get</span>, <span class=\"keyword\">help</span>, <span class=\"keyword\">help</span>-<span class=\"built_in\">search</span>,</div><div class=\"line\">    home, i, info, init, install, isntall, issues, <span class=\"keyword\">la</span>, link,</div><div class=\"line\">    <span class=\"keyword\">list</span>, <span class=\"keyword\">ll</span>, <span class=\"keyword\">ln</span>, login, <span class=\"keyword\">ls</span>, outdated, owner, pack, prefix,</div><div class=\"line\">    prune, publish, r, rb, rebuild, <span class=\"built_in\">remove</span>, repo, restart, rm,</div><div class=\"line\">    root, run-script, s, <span class=\"keyword\">se</span>, <span class=\"built_in\">search</span>, <span class=\"keyword\">set</span>, show, shrinkwrap,</div><div class=\"line\">    <span class=\"keyword\">star</span>, stars, start, <span class=\"keyword\">stop</span>, submodule, t, <span class=\"keyword\">tag</span>, test, tst, un,</div><div class=\"line\">    uninstall, unlink, unpublish, unstar, <span class=\"keyword\">up</span>, <span class=\"keyword\">update</span>, v,</div><div class=\"line\">    <span class=\"keyword\">version</span>, <span class=\"keyword\">view</span>, whoami</div><div class=\"line\"></div><div class=\"line\">npm <span class=\"symbol\">&lt;cmd&gt;</span> -h     quick <span class=\"keyword\">help</span> <span class=\"keyword\">on</span> <span class=\"symbol\">&lt;cmd&gt;</span></div><div class=\"line\">npm -<span class=\"keyword\">l</span>           <span class=\"keyword\">display</span> full usage info</div><div class=\"line\">npm faq          commonly asked questions</div><div class=\"line\">npm <span class=\"keyword\">help</span> <span class=\"symbol\">&lt;term&gt;</span>  <span class=\"built_in\">search</span> <span class=\"keyword\">for</span> <span class=\"keyword\">help</span> <span class=\"keyword\">on</span> <span class=\"symbol\">&lt;term&gt;</span></div><div class=\"line\">npm <span class=\"keyword\">help</span> npm     involved overview</div><div class=\"line\"></div><div class=\"line\">Specify configs in the ini-formatted <span class=\"keyword\">file</span>:</div><div class=\"line\">    C:\\Users\\chenhao\\.npmrc</div><div class=\"line\"><span class=\"built_in\">or</span> <span class=\"keyword\">on</span> the <span class=\"keyword\">command</span> <span class=\"built_in\">line</span> <span class=\"keyword\">vi</span><span class=\"variable\">a:</span> npm <span class=\"symbol\">&lt;command&gt;</span> --key value</div><div class=\"line\">Config info can <span class=\"keyword\">be</span> viewed <span class=\"keyword\">vi</span><span class=\"variable\">a:</span> npm <span class=\"keyword\">help</span> config</div><div class=\"line\"></div><div class=\"line\">npm@<span class=\"number\">1.4</span>.<span class=\"number\">28</span> D:\\Program Files (x86)\\nodejs\\node_modules\\npm</div></pre></td></tr></table></figure></p>\n<p>看到这个结果,就表示你的node.js已经安装上去了<br><em>感谢我们家笨笨的反馈：</em>此处如果npm无效，首先确定win下你采用的是msi格式的安装文件，然后重启下电脑，应该就正常了。</p>\n<h1 id=\"4-安装hexo\"><a href=\"#4-安装hexo\" class=\"headerlink\" title=\"# 4. 安装hexo\"></a># 4. 安装hexo</h1><p>接下来的操作我都是用<strong>Github for windows</strong>自带的Bash来完成的,因为后面会涉及到SSH,用<strong>Github for windows</strong>,就可以避免这个问题.</p>\n<ul>\n<li><p>在Bash中输入以下命令</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> -g hexo</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建hexo文件夹<br>创建你hexo放置的文件夹,先用Bash进入到目标文件夹,比如我的是F:/blog/,接下来初始化hexo,自动生成相关的文件,在F:/blog/环境下,输入</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">cd</span> /f/<span class=\"keyword\">blog </span> # 这个命令表示当前进入目录为f：/<span class=\"keyword\">blog/</span></div><div class=\"line\"><span class=\"symbol\">hexo</span> init</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装依赖包</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>本地预览,做完以上操作,可以本地预览一下</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">hexo g</span></div><div class=\"line\">hexo s</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>以上两条命令的意思是:<br>生成相关文件(就是生成目标html,静态博客嘛,就是很多html组成)<br>打开本地服务器预览(node.js就是干这事的,点击访问<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a>,就可以看到了)</p>\n<h2 id=\"ok-到这里-博客搭建基本完成-现在要做的就是把它发布到你的Github上去\"><a href=\"#ok-到这里-博客搭建基本完成-现在要做的就是把它发布到你的Github上去\" class=\"headerlink\" title=\"ok,到这里,博客搭建基本完成,现在要做的就是把它发布到你的Github上去\"></a><strong>ok</strong>,到这里,博客搭建基本完成,现在要做的就是把它发布到你的Github上去</h2><p>接下来,教你怎么发布到Github上去</p>\n<h1 id=\"注册Github\"><a href=\"#注册Github\" class=\"headerlink\" title=\"注册Github\"></a>注册Github</h1><p>这一步没什么说的,如果你连简单的注册都不会,我也不会教你╮(╯▽╰)╭</p>\n<h1 id=\"创建公共库\"><a href=\"#创建公共库\" class=\"headerlink\" title=\"创建公共库\"></a>创建公共库</h1><p>在自己Github主页右下角，创建一个新的repository(<a href=\"https://github.com/new\" title=\"点我新建\" target=\"_blank\" rel=\"external\">点这里</a>)。比如我的Github账号是Jackroyal，那么我应该创建的repository名字应该是Jackroyal.github.io(注意你的repository名字就是Jackroyal.github.io,我之前用的是Jackroyal怎么尝试都不行)。</p>\n<blockquote>\n<p>PS:有个大小写的问题其实我注册的是Jackroyal,大写的J,但是我访问的时候特别是带https的链接,他会自动转为小写访问.怎么说呢?简单点,你就按照你的用户名来,该大写大写,该小写小写</p>\n</blockquote>\n<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><p>现在万事俱备,只差部署了,我们来配置下<code>_config.yml</code>.<br>这个文件在路径是F:/blog/_config.yml.<br>用编辑器把它打开,修改最后一段<br>ps:以下为hexo 2.8x的配置方法,不适用于3.0<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">  <span class=\"attribute\">type</span>: github</div><div class=\"line\">  <span class=\"attribute\">repo</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/Jackroyal/Jackroyal.github.io.git</span></div><div class=\"line\">  <span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure></p>\n<p><em>update 2015-06-16:</em><br>现在hexo由2.8升级到3.0了,按照上面的方式安装,你的hexo版本是hexo 3.0,3.0的这段代码的设置内容如下:<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">  <span class=\"attribute\">type</span>: git</div><div class=\"line\">  <span class=\"attribute\">repo</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/Jackroyal/Jackroyal.github.io.git</span></div><div class=\"line\">  <span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure></p>\n<p>照着我的这个格式修改就好了,把我里面的用户名替换成你的.<br>至此基本完成所有搭建步骤.</p>\n<h1 id=\"上传\"><a href=\"#上传\" class=\"headerlink\" title=\"上传\"></a>上传</h1><p>我们开始上传项目的代码,再重复一次,我一直以来用的工具都是<em>Github for windows</em>自带的Bash,所以我没有配置SSH,如果你用的windows自带的终端或者其他比如msysgit,可能需要配置SSH,不然无法使用Github(点击<a href=\"https://help.github.com/articles/generating-ssh-keys/\" title=\"https://help.github.com/articles/generating-ssh-keys/\" target=\"_blank\" rel=\"external\"><code>这里</code></a>查看官方教程).<br>我们输入以下命令<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">hexo g</span></div><div class=\"line\">hexo d</div></pre></td></tr></table></figure></p>\n<p>或者偷个懒<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">hexo d -g</span></div></pre></td></tr></table></figure></p>\n<p>ok,现在就可以去看看你的个人主页了,逼格满满有木有.</p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>我的中间出过一些问题:</p>\n<ol>\n<li>我的<code>hexo d</code>的时候出错,可以尝试手动删除<code>.deploy</code>文件夹,然后执行<code>hexo clean</code>还有可能出现的情况是,<code>deploy</code>没错但是一直没有提示<code>deploy done</code>,那就是骚年,你访问Github网速太慢</li>\n<li>我<code>deploy d</code>成功以后,在Github里面已经看到生成的页面了,访问<a href=\"http://jackroyal.github.io\" target=\"_blank\" rel=\"external\">http://jackroyal.github.io</a>或者<a href=\"https://jackroyal.github.io\" target=\"_blank\" rel=\"external\">https://jackroyal.github.io</a>一直报404的错误,这种时候等一等就好了,一般等几分钟.如果一直不好那就给官方发个邮件,他们很快会回复你的,有什么问题说清楚就行.<h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1>这里，要感谢我最亲爱的笨笨，是她给我测试和反馈的<a href=\"http://huirong.github.io\" target=\"_blank\" rel=\"external\">http://huirong.github.io</a></li>\n</ol>\n","excerpt":"<p>昨天经过一天的<a href=\"http://jackroyal.github.io/2014/11/26/new-start/\" title=\"生命在于折腾\">折腾</a>,总算把博客搭建起来了,今天就来写个博客总结一下.<br>网上的资料很多,我主要参考的是这篇博客,一路很顺利.</p>\n<blockquote>\n<p><a href=\"http://zipperary.com/2013/05/28/hexo-guide-2/\">http://zipperary.com/2013/05/28/hexo-guide-2/</a></p>\n</blockquote>\n<p>一个很重要的原因就是他是针对windows的,刚好我也在用windows.</p>\n<h1 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h1><h1 id=\"1-安装Github-for-windows\"><a href=\"#1-安装Github-for-windows\" class=\"headerlink\" title=\"# 1. 安装Github for windows\"></a># 1. 安装Github for windows</h1><p>因为我之前就在用Github,所以早就安装了这个.已经装过的同学请忽略这一段.<br>下载 <a href=\"https://windows.github.com/\" title=\"Github for windows\">Github for windows</a> 并执行即可完成安装(<em>在线安装,会有点慢</em>)。这个软件的的好处是有一个带GUI的界面,还有一个终端界面.如图所示","more":"<br><img src=\"http://ww2.sinaimg.cn/large/692869a3jw1emplp1lz31j204w033mx0.jpg\" alt=\"Github for windows\"><br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1empluh6hvej210b0j741r.jpg\" alt=\"GUI and Bash\"><br>如果你不喜欢用这个,也可以用上面的博客推荐的<a href=\"http://code.google.com/p/msysgit/\">msysgit</a>.</p>\n<h1 id=\"2-安装Node-js\"><a href=\"#2-安装Node-js\" class=\"headerlink\" title=\"# 2. 安装Node.js\"></a># 2. 安装Node.js</h1><p>在 Windows 环境下安装 <a href=\"http://nodejs.org/\" title=\"Node.js 官网\">Node.js</a> 非常简单，仅须下载安装文件并执行即可完成安装。（win下建议下载msi格式的，因为这样可以不用配置环境变量之类的）</p>\n<h1 id=\"3-测试node-js是否安装\"><a href=\"#3-测试node-js是否安装\" class=\"headerlink\" title=\"# 3. 测试node.js是否安装\"></a># 3. 测试node.js是否安装</h1><p>在任何控制台输入(可以按windows键+R,输入cmd,然后输入npm,一般来说不会有问题)<br><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">npm</span></div></pre></td></tr></table></figure></p>\n<p>返回值如下<br><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Usage</span>: npm &lt;command&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"vim\">where <span class=\"symbol\">&lt;command&gt;</span> <span class=\"keyword\">is</span> one of:</div><div class=\"line\">    <span class=\"built_in\">add</span>-user, adduser, apihelp, author, bin, bugs, <span class=\"keyword\">c</span>, cache,</div><div class=\"line\">    completion, config, ddp, dedupe, deprecate, docs, <span class=\"keyword\">edit</span>,</div><div class=\"line\">    explore, faq, <span class=\"keyword\">find</span>, <span class=\"keyword\">find</span>-dupes, <span class=\"built_in\">get</span>, <span class=\"keyword\">help</span>, <span class=\"keyword\">help</span>-<span class=\"built_in\">search</span>,</div><div class=\"line\">    home, i, info, init, install, isntall, issues, <span class=\"keyword\">la</span>, link,</div><div class=\"line\">    <span class=\"keyword\">list</span>, <span class=\"keyword\">ll</span>, <span class=\"keyword\">ln</span>, login, <span class=\"keyword\">ls</span>, outdated, owner, pack, prefix,</div><div class=\"line\">    prune, publish, r, rb, rebuild, <span class=\"built_in\">remove</span>, repo, restart, rm,</div><div class=\"line\">    root, run-script, s, <span class=\"keyword\">se</span>, <span class=\"built_in\">search</span>, <span class=\"keyword\">set</span>, show, shrinkwrap,</div><div class=\"line\">    <span class=\"keyword\">star</span>, stars, start, <span class=\"keyword\">stop</span>, submodule, t, <span class=\"keyword\">tag</span>, test, tst, un,</div><div class=\"line\">    uninstall, unlink, unpublish, unstar, <span class=\"keyword\">up</span>, <span class=\"keyword\">update</span>, v,</div><div class=\"line\">    <span class=\"keyword\">version</span>, <span class=\"keyword\">view</span>, whoami</div><div class=\"line\"></div><div class=\"line\">npm <span class=\"symbol\">&lt;cmd&gt;</span> -h     quick <span class=\"keyword\">help</span> <span class=\"keyword\">on</span> <span class=\"symbol\">&lt;cmd&gt;</span></div><div class=\"line\">npm -<span class=\"keyword\">l</span>           <span class=\"keyword\">display</span> full usage info</div><div class=\"line\">npm faq          commonly asked questions</div><div class=\"line\">npm <span class=\"keyword\">help</span> <span class=\"symbol\">&lt;term&gt;</span>  <span class=\"built_in\">search</span> <span class=\"keyword\">for</span> <span class=\"keyword\">help</span> <span class=\"keyword\">on</span> <span class=\"symbol\">&lt;term&gt;</span></div><div class=\"line\">npm <span class=\"keyword\">help</span> npm     involved overview</div><div class=\"line\"></div><div class=\"line\">Specify configs in the ini-formatted <span class=\"keyword\">file</span>:</div><div class=\"line\">    C:\\Users\\chenhao\\.npmrc</div><div class=\"line\"><span class=\"built_in\">or</span> <span class=\"keyword\">on</span> the <span class=\"keyword\">command</span> <span class=\"built_in\">line</span> <span class=\"keyword\">vi</span><span class=\"variable\">a:</span> npm <span class=\"symbol\">&lt;command&gt;</span> --key value</div><div class=\"line\">Config info can <span class=\"keyword\">be</span> viewed <span class=\"keyword\">vi</span><span class=\"variable\">a:</span> npm <span class=\"keyword\">help</span> config</div><div class=\"line\"></div><div class=\"line\">npm@<span class=\"number\">1.4</span>.<span class=\"number\">28</span> D:\\Program Files (x86)\\nodejs\\node_modules\\npm</span></div></pre></td></tr></table></figure></p>\n<p>看到这个结果,就表示你的node.js已经安装上去了<br><em>感谢我们家笨笨的反馈：</em>此处如果npm无效，首先确定win下你采用的是msi格式的安装文件，然后重启下电脑，应该就正常了。</p>\n<h1 id=\"4-安装hexo\"><a href=\"#4-安装hexo\" class=\"headerlink\" title=\"# 4. 安装hexo\"></a># 4. 安装hexo</h1><p>接下来的操作我都是用<strong>Github for windows</strong>自带的Bash来完成的,因为后面会涉及到SSH,用<strong>Github for windows</strong>,就可以避免这个问题.</p>\n<ul>\n<li><p>在Bash中输入以下命令</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> -g hexo</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建hexo文件夹<br>创建你hexo放置的文件夹,先用Bash进入到目标文件夹,比如我的是F:/blog/,接下来初始化hexo,自动生成相关的文件,在F:/blog/环境下,输入</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">cd</span> /f/<span class=\"keyword\">blog </span> # 这个命令表示当前进入目录为f：/<span class=\"keyword\">blog/</div><div class=\"line\"></span><span class=\"symbol\">hexo</span> init</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装依赖包</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>本地预览,做完以上操作,可以本地预览一下</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">hexo g</div><div class=\"line\">hexo s</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>以上两条命令的意思是:<br>生成相关文件(就是生成目标html,静态博客嘛,就是很多html组成)<br>打开本地服务器预览(node.js就是干这事的,点击访问<a href=\"http://localhost:4000\">http://localhost:4000</a>,就可以看到了)</p>\n<h2 id=\"ok-到这里-博客搭建基本完成-现在要做的就是把它发布到你的Github上去\"><a href=\"#ok-到这里-博客搭建基本完成-现在要做的就是把它发布到你的Github上去\" class=\"headerlink\" title=\"ok,到这里,博客搭建基本完成,现在要做的就是把它发布到你的Github上去\"></a><strong>ok</strong>,到这里,博客搭建基本完成,现在要做的就是把它发布到你的Github上去</h2><p>接下来,教你怎么发布到Github上去</p>\n<h1 id=\"注册Github\"><a href=\"#注册Github\" class=\"headerlink\" title=\"注册Github\"></a>注册Github</h1><p>这一步没什么说的,如果你连简单的注册都不会,我也不会教你╮(╯▽╰)╭</p>\n<h1 id=\"创建公共库\"><a href=\"#创建公共库\" class=\"headerlink\" title=\"创建公共库\"></a>创建公共库</h1><p>在自己Github主页右下角，创建一个新的repository(<a href=\"https://github.com/new\" title=\"点我新建\">点这里</a>)。比如我的Github账号是Jackroyal，那么我应该创建的repository名字应该是Jackroyal.github.io(注意你的repository名字就是Jackroyal.github.io,我之前用的是Jackroyal怎么尝试都不行)。</p>\n<blockquote>\n<p>PS:有个大小写的问题其实我注册的是Jackroyal,大写的J,但是我访问的时候特别是带https的链接,他会自动转为小写访问.怎么说呢?简单点,你就按照你的用户名来,该大写大写,该小写小写</p>\n</blockquote>\n<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><p>现在万事俱备,只差部署了,我们来配置下<code>_config.yml</code>.<br>这个文件在路径是F:/blog/_config.yml.<br>用编辑器把它打开,修改最后一段<br>ps:以下为hexo 2.8x的配置方法,不适用于3.0<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">  <span class=\"attribute\">type</span>: github</div><div class=\"line\">  <span class=\"attribute\">repo</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/Jackroyal/Jackroyal.github.io.git</span></div><div class=\"line\">  <span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure></p>\n<p><em>update 2015-06-16:</em><br>现在hexo由2.8升级到3.0了,按照上面的方式安装,你的hexo版本是hexo 3.0,3.0的这段代码的设置内容如下:<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">  <span class=\"attribute\">type</span>: git</div><div class=\"line\">  <span class=\"attribute\">repo</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/Jackroyal/Jackroyal.github.io.git</span></div><div class=\"line\">  <span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure></p>\n<p>照着我的这个格式修改就好了,把我里面的用户名替换成你的.<br>至此基本完成所有搭建步骤.</p>\n<h1 id=\"上传\"><a href=\"#上传\" class=\"headerlink\" title=\"上传\"></a>上传</h1><p>我们开始上传项目的代码,再重复一次,我一直以来用的工具都是<em>Github for windows</em>自带的Bash,所以我没有配置SSH,如果你用的windows自带的终端或者其他比如msysgit,可能需要配置SSH,不然无法使用Github(点击<a href=\"https://help.github.com/articles/generating-ssh-keys/\" title=\"https://help.github.com/articles/generating-ssh-keys/\"><code>这里</code></a>查看官方教程).<br>我们输入以下命令<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">hexo g</div><div class=\"line\">hexo d</span></div></pre></td></tr></table></figure></p>\n<p>或者偷个懒<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">hexo d -g</span></div></pre></td></tr></table></figure></p>\n<p>ok,现在就可以去看看你的个人主页了,逼格满满有木有.</p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>我的中间出过一些问题:</p>\n<ol>\n<li>我的<code>hexo d</code>的时候出错,可以尝试手动删除<code>.deploy</code>文件夹,然后执行<code>hexo clean</code>还有可能出现的情况是,<code>deploy</code>没错但是一直没有提示<code>deploy done</code>,那就是骚年,你访问Github网速太慢</li>\n<li>我<code>deploy d</code>成功以后,在Github里面已经看到生成的页面了,访问<a href=\"http://jackroyal.github.io\">http://jackroyal.github.io</a>或者<a href=\"https://jackroyal.github.io\">https://jackroyal.github.io</a>一直报404的错误,这种时候等一等就好了,一般等几分钟.如果一直不好那就给官方发个邮件,他们很快会回复你的,有什么问题说清楚就行.<h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1>这里，要感谢我最亲爱的笨笨，是她给我测试和反馈的<a href=\"http://huirong.github.io\">http://huirong.github.io</a></li>\n</ol>"},{"title":"html5在ie中遇到的那些坑","date":"2015-05-15T15:19:43.000Z","_content":"这段时间,笨笨找了个活儿,做一个页面,能够适配所有的主流浏览器,包括pc,平板和手机等终端(这和当年某刘提的要求一样啊).\n我第一个想到的是bootstrap,可惜这货太大了,我只是几个简单的页面,没必要用这么大体量的东西.\n搜索一番以后,我找到了我的解决方案,media query,支付宝也是这么解决的.\n<!-- more -->\n# 前提条件\n以下所给出的例子,都是html5的页面,不合适html4.0的页面,也就是说你的头部必须是\n`<!DOCTYPE html>`才行,如果是`<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">`,是不行的,要仔细看清楚哈.\n下面就来罗列一下,这次经过的那些坑:\n# 1  自动适配终端屏幕宽度\n```\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\">\n```\ncontent属性值 :\n     width:可视区域的宽度，值可为数字或关键词device-width\n     height:同width\n     intial-scale:页面首次被显示是可视区域的缩放级别，取值1.0则页面按实际尺寸显示，无任何缩放\n     maximum-scale=1.0, minimum-scale=1.0;可视区域的缩放级别，\n              maximum-scale用户可将页面放大的程序，1.0将禁止用户放大到实际尺寸之上。\n     user-scalable:是否可对页面进行缩放，no 禁止缩放\n\n# 2  使ie6-8支持html5的元素\n```\n<!-- HTML5 shim, for IE6-8 support of HTML5 elements -->\n<!--[if lt IE 9]>\n<script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n<![endif]-->\n```\n以上代码,顾名思义,当ie的版本是9一下的时候,加载html5.js这个文件(建议最好下载下来在本地调用),他是用来帮助ie6-8支持html元素的.\n\n# 3  ie10以下的版本不支持placeholder(不完美解决)\nplaceholder是html5里面才有的东东,ie8不支持就算了,ie9都不支持,伤不起.这个没办法,只能用js去写,网上有很多类似的东西,不过不是很好用,我找到的都不完美.\n```\n(function($) {\n  /**\n   * 没有开花的树\n   * http://blog.csdn.net/mycwq/\n   * 2012/11/28 15:12\n   */\n\n  var placeholderfriend = {\n    focus: function(s) {\n      s = $(s).hide().prev().show().focus();\n      var idValue = s.attr(\"id\");\n      if (idValue) {\n        s.attr(\"id\", idValue.replace(\"placeholderfriend\", \"\"));\n      }\n      var clsValue = s.attr(\"class\");\n      if (clsValue) {\n        s.attr(\"class\", clsValue.replace(\"placeholderfriend\", \"\"));\n      }\n    }\n  }\n\n  //判断是否支持placeholder\n  function isPlaceholer() {\n    var input = document.createElement('input');\n    return \"placeholder\" in input;\n  }\n  //不支持的代码\n  if (!isPlaceholer()) {\n    $(function() {\n\n      var form = $(this);\n\n      //遍历所有文本框，添加placeholder模拟事件\n      var elements = form.find(\"input[type='text'][placeholder]\");\n      elements.each(function() {\n        var s = $(this);\n        var pValue = s.attr(\"placeholder\");\n        var sValue = s.val();\n        if (pValue) {\n          if (sValue == '') {\n            s.val(pValue);\n          }\n        }\n      });\n\n      elements.focus(function() {\n        var s = $(this);\n        var pValue = s.attr(\"placeholder\");\n        var sValue = s.val();\n        if (sValue && pValue) {\n          if (sValue == pValue) {\n            s.val('');\n          }\n        }\n      });\n\n      elements.blur(function() {\n        var s = $(this);\n        var pValue = s.attr(\"placeholder\");\n        var sValue = s.val();\n        if (!sValue) {\n          s.val(pValue);\n        }\n      });\n\n      //遍历所有密码框，添加placeholder模拟事件\n      var elementsPass = form.find(\"input[type='password'][placeholder]\");\n      elementsPass.each(function(i) {\n        var s = $(this);\n        var pValue = s.attr(\"placeholder\");\n        var sValue = s.val();\n        if (pValue) {\n          if (sValue == '') {\n            //DOM不支持type的修改，需要复制密码框属性，生成新的DOM\n            var html = this.outerHTML || \"\";\n            html = html.replace(/\\s*type=(['\"])?password\\1/gi, \" type=text placeholderfriend\")\n              .replace(/\\s*(?:value|on[a-z]+|name)(=(['\"])?\\S*\\1)?/gi, \" \")\n              .replace(/\\s*placeholderfriend/, \" placeholderfriend value='\" + pValue\n              + \"' \" + \"onfocus='placeholderfriendfocus(this);' \");\n            var idValue = s.attr(\"id\");\n            if (idValue) {\n              s.attr(\"id\", idValue + \"placeholderfriend\");\n            }\n            var clsValue = s.attr(\"class\");\n            if (clsValue) {\n              s.attr(\"class\", clsValue + \"placeholderfriend\");\n            }\n            s.hide();\n            s.after(html);\n          }\n        }\n      });\n\n      elementsPass.blur(function() {\n        var s = $(this);\n        var sValue = s.val();\n        if (sValue == '') {\n          var idValue = s.attr(\"id\");\n          if (idValue) {\n            s.attr(\"id\", idValue + \"placeholderfriend\");\n          }\n          var clsValue = s.attr(\"class\");\n          if (clsValue) {\n            s.attr(\"class\", clsValue + \"placeholderfriend\");\n          }\n          s.hide().next().show();\n        }\n      });\n\n    });\n  }\n  window.placeholderfriendfocus = placeholderfriend.focus;\n})(jQuery);\n```\n我最终选择这段代码,他能够在ie的各版本中正常运行,支持`text`和`password`标签.\n唯一的不足是,你直接点提交,你的text里面会有内容,内容就是placeholder中设置的提示内容.\n# 4  background-size在ie9一下不支持\nbackground-size属性是用来让背景图片平铺的.不过ie9一下并不支持这个属性,我们使用滤镜来实现平铺的效果,示例代码如下.\n```\nbackground-size: cover;\n    filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='./assets/images/01.png', sizingMethod='scale')\\9;\n```\n需要注意的是,这里的图片路径是相对于html文件的,不是css的路径,如果设置了没效果,先检查下你的路径.\n# 5  input输入框 光标不居中\n这个问题来自于魅族手机,还有老大难的ie6-8的测试中.\n解决方法是设置`height`和`line-height`等高,没那么简单,这里有技巧的\n```css\n    line-height: normal;/*这行代码解决了魅族手机中的不居中问题*/\n    line-height: 42px\\9;/*这行css代码的含义是ie9以下设置line-height为42px*/\n```\n# 6  opacity的继承问题\n```css\n<div id='a' style=\"\">\n    <div id='b'>\n    hello moto\n    </div>\n</div>\n```\n\n如果我们给父div设置了一个`opacity`为0.1,即使我们给子div设置`opacity`为1,也是不管用的,如图\n![未设置父div的opacity之前](http://ww1.sinaimg.cn/large/692869a3gw1es5fm0jafhj20iv0ecq46.jpg)\n设置父div的`opacity`之后\n![设置父div的opacity之后](http://ww4.sinaimg.cn/large/692869a3gw1es5fnsk3pvj20hy0fdwfm.jpg)\n我们可以清楚看到子div受到了影响.\n解决办法:解除父子关系,把子div从父div中挪出来\n\n# 7  border-radius在ie9以下不支持\n输入框等其他地方用到圆角的话,在老版本ie中果断是没有支持的.\n我们需要用hack的方式[pie](http://css3pie.com/),去实现border-radius和box-shadow等功能.加入pie以后的css代码如下:\n```\n    -moz-border-radius: 6px;\n    -webkit-border-radius: 6px;\n    border-radius: 6px;\n    behavior: url(assets/css/pie.htc);/*这一行是核心*/\n```\n缺点:设置的border-radius四角的设置值都是相同的\n\n# 8 css递进关系\n挖坑,以后填\n\n\nps:晚安,亲爱的\n\n\n\n# 参考文献\n1 [meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\" 解释](http://www.cnblogs.com/yuzhongwusan/p/4184923.html)\n2 [pie用hack方式在ie中实现border-radius](http://css3pie.com/)\n","source":"_posts/holes-in-ie6-about-html5.md","raw":"title: html5在ie中遇到的那些坑\ndate: 2015-05-15 23:19:43\ntags:\n- 前端\n- css\n- html5\n- ie\n- 兼容性\ncategories:\n- 前端\n---\n这段时间,笨笨找了个活儿,做一个页面,能够适配所有的主流浏览器,包括pc,平板和手机等终端(这和当年某刘提的要求一样啊).\n我第一个想到的是bootstrap,可惜这货太大了,我只是几个简单的页面,没必要用这么大体量的东西.\n搜索一番以后,我找到了我的解决方案,media query,支付宝也是这么解决的.\n<!-- more -->\n# 前提条件\n以下所给出的例子,都是html5的页面,不合适html4.0的页面,也就是说你的头部必须是\n`<!DOCTYPE html>`才行,如果是`<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">`,是不行的,要仔细看清楚哈.\n下面就来罗列一下,这次经过的那些坑:\n# 1  自动适配终端屏幕宽度\n```\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\">\n```\ncontent属性值 :\n     width:可视区域的宽度，值可为数字或关键词device-width\n     height:同width\n     intial-scale:页面首次被显示是可视区域的缩放级别，取值1.0则页面按实际尺寸显示，无任何缩放\n     maximum-scale=1.0, minimum-scale=1.0;可视区域的缩放级别，\n              maximum-scale用户可将页面放大的程序，1.0将禁止用户放大到实际尺寸之上。\n     user-scalable:是否可对页面进行缩放，no 禁止缩放\n\n# 2  使ie6-8支持html5的元素\n```\n<!-- HTML5 shim, for IE6-8 support of HTML5 elements -->\n<!--[if lt IE 9]>\n<script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n<![endif]-->\n```\n以上代码,顾名思义,当ie的版本是9一下的时候,加载html5.js这个文件(建议最好下载下来在本地调用),他是用来帮助ie6-8支持html元素的.\n\n# 3  ie10以下的版本不支持placeholder(不完美解决)\nplaceholder是html5里面才有的东东,ie8不支持就算了,ie9都不支持,伤不起.这个没办法,只能用js去写,网上有很多类似的东西,不过不是很好用,我找到的都不完美.\n```\n(function($) {\n  /**\n   * 没有开花的树\n   * http://blog.csdn.net/mycwq/\n   * 2012/11/28 15:12\n   */\n\n  var placeholderfriend = {\n    focus: function(s) {\n      s = $(s).hide().prev().show().focus();\n      var idValue = s.attr(\"id\");\n      if (idValue) {\n        s.attr(\"id\", idValue.replace(\"placeholderfriend\", \"\"));\n      }\n      var clsValue = s.attr(\"class\");\n      if (clsValue) {\n        s.attr(\"class\", clsValue.replace(\"placeholderfriend\", \"\"));\n      }\n    }\n  }\n\n  //判断是否支持placeholder\n  function isPlaceholer() {\n    var input = document.createElement('input');\n    return \"placeholder\" in input;\n  }\n  //不支持的代码\n  if (!isPlaceholer()) {\n    $(function() {\n\n      var form = $(this);\n\n      //遍历所有文本框，添加placeholder模拟事件\n      var elements = form.find(\"input[type='text'][placeholder]\");\n      elements.each(function() {\n        var s = $(this);\n        var pValue = s.attr(\"placeholder\");\n        var sValue = s.val();\n        if (pValue) {\n          if (sValue == '') {\n            s.val(pValue);\n          }\n        }\n      });\n\n      elements.focus(function() {\n        var s = $(this);\n        var pValue = s.attr(\"placeholder\");\n        var sValue = s.val();\n        if (sValue && pValue) {\n          if (sValue == pValue) {\n            s.val('');\n          }\n        }\n      });\n\n      elements.blur(function() {\n        var s = $(this);\n        var pValue = s.attr(\"placeholder\");\n        var sValue = s.val();\n        if (!sValue) {\n          s.val(pValue);\n        }\n      });\n\n      //遍历所有密码框，添加placeholder模拟事件\n      var elementsPass = form.find(\"input[type='password'][placeholder]\");\n      elementsPass.each(function(i) {\n        var s = $(this);\n        var pValue = s.attr(\"placeholder\");\n        var sValue = s.val();\n        if (pValue) {\n          if (sValue == '') {\n            //DOM不支持type的修改，需要复制密码框属性，生成新的DOM\n            var html = this.outerHTML || \"\";\n            html = html.replace(/\\s*type=(['\"])?password\\1/gi, \" type=text placeholderfriend\")\n              .replace(/\\s*(?:value|on[a-z]+|name)(=(['\"])?\\S*\\1)?/gi, \" \")\n              .replace(/\\s*placeholderfriend/, \" placeholderfriend value='\" + pValue\n              + \"' \" + \"onfocus='placeholderfriendfocus(this);' \");\n            var idValue = s.attr(\"id\");\n            if (idValue) {\n              s.attr(\"id\", idValue + \"placeholderfriend\");\n            }\n            var clsValue = s.attr(\"class\");\n            if (clsValue) {\n              s.attr(\"class\", clsValue + \"placeholderfriend\");\n            }\n            s.hide();\n            s.after(html);\n          }\n        }\n      });\n\n      elementsPass.blur(function() {\n        var s = $(this);\n        var sValue = s.val();\n        if (sValue == '') {\n          var idValue = s.attr(\"id\");\n          if (idValue) {\n            s.attr(\"id\", idValue + \"placeholderfriend\");\n          }\n          var clsValue = s.attr(\"class\");\n          if (clsValue) {\n            s.attr(\"class\", clsValue + \"placeholderfriend\");\n          }\n          s.hide().next().show();\n        }\n      });\n\n    });\n  }\n  window.placeholderfriendfocus = placeholderfriend.focus;\n})(jQuery);\n```\n我最终选择这段代码,他能够在ie的各版本中正常运行,支持`text`和`password`标签.\n唯一的不足是,你直接点提交,你的text里面会有内容,内容就是placeholder中设置的提示内容.\n# 4  background-size在ie9一下不支持\nbackground-size属性是用来让背景图片平铺的.不过ie9一下并不支持这个属性,我们使用滤镜来实现平铺的效果,示例代码如下.\n```\nbackground-size: cover;\n    filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='./assets/images/01.png', sizingMethod='scale')\\9;\n```\n需要注意的是,这里的图片路径是相对于html文件的,不是css的路径,如果设置了没效果,先检查下你的路径.\n# 5  input输入框 光标不居中\n这个问题来自于魅族手机,还有老大难的ie6-8的测试中.\n解决方法是设置`height`和`line-height`等高,没那么简单,这里有技巧的\n```css\n    line-height: normal;/*这行代码解决了魅族手机中的不居中问题*/\n    line-height: 42px\\9;/*这行css代码的含义是ie9以下设置line-height为42px*/\n```\n# 6  opacity的继承问题\n```css\n<div id='a' style=\"\">\n    <div id='b'>\n    hello moto\n    </div>\n</div>\n```\n\n如果我们给父div设置了一个`opacity`为0.1,即使我们给子div设置`opacity`为1,也是不管用的,如图\n![未设置父div的opacity之前](http://ww1.sinaimg.cn/large/692869a3gw1es5fm0jafhj20iv0ecq46.jpg)\n设置父div的`opacity`之后\n![设置父div的opacity之后](http://ww4.sinaimg.cn/large/692869a3gw1es5fnsk3pvj20hy0fdwfm.jpg)\n我们可以清楚看到子div受到了影响.\n解决办法:解除父子关系,把子div从父div中挪出来\n\n# 7  border-radius在ie9以下不支持\n输入框等其他地方用到圆角的话,在老版本ie中果断是没有支持的.\n我们需要用hack的方式[pie](http://css3pie.com/),去实现border-radius和box-shadow等功能.加入pie以后的css代码如下:\n```\n    -moz-border-radius: 6px;\n    -webkit-border-radius: 6px;\n    border-radius: 6px;\n    behavior: url(assets/css/pie.htc);/*这一行是核心*/\n```\n缺点:设置的border-radius四角的设置值都是相同的\n\n# 8 css递进关系\n挖坑,以后填\n\n\nps:晚安,亲爱的\n\n\n\n# 参考文献\n1 [meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\" 解释](http://www.cnblogs.com/yuzhongwusan/p/4184923.html)\n2 [pie用hack方式在ie中实现border-radius](http://css3pie.com/)\n","slug":"holes-in-ie6-about-html5","published":1,"updated":"2015-10-29T06:08:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yp6001ax8cdbv9kwxl6","content":"<p>这段时间,笨笨找了个活儿,做一个页面,能够适配所有的主流浏览器,包括pc,平板和手机等终端(这和当年某刘提的要求一样啊).<br>我第一个想到的是bootstrap,可惜这货太大了,我只是几个简单的页面,没必要用这么大体量的东西.<br>搜索一番以后,我找到了我的解决方案,media query,支付宝也是这么解决的.<br><a id=\"more\"></a></p>\n<h1 id=\"前提条件\"><a href=\"#前提条件\" class=\"headerlink\" title=\"前提条件\"></a>前提条件</h1><p>以下所给出的例子,都是html5的页面,不合适html4.0的页面,也就是说你的头部必须是<br><code>&lt;!DOCTYPE html&gt;</code>才行,如果是<code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</code>,是不行的,要仔细看清楚哈.<br>下面就来罗列一下,这次经过的那些坑:</p>\n<h1 id=\"1-自动适配终端屏幕宽度\"><a href=\"#1-自动适配终端屏幕宽度\" class=\"headerlink\" title=\"1  自动适配终端屏幕宽度\"></a>1  自动适配终端屏幕宽度</h1><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;meta <span class=\"attr\">name=\"viewport\"</span> <span class=\"attr\">content=\"width=device-width,</span> <span class=\"attr\">initial-scale=1,</span> <span class=\"attr\">maximum-scale=1,</span> <span class=\"attr\">user-scalable=no\"&gt;</span></div></pre></td></tr></table></figure>\n<p>content属性值 :<br>     width:可视区域的宽度，值可为数字或关键词device-width<br>     height:同width<br>     intial-scale:页面首次被显示是可视区域的缩放级别，取值1.0则页面按实际尺寸显示，无任何缩放<br>     maximum-scale=1.0, minimum-scale=1.0;可视区域的缩放级别，<br>              maximum-scale用户可将页面放大的程序，1.0将禁止用户放大到实际尺寸之上。<br>     user-scalable:是否可对页面进行缩放，no 禁止缩放</p>\n<h1 id=\"2-使ie6-8支持html5的元素\"><a href=\"#2-使ie6-8支持html5的元素\" class=\"headerlink\" title=\"2  使ie6-8支持html5的元素\"></a>2  使ie6-8支持html5的元素</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- HTML5 shim, for IE6-8 support of HTML5 elements --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--[if lt IE 9]&gt;</span></div><div class=\"line\">&lt;script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"&gt;&lt;/script&gt;</div><div class=\"line\">&lt;![endif]--&gt;</div></pre></td></tr></table></figure>\n<p>以上代码,顾名思义,当ie的版本是9一下的时候,加载html5.js这个文件(建议最好下载下来在本地调用),他是用来帮助ie6-8支持html元素的.</p>\n<h1 id=\"3-ie10以下的版本不支持placeholder-不完美解决\"><a href=\"#3-ie10以下的版本不支持placeholder-不完美解决\" class=\"headerlink\" title=\"3  ie10以下的版本不支持placeholder(不完美解决)\"></a>3  ie10以下的版本不支持placeholder(不完美解决)</h1><p>placeholder是html5里面才有的东东,ie8不支持就算了,ie9都不支持,伤不起.这个没办法,只能用js去写,网上有很多类似的东西,不过不是很好用,我找到的都不完美.<br><figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"name\">function</span>($) &#123;</div><div class=\"line\">  /**</div><div class=\"line\">   * 没有开花的树</div><div class=\"line\">   * http://blog.csdn.net/mycwq/</div><div class=\"line\">   * <span class=\"number\">2012</span>/<span class=\"number\">11</span>/<span class=\"number\">28</span> <span class=\"number\">15</span>:<span class=\"number\">12</span></div><div class=\"line\">   */</div><div class=\"line\"></div><div class=\"line\">  var placeholderfriend = &#123;</div><div class=\"line\">    focus: function(<span class=\"name\">s</span>) &#123;</div><div class=\"line\">      s = $(<span class=\"name\">s</span>).hide().prev().show().focus()<span class=\"comment\">;</span></div><div class=\"line\">      var idValue = s.attr(<span class=\"string\">\"id\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">      if (<span class=\"name\">idValue</span>) &#123;</div><div class=\"line\">        s.attr(<span class=\"string\">\"id\"</span>, idValue.replace(<span class=\"string\">\"placeholderfriend\"</span>, <span class=\"string\">\"\"</span>))<span class=\"comment\">;</span></div><div class=\"line\">      &#125;</div><div class=\"line\">      var clsValue = s.attr(<span class=\"string\">\"class\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">      if (<span class=\"name\">clsValue</span>) &#123;</div><div class=\"line\">        s.attr(<span class=\"string\">\"class\"</span>, clsValue.replace(<span class=\"string\">\"placeholderfriend\"</span>, <span class=\"string\">\"\"</span>))<span class=\"comment\">;</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  //判断是否支持placeholder</div><div class=\"line\">  function isPlaceholer() &#123;</div><div class=\"line\">    var input = document.createElement(<span class=\"name\">'input'</span>)<span class=\"comment\">;</span></div><div class=\"line\">    return <span class=\"string\">\"placeholder\"</span> in input;</div><div class=\"line\">  &#125;</div><div class=\"line\">  //不支持的代码</div><div class=\"line\">  if (<span class=\"name\">!isPlaceholer</span>()) &#123;</div><div class=\"line\">    $(<span class=\"name\">function</span>() &#123;</div><div class=\"line\"></div><div class=\"line\">      var form = $(<span class=\"name\">this</span>)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">      //遍历所有文本框，添加placeholder模拟事件</div><div class=\"line\">      var elements = form.find(<span class=\"string\">\"input[type='text'][placeholder]\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">      elements.each(<span class=\"name\">function</span>() &#123;</div><div class=\"line\">        var s = $(<span class=\"name\">this</span>)<span class=\"comment\">;</span></div><div class=\"line\">        var pValue = s.attr(<span class=\"string\">\"placeholder\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        var sValue = s.val()<span class=\"comment\">;</span></div><div class=\"line\">        if (<span class=\"name\">pValue</span>) &#123;</div><div class=\"line\">          if (<span class=\"name\">sValue</span> == '') &#123;</div><div class=\"line\">            s.val(<span class=\"name\">pValue</span>)<span class=\"comment\">;</span></div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">      elements.focus(<span class=\"name\">function</span>() &#123;</div><div class=\"line\">        var s = $(<span class=\"name\">this</span>)<span class=\"comment\">;</span></div><div class=\"line\">        var pValue = s.attr(<span class=\"string\">\"placeholder\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        var sValue = s.val()<span class=\"comment\">;</span></div><div class=\"line\">        if (<span class=\"name\">sValue</span> &amp;&amp; pValue) &#123;</div><div class=\"line\">          if (<span class=\"name\">sValue</span> == pValue) &#123;</div><div class=\"line\">            s.val(<span class=\"name\">''</span>)<span class=\"comment\">;</span></div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">      elements.blur(<span class=\"name\">function</span>() &#123;</div><div class=\"line\">        var s = $(<span class=\"name\">this</span>)<span class=\"comment\">;</span></div><div class=\"line\">        var pValue = s.attr(<span class=\"string\">\"placeholder\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        var sValue = s.val()<span class=\"comment\">;</span></div><div class=\"line\">        if (<span class=\"name\">!sValue</span>) &#123;</div><div class=\"line\">          s.val(<span class=\"name\">pValue</span>)<span class=\"comment\">;</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">      //遍历所有密码框，添加placeholder模拟事件</div><div class=\"line\">      var elementsPass = form.find(<span class=\"string\">\"input[type='password'][placeholder]\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">      elementsPass.each(<span class=\"name\">function</span>(<span class=\"name\">i</span>) &#123;</div><div class=\"line\">        var s = $(<span class=\"name\">this</span>)<span class=\"comment\">;</span></div><div class=\"line\">        var pValue = s.attr(<span class=\"string\">\"placeholder\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        var sValue = s.val()<span class=\"comment\">;</span></div><div class=\"line\">        if (<span class=\"name\">pValue</span>) &#123;</div><div class=\"line\">          if (<span class=\"name\">sValue</span> == '') &#123;</div><div class=\"line\">            //DOM不支持type的修改，需要复制密码框属性，生成新的DOM</div><div class=\"line\">            var html = this.outerHTML || <span class=\"string\">\"\"</span><span class=\"comment\">;</span></div><div class=\"line\">            html = html.replace(/\\s*type=(['<span class=\"string\">\"])?password\\1/gi, \"</span> type=text placeholderfriend<span class=\"string\">\")</span></div><div class=\"line\">              .replace(/\\s*(?:value|on[a-z]+|name)(=(['\"])?\\S*\\<span class=\"number\">1</span>)?/gi, <span class=\"string\">\" \"</span>)</div><div class=\"line\">              .replace(/\\s*placeholderfriend/, <span class=\"string\">\" placeholderfriend value='\"</span> + pValue</div><div class=\"line\">              + <span class=\"string\">\"' \"</span> + <span class=\"string\">\"onfocus='placeholderfriendfocus(this);' \"</span>)<span class=\"comment\">;</span></div><div class=\"line\">            var idValue = s.attr(<span class=\"string\">\"id\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">            if (<span class=\"name\">idValue</span>) &#123;</div><div class=\"line\">              s.attr(<span class=\"string\">\"id\"</span>, idValue + <span class=\"string\">\"placeholderfriend\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            var clsValue = s.attr(<span class=\"string\">\"class\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">            if (<span class=\"name\">clsValue</span>) &#123;</div><div class=\"line\">              s.attr(<span class=\"string\">\"class\"</span>, clsValue + <span class=\"string\">\"placeholderfriend\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            s.hide()<span class=\"comment\">;</span></div><div class=\"line\">            s.after(<span class=\"name\">html</span>)<span class=\"comment\">;</span></div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">      elementsPass.blur(<span class=\"name\">function</span>() &#123;</div><div class=\"line\">        var s = $(<span class=\"name\">this</span>)<span class=\"comment\">;</span></div><div class=\"line\">        var sValue = s.val()<span class=\"comment\">;</span></div><div class=\"line\">        if (<span class=\"name\">sValue</span> == '') &#123;</div><div class=\"line\">          var idValue = s.attr(<span class=\"string\">\"id\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">          if (<span class=\"name\">idValue</span>) &#123;</div><div class=\"line\">            s.attr(<span class=\"string\">\"id\"</span>, idValue + <span class=\"string\">\"placeholderfriend\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">          &#125;</div><div class=\"line\">          var clsValue = s.attr(<span class=\"string\">\"class\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">          if (<span class=\"name\">clsValue</span>) &#123;</div><div class=\"line\">            s.attr(<span class=\"string\">\"class\"</span>, clsValue + <span class=\"string\">\"placeholderfriend\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">          &#125;</div><div class=\"line\">          s.hide().next().show()<span class=\"comment\">;</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  window.placeholderfriendfocus = placeholderfriend.focus;</div><div class=\"line\">&#125;)(<span class=\"name\">jQuery</span>)<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p>我最终选择这段代码,他能够在ie的各版本中正常运行,支持<code>text</code>和<code>password</code>标签.<br>唯一的不足是,你直接点提交,你的text里面会有内容,内容就是placeholder中设置的提示内容.</p>\n<h1 id=\"4-background-size在ie9一下不支持\"><a href=\"#4-background-size在ie9一下不支持\" class=\"headerlink\" title=\"4  background-size在ie9一下不支持\"></a>4  background-size在ie9一下不支持</h1><p>background-size属性是用来让背景图片平铺的.不过ie9一下并不支持这个属性,我们使用滤镜来实现平铺的效果,示例代码如下.<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">background-size</span>: cover;</div><div class=\"line\">    <span class=\"attribute\">filter</span>:progid:DXImageTransform.Microsoft.AlphaImageLoader(src=<span class=\"string\">'./assets/images/01.png'</span>, sizingMethod=<span class=\"string\">'scale'</span>)\\<span class=\"number\">9</span>;</div></pre></td></tr></table></figure></p>\n<p>需要注意的是,这里的图片路径是相对于html文件的,不是css的路径,如果设置了没效果,先检查下你的路径.</p>\n<h1 id=\"5-input输入框-光标不居中\"><a href=\"#5-input输入框-光标不居中\" class=\"headerlink\" title=\"5  input输入框 光标不居中\"></a>5  input输入框 光标不居中</h1><p>这个问题来自于魅族手机,还有老大难的ie6-8的测试中.<br>解决方法是设置<code>height</code>和<code>line-height</code>等高,没那么简单,这里有技巧的<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">line-height</span>: <span class=\"selector-tag\">normal</span>;<span class=\"comment\">/*这行代码解决了魅族手机中的不居中问题*/</span></div><div class=\"line\"><span class=\"selector-tag\">line-height</span>: 42<span class=\"selector-tag\">px</span>\\9;<span class=\"comment\">/*这行css代码的含义是ie9以下设置line-height为42px*/</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"6-opacity的继承问题\"><a href=\"#6-opacity的继承问题\" class=\"headerlink\" title=\"6  opacity的继承问题\"></a>6  opacity的继承问题</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id='a' style=\"\"&gt;</div><div class=\"line\">    &lt;div id='b'&gt;</div><div class=\"line\">    hello moto</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>如果我们给父div设置了一个<code>opacity</code>为0.1,即使我们给子div设置<code>opacity</code>为1,也是不管用的,如图<br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1es5fm0jafhj20iv0ecq46.jpg\" alt=\"未设置父div的opacity之前\"><br>设置父div的<code>opacity</code>之后<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1es5fnsk3pvj20hy0fdwfm.jpg\" alt=\"设置父div的opacity之后\"><br>我们可以清楚看到子div受到了影响.<br>解决办法:解除父子关系,把子div从父div中挪出来</p>\n<h1 id=\"7-border-radius在ie9以下不支持\"><a href=\"#7-border-radius在ie9以下不支持\" class=\"headerlink\" title=\"7  border-radius在ie9以下不支持\"></a>7  border-radius在ie9以下不支持</h1><p>输入框等其他地方用到圆角的话,在老版本ie中果断是没有支持的.<br>我们需要用hack的方式<a href=\"http://css3pie.com/\" target=\"_blank\" rel=\"external\">pie</a>,去实现border-radius和box-shadow等功能.加入pie以后的css代码如下:<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">-moz-<span class=\"attribute\">border-radius</span>: <span class=\"number\">6px</span>;</div><div class=\"line\">-webkit-<span class=\"attribute\">border-radius</span>: <span class=\"number\">6px</span>;</div><div class=\"line\"><span class=\"attribute\">border-radius</span>: <span class=\"number\">6px</span>;</div><div class=\"line\">behavior: url(assets/css/pie.htc);<span class=\"comment\">/*这一行是核心*/</span></div></pre></td></tr></table></figure></p>\n<p>缺点:设置的border-radius四角的设置值都是相同的</p>\n<h1 id=\"8-css递进关系\"><a href=\"#8-css递进关系\" class=\"headerlink\" title=\"8 css递进关系\"></a>8 css递进关系</h1><p>挖坑,以后填</p>\n<p>ps:晚安,亲爱的</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"http://www.cnblogs.com/yuzhongwusan/p/4184923.html\" target=\"_blank\" rel=\"external\">meta name=”viewport” content=”width=device-width,initial-scale=1.0” 解释</a><br>2 <a href=\"http://css3pie.com/\" target=\"_blank\" rel=\"external\">pie用hack方式在ie中实现border-radius</a></p>\n","excerpt":"<p>这段时间,笨笨找了个活儿,做一个页面,能够适配所有的主流浏览器,包括pc,平板和手机等终端(这和当年某刘提的要求一样啊).<br>我第一个想到的是bootstrap,可惜这货太大了,我只是几个简单的页面,没必要用这么大体量的东西.<br>搜索一番以后,我找到了我的解决方案,media query,支付宝也是这么解决的.<br>","more":"</p>\n<h1 id=\"前提条件\"><a href=\"#前提条件\" class=\"headerlink\" title=\"前提条件\"></a>前提条件</h1><p>以下所给出的例子,都是html5的页面,不合适html4.0的页面,也就是说你的头部必须是<br><code>&lt;!DOCTYPE html&gt;</code>才行,如果是<code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</code>,是不行的,要仔细看清楚哈.<br>下面就来罗列一下,这次经过的那些坑:</p>\n<h1 id=\"1-自动适配终端屏幕宽度\"><a href=\"#1-自动适配终端屏幕宽度\" class=\"headerlink\" title=\"1  自动适配终端屏幕宽度\"></a>1  自动适配终端屏幕宽度</h1><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;meta <span class=\"attr\">name=\"viewport\"</span> <span class=\"attr\">content=\"width=device-width,</span> <span class=\"attr\">initial-scale=1,</span> <span class=\"attr\">maximum-scale=1,</span> <span class=\"attr\">user-scalable=no\"&gt;</span></div></pre></td></tr></table></figure>\n<p>content属性值 :<br>     width:可视区域的宽度，值可为数字或关键词device-width<br>     height:同width<br>     intial-scale:页面首次被显示是可视区域的缩放级别，取值1.0则页面按实际尺寸显示，无任何缩放<br>     maximum-scale=1.0, minimum-scale=1.0;可视区域的缩放级别，<br>              maximum-scale用户可将页面放大的程序，1.0将禁止用户放大到实际尺寸之上。<br>     user-scalable:是否可对页面进行缩放，no 禁止缩放</p>\n<h1 id=\"2-使ie6-8支持html5的元素\"><a href=\"#2-使ie6-8支持html5的元素\" class=\"headerlink\" title=\"2  使ie6-8支持html5的元素\"></a>2  使ie6-8支持html5的元素</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- HTML5 shim, for IE6-8 support of HTML5 elements --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--[if lt IE 9]&gt;</div><div class=\"line\">&lt;script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"&gt;&lt;/script&gt;</div><div class=\"line\">&lt;![endif]--&gt;</span></div></pre></td></tr></table></figure>\n<p>以上代码,顾名思义,当ie的版本是9一下的时候,加载html5.js这个文件(建议最好下载下来在本地调用),他是用来帮助ie6-8支持html元素的.</p>\n<h1 id=\"3-ie10以下的版本不支持placeholder-不完美解决\"><a href=\"#3-ie10以下的版本不支持placeholder-不完美解决\" class=\"headerlink\" title=\"3  ie10以下的版本不支持placeholder(不完美解决)\"></a>3  ie10以下的版本不支持placeholder(不完美解决)</h1><p>placeholder是html5里面才有的东东,ie8不支持就算了,ie9都不支持,伤不起.这个没办法,只能用js去写,网上有很多类似的东西,不过不是很好用,我找到的都不完美.<br><figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"name\">function</span>($) &#123;</div><div class=\"line\">  /**</div><div class=\"line\">   * 没有开花的树</div><div class=\"line\">   * http://blog.csdn.net/mycwq/</div><div class=\"line\">   * <span class=\"number\">2012</span>/<span class=\"number\">11</span>/<span class=\"number\">28</span> <span class=\"number\">15</span>:<span class=\"number\">12</span></div><div class=\"line\">   */</div><div class=\"line\"></div><div class=\"line\">  var placeholderfriend = &#123;</div><div class=\"line\">    focus: function(<span class=\"name\">s</span>) &#123;</div><div class=\"line\">      s = $(<span class=\"name\">s</span>).hide().prev().show().focus()<span class=\"comment\">;</span></div><div class=\"line\">      var idValue = s.attr(<span class=\"string\">\"id\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">      if (<span class=\"name\">idValue</span>) &#123;</div><div class=\"line\">        s.attr(<span class=\"string\">\"id\"</span>, idValue.replace(<span class=\"string\">\"placeholderfriend\"</span>, <span class=\"string\">\"\"</span>))<span class=\"comment\">;</span></div><div class=\"line\">      &#125;</div><div class=\"line\">      var clsValue = s.attr(<span class=\"string\">\"class\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">      if (<span class=\"name\">clsValue</span>) &#123;</div><div class=\"line\">        s.attr(<span class=\"string\">\"class\"</span>, clsValue.replace(<span class=\"string\">\"placeholderfriend\"</span>, <span class=\"string\">\"\"</span>))<span class=\"comment\">;</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  //判断是否支持placeholder</div><div class=\"line\">  function isPlaceholer() &#123;</div><div class=\"line\">    var input = document.createElement(<span class=\"name\">'input'</span>)<span class=\"comment\">;</span></div><div class=\"line\">    return <span class=\"string\">\"placeholder\"</span> in input;</div><div class=\"line\">  &#125;</div><div class=\"line\">  //不支持的代码</div><div class=\"line\">  if (<span class=\"name\">!isPlaceholer</span>()) &#123;</div><div class=\"line\">    $(<span class=\"name\">function</span>() &#123;</div><div class=\"line\"></div><div class=\"line\">      var form = $(<span class=\"name\">this</span>)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">      //遍历所有文本框，添加placeholder模拟事件</div><div class=\"line\">      var elements = form.find(<span class=\"string\">\"input[type='text'][placeholder]\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">      elements.each(<span class=\"name\">function</span>() &#123;</div><div class=\"line\">        var s = $(<span class=\"name\">this</span>)<span class=\"comment\">;</span></div><div class=\"line\">        var pValue = s.attr(<span class=\"string\">\"placeholder\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        var sValue = s.val()<span class=\"comment\">;</span></div><div class=\"line\">        if (<span class=\"name\">pValue</span>) &#123;</div><div class=\"line\">          if (<span class=\"name\">sValue</span> == '') &#123;</div><div class=\"line\">            s.val(<span class=\"name\">pValue</span>)<span class=\"comment\">;</span></div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">      elements.focus(<span class=\"name\">function</span>() &#123;</div><div class=\"line\">        var s = $(<span class=\"name\">this</span>)<span class=\"comment\">;</span></div><div class=\"line\">        var pValue = s.attr(<span class=\"string\">\"placeholder\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        var sValue = s.val()<span class=\"comment\">;</span></div><div class=\"line\">        if (<span class=\"name\">sValue</span> &amp;&amp; pValue) &#123;</div><div class=\"line\">          if (<span class=\"name\">sValue</span> == pValue) &#123;</div><div class=\"line\">            s.val(<span class=\"name\">''</span>)<span class=\"comment\">;</span></div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">      elements.blur(<span class=\"name\">function</span>() &#123;</div><div class=\"line\">        var s = $(<span class=\"name\">this</span>)<span class=\"comment\">;</span></div><div class=\"line\">        var pValue = s.attr(<span class=\"string\">\"placeholder\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        var sValue = s.val()<span class=\"comment\">;</span></div><div class=\"line\">        if (<span class=\"name\">!sValue</span>) &#123;</div><div class=\"line\">          s.val(<span class=\"name\">pValue</span>)<span class=\"comment\">;</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">      //遍历所有密码框，添加placeholder模拟事件</div><div class=\"line\">      var elementsPass = form.find(<span class=\"string\">\"input[type='password'][placeholder]\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">      elementsPass.each(<span class=\"name\">function</span>(<span class=\"name\">i</span>) &#123;</div><div class=\"line\">        var s = $(<span class=\"name\">this</span>)<span class=\"comment\">;</span></div><div class=\"line\">        var pValue = s.attr(<span class=\"string\">\"placeholder\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">        var sValue = s.val()<span class=\"comment\">;</span></div><div class=\"line\">        if (<span class=\"name\">pValue</span>) &#123;</div><div class=\"line\">          if (<span class=\"name\">sValue</span> == '') &#123;</div><div class=\"line\">            //DOM不支持type的修改，需要复制密码框属性，生成新的DOM</div><div class=\"line\">            var html = this.outerHTML || <span class=\"string\">\"\"</span><span class=\"comment\">;</span></div><div class=\"line\">            html = html.replace(/\\s*type=(['<span class=\"string\">\"])?password\\1/gi, \"</span> type=text placeholderfriend<span class=\"string\">\")</div><div class=\"line\">              .replace(/\\s*(?:value|on[a-z]+|name)(=(['\"</span>])?\\S*\\<span class=\"number\">1</span>)?/gi, <span class=\"string\">\" \"</span>)</div><div class=\"line\">              .replace(/\\s*placeholderfriend/, <span class=\"string\">\" placeholderfriend value='\"</span> + pValue</div><div class=\"line\">              + <span class=\"string\">\"' \"</span> + <span class=\"string\">\"onfocus='placeholderfriendfocus(this);' \"</span>)<span class=\"comment\">;</span></div><div class=\"line\">            var idValue = s.attr(<span class=\"string\">\"id\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">            if (<span class=\"name\">idValue</span>) &#123;</div><div class=\"line\">              s.attr(<span class=\"string\">\"id\"</span>, idValue + <span class=\"string\">\"placeholderfriend\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            var clsValue = s.attr(<span class=\"string\">\"class\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">            if (<span class=\"name\">clsValue</span>) &#123;</div><div class=\"line\">              s.attr(<span class=\"string\">\"class\"</span>, clsValue + <span class=\"string\">\"placeholderfriend\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            s.hide()<span class=\"comment\">;</span></div><div class=\"line\">            s.after(<span class=\"name\">html</span>)<span class=\"comment\">;</span></div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">      elementsPass.blur(<span class=\"name\">function</span>() &#123;</div><div class=\"line\">        var s = $(<span class=\"name\">this</span>)<span class=\"comment\">;</span></div><div class=\"line\">        var sValue = s.val()<span class=\"comment\">;</span></div><div class=\"line\">        if (<span class=\"name\">sValue</span> == '') &#123;</div><div class=\"line\">          var idValue = s.attr(<span class=\"string\">\"id\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">          if (<span class=\"name\">idValue</span>) &#123;</div><div class=\"line\">            s.attr(<span class=\"string\">\"id\"</span>, idValue + <span class=\"string\">\"placeholderfriend\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">          &#125;</div><div class=\"line\">          var clsValue = s.attr(<span class=\"string\">\"class\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">          if (<span class=\"name\">clsValue</span>) &#123;</div><div class=\"line\">            s.attr(<span class=\"string\">\"class\"</span>, clsValue + <span class=\"string\">\"placeholderfriend\"</span>)<span class=\"comment\">;</span></div><div class=\"line\">          &#125;</div><div class=\"line\">          s.hide().next().show()<span class=\"comment\">;</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">    &#125;)<span class=\"comment\">;</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  window.placeholderfriendfocus = placeholderfriend.focus;</div><div class=\"line\">&#125;)(<span class=\"name\">jQuery</span>)<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p>我最终选择这段代码,他能够在ie的各版本中正常运行,支持<code>text</code>和<code>password</code>标签.<br>唯一的不足是,你直接点提交,你的text里面会有内容,内容就是placeholder中设置的提示内容.</p>\n<h1 id=\"4-background-size在ie9一下不支持\"><a href=\"#4-background-size在ie9一下不支持\" class=\"headerlink\" title=\"4  background-size在ie9一下不支持\"></a>4  background-size在ie9一下不支持</h1><p>background-size属性是用来让背景图片平铺的.不过ie9一下并不支持这个属性,我们使用滤镜来实现平铺的效果,示例代码如下.<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">background-size</span>: cover;</div><div class=\"line\">    <span class=\"attribute\">filter</span>:progid:DXImageTransform.Microsoft.AlphaImageLoader(src=<span class=\"string\">'./assets/images/01.png'</span>, sizingMethod=<span class=\"string\">'scale'</span>)\\<span class=\"number\">9</span>;</div></pre></td></tr></table></figure></p>\n<p>需要注意的是,这里的图片路径是相对于html文件的,不是css的路径,如果设置了没效果,先检查下你的路径.</p>\n<h1 id=\"5-input输入框-光标不居中\"><a href=\"#5-input输入框-光标不居中\" class=\"headerlink\" title=\"5  input输入框 光标不居中\"></a>5  input输入框 光标不居中</h1><p>这个问题来自于魅族手机,还有老大难的ie6-8的测试中.<br>解决方法是设置<code>height</code>和<code>line-height</code>等高,没那么简单,这里有技巧的<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">line-height</span>: <span class=\"selector-tag\">normal</span>;<span class=\"comment\">/*这行代码解决了魅族手机中的不居中问题*/</span></div><div class=\"line\"><span class=\"selector-tag\">line-height</span>: 42<span class=\"selector-tag\">px</span>\\9;<span class=\"comment\">/*这行css代码的含义是ie9以下设置line-height为42px*/</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"6-opacity的继承问题\"><a href=\"#6-opacity的继承问题\" class=\"headerlink\" title=\"6  opacity的继承问题\"></a>6  opacity的继承问题</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id='a' style=\"\"&gt;</div><div class=\"line\">    &lt;div id='b'&gt;</div><div class=\"line\">    hello moto</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>如果我们给父div设置了一个<code>opacity</code>为0.1,即使我们给子div设置<code>opacity</code>为1,也是不管用的,如图<br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1es5fm0jafhj20iv0ecq46.jpg\" alt=\"未设置父div的opacity之前\"><br>设置父div的<code>opacity</code>之后<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1es5fnsk3pvj20hy0fdwfm.jpg\" alt=\"设置父div的opacity之后\"><br>我们可以清楚看到子div受到了影响.<br>解决办法:解除父子关系,把子div从父div中挪出来</p>\n<h1 id=\"7-border-radius在ie9以下不支持\"><a href=\"#7-border-radius在ie9以下不支持\" class=\"headerlink\" title=\"7  border-radius在ie9以下不支持\"></a>7  border-radius在ie9以下不支持</h1><p>输入框等其他地方用到圆角的话,在老版本ie中果断是没有支持的.<br>我们需要用hack的方式<a href=\"http://css3pie.com/\">pie</a>,去实现border-radius和box-shadow等功能.加入pie以后的css代码如下:<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">-moz-<span class=\"attribute\">border-radius</span>: <span class=\"number\">6px</span>;</div><div class=\"line\">-webkit-<span class=\"attribute\">border-radius</span>: <span class=\"number\">6px</span>;</div><div class=\"line\"><span class=\"attribute\">border-radius</span>: <span class=\"number\">6px</span>;</div><div class=\"line\">behavior: url(assets/css/pie.htc);<span class=\"comment\">/*这一行是核心*/</span></div></pre></td></tr></table></figure></p>\n<p>缺点:设置的border-radius四角的设置值都是相同的</p>\n<h1 id=\"8-css递进关系\"><a href=\"#8-css递进关系\" class=\"headerlink\" title=\"8 css递进关系\"></a>8 css递进关系</h1><p>挖坑,以后填</p>\n<p>ps:晚安,亲爱的</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"http://www.cnblogs.com/yuzhongwusan/p/4184923.html\">meta name=”viewport” content=”width=device-width,initial-scale=1.0” 解释</a><br>2 <a href=\"http://css3pie.com/\">pie用hack方式在ie中实现border-radius</a></p>"},{"title":"解决倒水问题","date":"2016-03-19T04:48:58.000Z","_content":"有两个容器，容积分别为A升和B升，有无限多的水，现在需要C升水。\n我们还有一个足够大的水缸，足够容纳C升水。起初它是空的，我们只能往水缸里倒入水，而不能倒出。\n可以进行的操作是：\n把一个容器灌满；\n把一个容器清空（容器里剩余的水全部倒掉，或者倒入水缸）；\n用一个容器的水倒入另外一个容器，直到倒出水的容器空或者倒入水的容器满。\n    问是否能够通过有限次操作，使得水缸最后恰好有C升水。\n<!-- more -->\n这是很经典的智力题,各种倒水,求怎么倒.\n网上有很多资料,我稍微总结下.\n\n# 1 是否有解\n是的,不是任意的ABC值都是有解的,比如用4升和6升的容器,倒出5升水,这个方案就是无解的.\n总结来说:\n```\n倒水方案有解的,充要条件是:\nC<=A+B并且\nC能被A和B的最大公约数整除\n```\n比如上面的例子,4和6的公约数是2,5不能被2整除,所以是无解的.\n具体证明过程请看文章后面的参考文献\n\n# 2 解法\n有一个很简单的思路,在AB两个容器中,假设A<B,那么我们不停地用A往B中加水,溢出的时候,就把B清空,把A中多余部分导入B中.具体流程描述如下\n```\nA%B=x\n2A%B=y\n...\n...\nnA%B=z\n```\n知道最后余数z等于C,就停止\n用一个具体的例子\n`A=5`,`B=9`,`C=7`\n```\n5%9=5\n10%9=1\n15%9=6\n20%9=2\n25%9=7\n```\n也就完成了查找\n当然这个方法不是步数最少的解法\n\n\n\n[倒水问题](http://www.acmerblog.com/pour-water-problem-5615.html)\n[欧几里得和扩展欧几里得算法](http://www.cnblogs.com/frog112111/archive/2012/08/19/2646012.html)\n[最大公约数的三种解法](http://www.cnblogs.com/drizzlecrj/archive/2007/09/14/892340.html)\n","source":"_posts/how-to-solve-the-water-problem.md","raw":"title: 解决倒水问题\ndate: 2016-03-19 12:48:58\ntags:\n- 智力题\n---\n有两个容器，容积分别为A升和B升，有无限多的水，现在需要C升水。\n我们还有一个足够大的水缸，足够容纳C升水。起初它是空的，我们只能往水缸里倒入水，而不能倒出。\n可以进行的操作是：\n把一个容器灌满；\n把一个容器清空（容器里剩余的水全部倒掉，或者倒入水缸）；\n用一个容器的水倒入另外一个容器，直到倒出水的容器空或者倒入水的容器满。\n    问是否能够通过有限次操作，使得水缸最后恰好有C升水。\n<!-- more -->\n这是很经典的智力题,各种倒水,求怎么倒.\n网上有很多资料,我稍微总结下.\n\n# 1 是否有解\n是的,不是任意的ABC值都是有解的,比如用4升和6升的容器,倒出5升水,这个方案就是无解的.\n总结来说:\n```\n倒水方案有解的,充要条件是:\nC<=A+B并且\nC能被A和B的最大公约数整除\n```\n比如上面的例子,4和6的公约数是2,5不能被2整除,所以是无解的.\n具体证明过程请看文章后面的参考文献\n\n# 2 解法\n有一个很简单的思路,在AB两个容器中,假设A<B,那么我们不停地用A往B中加水,溢出的时候,就把B清空,把A中多余部分导入B中.具体流程描述如下\n```\nA%B=x\n2A%B=y\n...\n...\nnA%B=z\n```\n知道最后余数z等于C,就停止\n用一个具体的例子\n`A=5`,`B=9`,`C=7`\n```\n5%9=5\n10%9=1\n15%9=6\n20%9=2\n25%9=7\n```\n也就完成了查找\n当然这个方法不是步数最少的解法\n\n\n\n[倒水问题](http://www.acmerblog.com/pour-water-problem-5615.html)\n[欧几里得和扩展欧几里得算法](http://www.cnblogs.com/frog112111/archive/2012/08/19/2646012.html)\n[最大公约数的三种解法](http://www.cnblogs.com/drizzlecrj/archive/2007/09/14/892340.html)\n","slug":"how-to-solve-the-water-problem","published":1,"updated":"2016-03-19T07:43:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7ypa001ex8cddmenjput","content":"<p>有两个容器，容积分别为A升和B升，有无限多的水，现在需要C升水。<br>我们还有一个足够大的水缸，足够容纳C升水。起初它是空的，我们只能往水缸里倒入水，而不能倒出。<br>可以进行的操作是：<br>把一个容器灌满；<br>把一个容器清空（容器里剩余的水全部倒掉，或者倒入水缸）；<br>用一个容器的水倒入另外一个容器，直到倒出水的容器空或者倒入水的容器满。<br>    问是否能够通过有限次操作，使得水缸最后恰好有C升水。<br><a id=\"more\"></a><br>这是很经典的智力题,各种倒水,求怎么倒.<br>网上有很多资料,我稍微总结下.</p>\n<h1 id=\"1-是否有解\"><a href=\"#1-是否有解\" class=\"headerlink\" title=\"1 是否有解\"></a>1 是否有解</h1><p>是的,不是任意的ABC值都是有解的,比如用4升和6升的容器,倒出5升水,这个方案就是无解的.<br>总结来说:<br><figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">倒水方案有解的,充要条件是:</div><div class=\"line\">C&lt;=<span class=\"keyword\">A</span>+B并且</div><div class=\"line\">C能被<span class=\"keyword\">A</span>和B的最大公约数整除</div></pre></td></tr></table></figure></p>\n<p>比如上面的例子,4和6的公约数是2,5不能被2整除,所以是无解的.<br>具体证明过程请看文章后面的参考文献</p>\n<h1 id=\"2-解法\"><a href=\"#2-解法\" class=\"headerlink\" title=\"2 解法\"></a>2 解法</h1><p>有一个很简单的思路,在AB两个容器中,假设A<b,那么我们不停地用a往b中加水,溢出的时候,就把b清空,把a中多余部分导入b中.具体流程描述如下 <figure=\"\" class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">A<span class=\"comment\">%B=x</span></div><div class=\"line\"><span class=\"number\">2</span>A<span class=\"comment\">%B=y</span></div><div class=\"line\">...</div><div class=\"line\">...</div><div class=\"line\">nA<span class=\"comment\">%B=z</span></div></pre></td></tr></table></b,那么我们不停地用a往b中加水,溢出的时候,就把b清空,把a中多余部分导入b中.具体流程描述如下></p>\n<p>知道最后余数z等于C,就停止<br>用一个具体的例子<br><code>A=5</code>,<code>B=9</code>,<code>C=7</code><br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">5</span>%<span class=\"number\">9</span>=<span class=\"number\">5</span></div><div class=\"line\"><span class=\"number\">10</span>%<span class=\"number\">9</span>=<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">15</span>%<span class=\"number\">9</span>=<span class=\"number\">6</span></div><div class=\"line\"><span class=\"number\">20</span>%<span class=\"number\">9</span>=<span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">25</span>%<span class=\"number\">9</span>=<span class=\"number\">7</span></div></pre></td></tr></table></figure></p>\n<p>也就完成了查找<br>当然这个方法不是步数最少的解法</p>\n<p><a href=\"http://www.acmerblog.com/pour-water-problem-5615.html\" target=\"_blank\" rel=\"external\">倒水问题</a><br><a href=\"http://www.cnblogs.com/frog112111/archive/2012/08/19/2646012.html\" target=\"_blank\" rel=\"external\">欧几里得和扩展欧几里得算法</a><br><a href=\"http://www.cnblogs.com/drizzlecrj/archive/2007/09/14/892340.html\" target=\"_blank\" rel=\"external\">最大公约数的三种解法</a></p>\n","excerpt":"<p>有两个容器，容积分别为A升和B升，有无限多的水，现在需要C升水。<br>我们还有一个足够大的水缸，足够容纳C升水。起初它是空的，我们只能往水缸里倒入水，而不能倒出。<br>可以进行的操作是：<br>把一个容器灌满；<br>把一个容器清空（容器里剩余的水全部倒掉，或者倒入水缸）；<br>用一个容器的水倒入另外一个容器，直到倒出水的容器空或者倒入水的容器满。<br>    问是否能够通过有限次操作，使得水缸最后恰好有C升水。<br>","more":"<br>这是很经典的智力题,各种倒水,求怎么倒.<br>网上有很多资料,我稍微总结下.</p>\n<h1 id=\"1-是否有解\"><a href=\"#1-是否有解\" class=\"headerlink\" title=\"1 是否有解\"></a>1 是否有解</h1><p>是的,不是任意的ABC值都是有解的,比如用4升和6升的容器,倒出5升水,这个方案就是无解的.<br>总结来说:<br><figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">倒水方案有解的,充要条件是:</div><div class=\"line\">C&lt;=<span class=\"keyword\">A</span>+B并且</div><div class=\"line\">C能被<span class=\"keyword\">A</span>和B的最大公约数整除</div></pre></td></tr></table></figure></p>\n<p>比如上面的例子,4和6的公约数是2,5不能被2整除,所以是无解的.<br>具体证明过程请看文章后面的参考文献</p>\n<h1 id=\"2-解法\"><a href=\"#2-解法\" class=\"headerlink\" title=\"2 解法\"></a>2 解法</h1><p>有一个很简单的思路,在AB两个容器中,假设A<B,那么我们不停地用A往B中加水,溢出的时候,就把B清空,把A中多余部分导入B中.具体流程描述如下\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">A<span class=\"comment\">%B=x</span></div><div class=\"line\"><span class=\"number\">2</span>A<span class=\"comment\">%B=y</span></div><div class=\"line\">...</div><div class=\"line\">...</div><div class=\"line\">nA<span class=\"comment\">%B=z</span></div></pre></td></tr></table></figure></p>\n<p>知道最后余数z等于C,就停止<br>用一个具体的例子<br><code>A=5</code>,<code>B=9</code>,<code>C=7</code><br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">5</span>%<span class=\"number\">9</span>=<span class=\"number\">5</span></div><div class=\"line\"><span class=\"number\">10</span>%<span class=\"number\">9</span>=<span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">15</span>%<span class=\"number\">9</span>=<span class=\"number\">6</span></div><div class=\"line\"><span class=\"number\">20</span>%<span class=\"number\">9</span>=<span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">25</span>%<span class=\"number\">9</span>=<span class=\"number\">7</span></div></pre></td></tr></table></figure></p>\n<p>也就完成了查找<br>当然这个方法不是步数最少的解法</p>\n<p><a href=\"http://www.acmerblog.com/pour-water-problem-5615.html\">倒水问题</a><br><a href=\"http://www.cnblogs.com/frog112111/archive/2012/08/19/2646012.html\">欧几里得和扩展欧几里得算法</a><br><a href=\"http://www.cnblogs.com/drizzlecrj/archive/2007/09/14/892340.html\">最大公约数的三种解法</a></p>"},{"title":"HTTP1.0和HTTP1.1的区别","date":"2016-03-25T05:36:53.000Z","_content":"今天研究了下HTTP,还是挺有意思的.\n接下来,就比较一下两者的区别.\n<!-- more -->\n# 1 长连接\n这个应该是变化最大的一个了.在1.0的版本中,如果客户端请求头没有设置`Connection: Keep-Alive`的话,那么每次请求完成都会立即断开连接,然后客户端又要重新建立一个HTTP连接.假设一个网页包含了10个图片,那么为了请求图片,客户端必须要发送10次请求,无疑这对带宽和资源是极大的浪费,TCP的优势就没有体现出来.\n在HTTP1.1中,`keep-Alive`已经被弃用(但是大多数服务器和浏览器都还保留这个选项).在1.1的版本中,持久连接默认就是启用的,除非你显式在响应头部包含`Connection: close`,客户端收到响应后才会关闭连接.\n# 2 host头域\n在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址,因此,请求消息中的URL并没有传递主机名(hostname).但随着虚拟主机技术的发展,在一台物理服务器上可以存在多个虚拟主机(Multi-homed Web Servers),并且它们共享一个IP地址.\nHTTP1.1的请求消息和响应消息都应支持`Host`头域,且请求消息中如果没有`Host`头域会报告一个错误(400 Bad Request).此外,服务器应该接受以绝对路径标记的资源请求.\n# 3 请求方法\nHTTP1.1增加了`OPTIONS`, `PUT`, `DELETE`, `TRACE`, `CONNECT`这些Request方法.\n       Method         = **\"OPTIONS\"**               ; Section 9.2\n                      | \"GET\"                    ; Section 9.3\n                      | \"HEAD\"                   ; Section 9.4\n                      | \"POST\"                   ; Section 9.5\n                      | **\"PUT\"**                   ; Section 9.6\n                      | **\"DELETE\"**                 ; Section 9.7\n                      | **\"TRACE\"**               ; Section 9.8\n                      | **\"CONNECT\"**                ; Section 9.9\n                      | extension-method\n       extension-method = token\nHTTP1.1 增加的新的status code：\n```\n(HTTP1.0没有定义任何具体的1xx status code, HTTP1.1有2个)\n100 Continue\n101 Switching Protocols\n203 Non-Authoritative Information\n205 Reset Content\n206 Partial Content\n302 Found (在HTTP1.0中有个 302 Moved Temporarily)\n303 See Other\n305 Use Proxy\n307 Temporary Redirect\n405 Method Not Allowed\n406 Not Acceptable\n407 Proxy Authentication Required\n408 Request Timeout\n409 Conflict\n410 Gone\n411 Length Required\n412 Precondition Failed\n413 Request Entity Too Large\n414 Request-URI Too Long\n415 Unsupported Media Type\n416 Requested Range Not Satisfiable\n417 Expectation Failed\n504 Gateway Timeout\n505 HTTP Version Not Supported\n```\n# 4 内容长度\n通常,HTTP应答消息中发送的数据是整个发送的,`Content-Length`消息头字段表示数据的长度.数据的长度很重要,因为客户端需要知道哪里是应答消息的结束,以及后续应答消息的开始.但是在一些动态网页中,由于网页是动态生成的,所以没法计算出准确的`Content-Length`,这样导致的后果是:如果 `Content-Length` 比实际长度短,会造成内容被截断;如果比实体内容长,会造成 pending,浏览器一直转圈圈.\n所以在HTTP1.1中引入了`Transfer-Encoding`,如果一个HTTP消息(请求消息或应答消息)的`Transfer-Encoding`消息头的值为chunked,那么,消息体由数量未定的块组成,并以最后一个大小为0的块为结束.\nps:如果同时设置了`Content-Length` 和`Transfer-Encoding`,那么`Transfer-Encoding`的优先级更高,`Content-Length`会被忽略.\n# 5 缓存\n+ 在HTTP/1.0中,使用`Expire`头域来判断资源的`fresh`或`stale`,并使用条件请求(conditional request)来判断资源是否仍有效.例如,cache服务器通过`If-Modified-Since`头域向服务器验证资源的`Last-Modefied`头域是否有更新,源服务器可能返回304(Not Modified),则表明该对象仍有效;也可能返回200(OK)替换请求的Cache对象.\n+ 此外,HTTP/1.0中还定义了`Pragma:no-cache`头域,客户端使用该头域说明请求资源不能从cache中获取,而必须回源获取.\n+ HTTP/1.1在1.0的基础上加入了一些cache的新特性,当缓存对象的Age超过`Expire`时变为`stale`对象,cache不需要直接抛弃`stale`对象,而是与源服务器进行重新激活(revalidation).\n+ HTTP/1.0中,`If-Modified-Since`头域使用的是绝对时间戳,精确到秒,但使用绝对时间会带来不同机器上的时钟同步问题.而HTTP/1.1中引入了一个`ETag`头域用于重激活机制,它的值`entity tag`可以用来唯一的描述一个资源.请求消息中可以使用`If-None-Match`头域来匹配资源的`entitytag`是否有变化.\n+ 为了使caching机制更加灵活,HTTP/1.1增加了`Cache-Control`头域(请求消息和响应消息都可使用),它支持一个可扩展的指令子集：例如`max-age`指令支持相对时间戳;`private`和`no-store`指令禁止对象被缓存;`no-transform`阻止Proxy进行任何改变响应的行为.\n+ Cache使用关键字索引在磁盘中缓存的对象,在HTTP/1.0中使用资源的URL作为关键字.但可能存在不同的资源基于同一个URL的情况,要区别它们还需要客户端提供更多的信息,如`Accept-Language`和`Accept-Charset`头域.为了支持这种内容协商机制(content negotiation mechanism),HTTP/1.1在响应消息中引入了Vary头域,该头域列出了请求消息中需要包含哪些头域用于内容协商.\n\n\n\n\n# 参考文献\n\n1 [HTTP 协议中的 Transfer-Encoding](HTTPs://imququ.com/post/transfer-encoding-header-in-HTTP.html)\n2 [HTTP/1.1与HTTP/1.0的区别](http://blog.csdn.net/forgotaboutgirl/article/details/6936982)\n","source":"_posts/http-1-0-vs-1-1.md","raw":"title: HTTP1.0和HTTP1.1的区别\ndate: 2016-03-25 13:36:53\ntags:\n- HTTP\n- apache\n- Linux\ncategories:\n- 服务器\n---\n今天研究了下HTTP,还是挺有意思的.\n接下来,就比较一下两者的区别.\n<!-- more -->\n# 1 长连接\n这个应该是变化最大的一个了.在1.0的版本中,如果客户端请求头没有设置`Connection: Keep-Alive`的话,那么每次请求完成都会立即断开连接,然后客户端又要重新建立一个HTTP连接.假设一个网页包含了10个图片,那么为了请求图片,客户端必须要发送10次请求,无疑这对带宽和资源是极大的浪费,TCP的优势就没有体现出来.\n在HTTP1.1中,`keep-Alive`已经被弃用(但是大多数服务器和浏览器都还保留这个选项).在1.1的版本中,持久连接默认就是启用的,除非你显式在响应头部包含`Connection: close`,客户端收到响应后才会关闭连接.\n# 2 host头域\n在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址,因此,请求消息中的URL并没有传递主机名(hostname).但随着虚拟主机技术的发展,在一台物理服务器上可以存在多个虚拟主机(Multi-homed Web Servers),并且它们共享一个IP地址.\nHTTP1.1的请求消息和响应消息都应支持`Host`头域,且请求消息中如果没有`Host`头域会报告一个错误(400 Bad Request).此外,服务器应该接受以绝对路径标记的资源请求.\n# 3 请求方法\nHTTP1.1增加了`OPTIONS`, `PUT`, `DELETE`, `TRACE`, `CONNECT`这些Request方法.\n       Method         = **\"OPTIONS\"**               ; Section 9.2\n                      | \"GET\"                    ; Section 9.3\n                      | \"HEAD\"                   ; Section 9.4\n                      | \"POST\"                   ; Section 9.5\n                      | **\"PUT\"**                   ; Section 9.6\n                      | **\"DELETE\"**                 ; Section 9.7\n                      | **\"TRACE\"**               ; Section 9.8\n                      | **\"CONNECT\"**                ; Section 9.9\n                      | extension-method\n       extension-method = token\nHTTP1.1 增加的新的status code：\n```\n(HTTP1.0没有定义任何具体的1xx status code, HTTP1.1有2个)\n100 Continue\n101 Switching Protocols\n203 Non-Authoritative Information\n205 Reset Content\n206 Partial Content\n302 Found (在HTTP1.0中有个 302 Moved Temporarily)\n303 See Other\n305 Use Proxy\n307 Temporary Redirect\n405 Method Not Allowed\n406 Not Acceptable\n407 Proxy Authentication Required\n408 Request Timeout\n409 Conflict\n410 Gone\n411 Length Required\n412 Precondition Failed\n413 Request Entity Too Large\n414 Request-URI Too Long\n415 Unsupported Media Type\n416 Requested Range Not Satisfiable\n417 Expectation Failed\n504 Gateway Timeout\n505 HTTP Version Not Supported\n```\n# 4 内容长度\n通常,HTTP应答消息中发送的数据是整个发送的,`Content-Length`消息头字段表示数据的长度.数据的长度很重要,因为客户端需要知道哪里是应答消息的结束,以及后续应答消息的开始.但是在一些动态网页中,由于网页是动态生成的,所以没法计算出准确的`Content-Length`,这样导致的后果是:如果 `Content-Length` 比实际长度短,会造成内容被截断;如果比实体内容长,会造成 pending,浏览器一直转圈圈.\n所以在HTTP1.1中引入了`Transfer-Encoding`,如果一个HTTP消息(请求消息或应答消息)的`Transfer-Encoding`消息头的值为chunked,那么,消息体由数量未定的块组成,并以最后一个大小为0的块为结束.\nps:如果同时设置了`Content-Length` 和`Transfer-Encoding`,那么`Transfer-Encoding`的优先级更高,`Content-Length`会被忽略.\n# 5 缓存\n+ 在HTTP/1.0中,使用`Expire`头域来判断资源的`fresh`或`stale`,并使用条件请求(conditional request)来判断资源是否仍有效.例如,cache服务器通过`If-Modified-Since`头域向服务器验证资源的`Last-Modefied`头域是否有更新,源服务器可能返回304(Not Modified),则表明该对象仍有效;也可能返回200(OK)替换请求的Cache对象.\n+ 此外,HTTP/1.0中还定义了`Pragma:no-cache`头域,客户端使用该头域说明请求资源不能从cache中获取,而必须回源获取.\n+ HTTP/1.1在1.0的基础上加入了一些cache的新特性,当缓存对象的Age超过`Expire`时变为`stale`对象,cache不需要直接抛弃`stale`对象,而是与源服务器进行重新激活(revalidation).\n+ HTTP/1.0中,`If-Modified-Since`头域使用的是绝对时间戳,精确到秒,但使用绝对时间会带来不同机器上的时钟同步问题.而HTTP/1.1中引入了一个`ETag`头域用于重激活机制,它的值`entity tag`可以用来唯一的描述一个资源.请求消息中可以使用`If-None-Match`头域来匹配资源的`entitytag`是否有变化.\n+ 为了使caching机制更加灵活,HTTP/1.1增加了`Cache-Control`头域(请求消息和响应消息都可使用),它支持一个可扩展的指令子集：例如`max-age`指令支持相对时间戳;`private`和`no-store`指令禁止对象被缓存;`no-transform`阻止Proxy进行任何改变响应的行为.\n+ Cache使用关键字索引在磁盘中缓存的对象,在HTTP/1.0中使用资源的URL作为关键字.但可能存在不同的资源基于同一个URL的情况,要区别它们还需要客户端提供更多的信息,如`Accept-Language`和`Accept-Charset`头域.为了支持这种内容协商机制(content negotiation mechanism),HTTP/1.1在响应消息中引入了Vary头域,该头域列出了请求消息中需要包含哪些头域用于内容协商.\n\n\n\n\n# 参考文献\n\n1 [HTTP 协议中的 Transfer-Encoding](HTTPs://imququ.com/post/transfer-encoding-header-in-HTTP.html)\n2 [HTTP/1.1与HTTP/1.0的区别](http://blog.csdn.net/forgotaboutgirl/article/details/6936982)\n","slug":"http-1-0-vs-1-1","published":1,"updated":"2016-03-25T08:26:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7ypd001hx8cd5xj2mmsb","content":"<p>今天研究了下HTTP,还是挺有意思的.<br>接下来,就比较一下两者的区别.<br><a id=\"more\"></a></p>\n<h1 id=\"1-长连接\"><a href=\"#1-长连接\" class=\"headerlink\" title=\"1 长连接\"></a>1 长连接</h1><p>这个应该是变化最大的一个了.在1.0的版本中,如果客户端请求头没有设置<code>Connection: Keep-Alive</code>的话,那么每次请求完成都会立即断开连接,然后客户端又要重新建立一个HTTP连接.假设一个网页包含了10个图片,那么为了请求图片,客户端必须要发送10次请求,无疑这对带宽和资源是极大的浪费,TCP的优势就没有体现出来.<br>在HTTP1.1中,<code>keep-Alive</code>已经被弃用(但是大多数服务器和浏览器都还保留这个选项).在1.1的版本中,持久连接默认就是启用的,除非你显式在响应头部包含<code>Connection: close</code>,客户端收到响应后才会关闭连接.</p>\n<h1 id=\"2-host头域\"><a href=\"#2-host头域\" class=\"headerlink\" title=\"2 host头域\"></a>2 host头域</h1><p>在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址,因此,请求消息中的URL并没有传递主机名(hostname).但随着虚拟主机技术的发展,在一台物理服务器上可以存在多个虚拟主机(Multi-homed Web Servers),并且它们共享一个IP地址.<br>HTTP1.1的请求消息和响应消息都应支持<code>Host</code>头域,且请求消息中如果没有<code>Host</code>头域会报告一个错误(400 Bad Request).此外,服务器应该接受以绝对路径标记的资源请求.</p>\n<h1 id=\"3-请求方法\"><a href=\"#3-请求方法\" class=\"headerlink\" title=\"3 请求方法\"></a>3 请求方法</h1><p>HTTP1.1增加了<code>OPTIONS</code>, <code>PUT</code>, <code>DELETE</code>, <code>TRACE</code>, <code>CONNECT</code>这些Request方法.<br>       Method         = <strong>“OPTIONS”</strong>               ; Section 9.2<br>                      | “GET”                    ; Section 9.3<br>                      | “HEAD”                   ; Section 9.4<br>                      | “POST”                   ; Section 9.5<br>                      | <strong>“PUT”</strong>                   ; Section 9.6<br>                      | <strong>“DELETE”</strong>                 ; Section 9.7<br>                      | <strong>“TRACE”</strong>               ; Section 9.8<br>                      | <strong>“CONNECT”</strong>                ; Section 9.9<br>                      | extension-method<br>       extension-method = token<br>HTTP1.1 增加的新的status code：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">(HTTP1<span class=\"number\">.0</span>没有定义任何具体的<span class=\"number\">1</span>xx status code, HTTP1<span class=\"number\">.1</span>有<span class=\"number\">2</span>个)</div><div class=\"line\"><span class=\"number\">100</span> Continue</div><div class=\"line\"><span class=\"number\">101</span> Switching Protocols</div><div class=\"line\"><span class=\"number\">203</span> Non-Authoritative Information</div><div class=\"line\"><span class=\"number\">205</span> Reset Content</div><div class=\"line\"><span class=\"number\">206</span> Partial Content</div><div class=\"line\"><span class=\"number\">302</span> Found (在HTTP1<span class=\"number\">.0</span>中有个 <span class=\"number\">302</span> Moved Temporarily)</div><div class=\"line\"><span class=\"number\">303</span> See Other</div><div class=\"line\"><span class=\"number\">305</span> Use Proxy</div><div class=\"line\"><span class=\"number\">307</span> Temporary Redirect</div><div class=\"line\"><span class=\"number\">405</span> Method Not Allowed</div><div class=\"line\"><span class=\"number\">406</span> Not Acceptable</div><div class=\"line\"><span class=\"number\">407</span> Proxy Authentication Required</div><div class=\"line\"><span class=\"number\">408</span> Request Timeout</div><div class=\"line\"><span class=\"number\">409</span> Conflict</div><div class=\"line\"><span class=\"number\">410</span> Gone</div><div class=\"line\"><span class=\"number\">411</span> Length Required</div><div class=\"line\"><span class=\"number\">412</span> Precondition Failed</div><div class=\"line\"><span class=\"number\">413</span> Request Entity Too Large</div><div class=\"line\"><span class=\"number\">414</span> Request-URI Too Long</div><div class=\"line\"><span class=\"number\">415</span> Unsupported Media Type</div><div class=\"line\"><span class=\"number\">416</span> Requested Range Not Satisfiable</div><div class=\"line\"><span class=\"number\">417</span> Expectation Failed</div><div class=\"line\"><span class=\"number\">504</span> Gateway Timeout</div><div class=\"line\"><span class=\"number\">505</span> HTTP Version Not Supported</div></pre></td></tr></table></figure></p>\n<h1 id=\"4-内容长度\"><a href=\"#4-内容长度\" class=\"headerlink\" title=\"4 内容长度\"></a>4 内容长度</h1><p>通常,HTTP应答消息中发送的数据是整个发送的,<code>Content-Length</code>消息头字段表示数据的长度.数据的长度很重要,因为客户端需要知道哪里是应答消息的结束,以及后续应答消息的开始.但是在一些动态网页中,由于网页是动态生成的,所以没法计算出准确的<code>Content-Length</code>,这样导致的后果是:如果 <code>Content-Length</code> 比实际长度短,会造成内容被截断;如果比实体内容长,会造成 pending,浏览器一直转圈圈.<br>所以在HTTP1.1中引入了<code>Transfer-Encoding</code>,如果一个HTTP消息(请求消息或应答消息)的<code>Transfer-Encoding</code>消息头的值为chunked,那么,消息体由数量未定的块组成,并以最后一个大小为0的块为结束.<br>ps:如果同时设置了<code>Content-Length</code> 和<code>Transfer-Encoding</code>,那么<code>Transfer-Encoding</code>的优先级更高,<code>Content-Length</code>会被忽略.</p>\n<h1 id=\"5-缓存\"><a href=\"#5-缓存\" class=\"headerlink\" title=\"5 缓存\"></a>5 缓存</h1><ul>\n<li>在HTTP/1.0中,使用<code>Expire</code>头域来判断资源的<code>fresh</code>或<code>stale</code>,并使用条件请求(conditional request)来判断资源是否仍有效.例如,cache服务器通过<code>If-Modified-Since</code>头域向服务器验证资源的<code>Last-Modefied</code>头域是否有更新,源服务器可能返回304(Not Modified),则表明该对象仍有效;也可能返回200(OK)替换请求的Cache对象.</li>\n<li>此外,HTTP/1.0中还定义了<code>Pragma:no-cache</code>头域,客户端使用该头域说明请求资源不能从cache中获取,而必须回源获取.</li>\n<li>HTTP/1.1在1.0的基础上加入了一些cache的新特性,当缓存对象的Age超过<code>Expire</code>时变为<code>stale</code>对象,cache不需要直接抛弃<code>stale</code>对象,而是与源服务器进行重新激活(revalidation).</li>\n<li>HTTP/1.0中,<code>If-Modified-Since</code>头域使用的是绝对时间戳,精确到秒,但使用绝对时间会带来不同机器上的时钟同步问题.而HTTP/1.1中引入了一个<code>ETag</code>头域用于重激活机制,它的值<code>entity tag</code>可以用来唯一的描述一个资源.请求消息中可以使用<code>If-None-Match</code>头域来匹配资源的<code>entitytag</code>是否有变化.</li>\n<li>为了使caching机制更加灵活,HTTP/1.1增加了<code>Cache-Control</code>头域(请求消息和响应消息都可使用),它支持一个可扩展的指令子集：例如<code>max-age</code>指令支持相对时间戳;<code>private</code>和<code>no-store</code>指令禁止对象被缓存;<code>no-transform</code>阻止Proxy进行任何改变响应的行为.</li>\n<li>Cache使用关键字索引在磁盘中缓存的对象,在HTTP/1.0中使用资源的URL作为关键字.但可能存在不同的资源基于同一个URL的情况,要区别它们还需要客户端提供更多的信息,如<code>Accept-Language</code>和<code>Accept-Charset</code>头域.为了支持这种内容协商机制(content negotiation mechanism),HTTP/1.1在响应消息中引入了Vary头域,该头域列出了请求消息中需要包含哪些头域用于内容协商.</li>\n</ul>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"HTTPs://imququ.com/post/transfer-encoding-header-in-HTTP.html\" target=\"_blank\" rel=\"external\">HTTP 协议中的 Transfer-Encoding</a><br>2 <a href=\"http://blog.csdn.net/forgotaboutgirl/article/details/6936982\" target=\"_blank\" rel=\"external\">HTTP/1.1与HTTP/1.0的区别</a></p>\n","excerpt":"<p>今天研究了下HTTP,还是挺有意思的.<br>接下来,就比较一下两者的区别.<br>","more":"</p>\n<h1 id=\"1-长连接\"><a href=\"#1-长连接\" class=\"headerlink\" title=\"1 长连接\"></a>1 长连接</h1><p>这个应该是变化最大的一个了.在1.0的版本中,如果客户端请求头没有设置<code>Connection: Keep-Alive</code>的话,那么每次请求完成都会立即断开连接,然后客户端又要重新建立一个HTTP连接.假设一个网页包含了10个图片,那么为了请求图片,客户端必须要发送10次请求,无疑这对带宽和资源是极大的浪费,TCP的优势就没有体现出来.<br>在HTTP1.1中,<code>keep-Alive</code>已经被弃用(但是大多数服务器和浏览器都还保留这个选项).在1.1的版本中,持久连接默认就是启用的,除非你显式在响应头部包含<code>Connection: close</code>,客户端收到响应后才会关闭连接.</p>\n<h1 id=\"2-host头域\"><a href=\"#2-host头域\" class=\"headerlink\" title=\"2 host头域\"></a>2 host头域</h1><p>在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址,因此,请求消息中的URL并没有传递主机名(hostname).但随着虚拟主机技术的发展,在一台物理服务器上可以存在多个虚拟主机(Multi-homed Web Servers),并且它们共享一个IP地址.<br>HTTP1.1的请求消息和响应消息都应支持<code>Host</code>头域,且请求消息中如果没有<code>Host</code>头域会报告一个错误(400 Bad Request).此外,服务器应该接受以绝对路径标记的资源请求.</p>\n<h1 id=\"3-请求方法\"><a href=\"#3-请求方法\" class=\"headerlink\" title=\"3 请求方法\"></a>3 请求方法</h1><p>HTTP1.1增加了<code>OPTIONS</code>, <code>PUT</code>, <code>DELETE</code>, <code>TRACE</code>, <code>CONNECT</code>这些Request方法.<br>       Method         = <strong>“OPTIONS”</strong>               ; Section 9.2<br>                      | “GET”                    ; Section 9.3<br>                      | “HEAD”                   ; Section 9.4<br>                      | “POST”                   ; Section 9.5<br>                      | <strong>“PUT”</strong>                   ; Section 9.6<br>                      | <strong>“DELETE”</strong>                 ; Section 9.7<br>                      | <strong>“TRACE”</strong>               ; Section 9.8<br>                      | <strong>“CONNECT”</strong>                ; Section 9.9<br>                      | extension-method<br>       extension-method = token<br>HTTP1.1 增加的新的status code：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">(HTTP1<span class=\"number\">.0</span>没有定义任何具体的<span class=\"number\">1</span>xx status code, HTTP1<span class=\"number\">.1</span>有<span class=\"number\">2</span>个)</div><div class=\"line\"><span class=\"number\">100</span> Continue</div><div class=\"line\"><span class=\"number\">101</span> Switching Protocols</div><div class=\"line\"><span class=\"number\">203</span> Non-Authoritative Information</div><div class=\"line\"><span class=\"number\">205</span> Reset Content</div><div class=\"line\"><span class=\"number\">206</span> Partial Content</div><div class=\"line\"><span class=\"number\">302</span> Found (在HTTP1<span class=\"number\">.0</span>中有个 <span class=\"number\">302</span> Moved Temporarily)</div><div class=\"line\"><span class=\"number\">303</span> See Other</div><div class=\"line\"><span class=\"number\">305</span> Use Proxy</div><div class=\"line\"><span class=\"number\">307</span> Temporary Redirect</div><div class=\"line\"><span class=\"number\">405</span> Method Not Allowed</div><div class=\"line\"><span class=\"number\">406</span> Not Acceptable</div><div class=\"line\"><span class=\"number\">407</span> Proxy Authentication Required</div><div class=\"line\"><span class=\"number\">408</span> Request Timeout</div><div class=\"line\"><span class=\"number\">409</span> Conflict</div><div class=\"line\"><span class=\"number\">410</span> Gone</div><div class=\"line\"><span class=\"number\">411</span> Length Required</div><div class=\"line\"><span class=\"number\">412</span> Precondition Failed</div><div class=\"line\"><span class=\"number\">413</span> Request Entity Too Large</div><div class=\"line\"><span class=\"number\">414</span> Request-URI Too Long</div><div class=\"line\"><span class=\"number\">415</span> Unsupported Media Type</div><div class=\"line\"><span class=\"number\">416</span> Requested Range Not Satisfiable</div><div class=\"line\"><span class=\"number\">417</span> Expectation Failed</div><div class=\"line\"><span class=\"number\">504</span> Gateway Timeout</div><div class=\"line\"><span class=\"number\">505</span> HTTP Version Not Supported</div></pre></td></tr></table></figure></p>\n<h1 id=\"4-内容长度\"><a href=\"#4-内容长度\" class=\"headerlink\" title=\"4 内容长度\"></a>4 内容长度</h1><p>通常,HTTP应答消息中发送的数据是整个发送的,<code>Content-Length</code>消息头字段表示数据的长度.数据的长度很重要,因为客户端需要知道哪里是应答消息的结束,以及后续应答消息的开始.但是在一些动态网页中,由于网页是动态生成的,所以没法计算出准确的<code>Content-Length</code>,这样导致的后果是:如果 <code>Content-Length</code> 比实际长度短,会造成内容被截断;如果比实体内容长,会造成 pending,浏览器一直转圈圈.<br>所以在HTTP1.1中引入了<code>Transfer-Encoding</code>,如果一个HTTP消息(请求消息或应答消息)的<code>Transfer-Encoding</code>消息头的值为chunked,那么,消息体由数量未定的块组成,并以最后一个大小为0的块为结束.<br>ps:如果同时设置了<code>Content-Length</code> 和<code>Transfer-Encoding</code>,那么<code>Transfer-Encoding</code>的优先级更高,<code>Content-Length</code>会被忽略.</p>\n<h1 id=\"5-缓存\"><a href=\"#5-缓存\" class=\"headerlink\" title=\"5 缓存\"></a>5 缓存</h1><ul>\n<li>在HTTP/1.0中,使用<code>Expire</code>头域来判断资源的<code>fresh</code>或<code>stale</code>,并使用条件请求(conditional request)来判断资源是否仍有效.例如,cache服务器通过<code>If-Modified-Since</code>头域向服务器验证资源的<code>Last-Modefied</code>头域是否有更新,源服务器可能返回304(Not Modified),则表明该对象仍有效;也可能返回200(OK)替换请求的Cache对象.</li>\n<li>此外,HTTP/1.0中还定义了<code>Pragma:no-cache</code>头域,客户端使用该头域说明请求资源不能从cache中获取,而必须回源获取.</li>\n<li>HTTP/1.1在1.0的基础上加入了一些cache的新特性,当缓存对象的Age超过<code>Expire</code>时变为<code>stale</code>对象,cache不需要直接抛弃<code>stale</code>对象,而是与源服务器进行重新激活(revalidation).</li>\n<li>HTTP/1.0中,<code>If-Modified-Since</code>头域使用的是绝对时间戳,精确到秒,但使用绝对时间会带来不同机器上的时钟同步问题.而HTTP/1.1中引入了一个<code>ETag</code>头域用于重激活机制,它的值<code>entity tag</code>可以用来唯一的描述一个资源.请求消息中可以使用<code>If-None-Match</code>头域来匹配资源的<code>entitytag</code>是否有变化.</li>\n<li>为了使caching机制更加灵活,HTTP/1.1增加了<code>Cache-Control</code>头域(请求消息和响应消息都可使用),它支持一个可扩展的指令子集：例如<code>max-age</code>指令支持相对时间戳;<code>private</code>和<code>no-store</code>指令禁止对象被缓存;<code>no-transform</code>阻止Proxy进行任何改变响应的行为.</li>\n<li>Cache使用关键字索引在磁盘中缓存的对象,在HTTP/1.0中使用资源的URL作为关键字.但可能存在不同的资源基于同一个URL的情况,要区别它们还需要客户端提供更多的信息,如<code>Accept-Language</code>和<code>Accept-Charset</code>头域.为了支持这种内容协商机制(content negotiation mechanism),HTTP/1.1在响应消息中引入了Vary头域,该头域列出了请求消息中需要包含哪些头域用于内容协商.</li>\n</ul>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"HTTPs://imququ.com/post/transfer-encoding-header-in-HTTP.html\">HTTP 协议中的 Transfer-Encoding</a><br>2 <a href=\"http://blog.csdn.net/forgotaboutgirl/article/details/6936982\">HTTP/1.1与HTTP/1.0的区别</a></p>"},{"title":"kali和ubuntu双系统安装","date":"2015-03-03T13:17:41.000Z","_content":"\n时间忽快忽慢，一转眼，年过完了，又回来学校了，又一个多月没有push了，重新回到github。今天我们家笨笨给我找了点kali的资料，索性就把kali捡起来，第一步安装kali的系统。\n此处背景不再介绍，直奔主题。kali的安装过程和ubuntu的安装过程类似，应该说原理上是一模一样的，只是界面有些不同。我的电脑当前已经安装了win8和ubuntu，现在需要再加一个kali的系统，三系统共存。\n大体分为如下几个步骤：\n### 1 下载kali镜像\n### 2 刻录u盘\n### 3 安装kali\n<!-- more -->\n---\n# 1 下载kali镜像\n这步很简单，我们去kali的官网下载<https://www.kali.org/downloads/>,下载对应的版本。我这里下载的是第一个64位版本（<http://cdimage.kali.org/kali-1.1.0/kali-linux-1.1.0-amd64.iso>）,因为是在ubuntu下，我们可以顺手校验一下文件的hash值，防止文件损坏。\n在终端中输入``` sha1sum /home/chen/kali-linux-1.1.0-amd64.iso```\n查看输出是否是`40a1fd1d4864e7fac70438a1bf2095c8c1a4e764`，若正确，则第一步完成。\n# 2 刻录u盘\n如果采用硬盘安装的话，我们需要在win下面操作，使用easybcd来编辑grub引导，还需要解压文件，相对比较麻烦，我这里采用u盘安装，相对比较简单。\n和安装ubuntu不同，我之前在win下用UltraISO来刻录,\n![刻录ubuntu](http://ww3.sinaimg.cn/large/692869a3gw1epsvwgs1rqj20fa0c676e.jpg)如图所示，便捷启动是可以不修改的，直接默认，点击写入就行。我今天在刻录kali的时候，发现这样写的u盘无法启动，开机的时候会提示`failed to boot from USB disk with error: gfxboot.c32: not a COM32R Image boot:`的错误。\n解决方法有两个\n1 linux的用mkusb，windows的用Win32DiskImager 来制作U盘启动\n具体用法：\nhttps://wiki.ubuntu.com/Win32DiskImager/iso2usb\nhttps://help.ubuntu.com/community/mkusb\n2 在win下用UltraISO来刻录，记得更改便捷启动的设置，如图所示\n![更改便捷启动](http://ww4.sinaimg.cn/large/692869a3gw1epsw409qr3j20go09rjtp.jpg)，点击便捷启动->选择写入新的启动器引导扇区——>syslinus——>写入\n\n*我采用的是法一，我在ubuntu中用mkusb来刻录*\n# 3 安装kali\n下面开始安装kali（以下图片是我用virtualbox虚拟机中安装拍摄的）\n## 1 引导成功以后，开机画面如图所示\n![开机画面](http://ww1.sinaimg.cn/large/692869a3gw1eptme5jxk5j20ne0hcjwf.jpg)\n我们选择`Graphical install`,图形化安装，也可以选择`install`那是文字界面安装\n## 2 选择语言，地区\n语言： 选择 `chinese（simplified）简体中文`\n地区： 选择 `中国`\n## 3 配置网络名称和domain\n这个代表你的电脑在网络上的名称，比如win默认的就是pc-2000123131，也就是别人在网上邻居中看到你的电脑的名称。我们就用默认的`localhost`\ndomain我们留空不管他，下一步\n## 4 设置root密码\n我们设置两次一样的密码就行，不要忘记了\n![设置root密码](http://ww2.sinaimg.cn/large/692869a3gw1eptmmnvzlnj20ne0hcdih.jpg)\n## 5 磁盘分区\n我们选择第三项`手动`\n![磁盘分区选项](http://ww4.sinaimg.cn/large/692869a3gw1eptmp2uw4ij20ne0hc42t.jpg)\n**分区**，这里我们一共分`三个区`，一个300M的`/boot`分区，一个2048M的`swap`分区，其他的分为一个`/`（你也可以把/home单独分区出来），因为分区方法类似，所以我只讲一个`/boot`和`swap`分区的步骤\n**boot分区**\n**注意:**选择**可启动标志**，我们只有/boot设置为`开`，其他分区的这个选项都是`关`\n![boot分区设置](http://ww1.sinaimg.cn/large/692869a3gw1eptmu4nonsj20ne0hctbb.jpg)\n设置完成后，选择`分区设定结束`，点击继续\n\n**交换空间**\n**注意:**交换空间是一种**文件类型**，其他的分区是**属于载点**\n![交换空间swap分区设置](http://ww1.sinaimg.cn/large/692869a3gw1eptn2gehkdj20ne0hc77a.jpg)\n设置完成后，选择`分区设定结束`，点击继续\n\n\n等分区完成，就选择`分区设定结束并将修改写入磁盘`，点击继续，就开始安装kali\n\n## 6 启动引导\n当系统快安装完成的时候，会出现grub安装的选择,如图所示\n![交换空间swap分区设置](http://ww3.sinaimg.cn/large/692869a3gw1eptnhakprmj20ns0j7dij.jpg)\n\n因为我的系统是`win8`和`ubuntu`和`kali`多系统共存，当前是由`win`来引导（当前系统由谁引导就看开机看到的第一个`系统选择`是谁的，如果是红色的ubuntu选项，那就说明由ubuntu引导）。\n我这里选择否的话，那么我就需要去`win`里面手动添加`kali`的引导（使用easybcd来操作）。\n如果你是`ubuntu`来引导系统的话，一样需要手动去添加`kali`的引导（这里我还不会）。\n所以我选择`是`，这样装完三个系统都可以正常开机了。\n\n\n到此所有的安装结束。\n\n# 参考文献\n1 安装kali 系统 <http://blog.sina.com.cn/s/blog_779dcd090102va9c.html>\n2 [kali系统安装图文教程，kali系统安装图文](http://www.bkjia.com/Linuxjc/844530.html)\n\n# 致谢\n这里，要感谢我最亲爱的笨笨<http://huirong.github.io>\n\n\n\n\n\n\n\n","source":"_posts/kali-and-ubuntu.md","raw":"title: kali和ubuntu双系统安装\ndate: 2015-03-03 21:17:41\ntags:\n- kali\n- Linux\ncategories: Linux\n---\n\n时间忽快忽慢，一转眼，年过完了，又回来学校了，又一个多月没有push了，重新回到github。今天我们家笨笨给我找了点kali的资料，索性就把kali捡起来，第一步安装kali的系统。\n此处背景不再介绍，直奔主题。kali的安装过程和ubuntu的安装过程类似，应该说原理上是一模一样的，只是界面有些不同。我的电脑当前已经安装了win8和ubuntu，现在需要再加一个kali的系统，三系统共存。\n大体分为如下几个步骤：\n### 1 下载kali镜像\n### 2 刻录u盘\n### 3 安装kali\n<!-- more -->\n---\n# 1 下载kali镜像\n这步很简单，我们去kali的官网下载<https://www.kali.org/downloads/>,下载对应的版本。我这里下载的是第一个64位版本（<http://cdimage.kali.org/kali-1.1.0/kali-linux-1.1.0-amd64.iso>）,因为是在ubuntu下，我们可以顺手校验一下文件的hash值，防止文件损坏。\n在终端中输入``` sha1sum /home/chen/kali-linux-1.1.0-amd64.iso```\n查看输出是否是`40a1fd1d4864e7fac70438a1bf2095c8c1a4e764`，若正确，则第一步完成。\n# 2 刻录u盘\n如果采用硬盘安装的话，我们需要在win下面操作，使用easybcd来编辑grub引导，还需要解压文件，相对比较麻烦，我这里采用u盘安装，相对比较简单。\n和安装ubuntu不同，我之前在win下用UltraISO来刻录,\n![刻录ubuntu](http://ww3.sinaimg.cn/large/692869a3gw1epsvwgs1rqj20fa0c676e.jpg)如图所示，便捷启动是可以不修改的，直接默认，点击写入就行。我今天在刻录kali的时候，发现这样写的u盘无法启动，开机的时候会提示`failed to boot from USB disk with error: gfxboot.c32: not a COM32R Image boot:`的错误。\n解决方法有两个\n1 linux的用mkusb，windows的用Win32DiskImager 来制作U盘启动\n具体用法：\nhttps://wiki.ubuntu.com/Win32DiskImager/iso2usb\nhttps://help.ubuntu.com/community/mkusb\n2 在win下用UltraISO来刻录，记得更改便捷启动的设置，如图所示\n![更改便捷启动](http://ww4.sinaimg.cn/large/692869a3gw1epsw409qr3j20go09rjtp.jpg)，点击便捷启动->选择写入新的启动器引导扇区——>syslinus——>写入\n\n*我采用的是法一，我在ubuntu中用mkusb来刻录*\n# 3 安装kali\n下面开始安装kali（以下图片是我用virtualbox虚拟机中安装拍摄的）\n## 1 引导成功以后，开机画面如图所示\n![开机画面](http://ww1.sinaimg.cn/large/692869a3gw1eptme5jxk5j20ne0hcjwf.jpg)\n我们选择`Graphical install`,图形化安装，也可以选择`install`那是文字界面安装\n## 2 选择语言，地区\n语言： 选择 `chinese（simplified）简体中文`\n地区： 选择 `中国`\n## 3 配置网络名称和domain\n这个代表你的电脑在网络上的名称，比如win默认的就是pc-2000123131，也就是别人在网上邻居中看到你的电脑的名称。我们就用默认的`localhost`\ndomain我们留空不管他，下一步\n## 4 设置root密码\n我们设置两次一样的密码就行，不要忘记了\n![设置root密码](http://ww2.sinaimg.cn/large/692869a3gw1eptmmnvzlnj20ne0hcdih.jpg)\n## 5 磁盘分区\n我们选择第三项`手动`\n![磁盘分区选项](http://ww4.sinaimg.cn/large/692869a3gw1eptmp2uw4ij20ne0hc42t.jpg)\n**分区**，这里我们一共分`三个区`，一个300M的`/boot`分区，一个2048M的`swap`分区，其他的分为一个`/`（你也可以把/home单独分区出来），因为分区方法类似，所以我只讲一个`/boot`和`swap`分区的步骤\n**boot分区**\n**注意:**选择**可启动标志**，我们只有/boot设置为`开`，其他分区的这个选项都是`关`\n![boot分区设置](http://ww1.sinaimg.cn/large/692869a3gw1eptmu4nonsj20ne0hctbb.jpg)\n设置完成后，选择`分区设定结束`，点击继续\n\n**交换空间**\n**注意:**交换空间是一种**文件类型**，其他的分区是**属于载点**\n![交换空间swap分区设置](http://ww1.sinaimg.cn/large/692869a3gw1eptn2gehkdj20ne0hc77a.jpg)\n设置完成后，选择`分区设定结束`，点击继续\n\n\n等分区完成，就选择`分区设定结束并将修改写入磁盘`，点击继续，就开始安装kali\n\n## 6 启动引导\n当系统快安装完成的时候，会出现grub安装的选择,如图所示\n![交换空间swap分区设置](http://ww3.sinaimg.cn/large/692869a3gw1eptnhakprmj20ns0j7dij.jpg)\n\n因为我的系统是`win8`和`ubuntu`和`kali`多系统共存，当前是由`win`来引导（当前系统由谁引导就看开机看到的第一个`系统选择`是谁的，如果是红色的ubuntu选项，那就说明由ubuntu引导）。\n我这里选择否的话，那么我就需要去`win`里面手动添加`kali`的引导（使用easybcd来操作）。\n如果你是`ubuntu`来引导系统的话，一样需要手动去添加`kali`的引导（这里我还不会）。\n所以我选择`是`，这样装完三个系统都可以正常开机了。\n\n\n到此所有的安装结束。\n\n# 参考文献\n1 安装kali 系统 <http://blog.sina.com.cn/s/blog_779dcd090102va9c.html>\n2 [kali系统安装图文教程，kali系统安装图文](http://www.bkjia.com/Linuxjc/844530.html)\n\n# 致谢\n这里，要感谢我最亲爱的笨笨<http://huirong.github.io>\n\n\n\n\n\n\n\n","slug":"kali-and-ubuntu","published":1,"updated":"2015-10-29T06:08:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yph001jx8cdwps9ffaf","content":"<p>时间忽快忽慢，一转眼，年过完了，又回来学校了，又一个多月没有push了，重新回到github。今天我们家笨笨给我找了点kali的资料，索性就把kali捡起来，第一步安装kali的系统。<br>此处背景不再介绍，直奔主题。kali的安装过程和ubuntu的安装过程类似，应该说原理上是一模一样的，只是界面有些不同。我的电脑当前已经安装了win8和ubuntu，现在需要再加一个kali的系统，三系统共存。<br>大体分为如下几个步骤：</p>\n<h3 id=\"1-下载kali镜像\"><a href=\"#1-下载kali镜像\" class=\"headerlink\" title=\"1 下载kali镜像\"></a>1 下载kali镜像</h3><h3 id=\"2-刻录u盘\"><a href=\"#2-刻录u盘\" class=\"headerlink\" title=\"2 刻录u盘\"></a>2 刻录u盘</h3><h3 id=\"3-安装kali\"><a href=\"#3-安装kali\" class=\"headerlink\" title=\"3 安装kali\"></a>3 安装kali</h3><h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><a id=\"more\"></a></h2><h1 id=\"1-下载kali镜像-1\"><a href=\"#1-下载kali镜像-1\" class=\"headerlink\" title=\"1 下载kali镜像\"></a>1 下载kali镜像</h1><p>这步很简单，我们去kali的官网下载<a href=\"https://www.kali.org/downloads/\" target=\"_blank\" rel=\"external\">https://www.kali.org/downloads/</a>,下载对应的版本。我这里下载的是第一个64位版本（<a href=\"http://cdimage.kali.org/kali-1.1.0/kali-linux-1.1.0-amd64.iso\" target=\"_blank\" rel=\"external\">http://cdimage.kali.org/kali-1.1.0/kali-linux-1.1.0-amd64.iso</a>）,因为是在ubuntu下，我们可以顺手校验一下文件的hash值，防止文件损坏。<br>在终端中输入<code>sha1sum /home/chen/kali-linux-1.1.0-amd64.iso</code><br>查看输出是否是<code>40a1fd1d4864e7fac70438a1bf2095c8c1a4e764</code>，若正确，则第一步完成。</p>\n<h1 id=\"2-刻录u盘-1\"><a href=\"#2-刻录u盘-1\" class=\"headerlink\" title=\"2 刻录u盘\"></a>2 刻录u盘</h1><p>如果采用硬盘安装的话，我们需要在win下面操作，使用easybcd来编辑grub引导，还需要解压文件，相对比较麻烦，我这里采用u盘安装，相对比较简单。<br>和安装ubuntu不同，我之前在win下用UltraISO来刻录,<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1epsvwgs1rqj20fa0c676e.jpg\" alt=\"刻录ubuntu\">如图所示，便捷启动是可以不修改的，直接默认，点击写入就行。我今天在刻录kali的时候，发现这样写的u盘无法启动，开机的时候会提示<code>failed to boot from USB disk with error: gfxboot.c32: not a COM32R Image boot:</code>的错误。<br>解决方法有两个<br>1 linux的用mkusb，windows的用Win32DiskImager 来制作U盘启动<br>具体用法：<br><a href=\"https://wiki.ubuntu.com/Win32DiskImager/iso2usb\" target=\"_blank\" rel=\"external\">https://wiki.ubuntu.com/Win32DiskImager/iso2usb</a><br><a href=\"https://help.ubuntu.com/community/mkusb\" target=\"_blank\" rel=\"external\">https://help.ubuntu.com/community/mkusb</a><br>2 在win下用UltraISO来刻录，记得更改便捷启动的设置，如图所示<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1epsw409qr3j20go09rjtp.jpg\" alt=\"更改便捷启动\">，点击便捷启动-&gt;选择写入新的启动器引导扇区——&gt;syslinus——&gt;写入</p>\n<p><em>我采用的是法一，我在ubuntu中用mkusb来刻录</em></p>\n<h1 id=\"3-安装kali-1\"><a href=\"#3-安装kali-1\" class=\"headerlink\" title=\"3 安装kali\"></a>3 安装kali</h1><p>下面开始安装kali（以下图片是我用virtualbox虚拟机中安装拍摄的）</p>\n<h2 id=\"1-引导成功以后，开机画面如图所示\"><a href=\"#1-引导成功以后，开机画面如图所示\" class=\"headerlink\" title=\"1 引导成功以后，开机画面如图所示\"></a>1 引导成功以后，开机画面如图所示</h2><p><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1eptme5jxk5j20ne0hcjwf.jpg\" alt=\"开机画面\"><br>我们选择<code>Graphical install</code>,图形化安装，也可以选择<code>install</code>那是文字界面安装</p>\n<h2 id=\"2-选择语言，地区\"><a href=\"#2-选择语言，地区\" class=\"headerlink\" title=\"2 选择语言，地区\"></a>2 选择语言，地区</h2><p>语言： 选择 <code>chinese（simplified）简体中文</code><br>地区： 选择 <code>中国</code></p>\n<h2 id=\"3-配置网络名称和domain\"><a href=\"#3-配置网络名称和domain\" class=\"headerlink\" title=\"3 配置网络名称和domain\"></a>3 配置网络名称和domain</h2><p>这个代表你的电脑在网络上的名称，比如win默认的就是pc-2000123131，也就是别人在网上邻居中看到你的电脑的名称。我们就用默认的<code>localhost</code><br>domain我们留空不管他，下一步</p>\n<h2 id=\"4-设置root密码\"><a href=\"#4-设置root密码\" class=\"headerlink\" title=\"4 设置root密码\"></a>4 设置root密码</h2><p>我们设置两次一样的密码就行，不要忘记了<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1eptmmnvzlnj20ne0hcdih.jpg\" alt=\"设置root密码\"></p>\n<h2 id=\"5-磁盘分区\"><a href=\"#5-磁盘分区\" class=\"headerlink\" title=\"5 磁盘分区\"></a>5 磁盘分区</h2><p>我们选择第三项<code>手动</code><br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1eptmp2uw4ij20ne0hc42t.jpg\" alt=\"磁盘分区选项\"><br><strong>分区</strong>，这里我们一共分<code>三个区</code>，一个300M的<code>/boot</code>分区，一个2048M的<code>swap</code>分区，其他的分为一个<code>/</code>（你也可以把/home单独分区出来），因为分区方法类似，所以我只讲一个<code>/boot</code>和<code>swap</code>分区的步骤<br><strong>boot分区</strong><br><strong>注意:</strong>选择<strong>可启动标志</strong>，我们只有/boot设置为<code>开</code>，其他分区的这个选项都是<code>关</code><br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1eptmu4nonsj20ne0hctbb.jpg\" alt=\"boot分区设置\"><br>设置完成后，选择<code>分区设定结束</code>，点击继续</p>\n<p><strong>交换空间</strong><br><strong>注意:</strong>交换空间是一种<strong>文件类型</strong>，其他的分区是<strong>属于载点</strong><br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1eptn2gehkdj20ne0hc77a.jpg\" alt=\"交换空间swap分区设置\"><br>设置完成后，选择<code>分区设定结束</code>，点击继续</p>\n<p>等分区完成，就选择<code>分区设定结束并将修改写入磁盘</code>，点击继续，就开始安装kali</p>\n<h2 id=\"6-启动引导\"><a href=\"#6-启动引导\" class=\"headerlink\" title=\"6 启动引导\"></a>6 启动引导</h2><p>当系统快安装完成的时候，会出现grub安装的选择,如图所示<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1eptnhakprmj20ns0j7dij.jpg\" alt=\"交换空间swap分区设置\"></p>\n<p>因为我的系统是<code>win8</code>和<code>ubuntu</code>和<code>kali</code>多系统共存，当前是由<code>win</code>来引导（当前系统由谁引导就看开机看到的第一个<code>系统选择</code>是谁的，如果是红色的ubuntu选项，那就说明由ubuntu引导）。<br>我这里选择否的话，那么我就需要去<code>win</code>里面手动添加<code>kali</code>的引导（使用easybcd来操作）。<br>如果你是<code>ubuntu</code>来引导系统的话，一样需要手动去添加<code>kali</code>的引导（这里我还不会）。<br>所以我选择<code>是</code>，这样装完三个系统都可以正常开机了。</p>\n<p>到此所有的安装结束。</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 安装kali 系统 <a href=\"http://blog.sina.com.cn/s/blog_779dcd090102va9c.html\" target=\"_blank\" rel=\"external\">http://blog.sina.com.cn/s/blog_779dcd090102va9c.html</a><br>2 <a href=\"http://www.bkjia.com/Linuxjc/844530.html\" target=\"_blank\" rel=\"external\">kali系统安装图文教程，kali系统安装图文</a></p>\n<h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p>这里，要感谢我最亲爱的笨笨<a href=\"http://huirong.github.io\" target=\"_blank\" rel=\"external\">http://huirong.github.io</a></p>\n","excerpt":"<p>时间忽快忽慢，一转眼，年过完了，又回来学校了，又一个多月没有push了，重新回到github。今天我们家笨笨给我找了点kali的资料，索性就把kali捡起来，第一步安装kali的系统。<br>此处背景不再介绍，直奔主题。kali的安装过程和ubuntu的安装过程类似，应该说原理上是一模一样的，只是界面有些不同。我的电脑当前已经安装了win8和ubuntu，现在需要再加一个kali的系统，三系统共存。<br>大体分为如下几个步骤：</p>\n<h3 id=\"1-下载kali镜像\"><a href=\"#1-下载kali镜像\" class=\"headerlink\" title=\"1 下载kali镜像\"></a>1 下载kali镜像</h3><h3 id=\"2-刻录u盘\"><a href=\"#2-刻录u盘\" class=\"headerlink\" title=\"2 刻录u盘\"></a>2 刻录u盘</h3><h3 id=\"3-安装kali\"><a href=\"#3-安装kali\" class=\"headerlink\" title=\"3 安装kali\"></a>3 安装kali</h3><h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a>","more":"</h2><h1 id=\"1-下载kali镜像-1\"><a href=\"#1-下载kali镜像-1\" class=\"headerlink\" title=\"1 下载kali镜像\"></a>1 下载kali镜像</h1><p>这步很简单，我们去kali的官网下载<a href=\"https://www.kali.org/downloads/\">https://www.kali.org/downloads/</a>,下载对应的版本。我这里下载的是第一个64位版本（<a href=\"http://cdimage.kali.org/kali-1.1.0/kali-linux-1.1.0-amd64.iso\">http://cdimage.kali.org/kali-1.1.0/kali-linux-1.1.0-amd64.iso</a>）,因为是在ubuntu下，我们可以顺手校验一下文件的hash值，防止文件损坏。<br>在终端中输入<code>sha1sum /home/chen/kali-linux-1.1.0-amd64.iso</code><br>查看输出是否是<code>40a1fd1d4864e7fac70438a1bf2095c8c1a4e764</code>，若正确，则第一步完成。</p>\n<h1 id=\"2-刻录u盘-1\"><a href=\"#2-刻录u盘-1\" class=\"headerlink\" title=\"2 刻录u盘\"></a>2 刻录u盘</h1><p>如果采用硬盘安装的话，我们需要在win下面操作，使用easybcd来编辑grub引导，还需要解压文件，相对比较麻烦，我这里采用u盘安装，相对比较简单。<br>和安装ubuntu不同，我之前在win下用UltraISO来刻录,<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1epsvwgs1rqj20fa0c676e.jpg\" alt=\"刻录ubuntu\">如图所示，便捷启动是可以不修改的，直接默认，点击写入就行。我今天在刻录kali的时候，发现这样写的u盘无法启动，开机的时候会提示<code>failed to boot from USB disk with error: gfxboot.c32: not a COM32R Image boot:</code>的错误。<br>解决方法有两个<br>1 linux的用mkusb，windows的用Win32DiskImager 来制作U盘启动<br>具体用法：<br><a href=\"https://wiki.ubuntu.com/Win32DiskImager/iso2usb\">https://wiki.ubuntu.com/Win32DiskImager/iso2usb</a><br><a href=\"https://help.ubuntu.com/community/mkusb\">https://help.ubuntu.com/community/mkusb</a><br>2 在win下用UltraISO来刻录，记得更改便捷启动的设置，如图所示<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1epsw409qr3j20go09rjtp.jpg\" alt=\"更改便捷启动\">，点击便捷启动-&gt;选择写入新的启动器引导扇区——&gt;syslinus——&gt;写入</p>\n<p><em>我采用的是法一，我在ubuntu中用mkusb来刻录</em></p>\n<h1 id=\"3-安装kali-1\"><a href=\"#3-安装kali-1\" class=\"headerlink\" title=\"3 安装kali\"></a>3 安装kali</h1><p>下面开始安装kali（以下图片是我用virtualbox虚拟机中安装拍摄的）</p>\n<h2 id=\"1-引导成功以后，开机画面如图所示\"><a href=\"#1-引导成功以后，开机画面如图所示\" class=\"headerlink\" title=\"1 引导成功以后，开机画面如图所示\"></a>1 引导成功以后，开机画面如图所示</h2><p><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1eptme5jxk5j20ne0hcjwf.jpg\" alt=\"开机画面\"><br>我们选择<code>Graphical install</code>,图形化安装，也可以选择<code>install</code>那是文字界面安装</p>\n<h2 id=\"2-选择语言，地区\"><a href=\"#2-选择语言，地区\" class=\"headerlink\" title=\"2 选择语言，地区\"></a>2 选择语言，地区</h2><p>语言： 选择 <code>chinese（simplified）简体中文</code><br>地区： 选择 <code>中国</code></p>\n<h2 id=\"3-配置网络名称和domain\"><a href=\"#3-配置网络名称和domain\" class=\"headerlink\" title=\"3 配置网络名称和domain\"></a>3 配置网络名称和domain</h2><p>这个代表你的电脑在网络上的名称，比如win默认的就是pc-2000123131，也就是别人在网上邻居中看到你的电脑的名称。我们就用默认的<code>localhost</code><br>domain我们留空不管他，下一步</p>\n<h2 id=\"4-设置root密码\"><a href=\"#4-设置root密码\" class=\"headerlink\" title=\"4 设置root密码\"></a>4 设置root密码</h2><p>我们设置两次一样的密码就行，不要忘记了<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1eptmmnvzlnj20ne0hcdih.jpg\" alt=\"设置root密码\"></p>\n<h2 id=\"5-磁盘分区\"><a href=\"#5-磁盘分区\" class=\"headerlink\" title=\"5 磁盘分区\"></a>5 磁盘分区</h2><p>我们选择第三项<code>手动</code><br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1eptmp2uw4ij20ne0hc42t.jpg\" alt=\"磁盘分区选项\"><br><strong>分区</strong>，这里我们一共分<code>三个区</code>，一个300M的<code>/boot</code>分区，一个2048M的<code>swap</code>分区，其他的分为一个<code>/</code>（你也可以把/home单独分区出来），因为分区方法类似，所以我只讲一个<code>/boot</code>和<code>swap</code>分区的步骤<br><strong>boot分区</strong><br><strong>注意:</strong>选择<strong>可启动标志</strong>，我们只有/boot设置为<code>开</code>，其他分区的这个选项都是<code>关</code><br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1eptmu4nonsj20ne0hctbb.jpg\" alt=\"boot分区设置\"><br>设置完成后，选择<code>分区设定结束</code>，点击继续</p>\n<p><strong>交换空间</strong><br><strong>注意:</strong>交换空间是一种<strong>文件类型</strong>，其他的分区是<strong>属于载点</strong><br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1eptn2gehkdj20ne0hc77a.jpg\" alt=\"交换空间swap分区设置\"><br>设置完成后，选择<code>分区设定结束</code>，点击继续</p>\n<p>等分区完成，就选择<code>分区设定结束并将修改写入磁盘</code>，点击继续，就开始安装kali</p>\n<h2 id=\"6-启动引导\"><a href=\"#6-启动引导\" class=\"headerlink\" title=\"6 启动引导\"></a>6 启动引导</h2><p>当系统快安装完成的时候，会出现grub安装的选择,如图所示<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1eptnhakprmj20ns0j7dij.jpg\" alt=\"交换空间swap分区设置\"></p>\n<p>因为我的系统是<code>win8</code>和<code>ubuntu</code>和<code>kali</code>多系统共存，当前是由<code>win</code>来引导（当前系统由谁引导就看开机看到的第一个<code>系统选择</code>是谁的，如果是红色的ubuntu选项，那就说明由ubuntu引导）。<br>我这里选择否的话，那么我就需要去<code>win</code>里面手动添加<code>kali</code>的引导（使用easybcd来操作）。<br>如果你是<code>ubuntu</code>来引导系统的话，一样需要手动去添加<code>kali</code>的引导（这里我还不会）。<br>所以我选择<code>是</code>，这样装完三个系统都可以正常开机了。</p>\n<p>到此所有的安装结束。</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 安装kali 系统 <a href=\"http://blog.sina.com.cn/s/blog_779dcd090102va9c.html\">http://blog.sina.com.cn/s/blog_779dcd090102va9c.html</a><br>2 <a href=\"http://www.bkjia.com/Linuxjc/844530.html\">kali系统安装图文教程，kali系统安装图文</a></p>\n<h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p>这里，要感谢我最亲爱的笨笨<a href=\"http://huirong.github.io\">http://huirong.github.io</a></p>"},{"title":"解决 Github Pages 禁止百度爬虫的方法2--从gitcafe迁移到coding.net","date":"2016-03-06T07:50:46.000Z","_content":"上一篇文章[解决 Github Pages 禁止百度爬虫的方法](http://jackroyal.github.io/2015/11/25/how-to-solve-the-problem-that-github-blocks-the-baidu-spider/),提到了解决百度爬虫被github禁用掉的方法.\n`把博客同时发布到github pages和gitcafe pages.然后使用dnspod设置域名解析,国内线路解析到gitcafe,国外线路解析到github.`\n然后今天去上gitcafe,偶然看到这个\n![GitCafe 项目迁移至 Coding.net 公告](http://ww4.sinaimg.cn/large/692869a3gw1f1n79skvt3j20zl0m7k07.jpg)\n额(⊙o⊙)…,holly shit.不过没办法,人家都被收购了,我们只能改变策略了.\n话说,两家都是做代码托管的,这也是顺(bao)应(tuan)潮(qu)流(nuan)咩?\n<!-- more -->\n思路跟原来差不多,就是我们把其中的gitcafe内容替换成coding.net就好,以下简称coding.\n`把博客同时发布到github pages和coding pages.然后使用dnspod设置域名解析,国内线路解析到coding.net,国外线路解析到github.`\n1. 注册coding账号\n2. 新建一个项目,名字与你的用户名相同,比如我的名字是`Jackroyal`,新建一个项目名为`Jackroyal`\n3. 添加ssh公钥\n4. 新建coding-pages分支\n5. 开启pages服务\n6. 修改hexo配置\n7. 修改dns设置\n# 1 注册coding账号\n这个很简单不必说,注册需要填写用户名,邮箱和密码,比如我的用户名就是`Jackroyal`\n# 2 新建和用户名同名的项目\n在注册好账号以后,我们就去新建一个项目,方法和gitcafe不同和gihub类似,就是和用户名同名,一模一样的就行.我的项目名是`Jackroyal`,项目属性`公开`\n![新建同名项目](http://ww4.sinaimg.cn/large/692869a3gw1f1n8d42xljj20qb0hbmzc.jpg)\n# 3 添加`ssh`公钥\n首先,我们提交代码库有两种方式,一种是https,一种是ssh,两种方式都可以,但是因为我们使用hexo来发布博客的时候是没有地方输入密码的,所以我们才考虑使用`ssh`方式,不过也不一定,我们还是可以使用https方式来提交hexo的.\n## 3.1 使用ssh方式发布博客\n我们只需要找到本地的ssh公钥,然后上传到coding上去就行,点击[这里](https://coding.net/user/account/setting/keys)设置.查看本地ssh公钥的方法和上篇博客一样.\n![使用git客户端查看ssh公钥私钥](http://ww2.sinaimg.cn/large/692869a3gw1eye75djqo9j20gj09475k.jpg)\n![查看公钥](http://ww3.sinaimg.cn/large/692869a3gw1eye7c2xpavj20if06dt9w.jpg)\n复制那一段,然后在coding上添加上去就行\n## 3.2 使用https方式发布\n如果非要使用https方式,也是可以的,核心思路就是在本地做一次`push`操作就行.\n1. 我们先`git clone`命令,我的项目就是`git clone https://git.coding.net/Jackroyal/Jackroyal.git`得到coding上刚才新建的项目.\n2. 克隆完成后,接着我们进到项目目录,我们新建一个文件或者修改一个文件\n3. `git add .`,把修改提交到暂存区\n4. `git commit -m \"测试提交\"`,将修改提交到本地仓库\n5. `git push`,将修改提交到远程仓库\n6. 接下来,会让你输入用户名和密码,你输入\n7. 然后项目就会提交,因为这个状态会保留下来,你下次在提交就可以不用输入用户名和密码了,这样为我们使用hexo发布代码提供条件\nps:这种方式,可能过一段时间又不行了,报错`could not read Username for 'https://git.coding.net': Invalid argument`,你再做一次上面的操作就行\n# 4 新建coding-pages分支\n当我们可以提交代码的时候,我们先来新建分支,和gitcafe差不多,它需要一个特别的分支名字,而不是像github默认的master分支,名字是`coding-pages`,如下图所示\n![新建coding分支](http://ww4.sinaimg.cn/large/692869a3gw1f1n965hcj0j210r0g3jvk.jpg)\n我们把它设为默认分支\n# 5 开启pages服务\n接下来我们需要手动去开启pages服务.在项目主页的`pages`选项卡,点击开启服务,同时我们,添加域名绑定\n![开启pages服务](http://ww3.sinaimg.cn/large/692869a3gw1f1n98oezpej20sv0kxtdb.jpg)\n域名绑定我们还要去修改dns解析,我们先用它分配给我们的域名去访问[http://jackroyal.coding.me/](http://jackroyal.coding.me/),看看能不能正常访问\n# 5 修改hexo配置\n前面的准备工作做得差不多,我们修改博客的配置信息,打开博客根目录的`_config.yml`文件,格式和之前github的差不多:\n```\ndeploy:\n- type: git\n  repo: 'https://github.com/Jackroyal/Jackroyal.github.io.git'\n  branch: master\n- type: git\n  repo: 'https://git.coding.net/Jackroyal/Jackroyal.git'\n  branch: coding-pages\n```\n尤其注意在配置的时候注意留空格,这种键值对,比如`type: git`,其中的冒号后面到git,有个空格的,不然配置文件就会读取错误.\n还要注意branch名称,分支必须是`coding-pages`\n**PS:如上面所说,我选择的是https方式发布,所以我的repo是https的,如果你选择ssh方式去认证,那么你的地址应该是类似这样的`git@git.coding.net:Jackroyal/Jackroyal.git`\n**\n\n![添加coding的repo信息](http://ww4.sinaimg.cn/large/692869a3gw1f1n9byao2wj20o00gqn0e.jpg)\n# 7 修改dns设置\n就像第5步页面提示的,我们要绑定自己的域名,需要去修改dns解析记录,只需要添加一条CNAME指向你的`jackroyal.coding.me`即可.\n注意后面加个点,也就是正确的填法是`jackroyal.coding.me.`,如下图所示.修改完成后大概等几分钟才能生效\n![修改dns设置](http://ww4.sinaimg.cn/large/692869a3gw1f1n9m6me2ej20nv09c0us.jpg)\n\n# 8 从gitcafe迁移\n如果我们选择从gitcafe迁移的话,他会把我们原来的博客迁移过来.为了适应coding,你只需要从上面第二步开始就好,尤其注意的是,`新建coding-pages分支`,`新建coding-pages分支`,`新建coding-pages分支`,重要的事情说三遍,因为你迁移过来的分支名称是`gitcafe-pages`.\n也就是核心问题,必须有个和用户名同名的项目,项目必须有个分支是`coding-pages`\n\n其他没提的事情和上一篇是一样的.\n最后执行`hexo d -g`,打完收工\n","source":"_posts/migrate-pages-from-gitcafe-to-coding.md","raw":"title: 解决 Github Pages 禁止百度爬虫的方法2--从gitcafe迁移到coding.net\ndate: 2016-03-06 15:50:46\ntags:\n- hexo\n- github\n- baidu\n- git\ncategories:\n- hexo\n---\n上一篇文章[解决 Github Pages 禁止百度爬虫的方法](http://jackroyal.github.io/2015/11/25/how-to-solve-the-problem-that-github-blocks-the-baidu-spider/),提到了解决百度爬虫被github禁用掉的方法.\n`把博客同时发布到github pages和gitcafe pages.然后使用dnspod设置域名解析,国内线路解析到gitcafe,国外线路解析到github.`\n然后今天去上gitcafe,偶然看到这个\n![GitCafe 项目迁移至 Coding.net 公告](http://ww4.sinaimg.cn/large/692869a3gw1f1n79skvt3j20zl0m7k07.jpg)\n额(⊙o⊙)…,holly shit.不过没办法,人家都被收购了,我们只能改变策略了.\n话说,两家都是做代码托管的,这也是顺(bao)应(tuan)潮(qu)流(nuan)咩?\n<!-- more -->\n思路跟原来差不多,就是我们把其中的gitcafe内容替换成coding.net就好,以下简称coding.\n`把博客同时发布到github pages和coding pages.然后使用dnspod设置域名解析,国内线路解析到coding.net,国外线路解析到github.`\n1. 注册coding账号\n2. 新建一个项目,名字与你的用户名相同,比如我的名字是`Jackroyal`,新建一个项目名为`Jackroyal`\n3. 添加ssh公钥\n4. 新建coding-pages分支\n5. 开启pages服务\n6. 修改hexo配置\n7. 修改dns设置\n# 1 注册coding账号\n这个很简单不必说,注册需要填写用户名,邮箱和密码,比如我的用户名就是`Jackroyal`\n# 2 新建和用户名同名的项目\n在注册好账号以后,我们就去新建一个项目,方法和gitcafe不同和gihub类似,就是和用户名同名,一模一样的就行.我的项目名是`Jackroyal`,项目属性`公开`\n![新建同名项目](http://ww4.sinaimg.cn/large/692869a3gw1f1n8d42xljj20qb0hbmzc.jpg)\n# 3 添加`ssh`公钥\n首先,我们提交代码库有两种方式,一种是https,一种是ssh,两种方式都可以,但是因为我们使用hexo来发布博客的时候是没有地方输入密码的,所以我们才考虑使用`ssh`方式,不过也不一定,我们还是可以使用https方式来提交hexo的.\n## 3.1 使用ssh方式发布博客\n我们只需要找到本地的ssh公钥,然后上传到coding上去就行,点击[这里](https://coding.net/user/account/setting/keys)设置.查看本地ssh公钥的方法和上篇博客一样.\n![使用git客户端查看ssh公钥私钥](http://ww2.sinaimg.cn/large/692869a3gw1eye75djqo9j20gj09475k.jpg)\n![查看公钥](http://ww3.sinaimg.cn/large/692869a3gw1eye7c2xpavj20if06dt9w.jpg)\n复制那一段,然后在coding上添加上去就行\n## 3.2 使用https方式发布\n如果非要使用https方式,也是可以的,核心思路就是在本地做一次`push`操作就行.\n1. 我们先`git clone`命令,我的项目就是`git clone https://git.coding.net/Jackroyal/Jackroyal.git`得到coding上刚才新建的项目.\n2. 克隆完成后,接着我们进到项目目录,我们新建一个文件或者修改一个文件\n3. `git add .`,把修改提交到暂存区\n4. `git commit -m \"测试提交\"`,将修改提交到本地仓库\n5. `git push`,将修改提交到远程仓库\n6. 接下来,会让你输入用户名和密码,你输入\n7. 然后项目就会提交,因为这个状态会保留下来,你下次在提交就可以不用输入用户名和密码了,这样为我们使用hexo发布代码提供条件\nps:这种方式,可能过一段时间又不行了,报错`could not read Username for 'https://git.coding.net': Invalid argument`,你再做一次上面的操作就行\n# 4 新建coding-pages分支\n当我们可以提交代码的时候,我们先来新建分支,和gitcafe差不多,它需要一个特别的分支名字,而不是像github默认的master分支,名字是`coding-pages`,如下图所示\n![新建coding分支](http://ww4.sinaimg.cn/large/692869a3gw1f1n965hcj0j210r0g3jvk.jpg)\n我们把它设为默认分支\n# 5 开启pages服务\n接下来我们需要手动去开启pages服务.在项目主页的`pages`选项卡,点击开启服务,同时我们,添加域名绑定\n![开启pages服务](http://ww3.sinaimg.cn/large/692869a3gw1f1n98oezpej20sv0kxtdb.jpg)\n域名绑定我们还要去修改dns解析,我们先用它分配给我们的域名去访问[http://jackroyal.coding.me/](http://jackroyal.coding.me/),看看能不能正常访问\n# 5 修改hexo配置\n前面的准备工作做得差不多,我们修改博客的配置信息,打开博客根目录的`_config.yml`文件,格式和之前github的差不多:\n```\ndeploy:\n- type: git\n  repo: 'https://github.com/Jackroyal/Jackroyal.github.io.git'\n  branch: master\n- type: git\n  repo: 'https://git.coding.net/Jackroyal/Jackroyal.git'\n  branch: coding-pages\n```\n尤其注意在配置的时候注意留空格,这种键值对,比如`type: git`,其中的冒号后面到git,有个空格的,不然配置文件就会读取错误.\n还要注意branch名称,分支必须是`coding-pages`\n**PS:如上面所说,我选择的是https方式发布,所以我的repo是https的,如果你选择ssh方式去认证,那么你的地址应该是类似这样的`git@git.coding.net:Jackroyal/Jackroyal.git`\n**\n\n![添加coding的repo信息](http://ww4.sinaimg.cn/large/692869a3gw1f1n9byao2wj20o00gqn0e.jpg)\n# 7 修改dns设置\n就像第5步页面提示的,我们要绑定自己的域名,需要去修改dns解析记录,只需要添加一条CNAME指向你的`jackroyal.coding.me`即可.\n注意后面加个点,也就是正确的填法是`jackroyal.coding.me.`,如下图所示.修改完成后大概等几分钟才能生效\n![修改dns设置](http://ww4.sinaimg.cn/large/692869a3gw1f1n9m6me2ej20nv09c0us.jpg)\n\n# 8 从gitcafe迁移\n如果我们选择从gitcafe迁移的话,他会把我们原来的博客迁移过来.为了适应coding,你只需要从上面第二步开始就好,尤其注意的是,`新建coding-pages分支`,`新建coding-pages分支`,`新建coding-pages分支`,重要的事情说三遍,因为你迁移过来的分支名称是`gitcafe-pages`.\n也就是核心问题,必须有个和用户名同名的项目,项目必须有个分支是`coding-pages`\n\n其他没提的事情和上一篇是一样的.\n最后执行`hexo d -g`,打完收工\n","slug":"migrate-pages-from-gitcafe-to-coding","published":1,"updated":"2016-03-06T10:23:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7ypl001mx8cd5dc4shje","content":"<p>上一篇文章<a href=\"http://jackroyal.github.io/2015/11/25/how-to-solve-the-problem-that-github-blocks-the-baidu-spider/\" target=\"_blank\" rel=\"external\">解决 Github Pages 禁止百度爬虫的方法</a>,提到了解决百度爬虫被github禁用掉的方法.<br><code>把博客同时发布到github pages和gitcafe pages.然后使用dnspod设置域名解析,国内线路解析到gitcafe,国外线路解析到github.</code><br>然后今天去上gitcafe,偶然看到这个<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1f1n79skvt3j20zl0m7k07.jpg\" alt=\"GitCafe 项目迁移至 Coding.net 公告\"><br>额(⊙o⊙)…,holly shit.不过没办法,人家都被收购了,我们只能改变策略了.<br>话说,两家都是做代码托管的,这也是顺(bao)应(tuan)潮(qu)流(nuan)咩?<br><a id=\"more\"></a><br>思路跟原来差不多,就是我们把其中的gitcafe内容替换成coding.net就好,以下简称coding.<br><code>把博客同时发布到github pages和coding pages.然后使用dnspod设置域名解析,国内线路解析到coding.net,国外线路解析到github.</code></p>\n<ol>\n<li>注册coding账号</li>\n<li>新建一个项目,名字与你的用户名相同,比如我的名字是<code>Jackroyal</code>,新建一个项目名为<code>Jackroyal</code></li>\n<li>添加ssh公钥</li>\n<li>新建coding-pages分支</li>\n<li>开启pages服务</li>\n<li>修改hexo配置</li>\n<li>修改dns设置<h1 id=\"1-注册coding账号\"><a href=\"#1-注册coding账号\" class=\"headerlink\" title=\"1 注册coding账号\"></a>1 注册coding账号</h1>这个很简单不必说,注册需要填写用户名,邮箱和密码,比如我的用户名就是<code>Jackroyal</code><h1 id=\"2-新建和用户名同名的项目\"><a href=\"#2-新建和用户名同名的项目\" class=\"headerlink\" title=\"2 新建和用户名同名的项目\"></a>2 新建和用户名同名的项目</h1>在注册好账号以后,我们就去新建一个项目,方法和gitcafe不同和gihub类似,就是和用户名同名,一模一样的就行.我的项目名是<code>Jackroyal</code>,项目属性<code>公开</code><br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1f1n8d42xljj20qb0hbmzc.jpg\" alt=\"新建同名项目\"><h1 id=\"3-添加ssh公钥\"><a href=\"#3-添加ssh公钥\" class=\"headerlink\" title=\"3 添加ssh公钥\"></a>3 添加<code>ssh</code>公钥</h1>首先,我们提交代码库有两种方式,一种是https,一种是ssh,两种方式都可以,但是因为我们使用hexo来发布博客的时候是没有地方输入密码的,所以我们才考虑使用<code>ssh</code>方式,不过也不一定,我们还是可以使用https方式来提交hexo的.<h2 id=\"3-1-使用ssh方式发布博客\"><a href=\"#3-1-使用ssh方式发布博客\" class=\"headerlink\" title=\"3.1 使用ssh方式发布博客\"></a>3.1 使用ssh方式发布博客</h2>我们只需要找到本地的ssh公钥,然后上传到coding上去就行,点击<a href=\"https://coding.net/user/account/setting/keys\" target=\"_blank\" rel=\"external\">这里</a>设置.查看本地ssh公钥的方法和上篇博客一样.<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1eye75djqo9j20gj09475k.jpg\" alt=\"使用git客户端查看ssh公钥私钥\"><br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1eye7c2xpavj20if06dt9w.jpg\" alt=\"查看公钥\"><br>复制那一段,然后在coding上添加上去就行<h2 id=\"3-2-使用https方式发布\"><a href=\"#3-2-使用https方式发布\" class=\"headerlink\" title=\"3.2 使用https方式发布\"></a>3.2 使用https方式发布</h2>如果非要使用https方式,也是可以的,核心思路就是在本地做一次<code>push</code>操作就行.</li>\n<li>我们先<code>git clone</code>命令,我的项目就是<code>git clone https://git.coding.net/Jackroyal/Jackroyal.git</code>得到coding上刚才新建的项目.</li>\n<li>克隆完成后,接着我们进到项目目录,我们新建一个文件或者修改一个文件</li>\n<li><code>git add .</code>,把修改提交到暂存区</li>\n<li><code>git commit -m &quot;测试提交&quot;</code>,将修改提交到本地仓库</li>\n<li><code>git push</code>,将修改提交到远程仓库</li>\n<li>接下来,会让你输入用户名和密码,你输入</li>\n<li>然后项目就会提交,因为这个状态会保留下来,你下次在提交就可以不用输入用户名和密码了,这样为我们使用hexo发布代码提供条件<br>ps:这种方式,可能过一段时间又不行了,报错<code>could not read Username for &#39;https://git.coding.net&#39;: Invalid argument</code>,你再做一次上面的操作就行<h1 id=\"4-新建coding-pages分支\"><a href=\"#4-新建coding-pages分支\" class=\"headerlink\" title=\"4 新建coding-pages分支\"></a>4 新建coding-pages分支</h1>当我们可以提交代码的时候,我们先来新建分支,和gitcafe差不多,它需要一个特别的分支名字,而不是像github默认的master分支,名字是<code>coding-pages</code>,如下图所示<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1f1n965hcj0j210r0g3jvk.jpg\" alt=\"新建coding分支\"><br>我们把它设为默认分支<h1 id=\"5-开启pages服务\"><a href=\"#5-开启pages服务\" class=\"headerlink\" title=\"5 开启pages服务\"></a>5 开启pages服务</h1>接下来我们需要手动去开启pages服务.在项目主页的<code>pages</code>选项卡,点击开启服务,同时我们,添加域名绑定<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1f1n98oezpej20sv0kxtdb.jpg\" alt=\"开启pages服务\"><br>域名绑定我们还要去修改dns解析,我们先用它分配给我们的域名去访问<a href=\"http://jackroyal.coding.me/\" target=\"_blank\" rel=\"external\">http://jackroyal.coding.me/</a>,看看能不能正常访问<h1 id=\"5-修改hexo配置\"><a href=\"#5-修改hexo配置\" class=\"headerlink\" title=\"5 修改hexo配置\"></a>5 修改hexo配置</h1>前面的准备工作做得差不多,我们修改博客的配置信息,打开博客根目录的<code>_config.yml</code>文件,格式和之前github的差不多:<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">- <span class=\"attribute\">type</span>: git</div><div class=\"line\">  <span class=\"attribute\">repo</span>: <span class=\"string\">'https://github.com/Jackroyal/Jackroyal.github.io.git'</span></div><div class=\"line\">  <span class=\"attribute\">branch</span>: master</div><div class=\"line\">- <span class=\"attribute\">type</span>: git</div><div class=\"line\">  <span class=\"attribute\">repo</span>: <span class=\"string\">'https://git.coding.net/Jackroyal/Jackroyal.git'</span></div><div class=\"line\">  <span class=\"attribute\">branch</span>: coding-pages</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>尤其注意在配置的时候注意留空格,这种键值对,比如<code>type: git</code>,其中的冒号后面到git,有个空格的,不然配置文件就会读取错误.<br>还要注意branch名称,分支必须是<code>coding-pages</code><br><strong>PS:如上面所说,我选择的是https方式发布,所以我的repo是https的,如果你选择ssh方式去认证,那么你的地址应该是类似这样的<code>git@git.coding.net:Jackroyal/Jackroyal.git</code>\n</strong></p>\n<p><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1f1n9byao2wj20o00gqn0e.jpg\" alt=\"添加coding的repo信息\"></p>\n<h1 id=\"7-修改dns设置\"><a href=\"#7-修改dns设置\" class=\"headerlink\" title=\"7 修改dns设置\"></a>7 修改dns设置</h1><p>就像第5步页面提示的,我们要绑定自己的域名,需要去修改dns解析记录,只需要添加一条CNAME指向你的<code>jackroyal.coding.me</code>即可.<br>注意后面加个点,也就是正确的填法是<code>jackroyal.coding.me.</code>,如下图所示.修改完成后大概等几分钟才能生效<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1f1n9m6me2ej20nv09c0us.jpg\" alt=\"修改dns设置\"></p>\n<h1 id=\"8-从gitcafe迁移\"><a href=\"#8-从gitcafe迁移\" class=\"headerlink\" title=\"8 从gitcafe迁移\"></a>8 从gitcafe迁移</h1><p>如果我们选择从gitcafe迁移的话,他会把我们原来的博客迁移过来.为了适应coding,你只需要从上面第二步开始就好,尤其注意的是,<code>新建coding-pages分支</code>,<code>新建coding-pages分支</code>,<code>新建coding-pages分支</code>,重要的事情说三遍,因为你迁移过来的分支名称是<code>gitcafe-pages</code>.<br>也就是核心问题,必须有个和用户名同名的项目,项目必须有个分支是<code>coding-pages</code></p>\n<p>其他没提的事情和上一篇是一样的.<br>最后执行<code>hexo d -g</code>,打完收工</p>\n","excerpt":"<p>上一篇文章<a href=\"http://jackroyal.github.io/2015/11/25/how-to-solve-the-problem-that-github-blocks-the-baidu-spider/\">解决 Github Pages 禁止百度爬虫的方法</a>,提到了解决百度爬虫被github禁用掉的方法.<br><code>把博客同时发布到github pages和gitcafe pages.然后使用dnspod设置域名解析,国内线路解析到gitcafe,国外线路解析到github.</code><br>然后今天去上gitcafe,偶然看到这个<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1f1n79skvt3j20zl0m7k07.jpg\" alt=\"GitCafe 项目迁移至 Coding.net 公告\"><br>额(⊙o⊙)…,holly shit.不过没办法,人家都被收购了,我们只能改变策略了.<br>话说,两家都是做代码托管的,这也是顺(bao)应(tuan)潮(qu)流(nuan)咩?<br>","more":"<br>思路跟原来差不多,就是我们把其中的gitcafe内容替换成coding.net就好,以下简称coding.<br><code>把博客同时发布到github pages和coding pages.然后使用dnspod设置域名解析,国内线路解析到coding.net,国外线路解析到github.</code></p>\n<ol>\n<li>注册coding账号</li>\n<li>新建一个项目,名字与你的用户名相同,比如我的名字是<code>Jackroyal</code>,新建一个项目名为<code>Jackroyal</code></li>\n<li>添加ssh公钥</li>\n<li>新建coding-pages分支</li>\n<li>开启pages服务</li>\n<li>修改hexo配置</li>\n<li>修改dns设置<h1 id=\"1-注册coding账号\"><a href=\"#1-注册coding账号\" class=\"headerlink\" title=\"1 注册coding账号\"></a>1 注册coding账号</h1>这个很简单不必说,注册需要填写用户名,邮箱和密码,比如我的用户名就是<code>Jackroyal</code><h1 id=\"2-新建和用户名同名的项目\"><a href=\"#2-新建和用户名同名的项目\" class=\"headerlink\" title=\"2 新建和用户名同名的项目\"></a>2 新建和用户名同名的项目</h1>在注册好账号以后,我们就去新建一个项目,方法和gitcafe不同和gihub类似,就是和用户名同名,一模一样的就行.我的项目名是<code>Jackroyal</code>,项目属性<code>公开</code><br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1f1n8d42xljj20qb0hbmzc.jpg\" alt=\"新建同名项目\"><h1 id=\"3-添加ssh公钥\"><a href=\"#3-添加ssh公钥\" class=\"headerlink\" title=\"3 添加ssh公钥\"></a>3 添加<code>ssh</code>公钥</h1>首先,我们提交代码库有两种方式,一种是https,一种是ssh,两种方式都可以,但是因为我们使用hexo来发布博客的时候是没有地方输入密码的,所以我们才考虑使用<code>ssh</code>方式,不过也不一定,我们还是可以使用https方式来提交hexo的.<h2 id=\"3-1-使用ssh方式发布博客\"><a href=\"#3-1-使用ssh方式发布博客\" class=\"headerlink\" title=\"3.1 使用ssh方式发布博客\"></a>3.1 使用ssh方式发布博客</h2>我们只需要找到本地的ssh公钥,然后上传到coding上去就行,点击<a href=\"https://coding.net/user/account/setting/keys\">这里</a>设置.查看本地ssh公钥的方法和上篇博客一样.<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1eye75djqo9j20gj09475k.jpg\" alt=\"使用git客户端查看ssh公钥私钥\"><br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1eye7c2xpavj20if06dt9w.jpg\" alt=\"查看公钥\"><br>复制那一段,然后在coding上添加上去就行<h2 id=\"3-2-使用https方式发布\"><a href=\"#3-2-使用https方式发布\" class=\"headerlink\" title=\"3.2 使用https方式发布\"></a>3.2 使用https方式发布</h2>如果非要使用https方式,也是可以的,核心思路就是在本地做一次<code>push</code>操作就行.</li>\n<li>我们先<code>git clone</code>命令,我的项目就是<code>git clone https://git.coding.net/Jackroyal/Jackroyal.git</code>得到coding上刚才新建的项目.</li>\n<li>克隆完成后,接着我们进到项目目录,我们新建一个文件或者修改一个文件</li>\n<li><code>git add .</code>,把修改提交到暂存区</li>\n<li><code>git commit -m &quot;测试提交&quot;</code>,将修改提交到本地仓库</li>\n<li><code>git push</code>,将修改提交到远程仓库</li>\n<li>接下来,会让你输入用户名和密码,你输入</li>\n<li>然后项目就会提交,因为这个状态会保留下来,你下次在提交就可以不用输入用户名和密码了,这样为我们使用hexo发布代码提供条件<br>ps:这种方式,可能过一段时间又不行了,报错<code>could not read Username for &#39;https://git.coding.net&#39;: Invalid argument</code>,你再做一次上面的操作就行<h1 id=\"4-新建coding-pages分支\"><a href=\"#4-新建coding-pages分支\" class=\"headerlink\" title=\"4 新建coding-pages分支\"></a>4 新建coding-pages分支</h1>当我们可以提交代码的时候,我们先来新建分支,和gitcafe差不多,它需要一个特别的分支名字,而不是像github默认的master分支,名字是<code>coding-pages</code>,如下图所示<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1f1n965hcj0j210r0g3jvk.jpg\" alt=\"新建coding分支\"><br>我们把它设为默认分支<h1 id=\"5-开启pages服务\"><a href=\"#5-开启pages服务\" class=\"headerlink\" title=\"5 开启pages服务\"></a>5 开启pages服务</h1>接下来我们需要手动去开启pages服务.在项目主页的<code>pages</code>选项卡,点击开启服务,同时我们,添加域名绑定<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1f1n98oezpej20sv0kxtdb.jpg\" alt=\"开启pages服务\"><br>域名绑定我们还要去修改dns解析,我们先用它分配给我们的域名去访问<a href=\"http://jackroyal.coding.me/\">http://jackroyal.coding.me/</a>,看看能不能正常访问<h1 id=\"5-修改hexo配置\"><a href=\"#5-修改hexo配置\" class=\"headerlink\" title=\"5 修改hexo配置\"></a>5 修改hexo配置</h1>前面的准备工作做得差不多,我们修改博客的配置信息,打开博客根目录的<code>_config.yml</code>文件,格式和之前github的差不多:<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">- <span class=\"attribute\">type</span>: git</div><div class=\"line\">  <span class=\"attribute\">repo</span>: <span class=\"string\">'https://github.com/Jackroyal/Jackroyal.github.io.git'</span></div><div class=\"line\">  <span class=\"attribute\">branch</span>: master</div><div class=\"line\">- <span class=\"attribute\">type</span>: git</div><div class=\"line\">  <span class=\"attribute\">repo</span>: <span class=\"string\">'https://git.coding.net/Jackroyal/Jackroyal.git'</span></div><div class=\"line\">  <span class=\"attribute\">branch</span>: coding-pages</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>尤其注意在配置的时候注意留空格,这种键值对,比如<code>type: git</code>,其中的冒号后面到git,有个空格的,不然配置文件就会读取错误.<br>还要注意branch名称,分支必须是<code>coding-pages</code><br><strong>PS:如上面所说,我选择的是https方式发布,所以我的repo是https的,如果你选择ssh方式去认证,那么你的地址应该是类似这样的<code>git@git.coding.net:Jackroyal/Jackroyal.git</code>\n</strong></p>\n<p><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1f1n9byao2wj20o00gqn0e.jpg\" alt=\"添加coding的repo信息\"></p>\n<h1 id=\"7-修改dns设置\"><a href=\"#7-修改dns设置\" class=\"headerlink\" title=\"7 修改dns设置\"></a>7 修改dns设置</h1><p>就像第5步页面提示的,我们要绑定自己的域名,需要去修改dns解析记录,只需要添加一条CNAME指向你的<code>jackroyal.coding.me</code>即可.<br>注意后面加个点,也就是正确的填法是<code>jackroyal.coding.me.</code>,如下图所示.修改完成后大概等几分钟才能生效<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1f1n9m6me2ej20nv09c0us.jpg\" alt=\"修改dns设置\"></p>\n<h1 id=\"8-从gitcafe迁移\"><a href=\"#8-从gitcafe迁移\" class=\"headerlink\" title=\"8 从gitcafe迁移\"></a>8 从gitcafe迁移</h1><p>如果我们选择从gitcafe迁移的话,他会把我们原来的博客迁移过来.为了适应coding,你只需要从上面第二步开始就好,尤其注意的是,<code>新建coding-pages分支</code>,<code>新建coding-pages分支</code>,<code>新建coding-pages分支</code>,重要的事情说三遍,因为你迁移过来的分支名称是<code>gitcafe-pages</code>.<br>也就是核心问题,必须有个和用户名同名的项目,项目必须有个分支是<code>coding-pages</code></p>\n<p>其他没提的事情和上一篇是一样的.<br>最后执行<code>hexo d -g</code>,打完收工</p>"},{"title":"git使用笔记(1)","date":"2015-11-04T04:17:04.000Z","_content":"git也用了一段时间了,还是写点笔记,记录一下.\n<!-- more -->\n# 准备条件\n首先假装你已经安装好了git\n+ 在Linux下\n    我用的是`ubuntu`,安装非常easy,使用`sudo apt-get install git`\n+ 在windows下\n    在windows下安装,就使用[git-downloads](https://git-scm.com/downloads),点击下载,安装,就ok.\nps:如果你足够幸运,可以试试[github的windows版](https://desktop.github.com/),这个的好处是,带有图形化界面.\n\n# 1 初始化git设置\n新装好git后,我们先配置个人的用户名和email,这两条配置很重要,因为在git的日志中,都会带上这两条信息.\n```bash\n$ git config --global user.name \"John Doe\"\n$ git config --global user.email johndoe@example.com\n```\n如果用了`--global`选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉`--global`选项重新配置即可，新的设定保存在当前项目的`.git/config`文件里。\n\n# 2 新建第一个仓库\n建立第一个仓库有两种方式,一种是完全新建一个仓库,第二种是克隆一个现有仓库.\n\n#### 2.1 完全新建一个仓库\n你先切换到你想建项目的地方,比如`f:/blog/`,然后执行\n```bash\ngit init\n```\n初始化后再在当前目录新建一个名为`.git`的目录,git所有的东西都存在这里面.当然我们不用管.\n\n#### 2.2 克隆一个现有仓库\n这个也是很easy,直接一条命令搞定\n```bash\ngit clone https://github.com/Jackroyal/blog.git\n```\n他会在你的当前目录新建一个`blog`文件夹,在`blog`文件夹里面他会把相关的文件都下载下来,就可以用了.\n# 3 提交更新\n\n#### 3.1 提交工作空间文件到暂存区\n执行`touch a.txt`,我们在目录中新建一个文件名叫`a.txt`,然后我们修改它的内容.\n接下来,我们来查看下状态\n```bash\ngit status\n```\n执行结果如下图:\n![执行git status查看工作区文件状态](http://ww1.sinaimg.cn/large/692869a3gw1exoxiu5jyij20it0933zl.jpg)\n就像图片中提示的,我们新加的`a.txt`是未跟踪文件,我们执行\n```bash\ngit add a.txt\n```\n我们把`a.txt`添加到暂存区,再次执行`git status`,查看状态,执行结果如图所示\n![添加到暂存区后再次执行git status](http://ww2.sinaimg.cn/large/692869a3gw1exoxp6duu1j20it07o0th.jpg)\n\n#### 3.2 将暂存区文件保存到本地仓库\n假如你要做的修改已经改完,已经保存到暂存区了,我们准备提交到本地仓库.执行\n```\ngit commit -m \"这是提交内容\"\n```\n参数`-m`,就是添加说明,方便以后查看,你就可以知道自己做了哪些更改\n\n#### 3.3 将本地仓库内容提交到远程仓库\n上面的步骤都弄好以后,我们提交到远程仓库\n```\n git push origin master\n```\n然后就行了,一个基本的流程就是这样.\n推荐看看下面友情链接里面的那本书,pro git \n![pro git封面](http://ww1.sinaimg.cn/large/692869a3gw1exp17u1ltjj208r0boq38.jpg)\n\n# 友情链接\n1 [pro git中文书籍在线版](http://iissnan.com/progit/)\n","source":"_posts/my-git-note1.md","raw":"title: git使用笔记(1)\ndate: 2015-11-04 12:17:04\ntags:\n- Linux\n- git\n- github\ncategories:\n- Linux\n---\ngit也用了一段时间了,还是写点笔记,记录一下.\n<!-- more -->\n# 准备条件\n首先假装你已经安装好了git\n+ 在Linux下\n    我用的是`ubuntu`,安装非常easy,使用`sudo apt-get install git`\n+ 在windows下\n    在windows下安装,就使用[git-downloads](https://git-scm.com/downloads),点击下载,安装,就ok.\nps:如果你足够幸运,可以试试[github的windows版](https://desktop.github.com/),这个的好处是,带有图形化界面.\n\n# 1 初始化git设置\n新装好git后,我们先配置个人的用户名和email,这两条配置很重要,因为在git的日志中,都会带上这两条信息.\n```bash\n$ git config --global user.name \"John Doe\"\n$ git config --global user.email johndoe@example.com\n```\n如果用了`--global`选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉`--global`选项重新配置即可，新的设定保存在当前项目的`.git/config`文件里。\n\n# 2 新建第一个仓库\n建立第一个仓库有两种方式,一种是完全新建一个仓库,第二种是克隆一个现有仓库.\n\n#### 2.1 完全新建一个仓库\n你先切换到你想建项目的地方,比如`f:/blog/`,然后执行\n```bash\ngit init\n```\n初始化后再在当前目录新建一个名为`.git`的目录,git所有的东西都存在这里面.当然我们不用管.\n\n#### 2.2 克隆一个现有仓库\n这个也是很easy,直接一条命令搞定\n```bash\ngit clone https://github.com/Jackroyal/blog.git\n```\n他会在你的当前目录新建一个`blog`文件夹,在`blog`文件夹里面他会把相关的文件都下载下来,就可以用了.\n# 3 提交更新\n\n#### 3.1 提交工作空间文件到暂存区\n执行`touch a.txt`,我们在目录中新建一个文件名叫`a.txt`,然后我们修改它的内容.\n接下来,我们来查看下状态\n```bash\ngit status\n```\n执行结果如下图:\n![执行git status查看工作区文件状态](http://ww1.sinaimg.cn/large/692869a3gw1exoxiu5jyij20it0933zl.jpg)\n就像图片中提示的,我们新加的`a.txt`是未跟踪文件,我们执行\n```bash\ngit add a.txt\n```\n我们把`a.txt`添加到暂存区,再次执行`git status`,查看状态,执行结果如图所示\n![添加到暂存区后再次执行git status](http://ww2.sinaimg.cn/large/692869a3gw1exoxp6duu1j20it07o0th.jpg)\n\n#### 3.2 将暂存区文件保存到本地仓库\n假如你要做的修改已经改完,已经保存到暂存区了,我们准备提交到本地仓库.执行\n```\ngit commit -m \"这是提交内容\"\n```\n参数`-m`,就是添加说明,方便以后查看,你就可以知道自己做了哪些更改\n\n#### 3.3 将本地仓库内容提交到远程仓库\n上面的步骤都弄好以后,我们提交到远程仓库\n```\n git push origin master\n```\n然后就行了,一个基本的流程就是这样.\n推荐看看下面友情链接里面的那本书,pro git \n![pro git封面](http://ww1.sinaimg.cn/large/692869a3gw1exp17u1ltjj208r0boq38.jpg)\n\n# 友情链接\n1 [pro git中文书籍在线版](http://iissnan.com/progit/)\n","slug":"my-git-note1","published":1,"updated":"2015-11-04T13:38:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7ypo001px8cdhym7rv7v","content":"<p>git也用了一段时间了,还是写点笔记,记录一下.<br><a id=\"more\"></a></p>\n<h1 id=\"准备条件\"><a href=\"#准备条件\" class=\"headerlink\" title=\"准备条件\"></a>准备条件</h1><p>首先假装你已经安装好了git</p>\n<ul>\n<li>在Linux下<br>  我用的是<code>ubuntu</code>,安装非常easy,使用<code>sudo apt-get install git</code></li>\n<li>在windows下<br>  在windows下安装,就使用<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"external\">git-downloads</a>,点击下载,安装,就ok.<br>ps:如果你足够幸运,可以试试<a href=\"https://desktop.github.com/\" target=\"_blank\" rel=\"external\">github的windows版</a>,这个的好处是,带有图形化界面.</li>\n</ul>\n<h1 id=\"1-初始化git设置\"><a href=\"#1-初始化git设置\" class=\"headerlink\" title=\"1 初始化git设置\"></a>1 初始化git设置</h1><p>新装好git后,我们先配置个人的用户名和email,这两条配置很重要,因为在git的日志中,都会带上这两条信息.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name <span class=\"string\">\"John Doe\"</span></div><div class=\"line\">$ git config --global user.email johndoe@example.com</div></pre></td></tr></table></figure></p>\n<p>如果用了<code>--global</code>选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉<code>--global</code>选项重新配置即可，新的设定保存在当前项目的<code>.git/config</code>文件里。</p>\n<h1 id=\"2-新建第一个仓库\"><a href=\"#2-新建第一个仓库\" class=\"headerlink\" title=\"2 新建第一个仓库\"></a>2 新建第一个仓库</h1><p>建立第一个仓库有两种方式,一种是完全新建一个仓库,第二种是克隆一个现有仓库.</p>\n<h4 id=\"2-1-完全新建一个仓库\"><a href=\"#2-1-完全新建一个仓库\" class=\"headerlink\" title=\"2.1 完全新建一个仓库\"></a>2.1 完全新建一个仓库</h4><p>你先切换到你想建项目的地方,比如<code>f:/blog/</code>,然后执行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init</div></pre></td></tr></table></figure></p>\n<p>初始化后再在当前目录新建一个名为<code>.git</code>的目录,git所有的东西都存在这里面.当然我们不用管.</p>\n<h4 id=\"2-2-克隆一个现有仓库\"><a href=\"#2-2-克隆一个现有仓库\" class=\"headerlink\" title=\"2.2 克隆一个现有仓库\"></a>2.2 克隆一个现有仓库</h4><p>这个也是很easy,直接一条命令搞定<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/Jackroyal/blog.git</div></pre></td></tr></table></figure></p>\n<p>他会在你的当前目录新建一个<code>blog</code>文件夹,在<code>blog</code>文件夹里面他会把相关的文件都下载下来,就可以用了.</p>\n<h1 id=\"3-提交更新\"><a href=\"#3-提交更新\" class=\"headerlink\" title=\"3 提交更新\"></a>3 提交更新</h1><h4 id=\"3-1-提交工作空间文件到暂存区\"><a href=\"#3-1-提交工作空间文件到暂存区\" class=\"headerlink\" title=\"3.1 提交工作空间文件到暂存区\"></a>3.1 提交工作空间文件到暂存区</h4><p>执行<code>touch a.txt</code>,我们在目录中新建一个文件名叫<code>a.txt</code>,然后我们修改它的内容.<br>接下来,我们来查看下状态<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status</div></pre></td></tr></table></figure></p>\n<p>执行结果如下图:<br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1exoxiu5jyij20it0933zl.jpg\" alt=\"执行git status查看工作区文件状态\"><br>就像图片中提示的,我们新加的<code>a.txt</code>是未跟踪文件,我们执行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add a.txt</div></pre></td></tr></table></figure></p>\n<p>我们把<code>a.txt</code>添加到暂存区,再次执行<code>git status</code>,查看状态,执行结果如图所示<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1exoxp6duu1j20it07o0th.jpg\" alt=\"添加到暂存区后再次执行git status\"></p>\n<h4 id=\"3-2-将暂存区文件保存到本地仓库\"><a href=\"#3-2-将暂存区文件保存到本地仓库\" class=\"headerlink\" title=\"3.2 将暂存区文件保存到本地仓库\"></a>3.2 将暂存区文件保存到本地仓库</h4><p>假如你要做的修改已经改完,已经保存到暂存区了,我们准备提交到本地仓库.执行<br><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">git</span> commit -m <span class=\"string\">\"这是提交内容\"</span></div></pre></td></tr></table></figure></p>\n<p>参数<code>-m</code>,就是添加说明,方便以后查看,你就可以知道自己做了哪些更改</p>\n<h4 id=\"3-3-将本地仓库内容提交到远程仓库\"><a href=\"#3-3-将本地仓库内容提交到远程仓库\" class=\"headerlink\" title=\"3.3 将本地仓库内容提交到远程仓库\"></a>3.3 将本地仓库内容提交到远程仓库</h4><p>上面的步骤都弄好以后,我们提交到远程仓库<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">push</span> <span class=\"built_in\">origin</span> master</div></pre></td></tr></table></figure></p>\n<p>然后就行了,一个基本的流程就是这样.<br>推荐看看下面友情链接里面的那本书,pro git<br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1exp17u1ltjj208r0boq38.jpg\" alt=\"pro git封面\"></p>\n<h1 id=\"友情链接\"><a href=\"#友情链接\" class=\"headerlink\" title=\"友情链接\"></a>友情链接</h1><p>1 <a href=\"http://iissnan.com/progit/\" target=\"_blank\" rel=\"external\">pro git中文书籍在线版</a></p>\n","excerpt":"<p>git也用了一段时间了,还是写点笔记,记录一下.<br>","more":"</p>\n<h1 id=\"准备条件\"><a href=\"#准备条件\" class=\"headerlink\" title=\"准备条件\"></a>准备条件</h1><p>首先假装你已经安装好了git</p>\n<ul>\n<li>在Linux下<br>  我用的是<code>ubuntu</code>,安装非常easy,使用<code>sudo apt-get install git</code></li>\n<li>在windows下<br>  在windows下安装,就使用<a href=\"https://git-scm.com/downloads\">git-downloads</a>,点击下载,安装,就ok.<br>ps:如果你足够幸运,可以试试<a href=\"https://desktop.github.com/\">github的windows版</a>,这个的好处是,带有图形化界面.</li>\n</ul>\n<h1 id=\"1-初始化git设置\"><a href=\"#1-初始化git设置\" class=\"headerlink\" title=\"1 初始化git设置\"></a>1 初始化git设置</h1><p>新装好git后,我们先配置个人的用户名和email,这两条配置很重要,因为在git的日志中,都会带上这两条信息.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name <span class=\"string\">\"John Doe\"</span></div><div class=\"line\">$ git config --global user.email johndoe@example.com</div></pre></td></tr></table></figure></p>\n<p>如果用了<code>--global</code>选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉<code>--global</code>选项重新配置即可，新的设定保存在当前项目的<code>.git/config</code>文件里。</p>\n<h1 id=\"2-新建第一个仓库\"><a href=\"#2-新建第一个仓库\" class=\"headerlink\" title=\"2 新建第一个仓库\"></a>2 新建第一个仓库</h1><p>建立第一个仓库有两种方式,一种是完全新建一个仓库,第二种是克隆一个现有仓库.</p>\n<h4 id=\"2-1-完全新建一个仓库\"><a href=\"#2-1-完全新建一个仓库\" class=\"headerlink\" title=\"2.1 完全新建一个仓库\"></a>2.1 完全新建一个仓库</h4><p>你先切换到你想建项目的地方,比如<code>f:/blog/</code>,然后执行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init</div></pre></td></tr></table></figure></p>\n<p>初始化后再在当前目录新建一个名为<code>.git</code>的目录,git所有的东西都存在这里面.当然我们不用管.</p>\n<h4 id=\"2-2-克隆一个现有仓库\"><a href=\"#2-2-克隆一个现有仓库\" class=\"headerlink\" title=\"2.2 克隆一个现有仓库\"></a>2.2 克隆一个现有仓库</h4><p>这个也是很easy,直接一条命令搞定<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/Jackroyal/blog.git</div></pre></td></tr></table></figure></p>\n<p>他会在你的当前目录新建一个<code>blog</code>文件夹,在<code>blog</code>文件夹里面他会把相关的文件都下载下来,就可以用了.</p>\n<h1 id=\"3-提交更新\"><a href=\"#3-提交更新\" class=\"headerlink\" title=\"3 提交更新\"></a>3 提交更新</h1><h4 id=\"3-1-提交工作空间文件到暂存区\"><a href=\"#3-1-提交工作空间文件到暂存区\" class=\"headerlink\" title=\"3.1 提交工作空间文件到暂存区\"></a>3.1 提交工作空间文件到暂存区</h4><p>执行<code>touch a.txt</code>,我们在目录中新建一个文件名叫<code>a.txt</code>,然后我们修改它的内容.<br>接下来,我们来查看下状态<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status</div></pre></td></tr></table></figure></p>\n<p>执行结果如下图:<br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1exoxiu5jyij20it0933zl.jpg\" alt=\"执行git status查看工作区文件状态\"><br>就像图片中提示的,我们新加的<code>a.txt</code>是未跟踪文件,我们执行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add a.txt</div></pre></td></tr></table></figure></p>\n<p>我们把<code>a.txt</code>添加到暂存区,再次执行<code>git status</code>,查看状态,执行结果如图所示<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1exoxp6duu1j20it07o0th.jpg\" alt=\"添加到暂存区后再次执行git status\"></p>\n<h4 id=\"3-2-将暂存区文件保存到本地仓库\"><a href=\"#3-2-将暂存区文件保存到本地仓库\" class=\"headerlink\" title=\"3.2 将暂存区文件保存到本地仓库\"></a>3.2 将暂存区文件保存到本地仓库</h4><p>假如你要做的修改已经改完,已经保存到暂存区了,我们准备提交到本地仓库.执行<br><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">git</span> commit -m <span class=\"string\">\"这是提交内容\"</span></div></pre></td></tr></table></figure></p>\n<p>参数<code>-m</code>,就是添加说明,方便以后查看,你就可以知道自己做了哪些更改</p>\n<h4 id=\"3-3-将本地仓库内容提交到远程仓库\"><a href=\"#3-3-将本地仓库内容提交到远程仓库\" class=\"headerlink\" title=\"3.3 将本地仓库内容提交到远程仓库\"></a>3.3 将本地仓库内容提交到远程仓库</h4><p>上面的步骤都弄好以后,我们提交到远程仓库<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">push</span> <span class=\"built_in\">origin</span> master</div></pre></td></tr></table></figure></p>\n<p>然后就行了,一个基本的流程就是这样.<br>推荐看看下面友情链接里面的那本书,pro git<br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1exp17u1ltjj208r0boq38.jpg\" alt=\"pro git封面\"></p>\n<h1 id=\"友情链接\"><a href=\"#友情链接\" class=\"headerlink\" title=\"友情链接\"></a>友情链接</h1><p>1 <a href=\"http://iissnan.com/progit/\">pro git中文书籍在线版</a></p>"},{"title":"Linux下使用github","date":"2015-01-18T16:53:48.000Z","_content":">我的惰性真是病入膏肓了，已经整整3周没有在github上提交东西了，今天看了《模拟游戏》，索性又捡起来了。下面来总结一下linux下github的使用，也算是给自己一个备份，因为我自己也是老忘记。\n\n<!-- more -->\n\n使用环境：Ubuntu 14.04\n\n## 1 安装git相关软件\n我的Ubuntu里面没有自带git相关软件，所以我们首先需要安装它，很简单。\n```\nsudo apt-get install git \n```\n## 2 初始化git的设置\n接下来，进行初始化设置，也就是设置你的github账号和密码\n```\ngit config --global user.name \"zhangsan\"# 其中的“zhangsan”输入的就是你注册时候的用户名，这步是设置你提交时候默认的用户名\n# 之后设置提交时候默认的邮箱，在命令行输入：\ngit config --global user.email \"haha@qq.com\"\n# 其中的“haha@qq.com”就是你注册时候用的邮箱，当然也可以用别的邮箱，用别的邮箱的时候你必须在github的主页上设置里面把用的邮箱添加进去\n```\n## 3 开始使用github\n1 首先你的github上应该有一个库，如果没有的话，就去github网站上新建一个库，或者fork一个别人的项目，以下的操作都是建立在这个基础上，`假设存在一个库https://github.com/Jackroyal/test.git`.\n如果你的github上已经有库了，可以忽略第1步直接进入第2步\n2 我们在本地新建一个文件夹(命名随你便，我取名叫做test_git)\n```\nmkdir test_git\n```\n3 将远程的库复制下来，我们使用git clone命令来完成\n```\n# 如果你的环境不在test_git目录\n# cd test_git\n# 如果在test_git中\ngit clone https://github.com/Jackroyal/test.git# 他会在你的本地新建一个test文件夹\ncd test\n# 接下来新建一个测试文件\ntouch test.md\n# 修改测试文件的内容\nvi test.md\n# 提交刚才所做的更改\ngit add .\ngit commit -m \"首次提交\"\n```\n3 push提交到github\n```\ngit remote add origin https://github.com/Jackroyal/test.git\ngit push\n```\n之后会提示你输入用户名密码，你输入你github账号和密码就行了\n打完收工，睡觉\n后面会陆续介绍hexo在Linux下的使用\n# 参考文献\n1 [ubuntu 下 github 简单的使用教程](http://blog.chinaunix.net/uid-29040159-id-3799719.html)\n2 [Github入门级使用攻略](http://blog.csdn.net/pony_maggie/article/details/23207847)\n","source":"_posts/linux下使用github.md","raw":"title: Linux下使用github\ndate: 2015-01-19 00:53:48\ntags:\n- Linux\n- github\ncategories:\n- Linux\n---\n>我的惰性真是病入膏肓了，已经整整3周没有在github上提交东西了，今天看了《模拟游戏》，索性又捡起来了。下面来总结一下linux下github的使用，也算是给自己一个备份，因为我自己也是老忘记。\n\n<!-- more -->\n\n使用环境：Ubuntu 14.04\n\n## 1 安装git相关软件\n我的Ubuntu里面没有自带git相关软件，所以我们首先需要安装它，很简单。\n```\nsudo apt-get install git \n```\n## 2 初始化git的设置\n接下来，进行初始化设置，也就是设置你的github账号和密码\n```\ngit config --global user.name \"zhangsan\"# 其中的“zhangsan”输入的就是你注册时候的用户名，这步是设置你提交时候默认的用户名\n# 之后设置提交时候默认的邮箱，在命令行输入：\ngit config --global user.email \"haha@qq.com\"\n# 其中的“haha@qq.com”就是你注册时候用的邮箱，当然也可以用别的邮箱，用别的邮箱的时候你必须在github的主页上设置里面把用的邮箱添加进去\n```\n## 3 开始使用github\n1 首先你的github上应该有一个库，如果没有的话，就去github网站上新建一个库，或者fork一个别人的项目，以下的操作都是建立在这个基础上，`假设存在一个库https://github.com/Jackroyal/test.git`.\n如果你的github上已经有库了，可以忽略第1步直接进入第2步\n2 我们在本地新建一个文件夹(命名随你便，我取名叫做test_git)\n```\nmkdir test_git\n```\n3 将远程的库复制下来，我们使用git clone命令来完成\n```\n# 如果你的环境不在test_git目录\n# cd test_git\n# 如果在test_git中\ngit clone https://github.com/Jackroyal/test.git# 他会在你的本地新建一个test文件夹\ncd test\n# 接下来新建一个测试文件\ntouch test.md\n# 修改测试文件的内容\nvi test.md\n# 提交刚才所做的更改\ngit add .\ngit commit -m \"首次提交\"\n```\n3 push提交到github\n```\ngit remote add origin https://github.com/Jackroyal/test.git\ngit push\n```\n之后会提示你输入用户名密码，你输入你github账号和密码就行了\n打完收工，睡觉\n后面会陆续介绍hexo在Linux下的使用\n# 参考文献\n1 [ubuntu 下 github 简单的使用教程](http://blog.chinaunix.net/uid-29040159-id-3799719.html)\n2 [Github入门级使用攻略](http://blog.csdn.net/pony_maggie/article/details/23207847)\n","slug":"linux下使用github","published":1,"updated":"2015-11-04T09:58:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7ypr001ux8cdtk0srjol","content":"<blockquote>\n<p>我的惰性真是病入膏肓了，已经整整3周没有在github上提交东西了，今天看了《模拟游戏》，索性又捡起来了。下面来总结一下linux下github的使用，也算是给自己一个备份，因为我自己也是老忘记。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>使用环境：Ubuntu 14.04</p>\n<h2 id=\"1-安装git相关软件\"><a href=\"#1-安装git相关软件\" class=\"headerlink\" title=\"1 安装git相关软件\"></a>1 安装git相关软件</h2><p>我的Ubuntu里面没有自带git相关软件，所以我们首先需要安装它，很简单。<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"keyword\">get</span> install git</div></pre></td></tr></table></figure></p>\n<h2 id=\"2-初始化git的设置\"><a href=\"#2-初始化git的设置\" class=\"headerlink\" title=\"2 初始化git的设置\"></a>2 初始化git的设置</h2><p>接下来，进行初始化设置，也就是设置你的github账号和密码<br><figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --<span class=\"keyword\">global</span> user.name <span class=\"string\">\"zhangsan\"</span><span class=\"meta\"># 其中的“zhangsan”输入的就是你注册时候的用户名，这步是设置你提交时候默认的用户名</span></div><div class=\"line\"><span class=\"meta\"># 之后设置提交时候默认的邮箱，在命令行输入：</span></div><div class=\"line\">git config --<span class=\"keyword\">global</span> user.email <span class=\"string\">\"haha@qq.com\"</span></div><div class=\"line\"><span class=\"meta\"># 其中的“haha@qq.com”就是你注册时候用的邮箱，当然也可以用别的邮箱，用别的邮箱的时候你必须在github的主页上设置里面把用的邮箱添加进去</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"3-开始使用github\"><a href=\"#3-开始使用github\" class=\"headerlink\" title=\"3 开始使用github\"></a>3 开始使用github</h2><p>1 首先你的github上应该有一个库，如果没有的话，就去github网站上新建一个库，或者fork一个别人的项目，以下的操作都是建立在这个基础上，<code>假设存在一个库https://github.com/Jackroyal/test.git</code>.<br>如果你的github上已经有库了，可以忽略第1步直接进入第2步<br>2 我们在本地新建一个文件夹(命名随你便，我取名叫做test_git)<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">mkdir</span> test_git</div></pre></td></tr></table></figure></p>\n<p>3 将远程的库复制下来，我们使用git clone命令来完成<br><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># 如果你的环境不在test_git目录</span></div><div class=\"line\"><span class=\"meta\"># cd test_git</span></div><div class=\"line\"><span class=\"meta\"># 如果在test_git中</span></div><div class=\"line\">git clone https:<span class=\"comment\">//github.com/Jackroyal/test.git# 他会在你的本地新建一个test文件夹</span></div><div class=\"line\">cd test</div><div class=\"line\"><span class=\"meta\"># 接下来新建一个测试文件</span></div><div class=\"line\">touch test.md</div><div class=\"line\"><span class=\"meta\"># 修改测试文件的内容</span></div><div class=\"line\">vi test.md</div><div class=\"line\"><span class=\"meta\"># 提交刚才所做的更改</span></div><div class=\"line\">git add .</div><div class=\"line\">git commit -m <span class=\"string\">\"首次提交\"</span></div></pre></td></tr></table></figure></p>\n<p>3 push提交到github<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote <span class=\"keyword\">add</span><span class=\"bash\"> origin https://github.com/Jackroyal/test.git</span></div><div class=\"line\">git push</div></pre></td></tr></table></figure></p>\n<p>之后会提示你输入用户名密码，你输入你github账号和密码就行了<br>打完收工，睡觉<br>后面会陆续介绍hexo在Linux下的使用</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"http://blog.chinaunix.net/uid-29040159-id-3799719.html\" target=\"_blank\" rel=\"external\">ubuntu 下 github 简单的使用教程</a><br>2 <a href=\"http://blog.csdn.net/pony_maggie/article/details/23207847\" target=\"_blank\" rel=\"external\">Github入门级使用攻略</a></p>\n","excerpt":"<blockquote>\n<p>我的惰性真是病入膏肓了，已经整整3周没有在github上提交东西了，今天看了《模拟游戏》，索性又捡起来了。下面来总结一下linux下github的使用，也算是给自己一个备份，因为我自己也是老忘记。</p>\n</blockquote>","more":"<p>使用环境：Ubuntu 14.04</p>\n<h2 id=\"1-安装git相关软件\"><a href=\"#1-安装git相关软件\" class=\"headerlink\" title=\"1 安装git相关软件\"></a>1 安装git相关软件</h2><p>我的Ubuntu里面没有自带git相关软件，所以我们首先需要安装它，很简单。<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"keyword\">get</span> install git</div></pre></td></tr></table></figure></p>\n<h2 id=\"2-初始化git的设置\"><a href=\"#2-初始化git的设置\" class=\"headerlink\" title=\"2 初始化git的设置\"></a>2 初始化git的设置</h2><p>接下来，进行初始化设置，也就是设置你的github账号和密码<br><figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --<span class=\"keyword\">global</span> user.name <span class=\"string\">\"zhangsan\"</span><span class=\"meta\"># 其中的“zhangsan”输入的就是你注册时候的用户名，这步是设置你提交时候默认的用户名</span></div><div class=\"line\"><span class=\"meta\"># 之后设置提交时候默认的邮箱，在命令行输入：</span></div><div class=\"line\">git config --<span class=\"keyword\">global</span> user.email <span class=\"string\">\"haha@qq.com\"</span></div><div class=\"line\"><span class=\"meta\"># 其中的“haha@qq.com”就是你注册时候用的邮箱，当然也可以用别的邮箱，用别的邮箱的时候你必须在github的主页上设置里面把用的邮箱添加进去</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"3-开始使用github\"><a href=\"#3-开始使用github\" class=\"headerlink\" title=\"3 开始使用github\"></a>3 开始使用github</h2><p>1 首先你的github上应该有一个库，如果没有的话，就去github网站上新建一个库，或者fork一个别人的项目，以下的操作都是建立在这个基础上，<code>假设存在一个库https://github.com/Jackroyal/test.git</code>.<br>如果你的github上已经有库了，可以忽略第1步直接进入第2步<br>2 我们在本地新建一个文件夹(命名随你便，我取名叫做test_git)<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">mkdir</span> test_git</div></pre></td></tr></table></figure></p>\n<p>3 将远程的库复制下来，我们使用git clone命令来完成<br><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># 如果你的环境不在test_git目录</span></div><div class=\"line\"><span class=\"meta\"># cd test_git</span></div><div class=\"line\"><span class=\"meta\"># 如果在test_git中</span></div><div class=\"line\">git clone https:<span class=\"comment\">//github.com/Jackroyal/test.git# 他会在你的本地新建一个test文件夹</span></div><div class=\"line\">cd test</div><div class=\"line\"><span class=\"meta\"># 接下来新建一个测试文件</span></div><div class=\"line\">touch test.md</div><div class=\"line\"><span class=\"meta\"># 修改测试文件的内容</span></div><div class=\"line\">vi test.md</div><div class=\"line\"><span class=\"meta\"># 提交刚才所做的更改</span></div><div class=\"line\">git add .</div><div class=\"line\">git commit -m <span class=\"string\">\"首次提交\"</span></div></pre></td></tr></table></figure></p>\n<p>3 push提交到github<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote <span class=\"keyword\">add</span><span class=\"bash\"> origin https://github.com/Jackroyal/test.git</div><div class=\"line\"></span>git push</div></pre></td></tr></table></figure></p>\n<p>之后会提示你输入用户名密码，你输入你github账号和密码就行了<br>打完收工，睡觉<br>后面会陆续介绍hexo在Linux下的使用</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"http://blog.chinaunix.net/uid-29040159-id-3799719.html\">ubuntu 下 github 简单的使用教程</a><br>2 <a href=\"http://blog.csdn.net/pony_maggie/article/details/23207847\">Github入门级使用攻略</a></p>"},{"title":"那些年,我们玩过的离线安装","date":"2015-11-26T05:34:46.000Z","_content":"由于有些软件,都是下载一个安装器,然后在线安装,由于网速的原因,这种方式一旦失败,就只能重新安装,所以很坑,就找了些离线安装的方法\n<!-- more -->\n\n# 1 Adobe reader离线安装\n下载离线安装版adobe reader\n<https://get.adobe.com/cn/reader/enterprise/>\n\n# 2 chrome离线安装\nWindows平台：\n\nChrome 离线安装包（仅 Windows 可用）：\n最新稳定版（Stable Channel）：\n<http://www.google.com/chrome/eula.html?hl=zh-CN&standalone=1>\n\n最新测试版（Beta Channel）：\n<http://www.google.com/chrome/eula.html?hl=zh-CN&standalone=1&extra=betachannel>\n\n最新开发版（Dev Channel）：\n<http://www.google.com/chrome/eula.html?hl=zh-CN&standalone=1&extra=devchannel>\n","source":"_posts/offline-install.md","raw":"title: 那些年,我们玩过的离线安装\ndate: 2015-11-26 13:34:46\ntags:\n- 离线安装\n- chrome\n- flash\ncategories:\n- 软件安装与技巧\n---\n由于有些软件,都是下载一个安装器,然后在线安装,由于网速的原因,这种方式一旦失败,就只能重新安装,所以很坑,就找了些离线安装的方法\n<!-- more -->\n\n# 1 Adobe reader离线安装\n下载离线安装版adobe reader\n<https://get.adobe.com/cn/reader/enterprise/>\n\n# 2 chrome离线安装\nWindows平台：\n\nChrome 离线安装包（仅 Windows 可用）：\n最新稳定版（Stable Channel）：\n<http://www.google.com/chrome/eula.html?hl=zh-CN&standalone=1>\n\n最新测试版（Beta Channel）：\n<http://www.google.com/chrome/eula.html?hl=zh-CN&standalone=1&extra=betachannel>\n\n最新开发版（Dev Channel）：\n<http://www.google.com/chrome/eula.html?hl=zh-CN&standalone=1&extra=devchannel>\n","slug":"offline-install","published":1,"updated":"2016-11-03T08:59:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7ypt001xx8cdtyo6qtfp","content":"<p>由于有些软件,都是下载一个安装器,然后在线安装,由于网速的原因,这种方式一旦失败,就只能重新安装,所以很坑,就找了些离线安装的方法<br><a id=\"more\"></a></p>\n<h1 id=\"1-Adobe-reader离线安装\"><a href=\"#1-Adobe-reader离线安装\" class=\"headerlink\" title=\"1 Adobe reader离线安装\"></a>1 Adobe reader离线安装</h1><p>下载离线安装版adobe reader<br><a href=\"https://get.adobe.com/cn/reader/enterprise/\" target=\"_blank\" rel=\"external\">https://get.adobe.com/cn/reader/enterprise/</a></p>\n<h1 id=\"2-chrome离线安装\"><a href=\"#2-chrome离线安装\" class=\"headerlink\" title=\"2 chrome离线安装\"></a>2 chrome离线安装</h1><p>Windows平台：</p>\n<p>Chrome 离线安装包（仅 Windows 可用）：<br>最新稳定版（Stable Channel）：<br><a href=\"http://www.google.com/chrome/eula.html?hl=zh-CN&amp;standalone=1\" target=\"_blank\" rel=\"external\">http://www.google.com/chrome/eula.html?hl=zh-CN&amp;standalone=1</a></p>\n<p>最新测试版（Beta Channel）：<br><a href=\"http://www.google.com/chrome/eula.html?hl=zh-CN&amp;standalone=1&amp;extra=betachannel\" target=\"_blank\" rel=\"external\">http://www.google.com/chrome/eula.html?hl=zh-CN&amp;standalone=1&amp;extra=betachannel</a></p>\n<p>最新开发版（Dev Channel）：<br><a href=\"http://www.google.com/chrome/eula.html?hl=zh-CN&amp;standalone=1&amp;extra=devchannel\" target=\"_blank\" rel=\"external\">http://www.google.com/chrome/eula.html?hl=zh-CN&amp;standalone=1&amp;extra=devchannel</a></p>\n","excerpt":"<p>由于有些软件,都是下载一个安装器,然后在线安装,由于网速的原因,这种方式一旦失败,就只能重新安装,所以很坑,就找了些离线安装的方法<br>","more":"</p>\n<h1 id=\"1-Adobe-reader离线安装\"><a href=\"#1-Adobe-reader离线安装\" class=\"headerlink\" title=\"1 Adobe reader离线安装\"></a>1 Adobe reader离线安装</h1><p>下载离线安装版adobe reader<br><a href=\"https://get.adobe.com/cn/reader/enterprise/\">https://get.adobe.com/cn/reader/enterprise/</a></p>\n<h1 id=\"2-chrome离线安装\"><a href=\"#2-chrome离线安装\" class=\"headerlink\" title=\"2 chrome离线安装\"></a>2 chrome离线安装</h1><p>Windows平台：</p>\n<p>Chrome 离线安装包（仅 Windows 可用）：<br>最新稳定版（Stable Channel）：<br><a href=\"http://www.google.com/chrome/eula.html?hl=zh-CN&amp;standalone=1\">http://www.google.com/chrome/eula.html?hl=zh-CN&amp;standalone=1</a></p>\n<p>最新测试版（Beta Channel）：<br><a href=\"http://www.google.com/chrome/eula.html?hl=zh-CN&amp;standalone=1&amp;extra=betachannel\">http://www.google.com/chrome/eula.html?hl=zh-CN&amp;standalone=1&amp;extra=betachannel</a></p>\n<p>最新开发版（Dev Channel）：<br><a href=\"http://www.google.com/chrome/eula.html?hl=zh-CN&amp;standalone=1&amp;extra=devchannel\">http://www.google.com/chrome/eula.html?hl=zh-CN&amp;standalone=1&amp;extra=devchannel</a></p>"},{"title":"git使用笔记(2)","date":"2015-11-04T08:52:25.000Z","_content":"上一篇笔记,只写了些git的基础操作,这篇写一下稍微高阶一点的操作,实际项目的时候可能经常会用到.\n<!-- more -->\n\n# 撤销操作\n撤销操作,我经常会用到,有时候写的代码没有考虑周全,或者有疏漏,需要重新提交什么的.\n\n# 1 撤销工作空间最近的修改 \n应用场景:比如上次push以后的完整干净的目录,工作空间没有任何修改,暂存区也没有任何修改,如下图:\n![上一次提交后干净的工作目录](http://ww2.sinaimg.cn/large/692869a3gw1exp9lmtz38j20cl0383yn.jpg)\n这时候,你手贱,改了一下其中的一个文件,但是这次更改是没有意义的.我们继续使用`git status`来查看\n![修改一个文件后执行git status的结果](http://ww4.sinaimg.cn/large/692869a3gw1exp9ngk82jj20it07i75f.jpg)\n我们现在想撤销这次修改.\n解决方法:现在这个修改只是工作区的修改,我们要撤销很简单执行\n```bash\ngit checkout a.txt\n```\n搞定\n\n# 2 撤销暂存区最近的修改\n应用场景:假如在上面说的那种情况下,你手贱改错了文件,而且你没有撤销,你还执行`git add a.txt`,将修改提交到暂存区了.具体情况如下图\n![错误的修改被提交到了暂存区](http://ww2.sinaimg.cn/large/692869a3gw1expa1cbny2j20ge0790td.jpg)\n现在我们要从暂存区撤回那个修改\n解决办法:我们使用`git reset HEAD a.txt`,将文件从暂存区撤出来,又回到上面的工作空间被修改的状态,如图\n![从暂存区撤回](http://ww2.sinaimg.cn/large/692869a3gw1expa3azt15j20hg09twft.jpg)\nps:上面的命令也可以用下面的命令,语法格式是`git reset <path>`,括号中填路径\n```bash\ngit reset a.txt\n```\n总的来说,`git reset <path>`就是`git add <path>`的反向操作\n\n# 3 撤销提交到本地仓库的修改\n应用场景:假如你在`1.2`还没有回头,一路手贱下去,将暂存区的修改`commit`到本地仓库了\n![错误的修改被提交到本地仓库](http://ww4.sinaimg.cn/large/692869a3gw1expa8o47yvj20fi087gmv.jpg)\n我们现在要从仓库撤销这次没用的提交\n解决方法:\n#### 1.3.1 方案一  再新建一次提交\n我们可以新建一次提交,然后让所修改的文件回到之前的状态,执行\n```bash\ngit revert HEAD\n```\n含义很简单,逆转,这样你的`log`里面会多一次提交,然后文件也回到的之前的状态\n![执行git revert 后的log](http://ww4.sinaimg.cn/large/692869a3gw1expb97iondj20it0catb7.jpg)\n\n#3.2 方案二  干净的撤销上一次commit\n上面的方案一对于一个强迫症来说,不能忍啊,本来就是一次错误的提交,为了弥补这个错误,我却还要多提交一次,完全不能忍受.\n方案二,我们使用`git reset`命令.我们执行\n```\ngit reset HEAD^\n```\n这个命令表示重置HEAD指针,我们要指向上一次提交(也就是取消最近的一次,HEAD表示当前指针,HEAD^是上一次,HEAD^^是上上次,HEAD^^^是上三次),`git reset`命令可以添加`--mixed`,`--soft`,`--hard`三种参数,`--soft`程度最轻,只会撤销提交,对当前暂存区和当前工作空间不会有任何更改,默认的参数是`--mixed`,他会将暂存区的文件撤销\n```\ngit reset --soft :取消了commit  \n\ngit reset --mixed（默认） :取消了commit ，取消了add\n\ngit reset --hard :取消了commit ，取消了add，取消源文件修改\n```\n\n\n# 3.3 方案三  修改最后一次提交\n**首先强调,下面说的实在本地仓库的操作.**\n应用场景:对于上面提到的错误的提交,我们还可以修改他的内容,删除我们错误的修改,将它恢复到原来的样子,我们可以使用\n```bash\ngit commit --amend\n```\n这个方法是将当前暂存区快照提交,也就是你后面的修改合在一起,然后再提交.最后查看`log`的时候,会只有一次提交,前面的一次提交就被删除,在`log`中只看到这次提交.\n用具体例子来说.\n```bash\ngit commit -m \"这是第一次提交\"\n#commit完,我们修改工作空间的内容,然后再执行\ngit add b.txt\ngit commit --amend\n#这条命令会弹出一个编辑窗口,你可以修改提交信息\n#假设我们将提交信息修改为\"这是第二次提交\"\n```\n接着当我们使用`git log`来查看的时候,你只会看到提交信息是\"这是第二次提交\".\n解决方法:\n我们先将文件内容恢复到上一次(当前是HEAD,上一次就是HEAD^)提交时候的样子,然后执行`git commit --amend`,看到如下错误提示,就是说这次文件没有任何修改(废话,我已经恢复正确的样子了,当然一模一样了),默认是不允许空提交的,你只有强制使用`--allow-empty`才行,或者执行方案二\n![执行git commit --amend内容没有变化的错误提示](http://ww1.sinaimg.cn/large/692869a3gw1expt5luwo4j20io06cq3w.jpg)\n\n# 4 总结\n盗图一张,总结上面说的内容\n![工作空间,暂存区,本地仓库之间的关机和转换](http://ww2.sinaimg.cn/large/692869a3gw1exptkjlw1fj20jg09fq3k.jpg)\n打完收工\n\n### 附言\n**PS**:现在再来解释开头说的,这是本地仓库的操作.\n因为,我们本地仓库执行了`git commit`后,所做的更改只会在本地,如果接着执行了`git push`那么,所做的更改就会被提交到`git`,在上面的例子中那么首先提交到github的就是`\"这是第一次提交\"`.这时候,当你执行完`git commit --amend`的时候,本地仓库的上次提交会被删除,也就是不存在提示信息为`\"这是第一次提交\"`,此时本地仓库完成了修改,你想提交到github,就会报错了.如图所示\n![本地执行--amend操作后直接提交到github报错](http://ww1.sinaimg.cn/large/692869a3gw1exp93i04qtj20it0cajua.jpg)\n解决方法就是,**Force**\n没错,强制提交`git push -f`,这样他就会像本地一样,删除上一次提交,添加这一次提交\n\n\n# 友情链接\n1 [修改提交信息](https://help.github.com/articles/changing-a-commit-message/)\n2 [如何撤销在git上的各种修改,好文](https://github.com/blog/2019-how-to-undo-almost-anything-with-git)\n3 [git revert和git reset的区别](http://my.oschina.net/MinGKai/blog/144932)\n4 [git常用命令介绍,带效果图的](https://marklodato.github.io/visual-git-guide/index-zh-cn.html)\n\n\n\n","source":"_posts/my-git-note2.md","raw":"title: git使用笔记(2)\ndate: 2015-11-04 16:52:25\ntags:\n- Linux\n- git\n- github\ncategories:\n- Linux\n---\n上一篇笔记,只写了些git的基础操作,这篇写一下稍微高阶一点的操作,实际项目的时候可能经常会用到.\n<!-- more -->\n\n# 撤销操作\n撤销操作,我经常会用到,有时候写的代码没有考虑周全,或者有疏漏,需要重新提交什么的.\n\n# 1 撤销工作空间最近的修改 \n应用场景:比如上次push以后的完整干净的目录,工作空间没有任何修改,暂存区也没有任何修改,如下图:\n![上一次提交后干净的工作目录](http://ww2.sinaimg.cn/large/692869a3gw1exp9lmtz38j20cl0383yn.jpg)\n这时候,你手贱,改了一下其中的一个文件,但是这次更改是没有意义的.我们继续使用`git status`来查看\n![修改一个文件后执行git status的结果](http://ww4.sinaimg.cn/large/692869a3gw1exp9ngk82jj20it07i75f.jpg)\n我们现在想撤销这次修改.\n解决方法:现在这个修改只是工作区的修改,我们要撤销很简单执行\n```bash\ngit checkout a.txt\n```\n搞定\n\n# 2 撤销暂存区最近的修改\n应用场景:假如在上面说的那种情况下,你手贱改错了文件,而且你没有撤销,你还执行`git add a.txt`,将修改提交到暂存区了.具体情况如下图\n![错误的修改被提交到了暂存区](http://ww2.sinaimg.cn/large/692869a3gw1expa1cbny2j20ge0790td.jpg)\n现在我们要从暂存区撤回那个修改\n解决办法:我们使用`git reset HEAD a.txt`,将文件从暂存区撤出来,又回到上面的工作空间被修改的状态,如图\n![从暂存区撤回](http://ww2.sinaimg.cn/large/692869a3gw1expa3azt15j20hg09twft.jpg)\nps:上面的命令也可以用下面的命令,语法格式是`git reset <path>`,括号中填路径\n```bash\ngit reset a.txt\n```\n总的来说,`git reset <path>`就是`git add <path>`的反向操作\n\n# 3 撤销提交到本地仓库的修改\n应用场景:假如你在`1.2`还没有回头,一路手贱下去,将暂存区的修改`commit`到本地仓库了\n![错误的修改被提交到本地仓库](http://ww4.sinaimg.cn/large/692869a3gw1expa8o47yvj20fi087gmv.jpg)\n我们现在要从仓库撤销这次没用的提交\n解决方法:\n#### 1.3.1 方案一  再新建一次提交\n我们可以新建一次提交,然后让所修改的文件回到之前的状态,执行\n```bash\ngit revert HEAD\n```\n含义很简单,逆转,这样你的`log`里面会多一次提交,然后文件也回到的之前的状态\n![执行git revert 后的log](http://ww4.sinaimg.cn/large/692869a3gw1expb97iondj20it0catb7.jpg)\n\n#3.2 方案二  干净的撤销上一次commit\n上面的方案一对于一个强迫症来说,不能忍啊,本来就是一次错误的提交,为了弥补这个错误,我却还要多提交一次,完全不能忍受.\n方案二,我们使用`git reset`命令.我们执行\n```\ngit reset HEAD^\n```\n这个命令表示重置HEAD指针,我们要指向上一次提交(也就是取消最近的一次,HEAD表示当前指针,HEAD^是上一次,HEAD^^是上上次,HEAD^^^是上三次),`git reset`命令可以添加`--mixed`,`--soft`,`--hard`三种参数,`--soft`程度最轻,只会撤销提交,对当前暂存区和当前工作空间不会有任何更改,默认的参数是`--mixed`,他会将暂存区的文件撤销\n```\ngit reset --soft :取消了commit  \n\ngit reset --mixed（默认） :取消了commit ，取消了add\n\ngit reset --hard :取消了commit ，取消了add，取消源文件修改\n```\n\n\n# 3.3 方案三  修改最后一次提交\n**首先强调,下面说的实在本地仓库的操作.**\n应用场景:对于上面提到的错误的提交,我们还可以修改他的内容,删除我们错误的修改,将它恢复到原来的样子,我们可以使用\n```bash\ngit commit --amend\n```\n这个方法是将当前暂存区快照提交,也就是你后面的修改合在一起,然后再提交.最后查看`log`的时候,会只有一次提交,前面的一次提交就被删除,在`log`中只看到这次提交.\n用具体例子来说.\n```bash\ngit commit -m \"这是第一次提交\"\n#commit完,我们修改工作空间的内容,然后再执行\ngit add b.txt\ngit commit --amend\n#这条命令会弹出一个编辑窗口,你可以修改提交信息\n#假设我们将提交信息修改为\"这是第二次提交\"\n```\n接着当我们使用`git log`来查看的时候,你只会看到提交信息是\"这是第二次提交\".\n解决方法:\n我们先将文件内容恢复到上一次(当前是HEAD,上一次就是HEAD^)提交时候的样子,然后执行`git commit --amend`,看到如下错误提示,就是说这次文件没有任何修改(废话,我已经恢复正确的样子了,当然一模一样了),默认是不允许空提交的,你只有强制使用`--allow-empty`才行,或者执行方案二\n![执行git commit --amend内容没有变化的错误提示](http://ww1.sinaimg.cn/large/692869a3gw1expt5luwo4j20io06cq3w.jpg)\n\n# 4 总结\n盗图一张,总结上面说的内容\n![工作空间,暂存区,本地仓库之间的关机和转换](http://ww2.sinaimg.cn/large/692869a3gw1exptkjlw1fj20jg09fq3k.jpg)\n打完收工\n\n### 附言\n**PS**:现在再来解释开头说的,这是本地仓库的操作.\n因为,我们本地仓库执行了`git commit`后,所做的更改只会在本地,如果接着执行了`git push`那么,所做的更改就会被提交到`git`,在上面的例子中那么首先提交到github的就是`\"这是第一次提交\"`.这时候,当你执行完`git commit --amend`的时候,本地仓库的上次提交会被删除,也就是不存在提示信息为`\"这是第一次提交\"`,此时本地仓库完成了修改,你想提交到github,就会报错了.如图所示\n![本地执行--amend操作后直接提交到github报错](http://ww1.sinaimg.cn/large/692869a3gw1exp93i04qtj20it0cajua.jpg)\n解决方法就是,**Force**\n没错,强制提交`git push -f`,这样他就会像本地一样,删除上一次提交,添加这一次提交\n\n\n# 友情链接\n1 [修改提交信息](https://help.github.com/articles/changing-a-commit-message/)\n2 [如何撤销在git上的各种修改,好文](https://github.com/blog/2019-how-to-undo-almost-anything-with-git)\n3 [git revert和git reset的区别](http://my.oschina.net/MinGKai/blog/144932)\n4 [git常用命令介绍,带效果图的](https://marklodato.github.io/visual-git-guide/index-zh-cn.html)\n\n\n\n","slug":"my-git-note2","published":1,"updated":"2015-11-05T01:03:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7ypv0021x8cd14r5sxdz","content":"<p>上一篇笔记,只写了些git的基础操作,这篇写一下稍微高阶一点的操作,实际项目的时候可能经常会用到.<br><a id=\"more\"></a></p>\n<h1 id=\"撤销操作\"><a href=\"#撤销操作\" class=\"headerlink\" title=\"撤销操作\"></a>撤销操作</h1><p>撤销操作,我经常会用到,有时候写的代码没有考虑周全,或者有疏漏,需要重新提交什么的.</p>\n<h1 id=\"1-撤销工作空间最近的修改\"><a href=\"#1-撤销工作空间最近的修改\" class=\"headerlink\" title=\"1 撤销工作空间最近的修改\"></a>1 撤销工作空间最近的修改</h1><p>应用场景:比如上次push以后的完整干净的目录,工作空间没有任何修改,暂存区也没有任何修改,如下图:<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1exp9lmtz38j20cl0383yn.jpg\" alt=\"上一次提交后干净的工作目录\"><br>这时候,你手贱,改了一下其中的一个文件,但是这次更改是没有意义的.我们继续使用<code>git status</code>来查看<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1exp9ngk82jj20it07i75f.jpg\" alt=\"修改一个文件后执行git status的结果\"><br>我们现在想撤销这次修改.<br>解决方法:现在这个修改只是工作区的修改,我们要撤销很简单执行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout a.txt</div></pre></td></tr></table></figure></p>\n<p>搞定</p>\n<h1 id=\"2-撤销暂存区最近的修改\"><a href=\"#2-撤销暂存区最近的修改\" class=\"headerlink\" title=\"2 撤销暂存区最近的修改\"></a>2 撤销暂存区最近的修改</h1><p>应用场景:假如在上面说的那种情况下,你手贱改错了文件,而且你没有撤销,你还执行<code>git add a.txt</code>,将修改提交到暂存区了.具体情况如下图<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1expa1cbny2j20ge0790td.jpg\" alt=\"错误的修改被提交到了暂存区\"><br>现在我们要从暂存区撤回那个修改<br>解决办法:我们使用<code>git reset HEAD a.txt</code>,将文件从暂存区撤出来,又回到上面的工作空间被修改的状态,如图<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1expa3azt15j20hg09twft.jpg\" alt=\"从暂存区撤回\"><br>ps:上面的命令也可以用下面的命令,语法格式是<code>git reset &lt;path&gt;</code>,括号中填路径<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reset a.txt</div></pre></td></tr></table></figure></p>\n<p>总的来说,<code>git reset &lt;path&gt;</code>就是<code>git add &lt;path&gt;</code>的反向操作</p>\n<h1 id=\"3-撤销提交到本地仓库的修改\"><a href=\"#3-撤销提交到本地仓库的修改\" class=\"headerlink\" title=\"3 撤销提交到本地仓库的修改\"></a>3 撤销提交到本地仓库的修改</h1><p>应用场景:假如你在<code>1.2</code>还没有回头,一路手贱下去,将暂存区的修改<code>commit</code>到本地仓库了<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1expa8o47yvj20fi087gmv.jpg\" alt=\"错误的修改被提交到本地仓库\"><br>我们现在要从仓库撤销这次没用的提交<br>解决方法:</p>\n<h4 id=\"1-3-1-方案一-再新建一次提交\"><a href=\"#1-3-1-方案一-再新建一次提交\" class=\"headerlink\" title=\"1.3.1 方案一  再新建一次提交\"></a>1.3.1 方案一  再新建一次提交</h4><p>我们可以新建一次提交,然后让所修改的文件回到之前的状态,执行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git revert HEAD</div></pre></td></tr></table></figure></p>\n<p>含义很简单,逆转,这样你的<code>log</code>里面会多一次提交,然后文件也回到的之前的状态<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1expb97iondj20it0catb7.jpg\" alt=\"执行git revert 后的log\"></p>\n<p>#3.2 方案二  干净的撤销上一次commit<br>上面的方案一对于一个强迫症来说,不能忍啊,本来就是一次错误的提交,为了弥补这个错误,我却还要多提交一次,完全不能忍受.<br>方案二,我们使用<code>git reset</code>命令.我们执行<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">reset</span> <span class=\"keyword\">HEAD</span>^</div></pre></td></tr></table></figure></p>\n<p>这个命令表示重置HEAD指针,我们要指向上一次提交(也就是取消最近的一次,HEAD表示当前指针,HEAD^是上一次,HEAD^^是上上次,HEAD^^^是上三次),<code>git reset</code>命令可以添加<code>--mixed</code>,<code>--soft</code>,<code>--hard</code>三种参数,<code>--soft</code>程度最轻,只会撤销提交,对当前暂存区和当前工作空间不会有任何更改,默认的参数是<code>--mixed</code>,他会将暂存区的文件撤销<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">reset</span> <span class=\"comment\">--soft :取消了commit  </span></div><div class=\"line\"></div><div class=\"line\">git <span class=\"keyword\">reset</span> <span class=\"comment\">--mixed（默认） :取消了commit ，取消了add</span></div><div class=\"line\"></div><div class=\"line\">git <span class=\"keyword\">reset</span> <span class=\"comment\">--hard :取消了commit ，取消了add，取消源文件修改</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"3-3-方案三-修改最后一次提交\"><a href=\"#3-3-方案三-修改最后一次提交\" class=\"headerlink\" title=\"3.3 方案三  修改最后一次提交\"></a>3.3 方案三  修改最后一次提交</h1><p><strong>首先强调,下面说的实在本地仓库的操作.</strong><br>应用场景:对于上面提到的错误的提交,我们还可以修改他的内容,删除我们错误的修改,将它恢复到原来的样子,我们可以使用<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit --amend</div></pre></td></tr></table></figure></p>\n<p>这个方法是将当前暂存区快照提交,也就是你后面的修改合在一起,然后再提交.最后查看<code>log</code>的时候,会只有一次提交,前面的一次提交就被删除,在<code>log</code>中只看到这次提交.<br>用具体例子来说.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit -m <span class=\"string\">\"这是第一次提交\"</span></div><div class=\"line\"><span class=\"comment\">#commit完,我们修改工作空间的内容,然后再执行</span></div><div class=\"line\">git add b.txt</div><div class=\"line\">git commit --amend</div><div class=\"line\"><span class=\"comment\">#这条命令会弹出一个编辑窗口,你可以修改提交信息</span></div><div class=\"line\"><span class=\"comment\">#假设我们将提交信息修改为\"这是第二次提交\"</span></div></pre></td></tr></table></figure></p>\n<p>接着当我们使用<code>git log</code>来查看的时候,你只会看到提交信息是”这是第二次提交”.<br>解决方法:<br>我们先将文件内容恢复到上一次(当前是HEAD,上一次就是HEAD^)提交时候的样子,然后执行<code>git commit --amend</code>,看到如下错误提示,就是说这次文件没有任何修改(废话,我已经恢复正确的样子了,当然一模一样了),默认是不允许空提交的,你只有强制使用<code>--allow-empty</code>才行,或者执行方案二<br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1expt5luwo4j20io06cq3w.jpg\" alt=\"执行git commit --amend内容没有变化的错误提示\"></p>\n<h1 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4 总结\"></a>4 总结</h1><p>盗图一张,总结上面说的内容<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1exptkjlw1fj20jg09fq3k.jpg\" alt=\"工作空间,暂存区,本地仓库之间的关机和转换\"><br>打完收工</p>\n<h3 id=\"附言\"><a href=\"#附言\" class=\"headerlink\" title=\"附言\"></a>附言</h3><p><strong>PS</strong>:现在再来解释开头说的,这是本地仓库的操作.<br>因为,我们本地仓库执行了<code>git commit</code>后,所做的更改只会在本地,如果接着执行了<code>git push</code>那么,所做的更改就会被提交到<code>git</code>,在上面的例子中那么首先提交到github的就是<code>&quot;这是第一次提交&quot;</code>.这时候,当你执行完<code>git commit --amend</code>的时候,本地仓库的上次提交会被删除,也就是不存在提示信息为<code>&quot;这是第一次提交&quot;</code>,此时本地仓库完成了修改,你想提交到github,就会报错了.如图所示<br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1exp93i04qtj20it0cajua.jpg\" alt=\"本地执行--amend操作后直接提交到github报错\"><br>解决方法就是,<strong>Force</strong><br>没错,强制提交<code>git push -f</code>,这样他就会像本地一样,删除上一次提交,添加这一次提交</p>\n<h1 id=\"友情链接\"><a href=\"#友情链接\" class=\"headerlink\" title=\"友情链接\"></a>友情链接</h1><p>1 <a href=\"https://help.github.com/articles/changing-a-commit-message/\" target=\"_blank\" rel=\"external\">修改提交信息</a><br>2 <a href=\"https://github.com/blog/2019-how-to-undo-almost-anything-with-git\" target=\"_blank\" rel=\"external\">如何撤销在git上的各种修改,好文</a><br>3 <a href=\"http://my.oschina.net/MinGKai/blog/144932\" target=\"_blank\" rel=\"external\">git revert和git reset的区别</a><br>4 <a href=\"https://marklodato.github.io/visual-git-guide/index-zh-cn.html\" target=\"_blank\" rel=\"external\">git常用命令介绍,带效果图的</a></p>\n","excerpt":"<p>上一篇笔记,只写了些git的基础操作,这篇写一下稍微高阶一点的操作,实际项目的时候可能经常会用到.<br>","more":"</p>\n<h1 id=\"撤销操作\"><a href=\"#撤销操作\" class=\"headerlink\" title=\"撤销操作\"></a>撤销操作</h1><p>撤销操作,我经常会用到,有时候写的代码没有考虑周全,或者有疏漏,需要重新提交什么的.</p>\n<h1 id=\"1-撤销工作空间最近的修改\"><a href=\"#1-撤销工作空间最近的修改\" class=\"headerlink\" title=\"1 撤销工作空间最近的修改\"></a>1 撤销工作空间最近的修改</h1><p>应用场景:比如上次push以后的完整干净的目录,工作空间没有任何修改,暂存区也没有任何修改,如下图:<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1exp9lmtz38j20cl0383yn.jpg\" alt=\"上一次提交后干净的工作目录\"><br>这时候,你手贱,改了一下其中的一个文件,但是这次更改是没有意义的.我们继续使用<code>git status</code>来查看<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1exp9ngk82jj20it07i75f.jpg\" alt=\"修改一个文件后执行git status的结果\"><br>我们现在想撤销这次修改.<br>解决方法:现在这个修改只是工作区的修改,我们要撤销很简单执行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout a.txt</div></pre></td></tr></table></figure></p>\n<p>搞定</p>\n<h1 id=\"2-撤销暂存区最近的修改\"><a href=\"#2-撤销暂存区最近的修改\" class=\"headerlink\" title=\"2 撤销暂存区最近的修改\"></a>2 撤销暂存区最近的修改</h1><p>应用场景:假如在上面说的那种情况下,你手贱改错了文件,而且你没有撤销,你还执行<code>git add a.txt</code>,将修改提交到暂存区了.具体情况如下图<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1expa1cbny2j20ge0790td.jpg\" alt=\"错误的修改被提交到了暂存区\"><br>现在我们要从暂存区撤回那个修改<br>解决办法:我们使用<code>git reset HEAD a.txt</code>,将文件从暂存区撤出来,又回到上面的工作空间被修改的状态,如图<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1expa3azt15j20hg09twft.jpg\" alt=\"从暂存区撤回\"><br>ps:上面的命令也可以用下面的命令,语法格式是<code>git reset &lt;path&gt;</code>,括号中填路径<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reset a.txt</div></pre></td></tr></table></figure></p>\n<p>总的来说,<code>git reset &lt;path&gt;</code>就是<code>git add &lt;path&gt;</code>的反向操作</p>\n<h1 id=\"3-撤销提交到本地仓库的修改\"><a href=\"#3-撤销提交到本地仓库的修改\" class=\"headerlink\" title=\"3 撤销提交到本地仓库的修改\"></a>3 撤销提交到本地仓库的修改</h1><p>应用场景:假如你在<code>1.2</code>还没有回头,一路手贱下去,将暂存区的修改<code>commit</code>到本地仓库了<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1expa8o47yvj20fi087gmv.jpg\" alt=\"错误的修改被提交到本地仓库\"><br>我们现在要从仓库撤销这次没用的提交<br>解决方法:</p>\n<h4 id=\"1-3-1-方案一-再新建一次提交\"><a href=\"#1-3-1-方案一-再新建一次提交\" class=\"headerlink\" title=\"1.3.1 方案一  再新建一次提交\"></a>1.3.1 方案一  再新建一次提交</h4><p>我们可以新建一次提交,然后让所修改的文件回到之前的状态,执行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git revert HEAD</div></pre></td></tr></table></figure></p>\n<p>含义很简单,逆转,这样你的<code>log</code>里面会多一次提交,然后文件也回到的之前的状态<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1expb97iondj20it0catb7.jpg\" alt=\"执行git revert 后的log\"></p>\n<p>#3.2 方案二  干净的撤销上一次commit<br>上面的方案一对于一个强迫症来说,不能忍啊,本来就是一次错误的提交,为了弥补这个错误,我却还要多提交一次,完全不能忍受.<br>方案二,我们使用<code>git reset</code>命令.我们执行<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">reset</span> <span class=\"keyword\">HEAD</span>^</div></pre></td></tr></table></figure></p>\n<p>这个命令表示重置HEAD指针,我们要指向上一次提交(也就是取消最近的一次,HEAD表示当前指针,HEAD^是上一次,HEAD^^是上上次,HEAD^^^是上三次),<code>git reset</code>命令可以添加<code>--mixed</code>,<code>--soft</code>,<code>--hard</code>三种参数,<code>--soft</code>程度最轻,只会撤销提交,对当前暂存区和当前工作空间不会有任何更改,默认的参数是<code>--mixed</code>,他会将暂存区的文件撤销<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">reset</span> <span class=\"comment\">--soft :取消了commit  </span></div><div class=\"line\"></div><div class=\"line\">git <span class=\"keyword\">reset</span> <span class=\"comment\">--mixed（默认） :取消了commit ，取消了add</span></div><div class=\"line\"></div><div class=\"line\">git <span class=\"keyword\">reset</span> <span class=\"comment\">--hard :取消了commit ，取消了add，取消源文件修改</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"3-3-方案三-修改最后一次提交\"><a href=\"#3-3-方案三-修改最后一次提交\" class=\"headerlink\" title=\"3.3 方案三  修改最后一次提交\"></a>3.3 方案三  修改最后一次提交</h1><p><strong>首先强调,下面说的实在本地仓库的操作.</strong><br>应用场景:对于上面提到的错误的提交,我们还可以修改他的内容,删除我们错误的修改,将它恢复到原来的样子,我们可以使用<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit --amend</div></pre></td></tr></table></figure></p>\n<p>这个方法是将当前暂存区快照提交,也就是你后面的修改合在一起,然后再提交.最后查看<code>log</code>的时候,会只有一次提交,前面的一次提交就被删除,在<code>log</code>中只看到这次提交.<br>用具体例子来说.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit -m <span class=\"string\">\"这是第一次提交\"</span></div><div class=\"line\"><span class=\"comment\">#commit完,我们修改工作空间的内容,然后再执行</span></div><div class=\"line\">git add b.txt</div><div class=\"line\">git commit --amend</div><div class=\"line\"><span class=\"comment\">#这条命令会弹出一个编辑窗口,你可以修改提交信息</span></div><div class=\"line\"><span class=\"comment\">#假设我们将提交信息修改为\"这是第二次提交\"</span></div></pre></td></tr></table></figure></p>\n<p>接着当我们使用<code>git log</code>来查看的时候,你只会看到提交信息是”这是第二次提交”.<br>解决方法:<br>我们先将文件内容恢复到上一次(当前是HEAD,上一次就是HEAD^)提交时候的样子,然后执行<code>git commit --amend</code>,看到如下错误提示,就是说这次文件没有任何修改(废话,我已经恢复正确的样子了,当然一模一样了),默认是不允许空提交的,你只有强制使用<code>--allow-empty</code>才行,或者执行方案二<br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1expt5luwo4j20io06cq3w.jpg\" alt=\"执行git commit --amend内容没有变化的错误提示\"></p>\n<h1 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4 总结\"></a>4 总结</h1><p>盗图一张,总结上面说的内容<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1exptkjlw1fj20jg09fq3k.jpg\" alt=\"工作空间,暂存区,本地仓库之间的关机和转换\"><br>打完收工</p>\n<h3 id=\"附言\"><a href=\"#附言\" class=\"headerlink\" title=\"附言\"></a>附言</h3><p><strong>PS</strong>:现在再来解释开头说的,这是本地仓库的操作.<br>因为,我们本地仓库执行了<code>git commit</code>后,所做的更改只会在本地,如果接着执行了<code>git push</code>那么,所做的更改就会被提交到<code>git</code>,在上面的例子中那么首先提交到github的就是<code>&quot;这是第一次提交&quot;</code>.这时候,当你执行完<code>git commit --amend</code>的时候,本地仓库的上次提交会被删除,也就是不存在提示信息为<code>&quot;这是第一次提交&quot;</code>,此时本地仓库完成了修改,你想提交到github,就会报错了.如图所示<br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1exp93i04qtj20it0cajua.jpg\" alt=\"本地执行--amend操作后直接提交到github报错\"><br>解决方法就是,<strong>Force</strong><br>没错,强制提交<code>git push -f</code>,这样他就会像本地一样,删除上一次提交,添加这一次提交</p>\n<h1 id=\"友情链接\"><a href=\"#友情链接\" class=\"headerlink\" title=\"友情链接\"></a>友情链接</h1><p>1 <a href=\"https://help.github.com/articles/changing-a-commit-message/\">修改提交信息</a><br>2 <a href=\"https://github.com/blog/2019-how-to-undo-almost-anything-with-git\">如何撤销在git上的各种修改,好文</a><br>3 <a href=\"http://my.oschina.net/MinGKai/blog/144932\">git revert和git reset的区别</a><br>4 <a href=\"https://marklodato.github.io/visual-git-guide/index-zh-cn.html\">git常用命令介绍,带效果图的</a></p>"},{"title":"新的开始","date":"2014-11-26T13:29:15.000Z","_content":"\n今天**折腾**了一天,终于弄好了,[我的博客](http://jackroyal.github.io \"搁浅St的博客\"),正式落户Github.<!-- more -->\n![GitHub Mark](http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png \"GitHub Mark\")\n","source":"_posts/new-start.md","raw":"title: 新的开始\ndate: 2014-11-26 21:29:15\ntags:\n- hexo\n---\n\n今天**折腾**了一天,终于弄好了,[我的博客](http://jackroyal.github.io \"搁浅St的博客\"),正式落户Github.<!-- more -->\n![GitHub Mark](http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png \"GitHub Mark\")\n","slug":"new-start","published":1,"updated":"2015-09-29T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7ypx0025x8cdcja35y4p","content":"<p>今天<strong>折腾</strong>了一天,终于弄好了,<a href=\"http://jackroyal.github.io\" title=\"搁浅St的博客\" target=\"_blank\" rel=\"external\">我的博客</a>,正式落户Github.<a id=\"more\"></a><br><img src=\"http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png\" alt=\"GitHub Mark\" title=\"GitHub Mark\"></p>\n","excerpt":"<p>今天<strong>折腾</strong>了一天,终于弄好了,<a href=\"http://jackroyal.github.io\" title=\"搁浅St的博客\">我的博客</a>,正式落户Github.","more":"<br><img src=\"http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png\" alt=\"GitHub Mark\" title=\"GitHub Mark\"></p>"},{"title":"win8中使用vs2010配置opencv","date":"2015-05-15T11:56:06.000Z","_content":"今天在师兄的帮助下,总算配置好了opencv.\n# 1 系统环境和软件版本\n操作系统:win8 64位\nvs版本:vs2010 32位\nopencv版本:opencv 2.4.10\n<!-- more -->\n# 2 配置opencv\n安装vs比较简单,这里不再赘述.\n现在说下配置opencv.\n网上有很多相关的配置,都是设置环境变量,然后添加库目录,包含目录,blablabla.\n这样做的坏处是,每次我新建一个项目,都要重复以上操作,这样岂不是很蛋疼.\n如果你移植你的程序给别人,别人也还要去配置这些东西才能够运行,是不是很不方便?\n所以,师兄教给我简单粗暴的办法,直接把相关文件手动复制到vs的目录下,这样就没这么多事了.\n**缺点:每次都需要手动设置你所需要调用的lib文件**\n\n## 解压opencv到某个目录\n这个很简单,双击那个exe,选择一个目录,就会把opencv的文件解压到你设定的那个目录.\n我将它解压到`D:/opencv`下.\n## 复制include文件夹\n复制`D:\\opencv\\build\\include`目录下的`opencv`和`opencv2`\n到`C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include`.\n![opencv解压后的include目录](http://ww3.sinaimg.cn/large/692869a3gw1es5atg7oimj20kw081ta4.jpg)\n![复制以后的效果截图](http://ww2.sinaimg.cn/large/692869a3gw1es5az6qsa7j20jc099jtf.jpg)\n## 复制lib文件夹\n同理,复制lib文件夹\n从`D:\\opencv\\build\\x86\\vc10\\lib`复制到`C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\lib`\n如果你的程序是win32就选择x86,如果你写的程序是64位的,就复制x64的程序\n## 复制bin文件夹\n复制bin目录下的东西,我们只需要系统找得到就行,所以我们这里采用环境变量的搞法\n\n我们修改path变量,在后面添加`;d:\\opencv\\build\\x86\\vc10\\bin`,效果如图所示<br>\n![修改path变量,添加opencv的bin目录路径](http://ww2.sinaimg.cn/large/692869a3gw1es5bew5vcjj20e10g4go8.jpg)\n# 3 写代码调试\n代码如下:\n```c#\n# include <opencv2/opencv.hpp>\n# include <iostream>\n# include <string>\n# ifdef _DEBUG\n# pragma comment(lib,\"opencv_core2410d.lib\")\n# pragma comment(lib,\"opencv_highgui2410d.lib\")\n# else\n# pragma comment(lib,\"opencv_core2410.lib\")\n# pragma comment(lib,\"opencv_highgui2410.lib\")\n# endif\nusing namespace cv;\nusing namespace std;\nint main()\n{\n    Mat img = imread(\"ie8-2.png\");\n    if(img.empty())\n    {\n        cout<<\"error\";\n        return -1;\n   }\n   imshow(\"xx的靓照\",img);\n   waitKey();\n}\n```\n注意一下这段宏设置\n```\n# ifdef _DEBUG\n# pragma comment(lib,\"opencv_core2410d.lib\")\n# pragma comment(lib,\"opencv_highgui2410d.lib\")\n# else\n# pragma comment(lib,\"opencv_core2410.lib\")\n# pragma comment(lib,\"opencv_highgui2410.lib\")\n# endif\n```\ndebug和release,分别调用对应的lib\n如果你当前是debug模式\n```\n# pragma comment(lib,\"opencv_core2410d.lib\")\n# pragma comment(lib,\"opencv_highgui2410d.lib\")\n```\n这段代码是必须要的,以后调用相应的lib文件,我们都要手动在头部加入这句话才行\n否则,你会看到下面这堆东西\n```\n1>  test.cpp\n1>ManifestResourceCompile:\n1>  所有输出均为最新。\n1>test.obj : error LNK2019: 无法解析的外部符号 \"int __cdecl cv::waitKey(int)\" (?waitKey@cv@@YAHH@Z)，该符号在函数 _main 中被引用\n1>test.obj : error LNK2019: 无法解析的外部符号 \"void __cdecl cv::imshow(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class cv::_InputArray const &)\" (?imshow@cv@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV_InputArray@1@@Z)，该符号在函数 _main 中被引用\n1>test.obj : error LNK2019: 无法解析的外部符号 \"public: __thiscall cv::_InputArray::_InputArray(class cv::Mat const &)\" (??0_InputArray@cv@@QAE@ABVMat@1@@Z)，该符号在函数 _main 中被引用\n1>test.obj : error LNK2019: 无法解析的外部符号 \"class cv::Mat __cdecl cv::imread(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,int)\" (?imread@cv@@YA?AVMat@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z)，该符号在函数 _main 中被引用\n1>test.obj : error LNK2019: 无法解析的外部符号 \"void __cdecl cv::fastFree(void *)\" (?fastFree@cv@@YAXPAX@Z)，该符号在函数 \"public: __thiscall cv::Mat::~Mat(void)\" (??1Mat@cv@@QAE@XZ) 中被引用\n1>test.obj : error LNK2019: 无法解析的外部符号 \"public: void __thiscall cv::Mat::deallocate(void)\" (?deallocate@Mat@cv@@QAEXXZ)，该符号在函数 \"public: void __thiscall cv::Mat::release(void)\" (?release@Mat@cv@@QAEXXZ) 中被引用\n1>test.obj : error LNK2019: 无法解析的外部符号 \"int __cdecl cv::_interlockedExchangeAdd(int *,int)\" (?_interlockedExchangeAdd@cv@@YAHPAHH@Z)，该符号在函数 \"public: void __thiscall cv::Mat::release(void)\" (?release@Mat@cv@@QAEXXZ) 中被引用\n1>C:\\Users\\chenhao\\documents\\visual studio 2010\\Projects\\b\\Debug\\b.exe : fatal error LNK1120: 7 个无法解析的外部命令\n1>\n1>生成失败。\n1>\n1>已用时间 00:00:03.71\n========== 生成: 成功 0 个，失败 1 个，最新 0 个，跳过 0 个 ==========\n```\n\nok,打完收工!\n\n\nps:上述操作完,应该就好了.我还遇到一个奇葩问题\n编译和生成解决方案没有问题，但是开始执行就出现应用程序无法正常启动 0xc000007b错误窗口\n最后,原来是权限问题,使用管理员权限打开vs就解决了,win7下找兼容性设置,以管理员权限运行\n我的win8没有找到兼容性设置,如图所示操作,每次都能以管理员权限打开vs\n![win8使用管理员权限运行vs2010](http://ww4.sinaimg.cn/large/692869a3gw1es5bpz7mkqj20mm0giq7k.jpg)\n\n# 参考文献\n1 [VS2010+Opencv-2.4.0的配置攻略](http://www.cnblogs.com/freedomshe/archive/2012/04/25/2470540.html)\n\n\n","source":"_posts/opencv-and-vs2010-in-win8.md","raw":"title: win8中使用vs2010配置opencv\ndate: 2015-05-15 19:56:06\ntags:\n- 软件安装与技巧\n- vs2010\n- opencv\n- win8\ncategories:\n- 软件安装与技巧\n---\n今天在师兄的帮助下,总算配置好了opencv.\n# 1 系统环境和软件版本\n操作系统:win8 64位\nvs版本:vs2010 32位\nopencv版本:opencv 2.4.10\n<!-- more -->\n# 2 配置opencv\n安装vs比较简单,这里不再赘述.\n现在说下配置opencv.\n网上有很多相关的配置,都是设置环境变量,然后添加库目录,包含目录,blablabla.\n这样做的坏处是,每次我新建一个项目,都要重复以上操作,这样岂不是很蛋疼.\n如果你移植你的程序给别人,别人也还要去配置这些东西才能够运行,是不是很不方便?\n所以,师兄教给我简单粗暴的办法,直接把相关文件手动复制到vs的目录下,这样就没这么多事了.\n**缺点:每次都需要手动设置你所需要调用的lib文件**\n\n## 解压opencv到某个目录\n这个很简单,双击那个exe,选择一个目录,就会把opencv的文件解压到你设定的那个目录.\n我将它解压到`D:/opencv`下.\n## 复制include文件夹\n复制`D:\\opencv\\build\\include`目录下的`opencv`和`opencv2`\n到`C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include`.\n![opencv解压后的include目录](http://ww3.sinaimg.cn/large/692869a3gw1es5atg7oimj20kw081ta4.jpg)\n![复制以后的效果截图](http://ww2.sinaimg.cn/large/692869a3gw1es5az6qsa7j20jc099jtf.jpg)\n## 复制lib文件夹\n同理,复制lib文件夹\n从`D:\\opencv\\build\\x86\\vc10\\lib`复制到`C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\lib`\n如果你的程序是win32就选择x86,如果你写的程序是64位的,就复制x64的程序\n## 复制bin文件夹\n复制bin目录下的东西,我们只需要系统找得到就行,所以我们这里采用环境变量的搞法\n\n我们修改path变量,在后面添加`;d:\\opencv\\build\\x86\\vc10\\bin`,效果如图所示<br>\n![修改path变量,添加opencv的bin目录路径](http://ww2.sinaimg.cn/large/692869a3gw1es5bew5vcjj20e10g4go8.jpg)\n# 3 写代码调试\n代码如下:\n```c#\n# include <opencv2/opencv.hpp>\n# include <iostream>\n# include <string>\n# ifdef _DEBUG\n# pragma comment(lib,\"opencv_core2410d.lib\")\n# pragma comment(lib,\"opencv_highgui2410d.lib\")\n# else\n# pragma comment(lib,\"opencv_core2410.lib\")\n# pragma comment(lib,\"opencv_highgui2410.lib\")\n# endif\nusing namespace cv;\nusing namespace std;\nint main()\n{\n    Mat img = imread(\"ie8-2.png\");\n    if(img.empty())\n    {\n        cout<<\"error\";\n        return -1;\n   }\n   imshow(\"xx的靓照\",img);\n   waitKey();\n}\n```\n注意一下这段宏设置\n```\n# ifdef _DEBUG\n# pragma comment(lib,\"opencv_core2410d.lib\")\n# pragma comment(lib,\"opencv_highgui2410d.lib\")\n# else\n# pragma comment(lib,\"opencv_core2410.lib\")\n# pragma comment(lib,\"opencv_highgui2410.lib\")\n# endif\n```\ndebug和release,分别调用对应的lib\n如果你当前是debug模式\n```\n# pragma comment(lib,\"opencv_core2410d.lib\")\n# pragma comment(lib,\"opencv_highgui2410d.lib\")\n```\n这段代码是必须要的,以后调用相应的lib文件,我们都要手动在头部加入这句话才行\n否则,你会看到下面这堆东西\n```\n1>  test.cpp\n1>ManifestResourceCompile:\n1>  所有输出均为最新。\n1>test.obj : error LNK2019: 无法解析的外部符号 \"int __cdecl cv::waitKey(int)\" (?waitKey@cv@@YAHH@Z)，该符号在函数 _main 中被引用\n1>test.obj : error LNK2019: 无法解析的外部符号 \"void __cdecl cv::imshow(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class cv::_InputArray const &)\" (?imshow@cv@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV_InputArray@1@@Z)，该符号在函数 _main 中被引用\n1>test.obj : error LNK2019: 无法解析的外部符号 \"public: __thiscall cv::_InputArray::_InputArray(class cv::Mat const &)\" (??0_InputArray@cv@@QAE@ABVMat@1@@Z)，该符号在函数 _main 中被引用\n1>test.obj : error LNK2019: 无法解析的外部符号 \"class cv::Mat __cdecl cv::imread(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,int)\" (?imread@cv@@YA?AVMat@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z)，该符号在函数 _main 中被引用\n1>test.obj : error LNK2019: 无法解析的外部符号 \"void __cdecl cv::fastFree(void *)\" (?fastFree@cv@@YAXPAX@Z)，该符号在函数 \"public: __thiscall cv::Mat::~Mat(void)\" (??1Mat@cv@@QAE@XZ) 中被引用\n1>test.obj : error LNK2019: 无法解析的外部符号 \"public: void __thiscall cv::Mat::deallocate(void)\" (?deallocate@Mat@cv@@QAEXXZ)，该符号在函数 \"public: void __thiscall cv::Mat::release(void)\" (?release@Mat@cv@@QAEXXZ) 中被引用\n1>test.obj : error LNK2019: 无法解析的外部符号 \"int __cdecl cv::_interlockedExchangeAdd(int *,int)\" (?_interlockedExchangeAdd@cv@@YAHPAHH@Z)，该符号在函数 \"public: void __thiscall cv::Mat::release(void)\" (?release@Mat@cv@@QAEXXZ) 中被引用\n1>C:\\Users\\chenhao\\documents\\visual studio 2010\\Projects\\b\\Debug\\b.exe : fatal error LNK1120: 7 个无法解析的外部命令\n1>\n1>生成失败。\n1>\n1>已用时间 00:00:03.71\n========== 生成: 成功 0 个，失败 1 个，最新 0 个，跳过 0 个 ==========\n```\n\nok,打完收工!\n\n\nps:上述操作完,应该就好了.我还遇到一个奇葩问题\n编译和生成解决方案没有问题，但是开始执行就出现应用程序无法正常启动 0xc000007b错误窗口\n最后,原来是权限问题,使用管理员权限打开vs就解决了,win7下找兼容性设置,以管理员权限运行\n我的win8没有找到兼容性设置,如图所示操作,每次都能以管理员权限打开vs\n![win8使用管理员权限运行vs2010](http://ww4.sinaimg.cn/large/692869a3gw1es5bpz7mkqj20mm0giq7k.jpg)\n\n# 参考文献\n1 [VS2010+Opencv-2.4.0的配置攻略](http://www.cnblogs.com/freedomshe/archive/2012/04/25/2470540.html)\n\n\n","slug":"opencv-and-vs2010-in-win8","published":1,"updated":"2015-10-29T06:08:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yq10029x8cdd2mscwos","content":"<p>今天在师兄的帮助下,总算配置好了opencv.</p>\n<h1 id=\"1-系统环境和软件版本\"><a href=\"#1-系统环境和软件版本\" class=\"headerlink\" title=\"1 系统环境和软件版本\"></a>1 系统环境和软件版本</h1><p>操作系统:win8 64位<br>vs版本:vs2010 32位<br>opencv版本:opencv 2.4.10<br><a id=\"more\"></a></p>\n<h1 id=\"2-配置opencv\"><a href=\"#2-配置opencv\" class=\"headerlink\" title=\"2 配置opencv\"></a>2 配置opencv</h1><p>安装vs比较简单,这里不再赘述.<br>现在说下配置opencv.<br>网上有很多相关的配置,都是设置环境变量,然后添加库目录,包含目录,blablabla.<br>这样做的坏处是,每次我新建一个项目,都要重复以上操作,这样岂不是很蛋疼.<br>如果你移植你的程序给别人,别人也还要去配置这些东西才能够运行,是不是很不方便?<br>所以,师兄教给我简单粗暴的办法,直接把相关文件手动复制到vs的目录下,这样就没这么多事了.<br><strong>缺点:每次都需要手动设置你所需要调用的lib文件</strong></p>\n<h2 id=\"解压opencv到某个目录\"><a href=\"#解压opencv到某个目录\" class=\"headerlink\" title=\"解压opencv到某个目录\"></a>解压opencv到某个目录</h2><p>这个很简单,双击那个exe,选择一个目录,就会把opencv的文件解压到你设定的那个目录.<br>我将它解压到<code>D:/opencv</code>下.</p>\n<h2 id=\"复制include文件夹\"><a href=\"#复制include文件夹\" class=\"headerlink\" title=\"复制include文件夹\"></a>复制include文件夹</h2><p>复制<code>D:\\opencv\\build\\include</code>目录下的<code>opencv</code>和<code>opencv2</code><br>到<code>C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include</code>.<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1es5atg7oimj20kw081ta4.jpg\" alt=\"opencv解压后的include目录\"><br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1es5az6qsa7j20jc099jtf.jpg\" alt=\"复制以后的效果截图\"></p>\n<h2 id=\"复制lib文件夹\"><a href=\"#复制lib文件夹\" class=\"headerlink\" title=\"复制lib文件夹\"></a>复制lib文件夹</h2><p>同理,复制lib文件夹<br>从<code>D:\\opencv\\build\\x86\\vc10\\lib</code>复制到<code>C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\lib</code><br>如果你的程序是win32就选择x86,如果你写的程序是64位的,就复制x64的程序</p>\n<h2 id=\"复制bin文件夹\"><a href=\"#复制bin文件夹\" class=\"headerlink\" title=\"复制bin文件夹\"></a>复制bin文件夹</h2><p>复制bin目录下的东西,我们只需要系统找得到就行,所以我们这里采用环境变量的搞法</p>\n<p>我们修改path变量,在后面添加<code>;d:\\opencv\\build\\x86\\vc10\\bin</code>,效果如图所示<br><br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1es5bew5vcjj20e10g4go8.jpg\" alt=\"修改path变量,添加opencv的bin目录路径\"></p>\n<h1 id=\"3-写代码调试\"><a href=\"#3-写代码调试\" class=\"headerlink\" title=\"3 写代码调试\"></a>3 写代码调试</h1><p>代码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"># include &lt;opencv2/opencv.hpp&gt;</div><div class=\"line\"># include &lt;iostream&gt;</div><div class=\"line\"># include &lt;string&gt;</div><div class=\"line\"># ifdef _DEBUG</div><div class=\"line\"># pragma comment(lib,&quot;opencv_core2410d.lib&quot;)</div><div class=\"line\"># pragma comment(lib,&quot;opencv_highgui2410d.lib&quot;)</div><div class=\"line\"># else</div><div class=\"line\"># pragma comment(lib,&quot;opencv_core2410.lib&quot;)</div><div class=\"line\"># pragma comment(lib,&quot;opencv_highgui2410.lib&quot;)</div><div class=\"line\"># endif</div><div class=\"line\">using namespace cv;</div><div class=\"line\">using namespace std;</div><div class=\"line\">int main()</div><div class=\"line\">&#123;</div><div class=\"line\">    Mat img = imread(&quot;ie8-2.png&quot;);</div><div class=\"line\">    if(img.empty())</div><div class=\"line\">    &#123;</div><div class=\"line\">        cout&lt;&lt;&quot;error&quot;;</div><div class=\"line\">        return -1;</div><div class=\"line\">   &#125;</div><div class=\"line\">   imshow(&quot;xx的靓照&quot;,img);</div><div class=\"line\">   waitKey();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注意一下这段宏设置<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">ifdef</span> _DEBUG</span></div><div class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">pragma</span> comment(lib,<span class=\"meta-string\">\"opencv_core2410d.lib\"</span>)</span></div><div class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">pragma</span> comment(lib,<span class=\"meta-string\">\"opencv_highgui2410d.lib\"</span>)</span></div><div class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">pragma</span> comment(lib,<span class=\"meta-string\">\"opencv_core2410.lib\"</span>)</span></div><div class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">pragma</span> comment(lib,<span class=\"meta-string\">\"opencv_highgui2410.lib\"</span>)</span></div><div class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure></p>\n<p>debug和release,分别调用对应的lib<br>如果你当前是debug模式<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">pragma</span> comment(lib,<span class=\"meta-string\">\"opencv_core2410d.lib\"</span>)</span></div><div class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">pragma</span> comment(lib,<span class=\"meta-string\">\"opencv_highgui2410d.lib\"</span>)</span></div></pre></td></tr></table></figure></p>\n<p>这段代码是必须要的,以后调用相应的lib文件,我们都要手动在头部加入这句话才行<br>否则,你会看到下面这堆东西<br><figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span>&gt;  test.cpp</div><div class=\"line\"><span class=\"number\">1</span>&gt;ManifestResourceCompile:</div><div class=\"line\"><span class=\"number\">1</span>&gt;  所有输出均为最新。</div><div class=\"line\"><span class=\"number\">1</span>&gt;test.obj : <span class=\"keyword\">error</span> LNK2019: 无法解析的外部符号 <span class=\"string\">\"int __cdecl cv::waitKey(int)\"</span> (?waitKey@cv@@YAHH@Z)，该符号在函数 _main 中被引用</div><div class=\"line\"><span class=\"number\">1</span>&gt;test.obj : <span class=\"keyword\">error</span> LNK2019: 无法解析的外部符号 <span class=\"string\">\"void __cdecl cv::imshow(class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; const &amp;,class cv::_InputArray const &amp;)\"</span> (?imshow@cv@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV_InputArray@1@@Z)，该符号在函数 _main 中被引用</div><div class=\"line\"><span class=\"number\">1</span>&gt;test.obj : <span class=\"keyword\">error</span> LNK2019: 无法解析的外部符号 <span class=\"string\">\"public: __thiscall cv::_InputArray::_InputArray(class cv::Mat const &amp;)\"</span> (??<span class=\"number\">0</span>_InputArray@cv@@QAE@ABVMat@1@@Z)，该符号在函数 _main 中被引用</div><div class=\"line\"><span class=\"number\">1</span>&gt;test.obj : <span class=\"keyword\">error</span> LNK2019: 无法解析的外部符号 <span class=\"string\">\"class cv::Mat __cdecl cv::imread(class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; const &amp;,int)\"</span> (?imread@cv@@YA?AVMat@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z)，该符号在函数 _main 中被引用</div><div class=\"line\"><span class=\"number\">1</span>&gt;test.obj : <span class=\"keyword\">error</span> LNK2019: 无法解析的外部符号 <span class=\"string\">\"void __cdecl cv::fastFree(void *)\"</span> (?fastFree@cv@@YAXPAX@Z)，该符号在函数 <span class=\"string\">\"public: __thiscall cv::Mat::~Mat(void)\"</span> (??<span class=\"number\">1</span>Mat@cv@@QAE@XZ) 中被引用</div><div class=\"line\"><span class=\"number\">1</span>&gt;test.obj : <span class=\"keyword\">error</span> LNK2019: 无法解析的外部符号 <span class=\"string\">\"public: void __thiscall cv::Mat::deallocate(void)\"</span> (?deallocate@Mat@cv@@QAEXXZ)，该符号在函数 <span class=\"string\">\"public: void __thiscall cv::Mat::release(void)\"</span> (?release@Mat@cv@@QAEXXZ) 中被引用</div><div class=\"line\"><span class=\"number\">1</span>&gt;test.obj : <span class=\"keyword\">error</span> LNK2019: 无法解析的外部符号 <span class=\"string\">\"int __cdecl cv::_interlockedExchangeAdd(int *,int)\"</span> (?_interlockedExchangeAdd@cv@@YAHPAHH@Z)，该符号在函数 <span class=\"string\">\"public: void __thiscall cv::Mat::release(void)\"</span> (?release@Mat@cv@@QAEXXZ) 中被引用</div><div class=\"line\"><span class=\"number\">1</span>&gt;C:\\Users\\chenhao\\documents\\visual studio <span class=\"number\">2010</span>\\Projects\\b\\Debug\\b.exe : fatal <span class=\"keyword\">error</span> LNK1120: <span class=\"number\">7</span> 个无法解析的外部命令</div><div class=\"line\"><span class=\"number\">1</span>&gt;</div><div class=\"line\"><span class=\"number\">1</span>&gt;生成失败。</div><div class=\"line\"><span class=\"number\">1</span>&gt;</div><div class=\"line\"><span class=\"number\">1</span>&gt;已用时间 <span class=\"number\">00</span>:<span class=\"number\">00</span>:<span class=\"number\">03.71</span></div><div class=\"line\">========== 生成: 成功 <span class=\"number\">0</span> 个，失败 <span class=\"number\">1</span> 个，最新 <span class=\"number\">0</span> 个，跳过 <span class=\"number\">0</span> 个 ==========</div></pre></td></tr></table></figure></p>\n<p>ok,打完收工!</p>\n<p>ps:上述操作完,应该就好了.我还遇到一个奇葩问题<br>编译和生成解决方案没有问题，但是开始执行就出现应用程序无法正常启动 0xc000007b错误窗口<br>最后,原来是权限问题,使用管理员权限打开vs就解决了,win7下找兼容性设置,以管理员权限运行<br>我的win8没有找到兼容性设置,如图所示操作,每次都能以管理员权限打开vs<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1es5bpz7mkqj20mm0giq7k.jpg\" alt=\"win8使用管理员权限运行vs2010\"></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"http://www.cnblogs.com/freedomshe/archive/2012/04/25/2470540.html\" target=\"_blank\" rel=\"external\">VS2010+Opencv-2.4.0的配置攻略</a></p>\n","excerpt":"<p>今天在师兄的帮助下,总算配置好了opencv.</p>\n<h1 id=\"1-系统环境和软件版本\"><a href=\"#1-系统环境和软件版本\" class=\"headerlink\" title=\"1 系统环境和软件版本\"></a>1 系统环境和软件版本</h1><p>操作系统:win8 64位<br>vs版本:vs2010 32位<br>opencv版本:opencv 2.4.10<br>","more":"</p>\n<h1 id=\"2-配置opencv\"><a href=\"#2-配置opencv\" class=\"headerlink\" title=\"2 配置opencv\"></a>2 配置opencv</h1><p>安装vs比较简单,这里不再赘述.<br>现在说下配置opencv.<br>网上有很多相关的配置,都是设置环境变量,然后添加库目录,包含目录,blablabla.<br>这样做的坏处是,每次我新建一个项目,都要重复以上操作,这样岂不是很蛋疼.<br>如果你移植你的程序给别人,别人也还要去配置这些东西才能够运行,是不是很不方便?<br>所以,师兄教给我简单粗暴的办法,直接把相关文件手动复制到vs的目录下,这样就没这么多事了.<br><strong>缺点:每次都需要手动设置你所需要调用的lib文件</strong></p>\n<h2 id=\"解压opencv到某个目录\"><a href=\"#解压opencv到某个目录\" class=\"headerlink\" title=\"解压opencv到某个目录\"></a>解压opencv到某个目录</h2><p>这个很简单,双击那个exe,选择一个目录,就会把opencv的文件解压到你设定的那个目录.<br>我将它解压到<code>D:/opencv</code>下.</p>\n<h2 id=\"复制include文件夹\"><a href=\"#复制include文件夹\" class=\"headerlink\" title=\"复制include文件夹\"></a>复制include文件夹</h2><p>复制<code>D:\\opencv\\build\\include</code>目录下的<code>opencv</code>和<code>opencv2</code><br>到<code>C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include</code>.<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1es5atg7oimj20kw081ta4.jpg\" alt=\"opencv解压后的include目录\"><br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1es5az6qsa7j20jc099jtf.jpg\" alt=\"复制以后的效果截图\"></p>\n<h2 id=\"复制lib文件夹\"><a href=\"#复制lib文件夹\" class=\"headerlink\" title=\"复制lib文件夹\"></a>复制lib文件夹</h2><p>同理,复制lib文件夹<br>从<code>D:\\opencv\\build\\x86\\vc10\\lib</code>复制到<code>C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\lib</code><br>如果你的程序是win32就选择x86,如果你写的程序是64位的,就复制x64的程序</p>\n<h2 id=\"复制bin文件夹\"><a href=\"#复制bin文件夹\" class=\"headerlink\" title=\"复制bin文件夹\"></a>复制bin文件夹</h2><p>复制bin目录下的东西,我们只需要系统找得到就行,所以我们这里采用环境变量的搞法</p>\n<p>我们修改path变量,在后面添加<code>;d:\\opencv\\build\\x86\\vc10\\bin</code>,效果如图所示<br><br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1es5bew5vcjj20e10g4go8.jpg\" alt=\"修改path变量,添加opencv的bin目录路径\"></p>\n<h1 id=\"3-写代码调试\"><a href=\"#3-写代码调试\" class=\"headerlink\" title=\"3 写代码调试\"></a>3 写代码调试</h1><p>代码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"># include &lt;opencv2/opencv.hpp&gt;</div><div class=\"line\"># include &lt;iostream&gt;</div><div class=\"line\"># include &lt;string&gt;</div><div class=\"line\"># ifdef _DEBUG</div><div class=\"line\"># pragma comment(lib,&quot;opencv_core2410d.lib&quot;)</div><div class=\"line\"># pragma comment(lib,&quot;opencv_highgui2410d.lib&quot;)</div><div class=\"line\"># else</div><div class=\"line\"># pragma comment(lib,&quot;opencv_core2410.lib&quot;)</div><div class=\"line\"># pragma comment(lib,&quot;opencv_highgui2410.lib&quot;)</div><div class=\"line\"># endif</div><div class=\"line\">using namespace cv;</div><div class=\"line\">using namespace std;</div><div class=\"line\">int main()</div><div class=\"line\">&#123;</div><div class=\"line\">    Mat img = imread(&quot;ie8-2.png&quot;);</div><div class=\"line\">    if(img.empty())</div><div class=\"line\">    &#123;</div><div class=\"line\">        cout&lt;&lt;&quot;error&quot;;</div><div class=\"line\">        return -1;</div><div class=\"line\">   &#125;</div><div class=\"line\">   imshow(&quot;xx的靓照&quot;,img);</div><div class=\"line\">   waitKey();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注意一下这段宏设置<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">ifdef</span> _DEBUG</span></div><div class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">pragma</span> comment(lib,<span class=\"meta-string\">\"opencv_core2410d.lib\"</span>)</span></div><div class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">pragma</span> comment(lib,<span class=\"meta-string\">\"opencv_highgui2410d.lib\"</span>)</span></div><div class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">pragma</span> comment(lib,<span class=\"meta-string\">\"opencv_core2410.lib\"</span>)</span></div><div class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">pragma</span> comment(lib,<span class=\"meta-string\">\"opencv_highgui2410.lib\"</span>)</span></div><div class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure></p>\n<p>debug和release,分别调用对应的lib<br>如果你当前是debug模式<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">pragma</span> comment(lib,<span class=\"meta-string\">\"opencv_core2410d.lib\"</span>)</span></div><div class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">pragma</span> comment(lib,<span class=\"meta-string\">\"opencv_highgui2410d.lib\"</span>)</span></div></pre></td></tr></table></figure></p>\n<p>这段代码是必须要的,以后调用相应的lib文件,我们都要手动在头部加入这句话才行<br>否则,你会看到下面这堆东西<br><figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span>&gt;  test.cpp</div><div class=\"line\"><span class=\"number\">1</span>&gt;ManifestResourceCompile:</div><div class=\"line\"><span class=\"number\">1</span>&gt;  所有输出均为最新。</div><div class=\"line\"><span class=\"number\">1</span>&gt;test.obj : <span class=\"keyword\">error</span> LNK2019: 无法解析的外部符号 <span class=\"string\">\"int __cdecl cv::waitKey(int)\"</span> (?waitKey@cv@@YAHH@Z)，该符号在函数 _main 中被引用</div><div class=\"line\"><span class=\"number\">1</span>&gt;test.obj : <span class=\"keyword\">error</span> LNK2019: 无法解析的外部符号 <span class=\"string\">\"void __cdecl cv::imshow(class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; const &amp;,class cv::_InputArray const &amp;)\"</span> (?imshow@cv@@YAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV_InputArray@1@@Z)，该符号在函数 _main 中被引用</div><div class=\"line\"><span class=\"number\">1</span>&gt;test.obj : <span class=\"keyword\">error</span> LNK2019: 无法解析的外部符号 <span class=\"string\">\"public: __thiscall cv::_InputArray::_InputArray(class cv::Mat const &amp;)\"</span> (??<span class=\"number\">0</span>_InputArray@cv@@QAE@ABVMat@1@@Z)，该符号在函数 _main 中被引用</div><div class=\"line\"><span class=\"number\">1</span>&gt;test.obj : <span class=\"keyword\">error</span> LNK2019: 无法解析的外部符号 <span class=\"string\">\"class cv::Mat __cdecl cv::imread(class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; const &amp;,int)\"</span> (?imread@cv@@YA?AVMat@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z)，该符号在函数 _main 中被引用</div><div class=\"line\"><span class=\"number\">1</span>&gt;test.obj : <span class=\"keyword\">error</span> LNK2019: 无法解析的外部符号 <span class=\"string\">\"void __cdecl cv::fastFree(void *)\"</span> (?fastFree@cv@@YAXPAX@Z)，该符号在函数 <span class=\"string\">\"public: __thiscall cv::Mat::~Mat(void)\"</span> (??<span class=\"number\">1</span>Mat@cv@@QAE@XZ) 中被引用</div><div class=\"line\"><span class=\"number\">1</span>&gt;test.obj : <span class=\"keyword\">error</span> LNK2019: 无法解析的外部符号 <span class=\"string\">\"public: void __thiscall cv::Mat::deallocate(void)\"</span> (?deallocate@Mat@cv@@QAEXXZ)，该符号在函数 <span class=\"string\">\"public: void __thiscall cv::Mat::release(void)\"</span> (?release@Mat@cv@@QAEXXZ) 中被引用</div><div class=\"line\"><span class=\"number\">1</span>&gt;test.obj : <span class=\"keyword\">error</span> LNK2019: 无法解析的外部符号 <span class=\"string\">\"int __cdecl cv::_interlockedExchangeAdd(int *,int)\"</span> (?_interlockedExchangeAdd@cv@@YAHPAHH@Z)，该符号在函数 <span class=\"string\">\"public: void __thiscall cv::Mat::release(void)\"</span> (?release@Mat@cv@@QAEXXZ) 中被引用</div><div class=\"line\"><span class=\"number\">1</span>&gt;C:\\Users\\chenhao\\documents\\visual studio <span class=\"number\">2010</span>\\Projects\\b\\Debug\\b.exe : fatal <span class=\"keyword\">error</span> LNK1120: <span class=\"number\">7</span> 个无法解析的外部命令</div><div class=\"line\"><span class=\"number\">1</span>&gt;</div><div class=\"line\"><span class=\"number\">1</span>&gt;生成失败。</div><div class=\"line\"><span class=\"number\">1</span>&gt;</div><div class=\"line\"><span class=\"number\">1</span>&gt;已用时间 <span class=\"number\">00</span>:<span class=\"number\">00</span>:<span class=\"number\">03.71</span></div><div class=\"line\">========== 生成: 成功 <span class=\"number\">0</span> 个，失败 <span class=\"number\">1</span> 个，最新 <span class=\"number\">0</span> 个，跳过 <span class=\"number\">0</span> 个 ==========</div></pre></td></tr></table></figure></p>\n<p>ok,打完收工!</p>\n<p>ps:上述操作完,应该就好了.我还遇到一个奇葩问题<br>编译和生成解决方案没有问题，但是开始执行就出现应用程序无法正常启动 0xc000007b错误窗口<br>最后,原来是权限问题,使用管理员权限打开vs就解决了,win7下找兼容性设置,以管理员权限运行<br>我的win8没有找到兼容性设置,如图所示操作,每次都能以管理员权限打开vs<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1es5bpz7mkqj20mm0giq7k.jpg\" alt=\"win8使用管理员权限运行vs2010\"></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"http://www.cnblogs.com/freedomshe/archive/2012/04/25/2470540.html\">VS2010+Opencv-2.4.0的配置攻略</a></p>"},{"title":"opencv中LBPH的人脸识别代码分析","date":"2015-05-06T14:32:42.000Z","_content":"我开始用opencv的时候，用的是opencv最新的3.0版本。不过我死活找不到LBPH的代码，网上的教程也都是opencv 2.4的，so  我也去下一份2.4的源码来读读。\n<!-- more -->\nopencv目前支持一下三种方法来实现人脸识别：\n+ **Eigenfaces特征脸createEigenFaceRecognizer()**\n+ **Fisherfaces createFisherFaceRecognizer()**\n+ **Local Binary Patterns Histograms局部二值直方图 createLBPHFaceRecognizer()**\n\n我今天读了一下LBPH的代码。\n自动人脸识别就是如何从一幅图像中提取有意义的特征，把它们放入一种有用的表示方式，然后对他们进行一些分类。<br>特征脸方法描述了一个全面的方法来识别人脸：面部图像是一个点，这个点是从高维图像空间找到它在低维空间的表示，这样分类变得很简单。低维子空间低维是使用主元分析(Principal Component Analysis,PCA)找到的，它可以找拥有最大方差的那个轴。虽然这样的转换是从最佳重建角度考虑的，但是他没有把标签问题考虑进去。想象一个情况，如果变化是基于外部来源，比如光照。轴的最大方差不一定包含任何有鉴别性的信息，因此此时的分类是不可能的。因此，一个使用线性鉴别(Linear Discriminant Analysis,LDA)的特定类投影方法被提出来解决人脸识别问题。其中一个基本的想法就是，使类内方差最小的同时，使类外方差最大。<br>近年来，各种局部特征提取方法出现。为了避免输入的图像的高维数据，仅仅使用的局部特征描述图像的方法被提出，提取的特征(很有希望的)对于局部遮挡、光照变化、小样本等情况更强健。有关局部特征提取的方法有盖伯小波(Gabor Waelets)，离散傅立叶变换(Discrete Cosinus Transform,DCT)，局部二值模式(Local Binary Patterns,LBP)。使用什么方法来提取时域空间的局部特征依旧是一个开放性的研究问题，因为空间信息是潜在有用的信息。\n","source":"_posts/opencv-lbph-source-code-analysis.md","raw":"title: opencv中LBPH的人脸识别代码分析\ndate: 2015-05-06 22:32:42\ntags:\n- 图像处理\n- opencv\n- lbph\ncategories:\n- 图像处理\n---\n我开始用opencv的时候，用的是opencv最新的3.0版本。不过我死活找不到LBPH的代码，网上的教程也都是opencv 2.4的，so  我也去下一份2.4的源码来读读。\n<!-- more -->\nopencv目前支持一下三种方法来实现人脸识别：\n+ **Eigenfaces特征脸createEigenFaceRecognizer()**\n+ **Fisherfaces createFisherFaceRecognizer()**\n+ **Local Binary Patterns Histograms局部二值直方图 createLBPHFaceRecognizer()**\n\n我今天读了一下LBPH的代码。\n自动人脸识别就是如何从一幅图像中提取有意义的特征，把它们放入一种有用的表示方式，然后对他们进行一些分类。<br>特征脸方法描述了一个全面的方法来识别人脸：面部图像是一个点，这个点是从高维图像空间找到它在低维空间的表示，这样分类变得很简单。低维子空间低维是使用主元分析(Principal Component Analysis,PCA)找到的，它可以找拥有最大方差的那个轴。虽然这样的转换是从最佳重建角度考虑的，但是他没有把标签问题考虑进去。想象一个情况，如果变化是基于外部来源，比如光照。轴的最大方差不一定包含任何有鉴别性的信息，因此此时的分类是不可能的。因此，一个使用线性鉴别(Linear Discriminant Analysis,LDA)的特定类投影方法被提出来解决人脸识别问题。其中一个基本的想法就是，使类内方差最小的同时，使类外方差最大。<br>近年来，各种局部特征提取方法出现。为了避免输入的图像的高维数据，仅仅使用的局部特征描述图像的方法被提出，提取的特征(很有希望的)对于局部遮挡、光照变化、小样本等情况更强健。有关局部特征提取的方法有盖伯小波(Gabor Waelets)，离散傅立叶变换(Discrete Cosinus Transform,DCT)，局部二值模式(Local Binary Patterns,LBP)。使用什么方法来提取时域空间的局部特征依旧是一个开放性的研究问题，因为空间信息是潜在有用的信息。\n","slug":"opencv-lbph-source-code-analysis","published":1,"updated":"2015-09-29T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yq3002dx8cd94yvp3c7","content":"<p>我开始用opencv的时候，用的是opencv最新的3.0版本。不过我死活找不到LBPH的代码，网上的教程也都是opencv 2.4的，so  我也去下一份2.4的源码来读读。<br><a id=\"more\"></a><br>opencv目前支持一下三种方法来实现人脸识别：</p>\n<ul>\n<li><strong>Eigenfaces特征脸createEigenFaceRecognizer()</strong></li>\n<li><strong>Fisherfaces createFisherFaceRecognizer()</strong></li>\n<li><strong>Local Binary Patterns Histograms局部二值直方图 createLBPHFaceRecognizer()</strong></li>\n</ul>\n<p>我今天读了一下LBPH的代码。<br>自动人脸识别就是如何从一幅图像中提取有意义的特征，把它们放入一种有用的表示方式，然后对他们进行一些分类。<br>特征脸方法描述了一个全面的方法来识别人脸：面部图像是一个点，这个点是从高维图像空间找到它在低维空间的表示，这样分类变得很简单。低维子空间低维是使用主元分析(Principal Component Analysis,PCA)找到的，它可以找拥有最大方差的那个轴。虽然这样的转换是从最佳重建角度考虑的，但是他没有把标签问题考虑进去。想象一个情况，如果变化是基于外部来源，比如光照。轴的最大方差不一定包含任何有鉴别性的信息，因此此时的分类是不可能的。因此，一个使用线性鉴别(Linear Discriminant Analysis,LDA)的特定类投影方法被提出来解决人脸识别问题。其中一个基本的想法就是，使类内方差最小的同时，使类外方差最大。<br>近年来，各种局部特征提取方法出现。为了避免输入的图像的高维数据，仅仅使用的局部特征描述图像的方法被提出，提取的特征(很有希望的)对于局部遮挡、光照变化、小样本等情况更强健。有关局部特征提取的方法有盖伯小波(Gabor Waelets)，离散傅立叶变换(Discrete Cosinus Transform,DCT)，局部二值模式(Local Binary Patterns,LBP)。使用什么方法来提取时域空间的局部特征依旧是一个开放性的研究问题，因为空间信息是潜在有用的信息。</p>\n","excerpt":"<p>我开始用opencv的时候，用的是opencv最新的3.0版本。不过我死活找不到LBPH的代码，网上的教程也都是opencv 2.4的，so  我也去下一份2.4的源码来读读。<br>","more":"<br>opencv目前支持一下三种方法来实现人脸识别：</p>\n<ul>\n<li><strong>Eigenfaces特征脸createEigenFaceRecognizer()</strong></li>\n<li><strong>Fisherfaces createFisherFaceRecognizer()</strong></li>\n<li><strong>Local Binary Patterns Histograms局部二值直方图 createLBPHFaceRecognizer()</strong></li>\n</ul>\n<p>我今天读了一下LBPH的代码。<br>自动人脸识别就是如何从一幅图像中提取有意义的特征，把它们放入一种有用的表示方式，然后对他们进行一些分类。<br>特征脸方法描述了一个全面的方法来识别人脸：面部图像是一个点，这个点是从高维图像空间找到它在低维空间的表示，这样分类变得很简单。低维子空间低维是使用主元分析(Principal Component Analysis,PCA)找到的，它可以找拥有最大方差的那个轴。虽然这样的转换是从最佳重建角度考虑的，但是他没有把标签问题考虑进去。想象一个情况，如果变化是基于外部来源，比如光照。轴的最大方差不一定包含任何有鉴别性的信息，因此此时的分类是不可能的。因此，一个使用线性鉴别(Linear Discriminant Analysis,LDA)的特定类投影方法被提出来解决人脸识别问题。其中一个基本的想法就是，使类内方差最小的同时，使类外方差最大。<br>近年来，各种局部特征提取方法出现。为了避免输入的图像的高维数据，仅仅使用的局部特征描述图像的方法被提出，提取的特征(很有希望的)对于局部遮挡、光照变化、小样本等情况更强健。有关局部特征提取的方法有盖伯小波(Gabor Waelets)，离散傅立叶变换(Discrete Cosinus Transform,DCT)，局部二值模式(Local Binary Patterns,LBP)。使用什么方法来提取时域空间的局部特征依旧是一个开放性的研究问题，因为空间信息是潜在有用的信息。</p>"},{"title":"php中的bool值和类型转换","date":"2015-07-20T06:23:21.000Z","_content":"最近在写php,发现有个问题一直无法避免,那就是关于php的bool值和类型转换.\n以前每次遇到要校验一个变量`$a`,是否为空,都是使用`$a==''`去判断,感觉不是很懂,反正一直这样用,也没出太多纰漏,而没有理会什么NUll,'',0之类的其他值.今天决定研究下,把它彻底搞清楚.\n<!-- more -->\n# 1 php的数据类型\nphp支持原始的8总数据类型.\n4总标量类型:\n- boolean\n- integer\n- float(也称作double类型)\n- string\n2种复合类型\n- array(数组)\n- object(对象)\n2种特殊类型\n- resource(资源)\n- NULL(无类型)\n实际上 double 和 float 是相同的，由于一些历史的原因，这两个名称同时存在。\n变量的类型通常不是由程序员设定的，确切地说，是由PHP根据该变量使用的上下文在运行时决定的。\n前面几种类型很好理解,现在重点看一下resource类型和NULL类型\n1. `resource` 是一种特殊变量，保存了到外部资源的一个引用。资源是通过专门的函数来建立和使用的。由于资源类型变量保存有为打开文件、数据库连接、图形画布区域等的特殊句柄，因此将其它类型的值转换为资源没有意义。\n2. `NULL`,特殊的NULL值表示一个变量没有值。NULL类型唯一可能的值就是 NULL。在下列情况下一个变量被认为是NULL：\n- 被赋值为 NULL。\n- 尚未被赋值。\n- 被 unset()。\n\n# 2 常用的比较函数\n### empty()\n这个函数最近经常见到,它比较有特点.\n如果 var 是非空或非零的值，则empty()返回`FALSE`。\n换句话说，\"\"、0、\"0\"、NULL、FALSE、array()、var $var以及没有任何属性的对象都将\n被认为是空的，返回 TRUE。\n如果变量没有赋值,empty()也不会报错.\n\n### is_set()\n这个函数和is_null()刚好相反,如果一个函数的is_null()返回`true`,那么它的is_set()则必定返回相反值,`false`.\n\n### is_null()\n所有的`is_`开头的函数,都不会进行类型转换,例如is_bool('0'),返回false,因为'0'不是一个布尔类型的值.\n详细对比看下图\n![使用 PHP 函数对变量 $x 进行比较](http://ww4.sinaimg.cn/large/692869a3gw1euak04nwitj20nf0i2432.jpg)\n\n\n更多更详细的比较,大家看这里[php类型比较表](http://php.net/manual/zh/types.comparisons.php)\n","source":"_posts/php-boolean-value.md","raw":"title: php中的bool值和类型转换\ndate: 2015-07-20 14:23:21\ntags:\n- php\n- bool\ncategories:\n- php\n---\n最近在写php,发现有个问题一直无法避免,那就是关于php的bool值和类型转换.\n以前每次遇到要校验一个变量`$a`,是否为空,都是使用`$a==''`去判断,感觉不是很懂,反正一直这样用,也没出太多纰漏,而没有理会什么NUll,'',0之类的其他值.今天决定研究下,把它彻底搞清楚.\n<!-- more -->\n# 1 php的数据类型\nphp支持原始的8总数据类型.\n4总标量类型:\n- boolean\n- integer\n- float(也称作double类型)\n- string\n2种复合类型\n- array(数组)\n- object(对象)\n2种特殊类型\n- resource(资源)\n- NULL(无类型)\n实际上 double 和 float 是相同的，由于一些历史的原因，这两个名称同时存在。\n变量的类型通常不是由程序员设定的，确切地说，是由PHP根据该变量使用的上下文在运行时决定的。\n前面几种类型很好理解,现在重点看一下resource类型和NULL类型\n1. `resource` 是一种特殊变量，保存了到外部资源的一个引用。资源是通过专门的函数来建立和使用的。由于资源类型变量保存有为打开文件、数据库连接、图形画布区域等的特殊句柄，因此将其它类型的值转换为资源没有意义。\n2. `NULL`,特殊的NULL值表示一个变量没有值。NULL类型唯一可能的值就是 NULL。在下列情况下一个变量被认为是NULL：\n- 被赋值为 NULL。\n- 尚未被赋值。\n- 被 unset()。\n\n# 2 常用的比较函数\n### empty()\n这个函数最近经常见到,它比较有特点.\n如果 var 是非空或非零的值，则empty()返回`FALSE`。\n换句话说，\"\"、0、\"0\"、NULL、FALSE、array()、var $var以及没有任何属性的对象都将\n被认为是空的，返回 TRUE。\n如果变量没有赋值,empty()也不会报错.\n\n### is_set()\n这个函数和is_null()刚好相反,如果一个函数的is_null()返回`true`,那么它的is_set()则必定返回相反值,`false`.\n\n### is_null()\n所有的`is_`开头的函数,都不会进行类型转换,例如is_bool('0'),返回false,因为'0'不是一个布尔类型的值.\n详细对比看下图\n![使用 PHP 函数对变量 $x 进行比较](http://ww4.sinaimg.cn/large/692869a3gw1euak04nwitj20nf0i2432.jpg)\n\n\n更多更详细的比较,大家看这里[php类型比较表](http://php.net/manual/zh/types.comparisons.php)\n","slug":"php-boolean-value","published":1,"updated":"2015-10-29T06:08:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yq5002hx8cdalbzbwhd","content":"<p>最近在写php,发现有个问题一直无法避免,那就是关于php的bool值和类型转换.<br>以前每次遇到要校验一个变量<code>$a</code>,是否为空,都是使用<code>$a==&#39;&#39;</code>去判断,感觉不是很懂,反正一直这样用,也没出太多纰漏,而没有理会什么NUll,’’,0之类的其他值.今天决定研究下,把它彻底搞清楚.<br><a id=\"more\"></a></p>\n<h1 id=\"1-php的数据类型\"><a href=\"#1-php的数据类型\" class=\"headerlink\" title=\"1 php的数据类型\"></a>1 php的数据类型</h1><p>php支持原始的8总数据类型.<br>4总标量类型:</p>\n<ul>\n<li>boolean</li>\n<li>integer</li>\n<li>float(也称作double类型)</li>\n<li>string<br>2种复合类型</li>\n<li>array(数组)</li>\n<li>object(对象)<br>2种特殊类型</li>\n<li>resource(资源)</li>\n<li>NULL(无类型)<br>实际上 double 和 float 是相同的，由于一些历史的原因，这两个名称同时存在。<br>变量的类型通常不是由程序员设定的，确切地说，是由PHP根据该变量使用的上下文在运行时决定的。<br>前面几种类型很好理解,现在重点看一下resource类型和NULL类型</li>\n</ul>\n<ol>\n<li><code>resource</code> 是一种特殊变量，保存了到外部资源的一个引用。资源是通过专门的函数来建立和使用的。由于资源类型变量保存有为打开文件、数据库连接、图形画布区域等的特殊句柄，因此将其它类型的值转换为资源没有意义。</li>\n<li><code>NULL</code>,特殊的NULL值表示一个变量没有值。NULL类型唯一可能的值就是 NULL。在下列情况下一个变量被认为是NULL：</li>\n</ol>\n<ul>\n<li>被赋值为 NULL。</li>\n<li>尚未被赋值。</li>\n<li>被 unset()。</li>\n</ul>\n<h1 id=\"2-常用的比较函数\"><a href=\"#2-常用的比较函数\" class=\"headerlink\" title=\"2 常用的比较函数\"></a>2 常用的比较函数</h1><h3 id=\"empty\"><a href=\"#empty\" class=\"headerlink\" title=\"empty()\"></a>empty()</h3><p>这个函数最近经常见到,它比较有特点.<br>如果 var 是非空或非零的值，则empty()返回<code>FALSE</code>。<br>换句话说，””、0、”0”、NULL、FALSE、array()、var $var以及没有任何属性的对象都将<br>被认为是空的，返回 TRUE。<br>如果变量没有赋值,empty()也不会报错.</p>\n<h3 id=\"is-set\"><a href=\"#is-set\" class=\"headerlink\" title=\"is_set()\"></a>is_set()</h3><p>这个函数和is_null()刚好相反,如果一个函数的is_null()返回<code>true</code>,那么它的is_set()则必定返回相反值,<code>false</code>.</p>\n<h3 id=\"is-null\"><a href=\"#is-null\" class=\"headerlink\" title=\"is_null()\"></a>is_null()</h3><p>所有的<code>is_</code>开头的函数,都不会进行类型转换,例如is_bool(‘0’),返回false,因为’0’不是一个布尔类型的值.<br>详细对比看下图<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1euak04nwitj20nf0i2432.jpg\" alt=\"使用 PHP 函数对变量 $x 进行比较\"></p>\n<p>更多更详细的比较,大家看这里<a href=\"http://php.net/manual/zh/types.comparisons.php\" target=\"_blank\" rel=\"external\">php类型比较表</a></p>\n","excerpt":"<p>最近在写php,发现有个问题一直无法避免,那就是关于php的bool值和类型转换.<br>以前每次遇到要校验一个变量<code>$a</code>,是否为空,都是使用<code>$a==&#39;&#39;</code>去判断,感觉不是很懂,反正一直这样用,也没出太多纰漏,而没有理会什么NUll,’’,0之类的其他值.今天决定研究下,把它彻底搞清楚.<br>","more":"</p>\n<h1 id=\"1-php的数据类型\"><a href=\"#1-php的数据类型\" class=\"headerlink\" title=\"1 php的数据类型\"></a>1 php的数据类型</h1><p>php支持原始的8总数据类型.<br>4总标量类型:</p>\n<ul>\n<li>boolean</li>\n<li>integer</li>\n<li>float(也称作double类型)</li>\n<li>string<br>2种复合类型</li>\n<li>array(数组)</li>\n<li>object(对象)<br>2种特殊类型</li>\n<li>resource(资源)</li>\n<li>NULL(无类型)<br>实际上 double 和 float 是相同的，由于一些历史的原因，这两个名称同时存在。<br>变量的类型通常不是由程序员设定的，确切地说，是由PHP根据该变量使用的上下文在运行时决定的。<br>前面几种类型很好理解,现在重点看一下resource类型和NULL类型</li>\n</ul>\n<ol>\n<li><code>resource</code> 是一种特殊变量，保存了到外部资源的一个引用。资源是通过专门的函数来建立和使用的。由于资源类型变量保存有为打开文件、数据库连接、图形画布区域等的特殊句柄，因此将其它类型的值转换为资源没有意义。</li>\n<li><code>NULL</code>,特殊的NULL值表示一个变量没有值。NULL类型唯一可能的值就是 NULL。在下列情况下一个变量被认为是NULL：</li>\n</ol>\n<ul>\n<li>被赋值为 NULL。</li>\n<li>尚未被赋值。</li>\n<li>被 unset()。</li>\n</ul>\n<h1 id=\"2-常用的比较函数\"><a href=\"#2-常用的比较函数\" class=\"headerlink\" title=\"2 常用的比较函数\"></a>2 常用的比较函数</h1><h3 id=\"empty\"><a href=\"#empty\" class=\"headerlink\" title=\"empty()\"></a>empty()</h3><p>这个函数最近经常见到,它比较有特点.<br>如果 var 是非空或非零的值，则empty()返回<code>FALSE</code>。<br>换句话说，””、0、”0”、NULL、FALSE、array()、var $var以及没有任何属性的对象都将<br>被认为是空的，返回 TRUE。<br>如果变量没有赋值,empty()也不会报错.</p>\n<h3 id=\"is-set\"><a href=\"#is-set\" class=\"headerlink\" title=\"is_set()\"></a>is_set()</h3><p>这个函数和is_null()刚好相反,如果一个函数的is_null()返回<code>true</code>,那么它的is_set()则必定返回相反值,<code>false</code>.</p>\n<h3 id=\"is-null\"><a href=\"#is-null\" class=\"headerlink\" title=\"is_null()\"></a>is_null()</h3><p>所有的<code>is_</code>开头的函数,都不会进行类型转换,例如is_bool(‘0’),返回false,因为’0’不是一个布尔类型的值.<br>详细对比看下图<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1euak04nwitj20nf0i2432.jpg\" alt=\"使用 PHP 函数对变量 $x 进行比较\"></p>\n<p>更多更详细的比较,大家看这里<a href=\"http://php.net/manual/zh/types.comparisons.php\">php类型比较表</a></p>"},{"title":"2016这过去的半年","date":"2016-11-06T07:39:32.000Z","_content":"时间真是匆匆啊,上一篇博客的时间是3月25,今天都已经是11月6号了,过去了7个多月.\n<!-- more -->\n# 1 时光匆匆\n自从上了初中开始,就发觉时间过得快来.接下来到了高中时间有是更快了,到了大学时间简直飞逝.\n人生黄金的10年,转眼已经过了一般,but我依旧没有成为一个大神,还是辣么水水哒.基础知识还是不扎实,做事情总是知其然而不知其所以然,这是我所讨厌的,但是也没有实际的办法.\n每次遇到一个事情,如果要刨根问底的去解决,就涉及太多的东西,短时间根本没法解决;可是如果选择一个快捷的方法,那么就只是解决了眼前的问题,但是没有实际去搞懂它.等到事情解决,每每又再提不起兴趣去解决.这真是一对矛盾,想快速解决就搞不懂原理,想搞懂原理但是时间又不允许.\n\n# 2 找实习\n今年有一个比较大的事情,也是对自己比较重要的事情,找实习.想来也是运气好,和老谭他们比起来真是好太多了.\n还记得3月份第一个电话是海豚浏览器,我在官网发的邮件,因为海豚不招php没办法投的前端开发,但是一面(可能都不能算是一面),应该是hr面试的就把我刷掉了,额,有点心塞.\n第二个好像是微博易,这个公司有点坑,技术面是CTO面试的.一般CTO啊CEO啊搞面试,说实话都觉得有点不靠谱,因为说明公司真心小,哭脸.这个技术面真心让我无语,一开始就告诉我这次面试要问几个技术问题,开场是我做个自我介绍,然后简单聊了一下自己的项目.接着事情就不可控了,他问我为什么要做技术,我说是因为自己对技术比较感兴趣,小时候看电影觉得黑客很酷,现在虽然做不成黑客,但是我喜欢电脑,喜欢敲代码.然后他接着问我为什么喜欢,觉得做技术最重要的是什么?我当时内心真是黑人问号了,这完全不按套路出牌啊,一直刨根问底.整个面试持续了1个小时,而且最后结束的时候并没有问任何技术问题,真是醉了.记得当时在实验室面试的,面完之后,我师弟开口问,师兄你刚才是HR面吗?你就知道这个面试有多坑了,这哪是技术面啊,工程师为啥会问这些问题?那要HR做什么?\n再往后的面试就顺利多了,拿了盛大游戏的offer(内部应用系统开发),美图offer(这个职位应该是比较好的,但是在厦门),华米科技(这个是我打算去的,对小米的东西也比较有兴趣),百度地图offer.拿了百度的以后就没有再面试了.对于华米科技的那个面试官还是挺抱歉的,聊的也比较开心,因为华米科技算是创业公司应该还是能很好的锻炼,无奈百度的名气大,最后还是选择了百度,只能拒掉华米科技了.\n\n# 3 去实习\n拿到口头offer以后,在漫长的等待书面offer中.回家住了几天,和家人一起上了去天堂寨旅游了一把,放松一下.\n最后出发北上的晚上,我最亲爱的请我吃了一顿烧烤,恩,我喜欢烧烤.我俩还喝了一瓶啤酒,哈哈.![武汉出发时](https://ws4.sinaimg.cn/large/692869a3gw1f9ihai0a6nj21kw23u4qp.jpg)\n接着一路北上,我坐的硬座,额,必须是为了省钱,现在想想,也是蛮艰苦的.\n\n## 3.1 找房子\n刚到北京,北京的旅社真是贵,七天如家什么的一天要200-300多,我表示完全住不起啊,最后选择住青年旅社,一天80多块钱.幸亏我弟在北京念书,我可以把行李放在他那里,青年旅社自己带的东西不敢放,怕被偷.那也是我第一次住青年旅社,还是很紧张的,睡觉把书包都抱着.\n找房子绝对是最艰难的事情,跑了两天,全是中介,根本就没有没有中介的地方,而且在五道口附加的房子真是贵,一间房子一不小心就要2000多,直逼三千,关键房子还不咋地.还好有同学在,雄风和国安他们先行来到北京,最痛苦的事他们已经趟过了,我在他们那里借住了几天.还好天无绝人之路,我在内网找了几天,总算找打合适的了,虽然离地铁站有点远,但是1600一个月,而且是2室1厅2卫,人少,住着舒服,附近有超市有菜场,生活很方便,室友人也很好,知道我是实习生很照顾我,房租什么的也没催我还说可以等发工资再交.\n## 3.2 百度第一天\n终于正式去百度实习了,因为上午8点就要开始入职了,所以那天起的很早.\n上午就是入职流程,领东西然后去大厦听hr培训,然后再分到各个地方.我入职的地方是奎科大厦,不过说真的,还是更喜欢百度大厦或者科技园,哈哈,新修的大楼看起来爽多了,啥都是新的,更有归属感.\n中午11点多的时候,来到了自己的工位,经理向大家介绍我,接着介绍每个人的名字,额,差不多一个都没记住,还好工位每个人都有明牌,哈哈.\n下午的时候,就是熟悉一下环境,搭建开发环境申请开发机什么的,都是mentor在教我.\n第一天的感觉,就是好累,可能早上起太早了,也可能是房子还没确定,当天下班的时候感觉好累,就拍了这一张照片.\n![在百度的第一天](https://ws4.sinaimg.cn/large/692869a3gw1f9ih2uc5xhj20x617s45c.jpg)\n## 3.4 在百度\n之前做的项目,都算是小打小闹,这次进去公司实习确实有不一样的感受.\n1. `要对自己的每一行代码负责`:以前写代码都是只看最后的运行效果,出来了就行了,其实都没搞清楚每一行代码每一个变量的具体输出和值,测试也不充分.公司写代码,必须要自己对自己的代码负责,刚开始去就吃了这方面的苦,第一次代码上线都出了问题,所以后来排期的时候,代码自己review的时间都特别长,有时候和开发时间差不多.\n2. `系统设计能力很重要`:之前都是提了需求,考虑一下,就开始动手写代码了.不过一般来说,当一个需求确定的时候,我自己心里就有了一个大概的构图,有个谱了.到公司的感觉就是,同事之间的经验比我还是丰富很多,所以前期的时候很看重设计能力,还专门开会大家讨论,确定方案后,才动手写代码.\n3. `多学习,多看书`:同事空闲时候都在学习别的东西,看其他书籍,这是一个好习惯,我喜欢.\n\n## 3.5 与人相处\n在公司和学校还是有很大区别的,学校每天都是和室友混在一起,一起吃饭,一起去实验室,一起玩游戏.到公司,刚开始感觉大家的感觉就疏远很多,大家彼此相互尊重,感觉就是少了学校同学的那份亲密.刚开始我还试图融入他们的圈子,不过因为自己不善言辞,做的并不好.\n大概一个月过后,就觉悟了,在公司和在学校本来就不同,大家的关系也无法做到像学校那样,所以不必强求,大家友好和平共处,就是正确的处理方式.正如圣哥所说,大家其实都是过客.\n后面的相处就自然的多,简简单单相处.\n\n---\n\n2016-11-06 17:25  就先写到这,吃饭去的,等下食堂就没饭了","source":"_posts/my-life-these-days.md","raw":"title: 2016这过去的半年\ndate: 2016-11-06 15:39:32\ntags:\n- 生活\ncategories:\n- 杂文\n---\n时间真是匆匆啊,上一篇博客的时间是3月25,今天都已经是11月6号了,过去了7个多月.\n<!-- more -->\n# 1 时光匆匆\n自从上了初中开始,就发觉时间过得快来.接下来到了高中时间有是更快了,到了大学时间简直飞逝.\n人生黄金的10年,转眼已经过了一般,but我依旧没有成为一个大神,还是辣么水水哒.基础知识还是不扎实,做事情总是知其然而不知其所以然,这是我所讨厌的,但是也没有实际的办法.\n每次遇到一个事情,如果要刨根问底的去解决,就涉及太多的东西,短时间根本没法解决;可是如果选择一个快捷的方法,那么就只是解决了眼前的问题,但是没有实际去搞懂它.等到事情解决,每每又再提不起兴趣去解决.这真是一对矛盾,想快速解决就搞不懂原理,想搞懂原理但是时间又不允许.\n\n# 2 找实习\n今年有一个比较大的事情,也是对自己比较重要的事情,找实习.想来也是运气好,和老谭他们比起来真是好太多了.\n还记得3月份第一个电话是海豚浏览器,我在官网发的邮件,因为海豚不招php没办法投的前端开发,但是一面(可能都不能算是一面),应该是hr面试的就把我刷掉了,额,有点心塞.\n第二个好像是微博易,这个公司有点坑,技术面是CTO面试的.一般CTO啊CEO啊搞面试,说实话都觉得有点不靠谱,因为说明公司真心小,哭脸.这个技术面真心让我无语,一开始就告诉我这次面试要问几个技术问题,开场是我做个自我介绍,然后简单聊了一下自己的项目.接着事情就不可控了,他问我为什么要做技术,我说是因为自己对技术比较感兴趣,小时候看电影觉得黑客很酷,现在虽然做不成黑客,但是我喜欢电脑,喜欢敲代码.然后他接着问我为什么喜欢,觉得做技术最重要的是什么?我当时内心真是黑人问号了,这完全不按套路出牌啊,一直刨根问底.整个面试持续了1个小时,而且最后结束的时候并没有问任何技术问题,真是醉了.记得当时在实验室面试的,面完之后,我师弟开口问,师兄你刚才是HR面吗?你就知道这个面试有多坑了,这哪是技术面啊,工程师为啥会问这些问题?那要HR做什么?\n再往后的面试就顺利多了,拿了盛大游戏的offer(内部应用系统开发),美图offer(这个职位应该是比较好的,但是在厦门),华米科技(这个是我打算去的,对小米的东西也比较有兴趣),百度地图offer.拿了百度的以后就没有再面试了.对于华米科技的那个面试官还是挺抱歉的,聊的也比较开心,因为华米科技算是创业公司应该还是能很好的锻炼,无奈百度的名气大,最后还是选择了百度,只能拒掉华米科技了.\n\n# 3 去实习\n拿到口头offer以后,在漫长的等待书面offer中.回家住了几天,和家人一起上了去天堂寨旅游了一把,放松一下.\n最后出发北上的晚上,我最亲爱的请我吃了一顿烧烤,恩,我喜欢烧烤.我俩还喝了一瓶啤酒,哈哈.![武汉出发时](https://ws4.sinaimg.cn/large/692869a3gw1f9ihai0a6nj21kw23u4qp.jpg)\n接着一路北上,我坐的硬座,额,必须是为了省钱,现在想想,也是蛮艰苦的.\n\n## 3.1 找房子\n刚到北京,北京的旅社真是贵,七天如家什么的一天要200-300多,我表示完全住不起啊,最后选择住青年旅社,一天80多块钱.幸亏我弟在北京念书,我可以把行李放在他那里,青年旅社自己带的东西不敢放,怕被偷.那也是我第一次住青年旅社,还是很紧张的,睡觉把书包都抱着.\n找房子绝对是最艰难的事情,跑了两天,全是中介,根本就没有没有中介的地方,而且在五道口附加的房子真是贵,一间房子一不小心就要2000多,直逼三千,关键房子还不咋地.还好有同学在,雄风和国安他们先行来到北京,最痛苦的事他们已经趟过了,我在他们那里借住了几天.还好天无绝人之路,我在内网找了几天,总算找打合适的了,虽然离地铁站有点远,但是1600一个月,而且是2室1厅2卫,人少,住着舒服,附近有超市有菜场,生活很方便,室友人也很好,知道我是实习生很照顾我,房租什么的也没催我还说可以等发工资再交.\n## 3.2 百度第一天\n终于正式去百度实习了,因为上午8点就要开始入职了,所以那天起的很早.\n上午就是入职流程,领东西然后去大厦听hr培训,然后再分到各个地方.我入职的地方是奎科大厦,不过说真的,还是更喜欢百度大厦或者科技园,哈哈,新修的大楼看起来爽多了,啥都是新的,更有归属感.\n中午11点多的时候,来到了自己的工位,经理向大家介绍我,接着介绍每个人的名字,额,差不多一个都没记住,还好工位每个人都有明牌,哈哈.\n下午的时候,就是熟悉一下环境,搭建开发环境申请开发机什么的,都是mentor在教我.\n第一天的感觉,就是好累,可能早上起太早了,也可能是房子还没确定,当天下班的时候感觉好累,就拍了这一张照片.\n![在百度的第一天](https://ws4.sinaimg.cn/large/692869a3gw1f9ih2uc5xhj20x617s45c.jpg)\n## 3.4 在百度\n之前做的项目,都算是小打小闹,这次进去公司实习确实有不一样的感受.\n1. `要对自己的每一行代码负责`:以前写代码都是只看最后的运行效果,出来了就行了,其实都没搞清楚每一行代码每一个变量的具体输出和值,测试也不充分.公司写代码,必须要自己对自己的代码负责,刚开始去就吃了这方面的苦,第一次代码上线都出了问题,所以后来排期的时候,代码自己review的时间都特别长,有时候和开发时间差不多.\n2. `系统设计能力很重要`:之前都是提了需求,考虑一下,就开始动手写代码了.不过一般来说,当一个需求确定的时候,我自己心里就有了一个大概的构图,有个谱了.到公司的感觉就是,同事之间的经验比我还是丰富很多,所以前期的时候很看重设计能力,还专门开会大家讨论,确定方案后,才动手写代码.\n3. `多学习,多看书`:同事空闲时候都在学习别的东西,看其他书籍,这是一个好习惯,我喜欢.\n\n## 3.5 与人相处\n在公司和学校还是有很大区别的,学校每天都是和室友混在一起,一起吃饭,一起去实验室,一起玩游戏.到公司,刚开始感觉大家的感觉就疏远很多,大家彼此相互尊重,感觉就是少了学校同学的那份亲密.刚开始我还试图融入他们的圈子,不过因为自己不善言辞,做的并不好.\n大概一个月过后,就觉悟了,在公司和在学校本来就不同,大家的关系也无法做到像学校那样,所以不必强求,大家友好和平共处,就是正确的处理方式.正如圣哥所说,大家其实都是过客.\n后面的相处就自然的多,简简单单相处.\n\n---\n\n2016-11-06 17:25  就先写到这,吃饭去的,等下食堂就没饭了","slug":"my-life-these-days","published":1,"updated":"2016-11-06T09:54:57.000Z","_id":"civ6f7yq9002kx8cdzddthzkl","comments":1,"layout":"post","photos":[],"link":"","content":"<p>时间真是匆匆啊,上一篇博客的时间是3月25,今天都已经是11月6号了,过去了7个多月.<br><a id=\"more\"></a></p>\n<h1 id=\"1-时光匆匆\"><a href=\"#1-时光匆匆\" class=\"headerlink\" title=\"1 时光匆匆\"></a>1 时光匆匆</h1><p>自从上了初中开始,就发觉时间过得快来.接下来到了高中时间有是更快了,到了大学时间简直飞逝.<br>人生黄金的10年,转眼已经过了一般,but我依旧没有成为一个大神,还是辣么水水哒.基础知识还是不扎实,做事情总是知其然而不知其所以然,这是我所讨厌的,但是也没有实际的办法.<br>每次遇到一个事情,如果要刨根问底的去解决,就涉及太多的东西,短时间根本没法解决;可是如果选择一个快捷的方法,那么就只是解决了眼前的问题,但是没有实际去搞懂它.等到事情解决,每每又再提不起兴趣去解决.这真是一对矛盾,想快速解决就搞不懂原理,想搞懂原理但是时间又不允许.</p>\n<h1 id=\"2-找实习\"><a href=\"#2-找实习\" class=\"headerlink\" title=\"2 找实习\"></a>2 找实习</h1><p>今年有一个比较大的事情,也是对自己比较重要的事情,找实习.想来也是运气好,和老谭他们比起来真是好太多了.<br>还记得3月份第一个电话是海豚浏览器,我在官网发的邮件,因为海豚不招php没办法投的前端开发,但是一面(可能都不能算是一面),应该是hr面试的就把我刷掉了,额,有点心塞.<br>第二个好像是微博易,这个公司有点坑,技术面是CTO面试的.一般CTO啊CEO啊搞面试,说实话都觉得有点不靠谱,因为说明公司真心小,哭脸.这个技术面真心让我无语,一开始就告诉我这次面试要问几个技术问题,开场是我做个自我介绍,然后简单聊了一下自己的项目.接着事情就不可控了,他问我为什么要做技术,我说是因为自己对技术比较感兴趣,小时候看电影觉得黑客很酷,现在虽然做不成黑客,但是我喜欢电脑,喜欢敲代码.然后他接着问我为什么喜欢,觉得做技术最重要的是什么?我当时内心真是黑人问号了,这完全不按套路出牌啊,一直刨根问底.整个面试持续了1个小时,而且最后结束的时候并没有问任何技术问题,真是醉了.记得当时在实验室面试的,面完之后,我师弟开口问,师兄你刚才是HR面吗?你就知道这个面试有多坑了,这哪是技术面啊,工程师为啥会问这些问题?那要HR做什么?<br>再往后的面试就顺利多了,拿了盛大游戏的offer(内部应用系统开发),美图offer(这个职位应该是比较好的,但是在厦门),华米科技(这个是我打算去的,对小米的东西也比较有兴趣),百度地图offer.拿了百度的以后就没有再面试了.对于华米科技的那个面试官还是挺抱歉的,聊的也比较开心,因为华米科技算是创业公司应该还是能很好的锻炼,无奈百度的名气大,最后还是选择了百度,只能拒掉华米科技了.</p>\n<h1 id=\"3-去实习\"><a href=\"#3-去实习\" class=\"headerlink\" title=\"3 去实习\"></a>3 去实习</h1><p>拿到口头offer以后,在漫长的等待书面offer中.回家住了几天,和家人一起上了去天堂寨旅游了一把,放松一下.<br>最后出发北上的晚上,我最亲爱的请我吃了一顿烧烤,恩,我喜欢烧烤.我俩还喝了一瓶啤酒,哈哈.<img src=\"https://ws4.sinaimg.cn/large/692869a3gw1f9ihai0a6nj21kw23u4qp.jpg\" alt=\"武汉出发时\"><br>接着一路北上,我坐的硬座,额,必须是为了省钱,现在想想,也是蛮艰苦的.</p>\n<h2 id=\"3-1-找房子\"><a href=\"#3-1-找房子\" class=\"headerlink\" title=\"3.1 找房子\"></a>3.1 找房子</h2><p>刚到北京,北京的旅社真是贵,七天如家什么的一天要200-300多,我表示完全住不起啊,最后选择住青年旅社,一天80多块钱.幸亏我弟在北京念书,我可以把行李放在他那里,青年旅社自己带的东西不敢放,怕被偷.那也是我第一次住青年旅社,还是很紧张的,睡觉把书包都抱着.<br>找房子绝对是最艰难的事情,跑了两天,全是中介,根本就没有没有中介的地方,而且在五道口附加的房子真是贵,一间房子一不小心就要2000多,直逼三千,关键房子还不咋地.还好有同学在,雄风和国安他们先行来到北京,最痛苦的事他们已经趟过了,我在他们那里借住了几天.还好天无绝人之路,我在内网找了几天,总算找打合适的了,虽然离地铁站有点远,但是1600一个月,而且是2室1厅2卫,人少,住着舒服,附近有超市有菜场,生活很方便,室友人也很好,知道我是实习生很照顾我,房租什么的也没催我还说可以等发工资再交.</p>\n<h2 id=\"3-2-百度第一天\"><a href=\"#3-2-百度第一天\" class=\"headerlink\" title=\"3.2 百度第一天\"></a>3.2 百度第一天</h2><p>终于正式去百度实习了,因为上午8点就要开始入职了,所以那天起的很早.<br>上午就是入职流程,领东西然后去大厦听hr培训,然后再分到各个地方.我入职的地方是奎科大厦,不过说真的,还是更喜欢百度大厦或者科技园,哈哈,新修的大楼看起来爽多了,啥都是新的,更有归属感.<br>中午11点多的时候,来到了自己的工位,经理向大家介绍我,接着介绍每个人的名字,额,差不多一个都没记住,还好工位每个人都有明牌,哈哈.<br>下午的时候,就是熟悉一下环境,搭建开发环境申请开发机什么的,都是mentor在教我.<br>第一天的感觉,就是好累,可能早上起太早了,也可能是房子还没确定,当天下班的时候感觉好累,就拍了这一张照片.<br><img src=\"https://ws4.sinaimg.cn/large/692869a3gw1f9ih2uc5xhj20x617s45c.jpg\" alt=\"在百度的第一天\"></p>\n<h2 id=\"3-4-在百度\"><a href=\"#3-4-在百度\" class=\"headerlink\" title=\"3.4 在百度\"></a>3.4 在百度</h2><p>之前做的项目,都算是小打小闹,这次进去公司实习确实有不一样的感受.</p>\n<ol>\n<li><code>要对自己的每一行代码负责</code>:以前写代码都是只看最后的运行效果,出来了就行了,其实都没搞清楚每一行代码每一个变量的具体输出和值,测试也不充分.公司写代码,必须要自己对自己的代码负责,刚开始去就吃了这方面的苦,第一次代码上线都出了问题,所以后来排期的时候,代码自己review的时间都特别长,有时候和开发时间差不多.</li>\n<li><code>系统设计能力很重要</code>:之前都是提了需求,考虑一下,就开始动手写代码了.不过一般来说,当一个需求确定的时候,我自己心里就有了一个大概的构图,有个谱了.到公司的感觉就是,同事之间的经验比我还是丰富很多,所以前期的时候很看重设计能力,还专门开会大家讨论,确定方案后,才动手写代码.</li>\n<li><code>多学习,多看书</code>:同事空闲时候都在学习别的东西,看其他书籍,这是一个好习惯,我喜欢.</li>\n</ol>\n<h2 id=\"3-5-与人相处\"><a href=\"#3-5-与人相处\" class=\"headerlink\" title=\"3.5 与人相处\"></a>3.5 与人相处</h2><p>在公司和学校还是有很大区别的,学校每天都是和室友混在一起,一起吃饭,一起去实验室,一起玩游戏.到公司,刚开始感觉大家的感觉就疏远很多,大家彼此相互尊重,感觉就是少了学校同学的那份亲密.刚开始我还试图融入他们的圈子,不过因为自己不善言辞,做的并不好.<br>大概一个月过后,就觉悟了,在公司和在学校本来就不同,大家的关系也无法做到像学校那样,所以不必强求,大家友好和平共处,就是正确的处理方式.正如圣哥所说,大家其实都是过客.<br>后面的相处就自然的多,简简单单相处.</p>\n<hr>\n<p>2016-11-06 17:25  就先写到这,吃饭去的,等下食堂就没饭了</p>\n","excerpt":"<p>时间真是匆匆啊,上一篇博客的时间是3月25,今天都已经是11月6号了,过去了7个多月.<br>","more":"</p>\n<h1 id=\"1-时光匆匆\"><a href=\"#1-时光匆匆\" class=\"headerlink\" title=\"1 时光匆匆\"></a>1 时光匆匆</h1><p>自从上了初中开始,就发觉时间过得快来.接下来到了高中时间有是更快了,到了大学时间简直飞逝.<br>人生黄金的10年,转眼已经过了一般,but我依旧没有成为一个大神,还是辣么水水哒.基础知识还是不扎实,做事情总是知其然而不知其所以然,这是我所讨厌的,但是也没有实际的办法.<br>每次遇到一个事情,如果要刨根问底的去解决,就涉及太多的东西,短时间根本没法解决;可是如果选择一个快捷的方法,那么就只是解决了眼前的问题,但是没有实际去搞懂它.等到事情解决,每每又再提不起兴趣去解决.这真是一对矛盾,想快速解决就搞不懂原理,想搞懂原理但是时间又不允许.</p>\n<h1 id=\"2-找实习\"><a href=\"#2-找实习\" class=\"headerlink\" title=\"2 找实习\"></a>2 找实习</h1><p>今年有一个比较大的事情,也是对自己比较重要的事情,找实习.想来也是运气好,和老谭他们比起来真是好太多了.<br>还记得3月份第一个电话是海豚浏览器,我在官网发的邮件,因为海豚不招php没办法投的前端开发,但是一面(可能都不能算是一面),应该是hr面试的就把我刷掉了,额,有点心塞.<br>第二个好像是微博易,这个公司有点坑,技术面是CTO面试的.一般CTO啊CEO啊搞面试,说实话都觉得有点不靠谱,因为说明公司真心小,哭脸.这个技术面真心让我无语,一开始就告诉我这次面试要问几个技术问题,开场是我做个自我介绍,然后简单聊了一下自己的项目.接着事情就不可控了,他问我为什么要做技术,我说是因为自己对技术比较感兴趣,小时候看电影觉得黑客很酷,现在虽然做不成黑客,但是我喜欢电脑,喜欢敲代码.然后他接着问我为什么喜欢,觉得做技术最重要的是什么?我当时内心真是黑人问号了,这完全不按套路出牌啊,一直刨根问底.整个面试持续了1个小时,而且最后结束的时候并没有问任何技术问题,真是醉了.记得当时在实验室面试的,面完之后,我师弟开口问,师兄你刚才是HR面吗?你就知道这个面试有多坑了,这哪是技术面啊,工程师为啥会问这些问题?那要HR做什么?<br>再往后的面试就顺利多了,拿了盛大游戏的offer(内部应用系统开发),美图offer(这个职位应该是比较好的,但是在厦门),华米科技(这个是我打算去的,对小米的东西也比较有兴趣),百度地图offer.拿了百度的以后就没有再面试了.对于华米科技的那个面试官还是挺抱歉的,聊的也比较开心,因为华米科技算是创业公司应该还是能很好的锻炼,无奈百度的名气大,最后还是选择了百度,只能拒掉华米科技了.</p>\n<h1 id=\"3-去实习\"><a href=\"#3-去实习\" class=\"headerlink\" title=\"3 去实习\"></a>3 去实习</h1><p>拿到口头offer以后,在漫长的等待书面offer中.回家住了几天,和家人一起上了去天堂寨旅游了一把,放松一下.<br>最后出发北上的晚上,我最亲爱的请我吃了一顿烧烤,恩,我喜欢烧烤.我俩还喝了一瓶啤酒,哈哈.<img src=\"https://ws4.sinaimg.cn/large/692869a3gw1f9ihai0a6nj21kw23u4qp.jpg\" alt=\"武汉出发时\"><br>接着一路北上,我坐的硬座,额,必须是为了省钱,现在想想,也是蛮艰苦的.</p>\n<h2 id=\"3-1-找房子\"><a href=\"#3-1-找房子\" class=\"headerlink\" title=\"3.1 找房子\"></a>3.1 找房子</h2><p>刚到北京,北京的旅社真是贵,七天如家什么的一天要200-300多,我表示完全住不起啊,最后选择住青年旅社,一天80多块钱.幸亏我弟在北京念书,我可以把行李放在他那里,青年旅社自己带的东西不敢放,怕被偷.那也是我第一次住青年旅社,还是很紧张的,睡觉把书包都抱着.<br>找房子绝对是最艰难的事情,跑了两天,全是中介,根本就没有没有中介的地方,而且在五道口附加的房子真是贵,一间房子一不小心就要2000多,直逼三千,关键房子还不咋地.还好有同学在,雄风和国安他们先行来到北京,最痛苦的事他们已经趟过了,我在他们那里借住了几天.还好天无绝人之路,我在内网找了几天,总算找打合适的了,虽然离地铁站有点远,但是1600一个月,而且是2室1厅2卫,人少,住着舒服,附近有超市有菜场,生活很方便,室友人也很好,知道我是实习生很照顾我,房租什么的也没催我还说可以等发工资再交.</p>\n<h2 id=\"3-2-百度第一天\"><a href=\"#3-2-百度第一天\" class=\"headerlink\" title=\"3.2 百度第一天\"></a>3.2 百度第一天</h2><p>终于正式去百度实习了,因为上午8点就要开始入职了,所以那天起的很早.<br>上午就是入职流程,领东西然后去大厦听hr培训,然后再分到各个地方.我入职的地方是奎科大厦,不过说真的,还是更喜欢百度大厦或者科技园,哈哈,新修的大楼看起来爽多了,啥都是新的,更有归属感.<br>中午11点多的时候,来到了自己的工位,经理向大家介绍我,接着介绍每个人的名字,额,差不多一个都没记住,还好工位每个人都有明牌,哈哈.<br>下午的时候,就是熟悉一下环境,搭建开发环境申请开发机什么的,都是mentor在教我.<br>第一天的感觉,就是好累,可能早上起太早了,也可能是房子还没确定,当天下班的时候感觉好累,就拍了这一张照片.<br><img src=\"https://ws4.sinaimg.cn/large/692869a3gw1f9ih2uc5xhj20x617s45c.jpg\" alt=\"在百度的第一天\"></p>\n<h2 id=\"3-4-在百度\"><a href=\"#3-4-在百度\" class=\"headerlink\" title=\"3.4 在百度\"></a>3.4 在百度</h2><p>之前做的项目,都算是小打小闹,这次进去公司实习确实有不一样的感受.</p>\n<ol>\n<li><code>要对自己的每一行代码负责</code>:以前写代码都是只看最后的运行效果,出来了就行了,其实都没搞清楚每一行代码每一个变量的具体输出和值,测试也不充分.公司写代码,必须要自己对自己的代码负责,刚开始去就吃了这方面的苦,第一次代码上线都出了问题,所以后来排期的时候,代码自己review的时间都特别长,有时候和开发时间差不多.</li>\n<li><code>系统设计能力很重要</code>:之前都是提了需求,考虑一下,就开始动手写代码了.不过一般来说,当一个需求确定的时候,我自己心里就有了一个大概的构图,有个谱了.到公司的感觉就是,同事之间的经验比我还是丰富很多,所以前期的时候很看重设计能力,还专门开会大家讨论,确定方案后,才动手写代码.</li>\n<li><code>多学习,多看书</code>:同事空闲时候都在学习别的东西,看其他书籍,这是一个好习惯,我喜欢.</li>\n</ol>\n<h2 id=\"3-5-与人相处\"><a href=\"#3-5-与人相处\" class=\"headerlink\" title=\"3.5 与人相处\"></a>3.5 与人相处</h2><p>在公司和学校还是有很大区别的,学校每天都是和室友混在一起,一起吃饭,一起去实验室,一起玩游戏.到公司,刚开始感觉大家的感觉就疏远很多,大家彼此相互尊重,感觉就是少了学校同学的那份亲密.刚开始我还试图融入他们的圈子,不过因为自己不善言辞,做的并不好.<br>大概一个月过后,就觉悟了,在公司和在学校本来就不同,大家的关系也无法做到像学校那样,所以不必强求,大家友好和平共处,就是正确的处理方式.正如圣哥所说,大家其实都是过客.<br>后面的相处就自然的多,简简单单相处.</p>\n<hr>\n<p>2016-11-06 17:25  就先写到这,吃饭去的,等下食堂就没饭了</p>"},{"title":"php学习笔记(2)","date":"2016-02-25T06:36:20.000Z","_content":"今天看的是最基础的变量.\n<!-- more -->\n# 1 php变量\n和其他语言类似,php中一个有效的变量名由字母或者下划线开头,后面跟上任意数量的字母,数字,或者下划线.按照正常的正则表达式,它将被表述为：'[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*'.\n赋值的时候,变量默认总是`传值赋值`.\n在php中也可以用`引用赋值`,也就是改动新的变量也会因想到原始变量,反之亦然.\n```php\n<?php\n$foo = 'Bob';              // 将 'Bob' 赋给 $foo\n$bar = &$foo;              // 通过 $bar 引用 $foo\n$bar = \"My name is $bar\";  // 修改 $bar 变量\necho $bar;\necho $foo;                 // $foo 的值也被修改\n?>\n```\nps:只有有名字的变量才可以使用引用赋值,也就是无法对一个表达式使用引用赋值.\n使用`isset()`来检测变量是否被初始化.\n\n# 2 预定义变量\nphp会自动用下划线来替换所有的传入变量中的`.`号,例子如下所示\n```php\n<?php\nexample.com/page.php?chuck.norris=nevercries\n\nyou can not reference them by the name used in the URI:\n//INCORRECT\necho $_GET['chuck.norris'];\n\ninstead you must use:\n//CORRECT\necho $_GET['chuck_norris'];\n?>\n```\n\n# 3 变量范围\n变量的范围即它定义的上下文背景（也就是它的生效范围）.大部分的 PHP 变量只有一个单独的范围.这个单独的范围跨度同样包含了 include 和 require 引入的文件.例如：\n```php\n<?php\n$a = 1;\ninclude 'b.inc';\n?>\n```\n这里变量 $a 将会在包含文件 b.inc 中生效.但是,在用户自定义函数中,一个局部函数范围将被引入.任何用于函数内部的变量按缺省情况将被限制在局部函数范围内.例如：\n```php\n<?php\n$a = 1; /* global scope */\n\nfunction Test()\n{\n    echo $a; /* reference to local scope variable */\n}\n\nTest();\n?>\n```\n这个脚本不会有任何输出,因为 `echo`语句引用了一个局部版本的变量$a,而且在这个范围内,它并没有被赋值.你可能注意到 PHP 的全局变量和 C 语言有一点点不同,在 C 语言中,全局变量在函数中自动生效,除非被局部变量覆盖.这可能引起一些问题,有些人可能不小心就改变了一个全局变量.PHP 中全局变量在函数中使用时必须声明为 `global`.\nPS:此处需要注意的是,php不存在类似C和java的块级作用域.比如你在循环中定义的一个变量,在循环外还是可以访问的\n```php\n<?php\nfor($j=0; $j<3; $j++)\n{\n     if($j == 1)\n        $a = 4;\n}\necho $a;//此处将会输出4\n?>\n\n```\n## 3.2 静态变量\nphp还支持静态变量,静态变量`仅在局部函数域中`存在,但当程序执行离开此作用域时,其值并不丢失.\n```php\n<?php\nfunction Test()\n{\n    $a = 0;\n    echo $a;\n    $a++;\n}\n?>\n```\n\n# 4 来自PHP之外的变量\n此处主要指的是通过表单提交的变量,从cookie读取的变量\n\n## 4.1 图片提交表单\n除了常用的通过表单按钮提交表单,我们还可以使用图片的形式提交表单,代码如下:\n```php\n<input type=\"image\" src=\"image.gif\" name=\"sub\" />\n```\n这样在后端接收的时候,还会受到一个叫做`sub_x`和`sub_y`的变量,它包含了用户点击图片的坐标.此处如果你不定义`name`为`sub`,那么后端接收变量就是`x`和`y`.\n# 4.2 PHP自动转换变量名\n当我们通过表单提交变量的时候,如果表单项的名称包含空格,点号,左中括号,php就会自动把他们转换成下划线.\n```php\n   <input type=\"text\" name= \"userName.a\"/>\n   <input type=\"text\" name= \"passWor[d\"/>\n   //输出[userName_a] => [passWor_d] => \n   //都被转化成下划线了\n```\nchr(32) ( ) (space)\nchr(46) (.) (dot)\nchr(91) ([) (open square bracket)\n\nps:ascll码值在128-159的字符是合法字符,所以并不会被转义成下划线\n","source":"_posts/php-learn-note-2.md","raw":"title: php学习笔记(2)\ndate: 2016-02-25 14:36:20\ntags:\n- php\ncategories:\n- php学习笔记\n---\n今天看的是最基础的变量.\n<!-- more -->\n# 1 php变量\n和其他语言类似,php中一个有效的变量名由字母或者下划线开头,后面跟上任意数量的字母,数字,或者下划线.按照正常的正则表达式,它将被表述为：'[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*'.\n赋值的时候,变量默认总是`传值赋值`.\n在php中也可以用`引用赋值`,也就是改动新的变量也会因想到原始变量,反之亦然.\n```php\n<?php\n$foo = 'Bob';              // 将 'Bob' 赋给 $foo\n$bar = &$foo;              // 通过 $bar 引用 $foo\n$bar = \"My name is $bar\";  // 修改 $bar 变量\necho $bar;\necho $foo;                 // $foo 的值也被修改\n?>\n```\nps:只有有名字的变量才可以使用引用赋值,也就是无法对一个表达式使用引用赋值.\n使用`isset()`来检测变量是否被初始化.\n\n# 2 预定义变量\nphp会自动用下划线来替换所有的传入变量中的`.`号,例子如下所示\n```php\n<?php\nexample.com/page.php?chuck.norris=nevercries\n\nyou can not reference them by the name used in the URI:\n//INCORRECT\necho $_GET['chuck.norris'];\n\ninstead you must use:\n//CORRECT\necho $_GET['chuck_norris'];\n?>\n```\n\n# 3 变量范围\n变量的范围即它定义的上下文背景（也就是它的生效范围）.大部分的 PHP 变量只有一个单独的范围.这个单独的范围跨度同样包含了 include 和 require 引入的文件.例如：\n```php\n<?php\n$a = 1;\ninclude 'b.inc';\n?>\n```\n这里变量 $a 将会在包含文件 b.inc 中生效.但是,在用户自定义函数中,一个局部函数范围将被引入.任何用于函数内部的变量按缺省情况将被限制在局部函数范围内.例如：\n```php\n<?php\n$a = 1; /* global scope */\n\nfunction Test()\n{\n    echo $a; /* reference to local scope variable */\n}\n\nTest();\n?>\n```\n这个脚本不会有任何输出,因为 `echo`语句引用了一个局部版本的变量$a,而且在这个范围内,它并没有被赋值.你可能注意到 PHP 的全局变量和 C 语言有一点点不同,在 C 语言中,全局变量在函数中自动生效,除非被局部变量覆盖.这可能引起一些问题,有些人可能不小心就改变了一个全局变量.PHP 中全局变量在函数中使用时必须声明为 `global`.\nPS:此处需要注意的是,php不存在类似C和java的块级作用域.比如你在循环中定义的一个变量,在循环外还是可以访问的\n```php\n<?php\nfor($j=0; $j<3; $j++)\n{\n     if($j == 1)\n        $a = 4;\n}\necho $a;//此处将会输出4\n?>\n\n```\n## 3.2 静态变量\nphp还支持静态变量,静态变量`仅在局部函数域中`存在,但当程序执行离开此作用域时,其值并不丢失.\n```php\n<?php\nfunction Test()\n{\n    $a = 0;\n    echo $a;\n    $a++;\n}\n?>\n```\n\n# 4 来自PHP之外的变量\n此处主要指的是通过表单提交的变量,从cookie读取的变量\n\n## 4.1 图片提交表单\n除了常用的通过表单按钮提交表单,我们还可以使用图片的形式提交表单,代码如下:\n```php\n<input type=\"image\" src=\"image.gif\" name=\"sub\" />\n```\n这样在后端接收的时候,还会受到一个叫做`sub_x`和`sub_y`的变量,它包含了用户点击图片的坐标.此处如果你不定义`name`为`sub`,那么后端接收变量就是`x`和`y`.\n# 4.2 PHP自动转换变量名\n当我们通过表单提交变量的时候,如果表单项的名称包含空格,点号,左中括号,php就会自动把他们转换成下划线.\n```php\n   <input type=\"text\" name= \"userName.a\"/>\n   <input type=\"text\" name= \"passWor[d\"/>\n   //输出[userName_a] => [passWor_d] => \n   //都被转化成下划线了\n```\nchr(32) ( ) (space)\nchr(46) (.) (dot)\nchr(91) ([) (open square bracket)\n\nps:ascll码值在128-159的字符是合法字符,所以并不会被转义成下划线\n","slug":"php-learn-note-2","published":1,"updated":"2016-03-05T09:33:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yqb002ox8cdahhqt4xa","content":"<p>今天看的是最基础的变量.<br><a id=\"more\"></a></p>\n<h1 id=\"1-php变量\"><a href=\"#1-php变量\" class=\"headerlink\" title=\"1 php变量\"></a>1 php变量</h1><p>和其他语言类似,php中一个有效的变量名由字母或者下划线开头,后面跟上任意数量的字母,数字,或者下划线.按照正常的正则表达式,它将被表述为：’[a-zA-Z<em>\\x7f-\\xff][a-zA-Z0-9</em>\\x7f-\\xff]*’.<br>赋值的时候,变量默认总是<code>传值赋值</code>.<br>在php中也可以用<code>引用赋值</code>,也就是改动新的变量也会因想到原始变量,反之亦然.<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$foo = <span class=\"string\">'Bob'</span>;              <span class=\"comment\">// 将 'Bob' 赋给 $foo</span></div><div class=\"line\">$bar = &amp;$foo;              <span class=\"comment\">// 通过 $bar 引用 $foo</span></div><div class=\"line\">$bar = <span class=\"string\">\"My name is $bar\"</span>;  <span class=\"comment\">// 修改 $bar 变量</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $bar;</div><div class=\"line\"><span class=\"keyword\">echo</span> $foo;                 <span class=\"comment\">// $foo 的值也被修改</span></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>ps:只有有名字的变量才可以使用引用赋值,也就是无法对一个表达式使用引用赋值.<br>使用<code>isset()</code>来检测变量是否被初始化.</p>\n<h1 id=\"2-预定义变量\"><a href=\"#2-预定义变量\" class=\"headerlink\" title=\"2 预定义变量\"></a>2 预定义变量</h1><p>php会自动用下划线来替换所有的传入变量中的<code>.</code>号,例子如下所示<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">example.com/page.php?chuck.norris=nevercries</div><div class=\"line\"></div><div class=\"line\">you can not reference them by the name used in the URI:</div><div class=\"line\"><span class=\"comment\">//INCORRECT</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $_GET[<span class=\"string\">'chuck.norris'</span>];</div><div class=\"line\"></div><div class=\"line\">instead you must <span class=\"keyword\">use</span>:</div><div class=\"line\">//<span class=\"title\">CORRECT</span></div><div class=\"line\"><span class=\"title\">echo</span> $<span class=\"title\">_GET</span>['<span class=\"title\">chuck_norris</span>'];</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"3-变量范围\"><a href=\"#3-变量范围\" class=\"headerlink\" title=\"3 变量范围\"></a>3 变量范围</h1><p>变量的范围即它定义的上下文背景（也就是它的生效范围）.大部分的 PHP 变量只有一个单独的范围.这个单独的范围跨度同样包含了 include 和 require 引入的文件.例如：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$a = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">'b.inc'</span>;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这里变量 $a 将会在包含文件 b.inc 中生效.但是,在用户自定义函数中,一个局部函数范围将被引入.任何用于函数内部的变量按缺省情况将被限制在局部函数范围内.例如：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$a = <span class=\"number\">1</span>; <span class=\"comment\">/* global scope */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> $a; <span class=\"comment\">/* reference to local scope variable */</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Test();</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这个脚本不会有任何输出,因为 <code>echo</code>语句引用了一个局部版本的变量$a,而且在这个范围内,它并没有被赋值.你可能注意到 PHP 的全局变量和 C 语言有一点点不同,在 C 语言中,全局变量在函数中自动生效,除非被局部变量覆盖.这可能引起一些问题,有些人可能不小心就改变了一个全局变量.PHP 中全局变量在函数中使用时必须声明为 <code>global</code>.<br>PS:此处需要注意的是,php不存在类似C和java的块级作用域.比如你在循环中定义的一个变量,在循环外还是可以访问的<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">for</span>($j=<span class=\"number\">0</span>; $j&lt;<span class=\"number\">3</span>; $j++)</div><div class=\"line\">&#123;</div><div class=\"line\">     <span class=\"keyword\">if</span>($j == <span class=\"number\">1</span>)</div><div class=\"line\">        $a = <span class=\"number\">4</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">echo</span> $a;<span class=\"comment\">//此处将会输出4</span></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"3-2-静态变量\"><a href=\"#3-2-静态变量\" class=\"headerlink\" title=\"3.2 静态变量\"></a>3.2 静态变量</h2><p>php还支持静态变量,静态变量<code>仅在局部函数域中</code>存在,但当程序执行离开此作用域时,其值并不丢失.<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    $a = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">echo</span> $a;</div><div class=\"line\">    $a++;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"4-来自PHP之外的变量\"><a href=\"#4-来自PHP之外的变量\" class=\"headerlink\" title=\"4 来自PHP之外的变量\"></a>4 来自PHP之外的变量</h1><p>此处主要指的是通过表单提交的变量,从cookie读取的变量</p>\n<h2 id=\"4-1-图片提交表单\"><a href=\"#4-1-图片提交表单\" class=\"headerlink\" title=\"4.1 图片提交表单\"></a>4.1 图片提交表单</h2><p>除了常用的通过表单按钮提交表单,我们还可以使用图片的形式提交表单,代码如下:<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=<span class=\"string\">\"image\"</span> src=<span class=\"string\">\"image.gif\"</span> name=<span class=\"string\">\"sub\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>这样在后端接收的时候,还会受到一个叫做<code>sub_x</code>和<code>sub_y</code>的变量,它包含了用户点击图片的坐标.此处如果你不定义<code>name</code>为<code>sub</code>,那么后端接收变量就是<code>x</code>和<code>y</code>.</p>\n<h1 id=\"4-2-PHP自动转换变量名\"><a href=\"#4-2-PHP自动转换变量名\" class=\"headerlink\" title=\"4.2 PHP自动转换变量名\"></a>4.2 PHP自动转换变量名</h1><p>当我们通过表单提交变量的时候,如果表单项的名称包含空格,点号,左中括号,php就会自动把他们转换成下划线.<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=<span class=\"string\">\"text\"</span> name= <span class=\"string\">\"userName.a\"</span>/&gt;</div><div class=\"line\">&lt;input type=<span class=\"string\">\"text\"</span> name= <span class=\"string\">\"passWor[d\"</span>/&gt;</div><div class=\"line\"><span class=\"comment\">//输出[userName_a] =&gt; [passWor_d] =&gt; </span></div><div class=\"line\"><span class=\"comment\">//都被转化成下划线了</span></div></pre></td></tr></table></figure></p>\n<p>chr(32) ( ) (space)<br>chr(46) (.) (dot)<br>chr(91) ([) (open square bracket)</p>\n<p>ps:ascll码值在128-159的字符是合法字符,所以并不会被转义成下划线</p>\n","excerpt":"<p>今天看的是最基础的变量.<br>","more":"</p>\n<h1 id=\"1-php变量\"><a href=\"#1-php变量\" class=\"headerlink\" title=\"1 php变量\"></a>1 php变量</h1><p>和其他语言类似,php中一个有效的变量名由字母或者下划线开头,后面跟上任意数量的字母,数字,或者下划线.按照正常的正则表达式,它将被表述为：’[a-zA-Z<em>\\x7f-\\xff][a-zA-Z0-9</em>\\x7f-\\xff]*’.<br>赋值的时候,变量默认总是<code>传值赋值</code>.<br>在php中也可以用<code>引用赋值</code>,也就是改动新的变量也会因想到原始变量,反之亦然.<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$foo = <span class=\"string\">'Bob'</span>;              <span class=\"comment\">// 将 'Bob' 赋给 $foo</span></div><div class=\"line\">$bar = &amp;$foo;              <span class=\"comment\">// 通过 $bar 引用 $foo</span></div><div class=\"line\">$bar = <span class=\"string\">\"My name is $bar\"</span>;  <span class=\"comment\">// 修改 $bar 变量</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $bar;</div><div class=\"line\"><span class=\"keyword\">echo</span> $foo;                 <span class=\"comment\">// $foo 的值也被修改</span></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>ps:只有有名字的变量才可以使用引用赋值,也就是无法对一个表达式使用引用赋值.<br>使用<code>isset()</code>来检测变量是否被初始化.</p>\n<h1 id=\"2-预定义变量\"><a href=\"#2-预定义变量\" class=\"headerlink\" title=\"2 预定义变量\"></a>2 预定义变量</h1><p>php会自动用下划线来替换所有的传入变量中的<code>.</code>号,例子如下所示<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">example.com/page.php?chuck.norris=nevercries</div><div class=\"line\"></div><div class=\"line\">you can not reference them by the name used in the URI:</div><div class=\"line\"><span class=\"comment\">//INCORRECT</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $_GET[<span class=\"string\">'chuck.norris'</span>];</div><div class=\"line\"></div><div class=\"line\">instead you must <span class=\"keyword\">use</span>:</div><div class=\"line\">//<span class=\"title\">CORRECT</span></div><div class=\"line\"><span class=\"title\">echo</span> $<span class=\"title\">_GET</span>['<span class=\"title\">chuck_norris</span>'];</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"3-变量范围\"><a href=\"#3-变量范围\" class=\"headerlink\" title=\"3 变量范围\"></a>3 变量范围</h1><p>变量的范围即它定义的上下文背景（也就是它的生效范围）.大部分的 PHP 变量只有一个单独的范围.这个单独的范围跨度同样包含了 include 和 require 引入的文件.例如：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$a = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">'b.inc'</span>;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这里变量 $a 将会在包含文件 b.inc 中生效.但是,在用户自定义函数中,一个局部函数范围将被引入.任何用于函数内部的变量按缺省情况将被限制在局部函数范围内.例如：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$a = <span class=\"number\">1</span>; <span class=\"comment\">/* global scope */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> $a; <span class=\"comment\">/* reference to local scope variable */</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Test();</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这个脚本不会有任何输出,因为 <code>echo</code>语句引用了一个局部版本的变量$a,而且在这个范围内,它并没有被赋值.你可能注意到 PHP 的全局变量和 C 语言有一点点不同,在 C 语言中,全局变量在函数中自动生效,除非被局部变量覆盖.这可能引起一些问题,有些人可能不小心就改变了一个全局变量.PHP 中全局变量在函数中使用时必须声明为 <code>global</code>.<br>PS:此处需要注意的是,php不存在类似C和java的块级作用域.比如你在循环中定义的一个变量,在循环外还是可以访问的<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">for</span>($j=<span class=\"number\">0</span>; $j&lt;<span class=\"number\">3</span>; $j++)</div><div class=\"line\">&#123;</div><div class=\"line\">     <span class=\"keyword\">if</span>($j == <span class=\"number\">1</span>)</div><div class=\"line\">        $a = <span class=\"number\">4</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">echo</span> $a;<span class=\"comment\">//此处将会输出4</span></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"3-2-静态变量\"><a href=\"#3-2-静态变量\" class=\"headerlink\" title=\"3.2 静态变量\"></a>3.2 静态变量</h2><p>php还支持静态变量,静态变量<code>仅在局部函数域中</code>存在,但当程序执行离开此作用域时,其值并不丢失.<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    $a = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">echo</span> $a;</div><div class=\"line\">    $a++;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"4-来自PHP之外的变量\"><a href=\"#4-来自PHP之外的变量\" class=\"headerlink\" title=\"4 来自PHP之外的变量\"></a>4 来自PHP之外的变量</h1><p>此处主要指的是通过表单提交的变量,从cookie读取的变量</p>\n<h2 id=\"4-1-图片提交表单\"><a href=\"#4-1-图片提交表单\" class=\"headerlink\" title=\"4.1 图片提交表单\"></a>4.1 图片提交表单</h2><p>除了常用的通过表单按钮提交表单,我们还可以使用图片的形式提交表单,代码如下:<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=<span class=\"string\">\"image\"</span> src=<span class=\"string\">\"image.gif\"</span> name=<span class=\"string\">\"sub\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>这样在后端接收的时候,还会受到一个叫做<code>sub_x</code>和<code>sub_y</code>的变量,它包含了用户点击图片的坐标.此处如果你不定义<code>name</code>为<code>sub</code>,那么后端接收变量就是<code>x</code>和<code>y</code>.</p>\n<h1 id=\"4-2-PHP自动转换变量名\"><a href=\"#4-2-PHP自动转换变量名\" class=\"headerlink\" title=\"4.2 PHP自动转换变量名\"></a>4.2 PHP自动转换变量名</h1><p>当我们通过表单提交变量的时候,如果表单项的名称包含空格,点号,左中括号,php就会自动把他们转换成下划线.<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=<span class=\"string\">\"text\"</span> name= <span class=\"string\">\"userName.a\"</span>/&gt;</div><div class=\"line\">&lt;input type=<span class=\"string\">\"text\"</span> name= <span class=\"string\">\"passWor[d\"</span>/&gt;</div><div class=\"line\"><span class=\"comment\">//输出[userName_a] =&gt; [passWor_d] =&gt; </span></div><div class=\"line\"><span class=\"comment\">//都被转化成下划线了</span></div></pre></td></tr></table></figure></p>\n<p>chr(32) ( ) (space)<br>chr(46) (.) (dot)<br>chr(91) ([) (open square bracket)</p>\n<p>ps:ascll码值在128-159的字符是合法字符,所以并不会被转义成下划线</p>"},{"title":"php学习笔记(1)","date":"2015-12-10T07:46:03.000Z","_content":"php文档学习笔记,正式开始连载了哈,终于开始学习了.\n<!-- more -->\n# 布尔值\n要明确地将一个值转换成 boolean，用 (bool) 或者 (boolean) 来强制转换。但是很多情况下不需要用强制转换，因为当运算符，函数或者流程控制结构需要一个 boolean 参数时，该值会被自动转换。\n当转换为 boolean 时，以下值被认为是 FALSE：\n+ 布尔值 **FALSE** 本身\n+ 整型值 **0**（零）\n+ 浮点型值 **0.0**（零）\n+ 空字符串，以及字符串 **\"0\"**\n+ 不包括任何元素的数组\n+ 不包括任何成员变量的对象（仅 PHP 4.0 适用）\n+ 特殊类型 **NULL**（包括尚未赋值的变量）\n+ 从空标记生成的 **SimpleXML** 对象\n+ 所有其它值都被认为是 **TRUE**（包括任何资源）。\n\n**PS:**\n-1 和其它非零值（不论正负）一样，被认为是 **TRUE**！\n接下来我们可以试试,自己写一些常见的布尔值\n```php\nvar_dump((bool)'0');        //false\nvar_dump((bool)'0.0');      //true\nvar_dump((bool)'0.1');      //true\nvar_dump((bool)array());    //false\nvar_dump((bool)\"false\");    //true,因为这个字符串不为空,所以为true\n```\n","source":"_posts/php-learn-note-1.md","raw":"title: php学习笔记(1)\ndate: 2015-12-10 15:46:03\ntags:\n- php\ncategories:\n- php学习笔记\n---\nphp文档学习笔记,正式开始连载了哈,终于开始学习了.\n<!-- more -->\n# 布尔值\n要明确地将一个值转换成 boolean，用 (bool) 或者 (boolean) 来强制转换。但是很多情况下不需要用强制转换，因为当运算符，函数或者流程控制结构需要一个 boolean 参数时，该值会被自动转换。\n当转换为 boolean 时，以下值被认为是 FALSE：\n+ 布尔值 **FALSE** 本身\n+ 整型值 **0**（零）\n+ 浮点型值 **0.0**（零）\n+ 空字符串，以及字符串 **\"0\"**\n+ 不包括任何元素的数组\n+ 不包括任何成员变量的对象（仅 PHP 4.0 适用）\n+ 特殊类型 **NULL**（包括尚未赋值的变量）\n+ 从空标记生成的 **SimpleXML** 对象\n+ 所有其它值都被认为是 **TRUE**（包括任何资源）。\n\n**PS:**\n-1 和其它非零值（不论正负）一样，被认为是 **TRUE**！\n接下来我们可以试试,自己写一些常见的布尔值\n```php\nvar_dump((bool)'0');        //false\nvar_dump((bool)'0.0');      //true\nvar_dump((bool)'0.1');      //true\nvar_dump((bool)array());    //false\nvar_dump((bool)\"false\");    //true,因为这个字符串不为空,所以为true\n```\n","slug":"php-learn-note-1","published":1,"updated":"2015-12-10T14:17:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yqd002sx8cdcp7yuvl6","content":"<p>php文档学习笔记,正式开始连载了哈,终于开始学习了.<br><a id=\"more\"></a></p>\n<h1 id=\"布尔值\"><a href=\"#布尔值\" class=\"headerlink\" title=\"布尔值\"></a>布尔值</h1><p>要明确地将一个值转换成 boolean，用 (bool) 或者 (boolean) 来强制转换。但是很多情况下不需要用强制转换，因为当运算符，函数或者流程控制结构需要一个 boolean 参数时，该值会被自动转换。<br>当转换为 boolean 时，以下值被认为是 FALSE：</p>\n<ul>\n<li>布尔值 <strong>FALSE</strong> 本身</li>\n<li>整型值 <strong>0</strong>（零）</li>\n<li>浮点型值 <strong>0.0</strong>（零）</li>\n<li>空字符串，以及字符串 <strong>“0”</strong></li>\n<li>不包括任何元素的数组</li>\n<li>不包括任何成员变量的对象（仅 PHP 4.0 适用）</li>\n<li>特殊类型 <strong>NULL</strong>（包括尚未赋值的变量）</li>\n<li>从空标记生成的 <strong>SimpleXML</strong> 对象</li>\n<li>所有其它值都被认为是 <strong>TRUE</strong>（包括任何资源）。</li>\n</ul>\n<p><strong>PS:</strong><br>-1 和其它非零值（不论正负）一样，被认为是 <strong>TRUE</strong>！<br>接下来我们可以试试,自己写一些常见的布尔值<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var_dump((bool)<span class=\"string\">'0'</span>);        <span class=\"comment\">//false</span></div><div class=\"line\">var_dump((bool)<span class=\"string\">'0.0'</span>);      <span class=\"comment\">//true</span></div><div class=\"line\">var_dump((bool)<span class=\"string\">'0.1'</span>);      <span class=\"comment\">//true</span></div><div class=\"line\">var_dump((bool)<span class=\"keyword\">array</span>());    <span class=\"comment\">//false</span></div><div class=\"line\">var_dump((bool)<span class=\"string\">\"false\"</span>);    <span class=\"comment\">//true,因为这个字符串不为空,所以为true</span></div></pre></td></tr></table></figure></p>\n","excerpt":"<p>php文档学习笔记,正式开始连载了哈,终于开始学习了.<br>","more":"</p>\n<h1 id=\"布尔值\"><a href=\"#布尔值\" class=\"headerlink\" title=\"布尔值\"></a>布尔值</h1><p>要明确地将一个值转换成 boolean，用 (bool) 或者 (boolean) 来强制转换。但是很多情况下不需要用强制转换，因为当运算符，函数或者流程控制结构需要一个 boolean 参数时，该值会被自动转换。<br>当转换为 boolean 时，以下值被认为是 FALSE：</p>\n<ul>\n<li>布尔值 <strong>FALSE</strong> 本身</li>\n<li>整型值 <strong>0</strong>（零）</li>\n<li>浮点型值 <strong>0.0</strong>（零）</li>\n<li>空字符串，以及字符串 <strong>“0”</strong></li>\n<li>不包括任何元素的数组</li>\n<li>不包括任何成员变量的对象（仅 PHP 4.0 适用）</li>\n<li>特殊类型 <strong>NULL</strong>（包括尚未赋值的变量）</li>\n<li>从空标记生成的 <strong>SimpleXML</strong> 对象</li>\n<li>所有其它值都被认为是 <strong>TRUE</strong>（包括任何资源）。</li>\n</ul>\n<p><strong>PS:</strong><br>-1 和其它非零值（不论正负）一样，被认为是 <strong>TRUE</strong>！<br>接下来我们可以试试,自己写一些常见的布尔值<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var_dump((bool)<span class=\"string\">'0'</span>);        <span class=\"comment\">//false</span></div><div class=\"line\">var_dump((bool)<span class=\"string\">'0.0'</span>);      <span class=\"comment\">//true</span></div><div class=\"line\">var_dump((bool)<span class=\"string\">'0.1'</span>);      <span class=\"comment\">//true</span></div><div class=\"line\">var_dump((bool)<span class=\"keyword\">array</span>());    <span class=\"comment\">//false</span></div><div class=\"line\">var_dump((bool)<span class=\"string\">\"false\"</span>);    <span class=\"comment\">//true,因为这个字符串不为空,所以为true</span></div></pre></td></tr></table></figure></p>"},{"title":"php学习笔记(3.5)--关于引用赋值和一般赋值","date":"2016-03-05T05:52:28.000Z","_content":"上一篇提到了,对象赋值的时候有两种赋值方式,一种是直接`$a=$b`,第二种是引用赋值`$a=&$b`.\n不仅对象赋值的时候会有这两种情况,普通变量赋值也会有这两种情况,为了简单说明,我们先使用简单的普通变量来做说明.\n<!-- more -->\n# 1 普通变量的结构\n在PHP中,所有的变量都是用一个结构zval来保存的,zval大概的结构如下所示:\n```c\nstruct _zval_struct {\n        /* Variable information */\n        zvalue_value value;             /* value */\n        zend_uint refcount;\n        zend_uchar type;        /* active type */\n        zend_uchar is_ref;\n};\n```\n我们这里主要用到的是两个变量,一个是refcount,即是引用计数,一个是is_ref,用来标记是否是引用.\n\n# 2 php环境的设置\n我们在实验过程中,需要去查看refcount和is_ref的变化,所以需要使用php的\n`xdebug_debug_zval`函数,你的环境可能默认没有开启这个配置,你需要修改`php.ini`文件开启这个配置.\n![修改php.ini文件](http://ww4.sinaimg.cn/large/692869a3gw1f1m1ximwj1j20wn098dj6.jpg)\n# 3 refcount和is_ref\n我们通常的赋值方式:一般赋值和引用赋值.\n# 3.1 一般赋值\n当使用一般给新变量赋值的时候,php的内存策略,并不是重新申请一个新的空间,而是把原来的那个recount+1.比如下面的例子:\n```php\n$a='aaa';//此时$a的recount=1,ref=0\n$b=$a;//赋值过后,$a的recount=2,ref=0,$b因为指向和$a一样,所以结果和$a一样\nxdebug_debug_zval('a','b');\n```\n输出结果如下\n```\n(refcount=2, is_ref=0),string 'aaa' (length=3)\n```\n# 3.2 引用赋值\n```php\n$a='aaa';//此时$a的recount=1,ref=0\n$c=&$a;//赋值过后,$a的recount=2,ref=0,$b因为指向和$a一样,所以结果和$a一样\nxdebug_debug_zval('a','b');//\n```\n输出结果如下\n```\n(refcount=2, is_ref=1),string 'aaa' (length=3)\n```\n由上面可知,也就是每次进行赋值的时候,refcount都会+1,如果是引用赋值,is_ref就会被置为一.\n# 3.3 两种赋值方式混合\n那如果我们混合上面的两种赋值方式呢?比如下面的代码\n```php\n$a='aaa';\n$b=&$a;\n$c=$a;\nxdebug_debug_zval('a','b','c');\n```\n你猜输出结果是什么?\n```\na: (refcount=2, is_ref=1),string 'aaa' (length=3)\n\nb: (refcount=2, is_ref=1),string 'aaa' (length=3)\n\nc: (refcount=1, is_ref=0),string 'aaa' (length=3)\n```\n为什么会这样呢?\n我们一行一行的分析.\n1. 首先第一行代码执行完以后,$a的结果应该是`(refcount=1, is_ref=0),string 'aaa' (length=3)`\n2. 第二行代码执行引用赋值,因为refcount=1,所以$a的refcount直接+1,is_ref变成1,输出即是`(refcount=2, is_ref=1),string 'aaa' \n3. 第三行代码执行一般赋值,那我们是不是再把refcount+1呢?不是的,因为此时的refcount>1并且is_ref不为0,所以不能执行那个操作,而是直接把$a复制了另外一份,而不是修改$a的计数器.\n所以,最后的输出结果,$c的refcount是1,因为它完全另外申请了一个副本\n\n我们把上面的代码换个位置\n```php\n$a='aaa';\n$c=$a;\n$b=&$a;\nxdebug_debug_zval('a','b','c');\n```\n你再猜猜输出结果是什么?\n```\na: (refcount=2, is_ref=1),string 'aaa' (length=3)\n\nb: (refcount=2, is_ref=1),string 'aaa' (length=3)\n\nc: (refcount=1, is_ref=0),string 'aaa' (length=3)\n```\n咦?结果是一样的哈?\n对的,结果是一样的,不过执行的过程却是不同的,我们再来一行一行的分析下\n1. 首先第一行代码执行完以后,$a的结果应该是`(refcount=1, is_ref=0),string 'aaa' (length=3)`\n2. 第二行代码执行一般赋值,同理,因为refcount=1,所以$a的refcount直接+1,is_ref不变,输出即是`(refcount=2, is_ref=0),string 'aaa' \n3. 第三行代码执行引用赋值,跟上面一样,因为refcount=2了,所以不能直接进行计数器+1,我们先检查is_ref,发现是0.这时,php首先做一个分离操作,也就是把上面一般赋值的那个值,给分离出去,分离后,$a的refcount减去1,也就是$c独立了,那么此时$a和$c的输出结果应该是`(refcount=1, is_ref=0),string 'aaa' (length=3)`.在分离操作完成后,再做引用赋值的问题,这时候就简单了,因为$a的refcount是1,所以我们直接refcount+1,is_ref=1就搞定\n4. 最后输出结果就是上面的结果了\n\n**php把上面的过程叫做写时复制(copy on write),也就是说,一般赋值$c=$a时候,php并不是立即去申请一个新的变量空间.,而是等到执行引用赋值或者其他写操作的时候(比如这个时候修改$c的值),php才会去开辟一个新的空间给赋值后的变量,也就是分离操作.**\n\n# 4 推广到对象\n上面普通变量的赋值,应该说清楚了哈.\n其实对象的赋值和普通变量赋值是同一个道理.下面直接贴代码,不在赘述\n```php\nclass A\n{\n    public $aa='我是类属性';\n}\n$a=new A();\necho '刚执行完$a定义<br>';\nxdebug_debug_zval('a');\n$b=$a;\necho '刚执行完$b赋值<br>';\nxdebug_debug_zval('b');\n$c=&$a;\necho '刚执行完$c赋值<br>';\nxdebug_debug_zval('c');\n$d=$b;\necho '刚执行完$d赋值<br>';\nxdebug_debug_zval('a','b','c','d');\n```\n输出结果如下\n```\n刚执行完$a定义\na: \n(refcount=1, is_ref=0),\nobject(A)[1]\n  public 'aa' => (refcount=1, is_ref=0),string '我是类属性' (length=15)\n\n刚执行完$b赋值\nb: \n(refcount=2, is_ref=0),\nobject(A)[1]\n  public 'aa' => (refcount=1, is_ref=0),string '我是类属性' (length=15)\n\n刚执行完$c赋值\nc: \n(refcount=2, is_ref=1),\nobject(A)[1]\n  public 'aa' => (refcount=1, is_ref=0),string '我是类属性' (length=15)\n\n刚执行完$d赋值\na: \n(refcount=2, is_ref=1),\nobject(A)[1]\n  public 'aa' => (refcount=1, is_ref=0),string '我是类属性' (length=15)\n\nb: \n(refcount=2, is_ref=0),\nobject(A)[1]\n  public 'aa' => (refcount=1, is_ref=0),string '我是类属性' (length=15)\n\nc: \n(refcount=2, is_ref=1),\nobject(A)[1]\n  public 'aa' => (refcount=1, is_ref=0),string '我是类属性' (length=15)\n\nd: \n(refcount=2, is_ref=0),\nobject(A)[1]\n  public 'aa' => (refcount=1, is_ref=0),string '我是类属性' (length=15)\n\n\n```\n\n# 5 关于debug_zval_dump函数\nphp中还有个关于计数的函数叫做`debug_zval_dump`,它只返回refcount,不过这个函数好奇葩,输出的数据有时候跟想的都不一样.\n比如:\n```php\n<?php\n$a='aaa';\n$b=$a;\ndebug_zval_dump($a);//输出3\n?>\n```\n原因是:执行`debug_zval_dump`相当于执行了一次一般赋值操作,所以,refcount会再加1\n再比如\n```php\n$a='aaa';\n$c=$a;\n$c='bbb';\ndebug_zval_dump($a,$c);//输出refcount=2,refcount=2\nxdebug_debug_zval('a','c');//两个值完全相同,都是refcount=1, is_ref=0),string 'bbb' (length=3)\n```\n额,这是不是很奇葩?再来一波\n```php\n$a='aaa';\n$b=&$a;\n$c=$a;\ndebug_zval_dump($a,$b,$c);//refcount分别是1,1,2\nxdebug_debug_zval('a','b','c');//refcount和is_ref分别是(2,1),(2,1),(1,0)\n```\n这是什么鬼?我表示都看不懂\n稍微总结了下,`debug_zval_dump`这个函数,如果只是一般赋值,那么还比较正常,赋值一次就是refcount+1操作,最后调用`debug_zval_dump`的再+1就好了\n但是一旦涉及到引用赋值,这货就全变成1了,(引用赋值不+1就算了,说好的调用`debug_zval_dump`的+1呢?被狗吃了?),完全搞不懂是在搞啥,还是`xdebug_debug_zval`函数好.\n打完收工\nps:其实我在知乎提了个问题,不过没人回答还[debug_zval_dump的计数问题?](http://www.zhihu.com/question/41044486)\n\n\n# 参考文献\n1 [鸟哥的博客--深入理解PHP原理之变量分离/引用](http://www.laruence.com/2008/09/19/520.html)\n2 [PHP扩展编写第二步：参数，数组，以及ZVAL「续」](http://weizhifeng.net/write-php-extension-part2-2.html)\n3 [php官方文档--debug_zval_dump函数](http://php.net/manual/zh/function.debug-zval-dump.php)\n4 [英文文档--php变量](https://derickrethans.nl/talks/phparch-php-variables-article.pdf)\n","source":"_posts/php-learn-note-3-5.md","raw":"title: php学习笔记(3.5)--关于引用赋值和一般赋值\ndate: 2016-03-05 13:52:28\ntags:\n- php\ncategories:\n- php学习笔记\n---\n上一篇提到了,对象赋值的时候有两种赋值方式,一种是直接`$a=$b`,第二种是引用赋值`$a=&$b`.\n不仅对象赋值的时候会有这两种情况,普通变量赋值也会有这两种情况,为了简单说明,我们先使用简单的普通变量来做说明.\n<!-- more -->\n# 1 普通变量的结构\n在PHP中,所有的变量都是用一个结构zval来保存的,zval大概的结构如下所示:\n```c\nstruct _zval_struct {\n        /* Variable information */\n        zvalue_value value;             /* value */\n        zend_uint refcount;\n        zend_uchar type;        /* active type */\n        zend_uchar is_ref;\n};\n```\n我们这里主要用到的是两个变量,一个是refcount,即是引用计数,一个是is_ref,用来标记是否是引用.\n\n# 2 php环境的设置\n我们在实验过程中,需要去查看refcount和is_ref的变化,所以需要使用php的\n`xdebug_debug_zval`函数,你的环境可能默认没有开启这个配置,你需要修改`php.ini`文件开启这个配置.\n![修改php.ini文件](http://ww4.sinaimg.cn/large/692869a3gw1f1m1ximwj1j20wn098dj6.jpg)\n# 3 refcount和is_ref\n我们通常的赋值方式:一般赋值和引用赋值.\n# 3.1 一般赋值\n当使用一般给新变量赋值的时候,php的内存策略,并不是重新申请一个新的空间,而是把原来的那个recount+1.比如下面的例子:\n```php\n$a='aaa';//此时$a的recount=1,ref=0\n$b=$a;//赋值过后,$a的recount=2,ref=0,$b因为指向和$a一样,所以结果和$a一样\nxdebug_debug_zval('a','b');\n```\n输出结果如下\n```\n(refcount=2, is_ref=0),string 'aaa' (length=3)\n```\n# 3.2 引用赋值\n```php\n$a='aaa';//此时$a的recount=1,ref=0\n$c=&$a;//赋值过后,$a的recount=2,ref=0,$b因为指向和$a一样,所以结果和$a一样\nxdebug_debug_zval('a','b');//\n```\n输出结果如下\n```\n(refcount=2, is_ref=1),string 'aaa' (length=3)\n```\n由上面可知,也就是每次进行赋值的时候,refcount都会+1,如果是引用赋值,is_ref就会被置为一.\n# 3.3 两种赋值方式混合\n那如果我们混合上面的两种赋值方式呢?比如下面的代码\n```php\n$a='aaa';\n$b=&$a;\n$c=$a;\nxdebug_debug_zval('a','b','c');\n```\n你猜输出结果是什么?\n```\na: (refcount=2, is_ref=1),string 'aaa' (length=3)\n\nb: (refcount=2, is_ref=1),string 'aaa' (length=3)\n\nc: (refcount=1, is_ref=0),string 'aaa' (length=3)\n```\n为什么会这样呢?\n我们一行一行的分析.\n1. 首先第一行代码执行完以后,$a的结果应该是`(refcount=1, is_ref=0),string 'aaa' (length=3)`\n2. 第二行代码执行引用赋值,因为refcount=1,所以$a的refcount直接+1,is_ref变成1,输出即是`(refcount=2, is_ref=1),string 'aaa' \n3. 第三行代码执行一般赋值,那我们是不是再把refcount+1呢?不是的,因为此时的refcount>1并且is_ref不为0,所以不能执行那个操作,而是直接把$a复制了另外一份,而不是修改$a的计数器.\n所以,最后的输出结果,$c的refcount是1,因为它完全另外申请了一个副本\n\n我们把上面的代码换个位置\n```php\n$a='aaa';\n$c=$a;\n$b=&$a;\nxdebug_debug_zval('a','b','c');\n```\n你再猜猜输出结果是什么?\n```\na: (refcount=2, is_ref=1),string 'aaa' (length=3)\n\nb: (refcount=2, is_ref=1),string 'aaa' (length=3)\n\nc: (refcount=1, is_ref=0),string 'aaa' (length=3)\n```\n咦?结果是一样的哈?\n对的,结果是一样的,不过执行的过程却是不同的,我们再来一行一行的分析下\n1. 首先第一行代码执行完以后,$a的结果应该是`(refcount=1, is_ref=0),string 'aaa' (length=3)`\n2. 第二行代码执行一般赋值,同理,因为refcount=1,所以$a的refcount直接+1,is_ref不变,输出即是`(refcount=2, is_ref=0),string 'aaa' \n3. 第三行代码执行引用赋值,跟上面一样,因为refcount=2了,所以不能直接进行计数器+1,我们先检查is_ref,发现是0.这时,php首先做一个分离操作,也就是把上面一般赋值的那个值,给分离出去,分离后,$a的refcount减去1,也就是$c独立了,那么此时$a和$c的输出结果应该是`(refcount=1, is_ref=0),string 'aaa' (length=3)`.在分离操作完成后,再做引用赋值的问题,这时候就简单了,因为$a的refcount是1,所以我们直接refcount+1,is_ref=1就搞定\n4. 最后输出结果就是上面的结果了\n\n**php把上面的过程叫做写时复制(copy on write),也就是说,一般赋值$c=$a时候,php并不是立即去申请一个新的变量空间.,而是等到执行引用赋值或者其他写操作的时候(比如这个时候修改$c的值),php才会去开辟一个新的空间给赋值后的变量,也就是分离操作.**\n\n# 4 推广到对象\n上面普通变量的赋值,应该说清楚了哈.\n其实对象的赋值和普通变量赋值是同一个道理.下面直接贴代码,不在赘述\n```php\nclass A\n{\n    public $aa='我是类属性';\n}\n$a=new A();\necho '刚执行完$a定义<br>';\nxdebug_debug_zval('a');\n$b=$a;\necho '刚执行完$b赋值<br>';\nxdebug_debug_zval('b');\n$c=&$a;\necho '刚执行完$c赋值<br>';\nxdebug_debug_zval('c');\n$d=$b;\necho '刚执行完$d赋值<br>';\nxdebug_debug_zval('a','b','c','d');\n```\n输出结果如下\n```\n刚执行完$a定义\na: \n(refcount=1, is_ref=0),\nobject(A)[1]\n  public 'aa' => (refcount=1, is_ref=0),string '我是类属性' (length=15)\n\n刚执行完$b赋值\nb: \n(refcount=2, is_ref=0),\nobject(A)[1]\n  public 'aa' => (refcount=1, is_ref=0),string '我是类属性' (length=15)\n\n刚执行完$c赋值\nc: \n(refcount=2, is_ref=1),\nobject(A)[1]\n  public 'aa' => (refcount=1, is_ref=0),string '我是类属性' (length=15)\n\n刚执行完$d赋值\na: \n(refcount=2, is_ref=1),\nobject(A)[1]\n  public 'aa' => (refcount=1, is_ref=0),string '我是类属性' (length=15)\n\nb: \n(refcount=2, is_ref=0),\nobject(A)[1]\n  public 'aa' => (refcount=1, is_ref=0),string '我是类属性' (length=15)\n\nc: \n(refcount=2, is_ref=1),\nobject(A)[1]\n  public 'aa' => (refcount=1, is_ref=0),string '我是类属性' (length=15)\n\nd: \n(refcount=2, is_ref=0),\nobject(A)[1]\n  public 'aa' => (refcount=1, is_ref=0),string '我是类属性' (length=15)\n\n\n```\n\n# 5 关于debug_zval_dump函数\nphp中还有个关于计数的函数叫做`debug_zval_dump`,它只返回refcount,不过这个函数好奇葩,输出的数据有时候跟想的都不一样.\n比如:\n```php\n<?php\n$a='aaa';\n$b=$a;\ndebug_zval_dump($a);//输出3\n?>\n```\n原因是:执行`debug_zval_dump`相当于执行了一次一般赋值操作,所以,refcount会再加1\n再比如\n```php\n$a='aaa';\n$c=$a;\n$c='bbb';\ndebug_zval_dump($a,$c);//输出refcount=2,refcount=2\nxdebug_debug_zval('a','c');//两个值完全相同,都是refcount=1, is_ref=0),string 'bbb' (length=3)\n```\n额,这是不是很奇葩?再来一波\n```php\n$a='aaa';\n$b=&$a;\n$c=$a;\ndebug_zval_dump($a,$b,$c);//refcount分别是1,1,2\nxdebug_debug_zval('a','b','c');//refcount和is_ref分别是(2,1),(2,1),(1,0)\n```\n这是什么鬼?我表示都看不懂\n稍微总结了下,`debug_zval_dump`这个函数,如果只是一般赋值,那么还比较正常,赋值一次就是refcount+1操作,最后调用`debug_zval_dump`的再+1就好了\n但是一旦涉及到引用赋值,这货就全变成1了,(引用赋值不+1就算了,说好的调用`debug_zval_dump`的+1呢?被狗吃了?),完全搞不懂是在搞啥,还是`xdebug_debug_zval`函数好.\n打完收工\nps:其实我在知乎提了个问题,不过没人回答还[debug_zval_dump的计数问题?](http://www.zhihu.com/question/41044486)\n\n\n# 参考文献\n1 [鸟哥的博客--深入理解PHP原理之变量分离/引用](http://www.laruence.com/2008/09/19/520.html)\n2 [PHP扩展编写第二步：参数，数组，以及ZVAL「续」](http://weizhifeng.net/write-php-extension-part2-2.html)\n3 [php官方文档--debug_zval_dump函数](http://php.net/manual/zh/function.debug-zval-dump.php)\n4 [英文文档--php变量](https://derickrethans.nl/talks/phparch-php-variables-article.pdf)\n","slug":"php-learn-note-3-5","published":1,"updated":"2016-03-05T09:33:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yqf002wx8cd3adeqdxv","content":"<p>上一篇提到了,对象赋值的时候有两种赋值方式,一种是直接<code>$a=$b</code>,第二种是引用赋值<code>$a=&amp;$b</code>.<br>不仅对象赋值的时候会有这两种情况,普通变量赋值也会有这两种情况,为了简单说明,我们先使用简单的普通变量来做说明.<br><a id=\"more\"></a></p>\n<h1 id=\"1-普通变量的结构\"><a href=\"#1-普通变量的结构\" class=\"headerlink\" title=\"1 普通变量的结构\"></a>1 普通变量的结构</h1><p>在PHP中,所有的变量都是用一个结构zval来保存的,zval大概的结构如下所示:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> _zval_struct &#123;</div><div class=\"line\">        <span class=\"comment\">/* Variable information */</span></div><div class=\"line\">        zvalue_value value;             <span class=\"comment\">/* value */</span></div><div class=\"line\">        zend_uint refcount;</div><div class=\"line\">        zend_uchar type;        <span class=\"comment\">/* active type */</span></div><div class=\"line\">        zend_uchar is_ref;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>我们这里主要用到的是两个变量,一个是refcount,即是引用计数,一个是is_ref,用来标记是否是引用.</p>\n<h1 id=\"2-php环境的设置\"><a href=\"#2-php环境的设置\" class=\"headerlink\" title=\"2 php环境的设置\"></a>2 php环境的设置</h1><p>我们在实验过程中,需要去查看refcount和is_ref的变化,所以需要使用php的<br><code>xdebug_debug_zval</code>函数,你的环境可能默认没有开启这个配置,你需要修改<code>php.ini</code>文件开启这个配置.<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1f1m1ximwj1j20wn098dj6.jpg\" alt=\"修改php.ini文件\"></p>\n<h1 id=\"3-refcount和is-ref\"><a href=\"#3-refcount和is-ref\" class=\"headerlink\" title=\"3 refcount和is_ref\"></a>3 refcount和is_ref</h1><p>我们通常的赋值方式:一般赋值和引用赋值.</p>\n<h1 id=\"3-1-一般赋值\"><a href=\"#3-1-一般赋值\" class=\"headerlink\" title=\"3.1 一般赋值\"></a>3.1 一般赋值</h1><p>当使用一般给新变量赋值的时候,php的内存策略,并不是重新申请一个新的空间,而是把原来的那个recount+1.比如下面的例子:<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$a=<span class=\"string\">'aaa'</span>;<span class=\"comment\">//此时$a的recount=1,ref=0</span></div><div class=\"line\">$b=$a;<span class=\"comment\">//赋值过后,$a的recount=2,ref=0,$b因为指向和$a一样,所以结果和$a一样</span></div><div class=\"line\">xdebug_debug_zval(<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>);</div></pre></td></tr></table></figure></p>\n<p>输出结果如下<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">0</span>),<span class=\"type\">string</span> 'aaa' (length=<span class=\"number\">3</span>)</div></pre></td></tr></table></figure></p>\n<h1 id=\"3-2-引用赋值\"><a href=\"#3-2-引用赋值\" class=\"headerlink\" title=\"3.2 引用赋值\"></a>3.2 引用赋值</h1><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$a=<span class=\"string\">'aaa'</span>;<span class=\"comment\">//此时$a的recount=1,ref=0</span></div><div class=\"line\">$c=&amp;$a;<span class=\"comment\">//赋值过后,$a的recount=2,ref=0,$b因为指向和$a一样,所以结果和$a一样</span></div><div class=\"line\">xdebug_debug_zval(<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>);<span class=\"comment\">//</span></div></pre></td></tr></table></figure>\n<p>输出结果如下<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">1</span>),<span class=\"type\">string</span> 'aaa' (length=<span class=\"number\">3</span>)</div></pre></td></tr></table></figure></p>\n<p>由上面可知,也就是每次进行赋值的时候,refcount都会+1,如果是引用赋值,is_ref就会被置为一.</p>\n<h1 id=\"3-3-两种赋值方式混合\"><a href=\"#3-3-两种赋值方式混合\" class=\"headerlink\" title=\"3.3 两种赋值方式混合\"></a>3.3 两种赋值方式混合</h1><p>那如果我们混合上面的两种赋值方式呢?比如下面的代码<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$a=<span class=\"string\">'aaa'</span>;</div><div class=\"line\">$b=&amp;$a;</div><div class=\"line\">$c=$a;</div><div class=\"line\">xdebug_debug_zval(<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>);</div></pre></td></tr></table></figure></p>\n<p>你猜输出结果是什么?<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">a</span>: (refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">1</span>),<span class=\"keyword\">string</span> <span class=\"string\">'aaa'</span> (<span class=\"built_in\">length</span>=<span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\">b: (refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">1</span>),<span class=\"keyword\">string</span> <span class=\"string\">'aaa'</span> (<span class=\"built_in\">length</span>=<span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\">c: (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>),<span class=\"keyword\">string</span> <span class=\"string\">'aaa'</span> (<span class=\"built_in\">length</span>=<span class=\"number\">3</span>)</div></pre></td></tr></table></figure></p>\n<p>为什么会这样呢?<br>我们一行一行的分析.</p>\n<ol>\n<li>首先第一行代码执行完以后,$a的结果应该是<code>(refcount=1, is_ref=0),string &#39;aaa&#39; (length=3)</code></li>\n<li>第二行代码执行引用赋值,因为refcount=1,所以$a的refcount直接+1,is_ref变成1,输出即是`(refcount=2, is_ref=1),string ‘aaa’ </li>\n<li>第三行代码执行一般赋值,那我们是不是再把refcount+1呢?不是的,因为此时的refcount&gt;1并且is_ref不为0,所以不能执行那个操作,而是直接把$a复制了另外一份,而不是修改$a的计数器.<br>所以,最后的输出结果,$c的refcount是1,因为它完全另外申请了一个副本</li>\n</ol>\n<p>我们把上面的代码换个位置<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$a=<span class=\"string\">'aaa'</span>;</div><div class=\"line\">$c=$a;</div><div class=\"line\">$b=&amp;$a;</div><div class=\"line\">xdebug_debug_zval(<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>);</div></pre></td></tr></table></figure></p>\n<p>你再猜猜输出结果是什么?<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">a</span>: (refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">1</span>),<span class=\"keyword\">string</span> <span class=\"string\">'aaa'</span> (<span class=\"built_in\">length</span>=<span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\">b: (refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">1</span>),<span class=\"keyword\">string</span> <span class=\"string\">'aaa'</span> (<span class=\"built_in\">length</span>=<span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\">c: (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>),<span class=\"keyword\">string</span> <span class=\"string\">'aaa'</span> (<span class=\"built_in\">length</span>=<span class=\"number\">3</span>)</div></pre></td></tr></table></figure></p>\n<p>咦?结果是一样的哈?<br>对的,结果是一样的,不过执行的过程却是不同的,我们再来一行一行的分析下</p>\n<ol>\n<li>首先第一行代码执行完以后,$a的结果应该是<code>(refcount=1, is_ref=0),string &#39;aaa&#39; (length=3)</code></li>\n<li>第二行代码执行一般赋值,同理,因为refcount=1,所以$a的refcount直接+1,is_ref不变,输出即是`(refcount=2, is_ref=0),string ‘aaa’ </li>\n<li>第三行代码执行引用赋值,跟上面一样,因为refcount=2了,所以不能直接进行计数器+1,我们先检查is_ref,发现是0.这时,php首先做一个分离操作,也就是把上面一般赋值的那个值,给分离出去,分离后,$a的refcount减去1,也就是$c独立了,那么此时$a和$c的输出结果应该是<code>(refcount=1, is_ref=0),string &#39;aaa&#39; (length=3)</code>.在分离操作完成后,再做引用赋值的问题,这时候就简单了,因为$a的refcount是1,所以我们直接refcount+1,is_ref=1就搞定</li>\n<li>最后输出结果就是上面的结果了</li>\n</ol>\n<p><strong>php把上面的过程叫做写时复制(copy on write),也就是说,一般赋值$c=$a时候,php并不是立即去申请一个新的变量空间.,而是等到执行引用赋值或者其他写操作的时候(比如这个时候修改$c的值),php才会去开辟一个新的空间给赋值后的变量,也就是分离操作.</strong></p>\n<h1 id=\"4-推广到对象\"><a href=\"#4-推广到对象\" class=\"headerlink\" title=\"4 推广到对象\"></a>4 推广到对象</h1><p>上面普通变量的赋值,应该说清楚了哈.<br>其实对象的赋值和普通变量赋值是同一个道理.下面直接贴代码,不在赘述<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $aa=<span class=\"string\">'我是类属性'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">$a=<span class=\"keyword\">new</span> A();</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'刚执行完$a定义&lt;br&gt;'</span>;</div><div class=\"line\">xdebug_debug_zval(<span class=\"string\">'a'</span>);</div><div class=\"line\">$b=$a;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'刚执行完$b赋值&lt;br&gt;'</span>;</div><div class=\"line\">xdebug_debug_zval(<span class=\"string\">'b'</span>);</div><div class=\"line\">$c=&amp;$a;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'刚执行完$c赋值&lt;br&gt;'</span>;</div><div class=\"line\">xdebug_debug_zval(<span class=\"string\">'c'</span>);</div><div class=\"line\">$d=$b;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'刚执行完$d赋值&lt;br&gt;'</span>;</div><div class=\"line\">xdebug_debug_zval(<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>);</div></pre></td></tr></table></figure></p>\n<p>输出结果如下<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">刚执行完<span class=\"variable\">$a</span>定义</div><div class=\"line\"><span class=\"selector-tag\">a</span>: </div><div class=\"line\">(refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>),</div><div class=\"line\"><span class=\"function\"><span class=\"title\">object</span><span class=\"params\">(A)</span></span>[<span class=\"number\">1</span>]</div><div class=\"line\">  public <span class=\"string\">'aa'</span> =&gt; (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>),string <span class=\"string\">'我是类属性'</span> (length=<span class=\"number\">15</span>)</div><div class=\"line\"></div><div class=\"line\">刚执行完<span class=\"variable\">$b</span>赋值</div><div class=\"line\"><span class=\"selector-tag\">b</span>: </div><div class=\"line\">(refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">0</span>),</div><div class=\"line\"><span class=\"function\"><span class=\"title\">object</span><span class=\"params\">(A)</span></span>[<span class=\"number\">1</span>]</div><div class=\"line\">  public <span class=\"string\">'aa'</span> =&gt; (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>),string <span class=\"string\">'我是类属性'</span> (length=<span class=\"number\">15</span>)</div><div class=\"line\"></div><div class=\"line\">刚执行完<span class=\"variable\">$c</span>赋值</div><div class=\"line\">c: </div><div class=\"line\">(refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">1</span>),</div><div class=\"line\"><span class=\"function\"><span class=\"title\">object</span><span class=\"params\">(A)</span></span>[<span class=\"number\">1</span>]</div><div class=\"line\">  public <span class=\"string\">'aa'</span> =&gt; (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>),string <span class=\"string\">'我是类属性'</span> (length=<span class=\"number\">15</span>)</div><div class=\"line\"></div><div class=\"line\">刚执行完<span class=\"variable\">$d</span>赋值</div><div class=\"line\"><span class=\"selector-tag\">a</span>: </div><div class=\"line\">(refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">1</span>),</div><div class=\"line\"><span class=\"function\"><span class=\"title\">object</span><span class=\"params\">(A)</span></span>[<span class=\"number\">1</span>]</div><div class=\"line\">  public <span class=\"string\">'aa'</span> =&gt; (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>),string <span class=\"string\">'我是类属性'</span> (length=<span class=\"number\">15</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">b</span>: </div><div class=\"line\">(refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">0</span>),</div><div class=\"line\"><span class=\"function\"><span class=\"title\">object</span><span class=\"params\">(A)</span></span>[<span class=\"number\">1</span>]</div><div class=\"line\">  public <span class=\"string\">'aa'</span> =&gt; (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>),string <span class=\"string\">'我是类属性'</span> (length=<span class=\"number\">15</span>)</div><div class=\"line\"></div><div class=\"line\">c: </div><div class=\"line\">(refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">1</span>),</div><div class=\"line\"><span class=\"function\"><span class=\"title\">object</span><span class=\"params\">(A)</span></span>[<span class=\"number\">1</span>]</div><div class=\"line\">  public <span class=\"string\">'aa'</span> =&gt; (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>),string <span class=\"string\">'我是类属性'</span> (length=<span class=\"number\">15</span>)</div><div class=\"line\"></div><div class=\"line\">d: </div><div class=\"line\">(refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">0</span>),</div><div class=\"line\"><span class=\"function\"><span class=\"title\">object</span><span class=\"params\">(A)</span></span>[<span class=\"number\">1</span>]</div><div class=\"line\">  public <span class=\"string\">'aa'</span> =&gt; (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>),string <span class=\"string\">'我是类属性'</span> (length=<span class=\"number\">15</span>)</div></pre></td></tr></table></figure></p>\n<h1 id=\"5-关于debug-zval-dump函数\"><a href=\"#5-关于debug-zval-dump函数\" class=\"headerlink\" title=\"5 关于debug_zval_dump函数\"></a>5 关于debug_zval_dump函数</h1><p>php中还有个关于计数的函数叫做<code>debug_zval_dump</code>,它只返回refcount,不过这个函数好奇葩,输出的数据有时候跟想的都不一样.<br>比如:<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$a=<span class=\"string\">'aaa'</span>;</div><div class=\"line\">$b=$a;</div><div class=\"line\">debug_zval_dump($a);<span class=\"comment\">//输出3</span></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>原因是:执行<code>debug_zval_dump</code>相当于执行了一次一般赋值操作,所以,refcount会再加1<br>再比如<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$a=<span class=\"string\">'aaa'</span>;</div><div class=\"line\">$c=$a;</div><div class=\"line\">$c=<span class=\"string\">'bbb'</span>;</div><div class=\"line\">debug_zval_dump($a,$c);<span class=\"comment\">//输出refcount=2,refcount=2</span></div><div class=\"line\">xdebug_debug_zval(<span class=\"string\">'a'</span>,<span class=\"string\">'c'</span>);<span class=\"comment\">//两个值完全相同,都是refcount=1, is_ref=0),string 'bbb' (length=3)</span></div></pre></td></tr></table></figure></p>\n<p>额,这是不是很奇葩?再来一波<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$a=<span class=\"string\">'aaa'</span>;</div><div class=\"line\">$b=&amp;$a;</div><div class=\"line\">$c=$a;</div><div class=\"line\">debug_zval_dump($a,$b,$c);<span class=\"comment\">//refcount分别是1,1,2</span></div><div class=\"line\">xdebug_debug_zval(<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>);<span class=\"comment\">//refcount和is_ref分别是(2,1),(2,1),(1,0)</span></div></pre></td></tr></table></figure></p>\n<p>这是什么鬼?我表示都看不懂<br>稍微总结了下,<code>debug_zval_dump</code>这个函数,如果只是一般赋值,那么还比较正常,赋值一次就是refcount+1操作,最后调用<code>debug_zval_dump</code>的再+1就好了<br>但是一旦涉及到引用赋值,这货就全变成1了,(引用赋值不+1就算了,说好的调用<code>debug_zval_dump</code>的+1呢?被狗吃了?),完全搞不懂是在搞啥,还是<code>xdebug_debug_zval</code>函数好.<br>打完收工<br>ps:其实我在知乎提了个问题,不过没人回答还<a href=\"http://www.zhihu.com/question/41044486\" target=\"_blank\" rel=\"external\">debug_zval_dump的计数问题?</a></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"http://www.laruence.com/2008/09/19/520.html\" target=\"_blank\" rel=\"external\">鸟哥的博客–深入理解PHP原理之变量分离/引用</a><br>2 <a href=\"http://weizhifeng.net/write-php-extension-part2-2.html\" target=\"_blank\" rel=\"external\">PHP扩展编写第二步：参数，数组，以及ZVAL「续」</a><br>3 <a href=\"http://php.net/manual/zh/function.debug-zval-dump.php\" target=\"_blank\" rel=\"external\">php官方文档–debug_zval_dump函数</a><br>4 <a href=\"https://derickrethans.nl/talks/phparch-php-variables-article.pdf\" target=\"_blank\" rel=\"external\">英文文档–php变量</a></p>\n","excerpt":"<p>上一篇提到了,对象赋值的时候有两种赋值方式,一种是直接<code>$a=$b</code>,第二种是引用赋值<code>$a=&amp;$b</code>.<br>不仅对象赋值的时候会有这两种情况,普通变量赋值也会有这两种情况,为了简单说明,我们先使用简单的普通变量来做说明.<br>","more":"</p>\n<h1 id=\"1-普通变量的结构\"><a href=\"#1-普通变量的结构\" class=\"headerlink\" title=\"1 普通变量的结构\"></a>1 普通变量的结构</h1><p>在PHP中,所有的变量都是用一个结构zval来保存的,zval大概的结构如下所示:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> _zval_struct &#123;</div><div class=\"line\">        <span class=\"comment\">/* Variable information */</span></div><div class=\"line\">        zvalue_value value;             <span class=\"comment\">/* value */</span></div><div class=\"line\">        zend_uint refcount;</div><div class=\"line\">        zend_uchar type;        <span class=\"comment\">/* active type */</span></div><div class=\"line\">        zend_uchar is_ref;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>我们这里主要用到的是两个变量,一个是refcount,即是引用计数,一个是is_ref,用来标记是否是引用.</p>\n<h1 id=\"2-php环境的设置\"><a href=\"#2-php环境的设置\" class=\"headerlink\" title=\"2 php环境的设置\"></a>2 php环境的设置</h1><p>我们在实验过程中,需要去查看refcount和is_ref的变化,所以需要使用php的<br><code>xdebug_debug_zval</code>函数,你的环境可能默认没有开启这个配置,你需要修改<code>php.ini</code>文件开启这个配置.<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1f1m1ximwj1j20wn098dj6.jpg\" alt=\"修改php.ini文件\"></p>\n<h1 id=\"3-refcount和is-ref\"><a href=\"#3-refcount和is-ref\" class=\"headerlink\" title=\"3 refcount和is_ref\"></a>3 refcount和is_ref</h1><p>我们通常的赋值方式:一般赋值和引用赋值.</p>\n<h1 id=\"3-1-一般赋值\"><a href=\"#3-1-一般赋值\" class=\"headerlink\" title=\"3.1 一般赋值\"></a>3.1 一般赋值</h1><p>当使用一般给新变量赋值的时候,php的内存策略,并不是重新申请一个新的空间,而是把原来的那个recount+1.比如下面的例子:<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$a=<span class=\"string\">'aaa'</span>;<span class=\"comment\">//此时$a的recount=1,ref=0</span></div><div class=\"line\">$b=$a;<span class=\"comment\">//赋值过后,$a的recount=2,ref=0,$b因为指向和$a一样,所以结果和$a一样</span></div><div class=\"line\">xdebug_debug_zval(<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>);</div></pre></td></tr></table></figure></p>\n<p>输出结果如下<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">0</span>),<span class=\"type\">string</span> 'aaa' (length=<span class=\"number\">3</span>)</div></pre></td></tr></table></figure></p>\n<h1 id=\"3-2-引用赋值\"><a href=\"#3-2-引用赋值\" class=\"headerlink\" title=\"3.2 引用赋值\"></a>3.2 引用赋值</h1><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$a=<span class=\"string\">'aaa'</span>;<span class=\"comment\">//此时$a的recount=1,ref=0</span></div><div class=\"line\">$c=&amp;$a;<span class=\"comment\">//赋值过后,$a的recount=2,ref=0,$b因为指向和$a一样,所以结果和$a一样</span></div><div class=\"line\">xdebug_debug_zval(<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>);<span class=\"comment\">//</span></div></pre></td></tr></table></figure>\n<p>输出结果如下<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">1</span>),<span class=\"type\">string</span> 'aaa' (length=<span class=\"number\">3</span>)</div></pre></td></tr></table></figure></p>\n<p>由上面可知,也就是每次进行赋值的时候,refcount都会+1,如果是引用赋值,is_ref就会被置为一.</p>\n<h1 id=\"3-3-两种赋值方式混合\"><a href=\"#3-3-两种赋值方式混合\" class=\"headerlink\" title=\"3.3 两种赋值方式混合\"></a>3.3 两种赋值方式混合</h1><p>那如果我们混合上面的两种赋值方式呢?比如下面的代码<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$a=<span class=\"string\">'aaa'</span>;</div><div class=\"line\">$b=&amp;$a;</div><div class=\"line\">$c=$a;</div><div class=\"line\">xdebug_debug_zval(<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>);</div></pre></td></tr></table></figure></p>\n<p>你猜输出结果是什么?<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">a</span>: (refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">1</span>),<span class=\"keyword\">string</span> <span class=\"string\">'aaa'</span> (<span class=\"built_in\">length</span>=<span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\">b: (refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">1</span>),<span class=\"keyword\">string</span> <span class=\"string\">'aaa'</span> (<span class=\"built_in\">length</span>=<span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\">c: (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>),<span class=\"keyword\">string</span> <span class=\"string\">'aaa'</span> (<span class=\"built_in\">length</span>=<span class=\"number\">3</span>)</div></pre></td></tr></table></figure></p>\n<p>为什么会这样呢?<br>我们一行一行的分析.</p>\n<ol>\n<li>首先第一行代码执行完以后,$a的结果应该是<code>(refcount=1, is_ref=0),string &#39;aaa&#39; (length=3)</code></li>\n<li>第二行代码执行引用赋值,因为refcount=1,所以$a的refcount直接+1,is_ref变成1,输出即是`(refcount=2, is_ref=1),string ‘aaa’ </li>\n<li>第三行代码执行一般赋值,那我们是不是再把refcount+1呢?不是的,因为此时的refcount&gt;1并且is_ref不为0,所以不能执行那个操作,而是直接把$a复制了另外一份,而不是修改$a的计数器.<br>所以,最后的输出结果,$c的refcount是1,因为它完全另外申请了一个副本</li>\n</ol>\n<p>我们把上面的代码换个位置<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$a=<span class=\"string\">'aaa'</span>;</div><div class=\"line\">$c=$a;</div><div class=\"line\">$b=&amp;$a;</div><div class=\"line\">xdebug_debug_zval(<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>);</div></pre></td></tr></table></figure></p>\n<p>你再猜猜输出结果是什么?<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">a</span>: (refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">1</span>),<span class=\"keyword\">string</span> <span class=\"string\">'aaa'</span> (<span class=\"built_in\">length</span>=<span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\">b: (refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">1</span>),<span class=\"keyword\">string</span> <span class=\"string\">'aaa'</span> (<span class=\"built_in\">length</span>=<span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\">c: (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>),<span class=\"keyword\">string</span> <span class=\"string\">'aaa'</span> (<span class=\"built_in\">length</span>=<span class=\"number\">3</span>)</div></pre></td></tr></table></figure></p>\n<p>咦?结果是一样的哈?<br>对的,结果是一样的,不过执行的过程却是不同的,我们再来一行一行的分析下</p>\n<ol>\n<li>首先第一行代码执行完以后,$a的结果应该是<code>(refcount=1, is_ref=0),string &#39;aaa&#39; (length=3)</code></li>\n<li>第二行代码执行一般赋值,同理,因为refcount=1,所以$a的refcount直接+1,is_ref不变,输出即是`(refcount=2, is_ref=0),string ‘aaa’ </li>\n<li>第三行代码执行引用赋值,跟上面一样,因为refcount=2了,所以不能直接进行计数器+1,我们先检查is_ref,发现是0.这时,php首先做一个分离操作,也就是把上面一般赋值的那个值,给分离出去,分离后,$a的refcount减去1,也就是$c独立了,那么此时$a和$c的输出结果应该是<code>(refcount=1, is_ref=0),string &#39;aaa&#39; (length=3)</code>.在分离操作完成后,再做引用赋值的问题,这时候就简单了,因为$a的refcount是1,所以我们直接refcount+1,is_ref=1就搞定</li>\n<li>最后输出结果就是上面的结果了</li>\n</ol>\n<p><strong>php把上面的过程叫做写时复制(copy on write),也就是说,一般赋值$c=$a时候,php并不是立即去申请一个新的变量空间.,而是等到执行引用赋值或者其他写操作的时候(比如这个时候修改$c的值),php才会去开辟一个新的空间给赋值后的变量,也就是分离操作.</strong></p>\n<h1 id=\"4-推广到对象\"><a href=\"#4-推广到对象\" class=\"headerlink\" title=\"4 推广到对象\"></a>4 推广到对象</h1><p>上面普通变量的赋值,应该说清楚了哈.<br>其实对象的赋值和普通变量赋值是同一个道理.下面直接贴代码,不在赘述<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $aa=<span class=\"string\">'我是类属性'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">$a=<span class=\"keyword\">new</span> A();</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'刚执行完$a定义&lt;br&gt;'</span>;</div><div class=\"line\">xdebug_debug_zval(<span class=\"string\">'a'</span>);</div><div class=\"line\">$b=$a;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'刚执行完$b赋值&lt;br&gt;'</span>;</div><div class=\"line\">xdebug_debug_zval(<span class=\"string\">'b'</span>);</div><div class=\"line\">$c=&amp;$a;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'刚执行完$c赋值&lt;br&gt;'</span>;</div><div class=\"line\">xdebug_debug_zval(<span class=\"string\">'c'</span>);</div><div class=\"line\">$d=$b;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'刚执行完$d赋值&lt;br&gt;'</span>;</div><div class=\"line\">xdebug_debug_zval(<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>);</div></pre></td></tr></table></figure></p>\n<p>输出结果如下<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">刚执行完<span class=\"variable\">$a</span>定义</div><div class=\"line\"><span class=\"selector-tag\">a</span>: </div><div class=\"line\">(refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>),</div><div class=\"line\"><span class=\"function\"><span class=\"title\">object</span><span class=\"params\">(A)</span></span>[<span class=\"number\">1</span>]</div><div class=\"line\">  public <span class=\"string\">'aa'</span> =&gt; (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>),string <span class=\"string\">'我是类属性'</span> (length=<span class=\"number\">15</span>)</div><div class=\"line\"></div><div class=\"line\">刚执行完<span class=\"variable\">$b</span>赋值</div><div class=\"line\"><span class=\"selector-tag\">b</span>: </div><div class=\"line\">(refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">0</span>),</div><div class=\"line\"><span class=\"function\"><span class=\"title\">object</span><span class=\"params\">(A)</span></span>[<span class=\"number\">1</span>]</div><div class=\"line\">  public <span class=\"string\">'aa'</span> =&gt; (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>),string <span class=\"string\">'我是类属性'</span> (length=<span class=\"number\">15</span>)</div><div class=\"line\"></div><div class=\"line\">刚执行完<span class=\"variable\">$c</span>赋值</div><div class=\"line\">c: </div><div class=\"line\">(refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">1</span>),</div><div class=\"line\"><span class=\"function\"><span class=\"title\">object</span><span class=\"params\">(A)</span></span>[<span class=\"number\">1</span>]</div><div class=\"line\">  public <span class=\"string\">'aa'</span> =&gt; (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>),string <span class=\"string\">'我是类属性'</span> (length=<span class=\"number\">15</span>)</div><div class=\"line\"></div><div class=\"line\">刚执行完<span class=\"variable\">$d</span>赋值</div><div class=\"line\"><span class=\"selector-tag\">a</span>: </div><div class=\"line\">(refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">1</span>),</div><div class=\"line\"><span class=\"function\"><span class=\"title\">object</span><span class=\"params\">(A)</span></span>[<span class=\"number\">1</span>]</div><div class=\"line\">  public <span class=\"string\">'aa'</span> =&gt; (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>),string <span class=\"string\">'我是类属性'</span> (length=<span class=\"number\">15</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">b</span>: </div><div class=\"line\">(refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">0</span>),</div><div class=\"line\"><span class=\"function\"><span class=\"title\">object</span><span class=\"params\">(A)</span></span>[<span class=\"number\">1</span>]</div><div class=\"line\">  public <span class=\"string\">'aa'</span> =&gt; (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>),string <span class=\"string\">'我是类属性'</span> (length=<span class=\"number\">15</span>)</div><div class=\"line\"></div><div class=\"line\">c: </div><div class=\"line\">(refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">1</span>),</div><div class=\"line\"><span class=\"function\"><span class=\"title\">object</span><span class=\"params\">(A)</span></span>[<span class=\"number\">1</span>]</div><div class=\"line\">  public <span class=\"string\">'aa'</span> =&gt; (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>),string <span class=\"string\">'我是类属性'</span> (length=<span class=\"number\">15</span>)</div><div class=\"line\"></div><div class=\"line\">d: </div><div class=\"line\">(refcount=<span class=\"number\">2</span>, is_ref=<span class=\"number\">0</span>),</div><div class=\"line\"><span class=\"function\"><span class=\"title\">object</span><span class=\"params\">(A)</span></span>[<span class=\"number\">1</span>]</div><div class=\"line\">  public <span class=\"string\">'aa'</span> =&gt; (refcount=<span class=\"number\">1</span>, is_ref=<span class=\"number\">0</span>),string <span class=\"string\">'我是类属性'</span> (length=<span class=\"number\">15</span>)</div></pre></td></tr></table></figure></p>\n<h1 id=\"5-关于debug-zval-dump函数\"><a href=\"#5-关于debug-zval-dump函数\" class=\"headerlink\" title=\"5 关于debug_zval_dump函数\"></a>5 关于debug_zval_dump函数</h1><p>php中还有个关于计数的函数叫做<code>debug_zval_dump</code>,它只返回refcount,不过这个函数好奇葩,输出的数据有时候跟想的都不一样.<br>比如:<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$a=<span class=\"string\">'aaa'</span>;</div><div class=\"line\">$b=$a;</div><div class=\"line\">debug_zval_dump($a);<span class=\"comment\">//输出3</span></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>原因是:执行<code>debug_zval_dump</code>相当于执行了一次一般赋值操作,所以,refcount会再加1<br>再比如<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$a=<span class=\"string\">'aaa'</span>;</div><div class=\"line\">$c=$a;</div><div class=\"line\">$c=<span class=\"string\">'bbb'</span>;</div><div class=\"line\">debug_zval_dump($a,$c);<span class=\"comment\">//输出refcount=2,refcount=2</span></div><div class=\"line\">xdebug_debug_zval(<span class=\"string\">'a'</span>,<span class=\"string\">'c'</span>);<span class=\"comment\">//两个值完全相同,都是refcount=1, is_ref=0),string 'bbb' (length=3)</span></div></pre></td></tr></table></figure></p>\n<p>额,这是不是很奇葩?再来一波<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$a=<span class=\"string\">'aaa'</span>;</div><div class=\"line\">$b=&amp;$a;</div><div class=\"line\">$c=$a;</div><div class=\"line\">debug_zval_dump($a,$b,$c);<span class=\"comment\">//refcount分别是1,1,2</span></div><div class=\"line\">xdebug_debug_zval(<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>);<span class=\"comment\">//refcount和is_ref分别是(2,1),(2,1),(1,0)</span></div></pre></td></tr></table></figure></p>\n<p>这是什么鬼?我表示都看不懂<br>稍微总结了下,<code>debug_zval_dump</code>这个函数,如果只是一般赋值,那么还比较正常,赋值一次就是refcount+1操作,最后调用<code>debug_zval_dump</code>的再+1就好了<br>但是一旦涉及到引用赋值,这货就全变成1了,(引用赋值不+1就算了,说好的调用<code>debug_zval_dump</code>的+1呢?被狗吃了?),完全搞不懂是在搞啥,还是<code>xdebug_debug_zval</code>函数好.<br>打完收工<br>ps:其实我在知乎提了个问题,不过没人回答还<a href=\"http://www.zhihu.com/question/41044486\">debug_zval_dump的计数问题?</a></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"http://www.laruence.com/2008/09/19/520.html\">鸟哥的博客–深入理解PHP原理之变量分离/引用</a><br>2 <a href=\"http://weizhifeng.net/write-php-extension-part2-2.html\">PHP扩展编写第二步：参数，数组，以及ZVAL「续」</a><br>3 <a href=\"http://php.net/manual/zh/function.debug-zval-dump.php\">php官方文档–debug_zval_dump函数</a><br>4 <a href=\"https://derickrethans.nl/talks/phparch-php-variables-article.pdf\">英文文档–php变量</a></p>"},{"title":"php学习笔记(3)","date":"2016-03-04T02:06:40.000Z","_content":"今天开始学习类和面向对象了.\n<!-- more -->\n# 1 对象实例化\n在实例化对象的时候,必须使用`new`关键字.如果该类属于一个名字空间,则必须使用其完整名称.\n```php\n<?php\n$instance = new SimpleClass();\n\n// 也可以这样做：\n$className = 'Foo';\n$instance = new $className(); // Foo()\n?>\n```\n## 1.1 对象赋值\n我们创建一个对象的实例后,后面进行赋值的时候有两种赋值.\n第一种是直接`$a=$b`,第二种是引用赋值`$a=&$b`.\n这两个有什么区别呢?问题可深了,所以我决定单独写一篇文章来说这个问题.\n[php学习笔记(3.5)--关于引用赋值和一般赋值](http://jackroyal.github.io/2015/12/10/php-learn-note-3-5/)\n\n\n## 1.2 extends关键字\n一个类可以在声明中用 extends 关键字继承另一个类的方法和属性.*PHP不支持多重继承,一个类只能继承一个基类.*\n被继承的方法和属性可以通过用同样的名字重新声明被覆盖.但是如果父类定义方法时使用了 final,则该方法不可被覆盖.可以通过 parent:: 来访问被覆盖的方法或属性.\n当覆盖方法时,参数必须保持一致否则 PHP 将发出 E_STRICT 级别的错误信息.但构造函数例外,构造函数可在被覆盖时使用不同的参数.\n\n# 2 属性\n类的变量成员叫做属性,属性声明是由关键字public,protected或者private开头,然后跟一个普通的变量声明来组成,尤其需要注意的是,属性的变量可以初始化,但是初始化值必须是常数,也就是不能有表达式比如下面的就是错误的:\n`public $var1 = 'hello ' . 'world';`,`public $var3 = 1+2;`.\n在php5.3之后,nowdocs的结构也是可行的.\n","source":"_posts/php-learn-note-3.md","raw":"title: php学习笔记(3)\ndate: 2016-03-04 10:06:40\ntags:\n- php\ncategories:\n- php学习笔记\n---\n今天开始学习类和面向对象了.\n<!-- more -->\n# 1 对象实例化\n在实例化对象的时候,必须使用`new`关键字.如果该类属于一个名字空间,则必须使用其完整名称.\n```php\n<?php\n$instance = new SimpleClass();\n\n// 也可以这样做：\n$className = 'Foo';\n$instance = new $className(); // Foo()\n?>\n```\n## 1.1 对象赋值\n我们创建一个对象的实例后,后面进行赋值的时候有两种赋值.\n第一种是直接`$a=$b`,第二种是引用赋值`$a=&$b`.\n这两个有什么区别呢?问题可深了,所以我决定单独写一篇文章来说这个问题.\n[php学习笔记(3.5)--关于引用赋值和一般赋值](http://jackroyal.github.io/2015/12/10/php-learn-note-3-5/)\n\n\n## 1.2 extends关键字\n一个类可以在声明中用 extends 关键字继承另一个类的方法和属性.*PHP不支持多重继承,一个类只能继承一个基类.*\n被继承的方法和属性可以通过用同样的名字重新声明被覆盖.但是如果父类定义方法时使用了 final,则该方法不可被覆盖.可以通过 parent:: 来访问被覆盖的方法或属性.\n当覆盖方法时,参数必须保持一致否则 PHP 将发出 E_STRICT 级别的错误信息.但构造函数例外,构造函数可在被覆盖时使用不同的参数.\n\n# 2 属性\n类的变量成员叫做属性,属性声明是由关键字public,protected或者private开头,然后跟一个普通的变量声明来组成,尤其需要注意的是,属性的变量可以初始化,但是初始化值必须是常数,也就是不能有表达式比如下面的就是错误的:\n`public $var1 = 'hello ' . 'world';`,`public $var3 = 1+2;`.\n在php5.3之后,nowdocs的结构也是可行的.\n","slug":"php-learn-note-3","published":1,"updated":"2016-03-08T05:22:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yqh002yx8cdnya41v41","content":"<p>今天开始学习类和面向对象了.<br><a id=\"more\"></a></p>\n<h1 id=\"1-对象实例化\"><a href=\"#1-对象实例化\" class=\"headerlink\" title=\"1 对象实例化\"></a>1 对象实例化</h1><p>在实例化对象的时候,必须使用<code>new</code>关键字.如果该类属于一个名字空间,则必须使用其完整名称.<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$instance = <span class=\"keyword\">new</span> SimpleClass();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 也可以这样做：</span></div><div class=\"line\">$className = <span class=\"string\">'Foo'</span>;</div><div class=\"line\">$instance = <span class=\"keyword\">new</span> $className(); <span class=\"comment\">// Foo()</span></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"1-1-对象赋值\"><a href=\"#1-1-对象赋值\" class=\"headerlink\" title=\"1.1 对象赋值\"></a>1.1 对象赋值</h2><p>我们创建一个对象的实例后,后面进行赋值的时候有两种赋值.<br>第一种是直接<code>$a=$b</code>,第二种是引用赋值<code>$a=&amp;$b</code>.<br>这两个有什么区别呢?问题可深了,所以我决定单独写一篇文章来说这个问题.<br><a href=\"http://jackroyal.github.io/2015/12/10/php-learn-note-3-5/\" target=\"_blank\" rel=\"external\">php学习笔记(3.5)–关于引用赋值和一般赋值</a></p>\n<h2 id=\"1-2-extends关键字\"><a href=\"#1-2-extends关键字\" class=\"headerlink\" title=\"1.2 extends关键字\"></a>1.2 extends关键字</h2><p>一个类可以在声明中用 extends 关键字继承另一个类的方法和属性.<em>PHP不支持多重继承,一个类只能继承一个基类.</em><br>被继承的方法和属性可以通过用同样的名字重新声明被覆盖.但是如果父类定义方法时使用了 final,则该方法不可被覆盖.可以通过 parent:: 来访问被覆盖的方法或属性.<br>当覆盖方法时,参数必须保持一致否则 PHP 将发出 E_STRICT 级别的错误信息.但构造函数例外,构造函数可在被覆盖时使用不同的参数.</p>\n<h1 id=\"2-属性\"><a href=\"#2-属性\" class=\"headerlink\" title=\"2 属性\"></a>2 属性</h1><p>类的变量成员叫做属性,属性声明是由关键字public,protected或者private开头,然后跟一个普通的变量声明来组成,尤其需要注意的是,属性的变量可以初始化,但是初始化值必须是常数,也就是不能有表达式比如下面的就是错误的:<br><code>public $var1 = &#39;hello &#39; . &#39;world&#39;;</code>,<code>public $var3 = 1+2;</code>.<br>在php5.3之后,nowdocs的结构也是可行的.</p>\n","excerpt":"<p>今天开始学习类和面向对象了.<br>","more":"</p>\n<h1 id=\"1-对象实例化\"><a href=\"#1-对象实例化\" class=\"headerlink\" title=\"1 对象实例化\"></a>1 对象实例化</h1><p>在实例化对象的时候,必须使用<code>new</code>关键字.如果该类属于一个名字空间,则必须使用其完整名称.<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$instance = <span class=\"keyword\">new</span> SimpleClass();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 也可以这样做：</span></div><div class=\"line\">$className = <span class=\"string\">'Foo'</span>;</div><div class=\"line\">$instance = <span class=\"keyword\">new</span> $className(); <span class=\"comment\">// Foo()</span></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"1-1-对象赋值\"><a href=\"#1-1-对象赋值\" class=\"headerlink\" title=\"1.1 对象赋值\"></a>1.1 对象赋值</h2><p>我们创建一个对象的实例后,后面进行赋值的时候有两种赋值.<br>第一种是直接<code>$a=$b</code>,第二种是引用赋值<code>$a=&amp;$b</code>.<br>这两个有什么区别呢?问题可深了,所以我决定单独写一篇文章来说这个问题.<br><a href=\"http://jackroyal.github.io/2015/12/10/php-learn-note-3-5/\">php学习笔记(3.5)–关于引用赋值和一般赋值</a></p>\n<h2 id=\"1-2-extends关键字\"><a href=\"#1-2-extends关键字\" class=\"headerlink\" title=\"1.2 extends关键字\"></a>1.2 extends关键字</h2><p>一个类可以在声明中用 extends 关键字继承另一个类的方法和属性.<em>PHP不支持多重继承,一个类只能继承一个基类.</em><br>被继承的方法和属性可以通过用同样的名字重新声明被覆盖.但是如果父类定义方法时使用了 final,则该方法不可被覆盖.可以通过 parent:: 来访问被覆盖的方法或属性.<br>当覆盖方法时,参数必须保持一致否则 PHP 将发出 E_STRICT 级别的错误信息.但构造函数例外,构造函数可在被覆盖时使用不同的参数.</p>\n<h1 id=\"2-属性\"><a href=\"#2-属性\" class=\"headerlink\" title=\"2 属性\"></a>2 属性</h1><p>类的变量成员叫做属性,属性声明是由关键字public,protected或者private开头,然后跟一个普通的变量声明来组成,尤其需要注意的是,属性的变量可以初始化,但是初始化值必须是常数,也就是不能有表达式比如下面的就是错误的:<br><code>public $var1 = &#39;hello &#39; . &#39;world&#39;;</code>,<code>public $var3 = 1+2;</code>.<br>在php5.3之后,nowdocs的结构也是可行的.</p>"},{"title":"php学习笔记(4)--php使用mysqli连接数据库","date":"2016-03-12T02:18:31.000Z","_content":"long time no see,用上框架以后,好久没有写原生的sql处理了,想当年用的还是mysql_connect,如今,都已经换mysqli了.\n<!-- more -->\n# 1 关于php的数据库连接方式\n当考虑连接到MySQL数据库服务器的时候，有三种主要的API可供选择：\n1 PHP的MySQL扩展\n2 PHP的mysqli扩展\n3 PHP数据对象(PDO)\n## 1.1 什么是PHP的MySQL扩展?\n这是设计开发允许PHP应用与MySQL数据库交互的早期扩展。mysql扩展提供了一个面向过程 的接口，并且是针对MySQL4.1.3或更早版本设计的。因此，这个扩展虽然可以与MySQL4.1.3或更新的数据库服务端 进行交互，但并不支持后期MySQL服务端提供的一些特性。\n## 1.2 什么是PHP的mysqli扩展?\nmysqli扩展，我们有时称之为MySQL增强扩展，可以用于使用MySQL4.1.3或更新版本中新的高级特性。mysqli扩展在PHP 5及以后版本中包含。\n1   mysqli扩展有一系列的优势，相对于mysql扩展的提升主要有：\n2   面向对象接口\n3   prepared语句支持（译注：关于prepare请参阅mysql相关文档）\n4   多语句执行支持\n5   事务支持\n6   增强的调试能力\n7   嵌入式服务支持\n在提供了面向对象接口的同时也提供了一个面向过程的接口。\n## 1.3 什么是PDO?\n\nPHP数据对象，是PHP应用中的一个数据库抽象层规范。PDO提供了一个统一的API接口可以使得你的PHP应用不去关心具体要 连接的数据库服务器系统类型。也就是说，如果你使用PDO的API，可以在任何需要的时候无缝切换数据库服务器，比如从Firebird 到MySQL，仅仅需要修改很少的PHP代码。\n\n其他数据库抽象层的例子包括Java应用中的JDBC以及Perl中的DBI。\n\n当然，PDO也有它自己的先进性，比如一个干净的，简单的，可移植的API，它最主要的缺点是会限制让你不能使用 后期MySQL服务端提供所有的数据库高级特性。比如，PDO不允许使用MySQL支持的多语句执行。\n\n\n\n![PHP中三种主要的MySQL连接方式的功能的比较](http://ww2.sinaimg.cn/large/692869a3gw1f1tvea7khyj20hm0dhac0.jpg)\n","source":"_posts/php-learn-note-4.md","raw":"title: php学习笔记(4)--php使用mysqli连接数据库\ndate: 2016-03-12 10:18:31\ntags:\n- php\ncategories:\n- php学习笔记\n---\nlong time no see,用上框架以后,好久没有写原生的sql处理了,想当年用的还是mysql_connect,如今,都已经换mysqli了.\n<!-- more -->\n# 1 关于php的数据库连接方式\n当考虑连接到MySQL数据库服务器的时候，有三种主要的API可供选择：\n1 PHP的MySQL扩展\n2 PHP的mysqli扩展\n3 PHP数据对象(PDO)\n## 1.1 什么是PHP的MySQL扩展?\n这是设计开发允许PHP应用与MySQL数据库交互的早期扩展。mysql扩展提供了一个面向过程 的接口，并且是针对MySQL4.1.3或更早版本设计的。因此，这个扩展虽然可以与MySQL4.1.3或更新的数据库服务端 进行交互，但并不支持后期MySQL服务端提供的一些特性。\n## 1.2 什么是PHP的mysqli扩展?\nmysqli扩展，我们有时称之为MySQL增强扩展，可以用于使用MySQL4.1.3或更新版本中新的高级特性。mysqli扩展在PHP 5及以后版本中包含。\n1   mysqli扩展有一系列的优势，相对于mysql扩展的提升主要有：\n2   面向对象接口\n3   prepared语句支持（译注：关于prepare请参阅mysql相关文档）\n4   多语句执行支持\n5   事务支持\n6   增强的调试能力\n7   嵌入式服务支持\n在提供了面向对象接口的同时也提供了一个面向过程的接口。\n## 1.3 什么是PDO?\n\nPHP数据对象，是PHP应用中的一个数据库抽象层规范。PDO提供了一个统一的API接口可以使得你的PHP应用不去关心具体要 连接的数据库服务器系统类型。也就是说，如果你使用PDO的API，可以在任何需要的时候无缝切换数据库服务器，比如从Firebird 到MySQL，仅仅需要修改很少的PHP代码。\n\n其他数据库抽象层的例子包括Java应用中的JDBC以及Perl中的DBI。\n\n当然，PDO也有它自己的先进性，比如一个干净的，简单的，可移植的API，它最主要的缺点是会限制让你不能使用 后期MySQL服务端提供所有的数据库高级特性。比如，PDO不允许使用MySQL支持的多语句执行。\n\n\n\n![PHP中三种主要的MySQL连接方式的功能的比较](http://ww2.sinaimg.cn/large/692869a3gw1f1tvea7khyj20hm0dhac0.jpg)\n","slug":"php-learn-note-4","published":1,"updated":"2016-03-12T02:31:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yqk0032x8cdayluvkcy","content":"<p>long time no see,用上框架以后,好久没有写原生的sql处理了,想当年用的还是mysql_connect,如今,都已经换mysqli了.<br><a id=\"more\"></a></p>\n<h1 id=\"1-关于php的数据库连接方式\"><a href=\"#1-关于php的数据库连接方式\" class=\"headerlink\" title=\"1 关于php的数据库连接方式\"></a>1 关于php的数据库连接方式</h1><p>当考虑连接到MySQL数据库服务器的时候，有三种主要的API可供选择：<br>1 PHP的MySQL扩展<br>2 PHP的mysqli扩展<br>3 PHP数据对象(PDO)</p>\n<h2 id=\"1-1-什么是PHP的MySQL扩展\"><a href=\"#1-1-什么是PHP的MySQL扩展\" class=\"headerlink\" title=\"1.1 什么是PHP的MySQL扩展?\"></a>1.1 什么是PHP的MySQL扩展?</h2><p>这是设计开发允许PHP应用与MySQL数据库交互的早期扩展。mysql扩展提供了一个面向过程 的接口，并且是针对MySQL4.1.3或更早版本设计的。因此，这个扩展虽然可以与MySQL4.1.3或更新的数据库服务端 进行交互，但并不支持后期MySQL服务端提供的一些特性。</p>\n<h2 id=\"1-2-什么是PHP的mysqli扩展\"><a href=\"#1-2-什么是PHP的mysqli扩展\" class=\"headerlink\" title=\"1.2 什么是PHP的mysqli扩展?\"></a>1.2 什么是PHP的mysqli扩展?</h2><p>mysqli扩展，我们有时称之为MySQL增强扩展，可以用于使用MySQL4.1.3或更新版本中新的高级特性。mysqli扩展在PHP 5及以后版本中包含。<br>1   mysqli扩展有一系列的优势，相对于mysql扩展的提升主要有：<br>2   面向对象接口<br>3   prepared语句支持（译注：关于prepare请参阅mysql相关文档）<br>4   多语句执行支持<br>5   事务支持<br>6   增强的调试能力<br>7   嵌入式服务支持<br>在提供了面向对象接口的同时也提供了一个面向过程的接口。</p>\n<h2 id=\"1-3-什么是PDO\"><a href=\"#1-3-什么是PDO\" class=\"headerlink\" title=\"1.3 什么是PDO?\"></a>1.3 什么是PDO?</h2><p>PHP数据对象，是PHP应用中的一个数据库抽象层规范。PDO提供了一个统一的API接口可以使得你的PHP应用不去关心具体要 连接的数据库服务器系统类型。也就是说，如果你使用PDO的API，可以在任何需要的时候无缝切换数据库服务器，比如从Firebird 到MySQL，仅仅需要修改很少的PHP代码。</p>\n<p>其他数据库抽象层的例子包括Java应用中的JDBC以及Perl中的DBI。</p>\n<p>当然，PDO也有它自己的先进性，比如一个干净的，简单的，可移植的API，它最主要的缺点是会限制让你不能使用 后期MySQL服务端提供所有的数据库高级特性。比如，PDO不允许使用MySQL支持的多语句执行。</p>\n<p><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1f1tvea7khyj20hm0dhac0.jpg\" alt=\"PHP中三种主要的MySQL连接方式的功能的比较\"></p>\n","excerpt":"<p>long time no see,用上框架以后,好久没有写原生的sql处理了,想当年用的还是mysql_connect,如今,都已经换mysqli了.<br>","more":"</p>\n<h1 id=\"1-关于php的数据库连接方式\"><a href=\"#1-关于php的数据库连接方式\" class=\"headerlink\" title=\"1 关于php的数据库连接方式\"></a>1 关于php的数据库连接方式</h1><p>当考虑连接到MySQL数据库服务器的时候，有三种主要的API可供选择：<br>1 PHP的MySQL扩展<br>2 PHP的mysqli扩展<br>3 PHP数据对象(PDO)</p>\n<h2 id=\"1-1-什么是PHP的MySQL扩展\"><a href=\"#1-1-什么是PHP的MySQL扩展\" class=\"headerlink\" title=\"1.1 什么是PHP的MySQL扩展?\"></a>1.1 什么是PHP的MySQL扩展?</h2><p>这是设计开发允许PHP应用与MySQL数据库交互的早期扩展。mysql扩展提供了一个面向过程 的接口，并且是针对MySQL4.1.3或更早版本设计的。因此，这个扩展虽然可以与MySQL4.1.3或更新的数据库服务端 进行交互，但并不支持后期MySQL服务端提供的一些特性。</p>\n<h2 id=\"1-2-什么是PHP的mysqli扩展\"><a href=\"#1-2-什么是PHP的mysqli扩展\" class=\"headerlink\" title=\"1.2 什么是PHP的mysqli扩展?\"></a>1.2 什么是PHP的mysqli扩展?</h2><p>mysqli扩展，我们有时称之为MySQL增强扩展，可以用于使用MySQL4.1.3或更新版本中新的高级特性。mysqli扩展在PHP 5及以后版本中包含。<br>1   mysqli扩展有一系列的优势，相对于mysql扩展的提升主要有：<br>2   面向对象接口<br>3   prepared语句支持（译注：关于prepare请参阅mysql相关文档）<br>4   多语句执行支持<br>5   事务支持<br>6   增强的调试能力<br>7   嵌入式服务支持<br>在提供了面向对象接口的同时也提供了一个面向过程的接口。</p>\n<h2 id=\"1-3-什么是PDO\"><a href=\"#1-3-什么是PDO\" class=\"headerlink\" title=\"1.3 什么是PDO?\"></a>1.3 什么是PDO?</h2><p>PHP数据对象，是PHP应用中的一个数据库抽象层规范。PDO提供了一个统一的API接口可以使得你的PHP应用不去关心具体要 连接的数据库服务器系统类型。也就是说，如果你使用PDO的API，可以在任何需要的时候无缝切换数据库服务器，比如从Firebird 到MySQL，仅仅需要修改很少的PHP代码。</p>\n<p>其他数据库抽象层的例子包括Java应用中的JDBC以及Perl中的DBI。</p>\n<p>当然，PDO也有它自己的先进性，比如一个干净的，简单的，可移植的API，它最主要的缺点是会限制让你不能使用 后期MySQL服务端提供所有的数据库高级特性。比如，PDO不允许使用MySQL支持的多语句执行。</p>\n<p><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1f1tvea7khyj20hm0dhac0.jpg\" alt=\"PHP中三种主要的MySQL连接方式的功能的比较\"></p>"},{"title":"php学习笔记(4)--php中cookie没有及时生效","date":"2016-03-19T04:15:32.000Z","_content":"update:2016/4/14 9:48:26\n这是最近才在面试题中发现的一个问题,之前用的时候还没发现,仔细一想,有点意思.\n<!-- more -->\n# 1 php中的cookie\n","source":"_posts/php-learn-note-5.md","raw":"title: php学习笔记(4)--php中cookie没有及时生效\ndate: 2016-03-19 12:15:32\ntags:\n- php\ncategories:\n- php学习笔记\n---\nupdate:2016/4/14 9:48:26\n这是最近才在面试题中发现的一个问题,之前用的时候还没发现,仔细一想,有点意思.\n<!-- more -->\n# 1 php中的cookie\n","slug":"php-learn-note-5","published":1,"updated":"2016-04-14T02:11:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yqm0033x8cd2m1cf1ac","content":"<p>update:2016/4/14 9:48:26<br>这是最近才在面试题中发现的一个问题,之前用的时候还没发现,仔细一想,有点意思.<br><a id=\"more\"></a></p>\n<h1 id=\"1-php中的cookie\"><a href=\"#1-php中的cookie\" class=\"headerlink\" title=\"1 php中的cookie\"></a>1 php中的cookie</h1>","excerpt":"<p>update:2016/4/14 9:48:26<br>这是最近才在面试题中发现的一个问题,之前用的时候还没发现,仔细一想,有点意思.<br>","more":"</p>\n<h1 id=\"1-php中的cookie\"><a href=\"#1-php中的cookie\" class=\"headerlink\" title=\"1 php中的cookie\"></a>1 php中的cookie</h1>"},{"title":"python学习笔记--python和beautifulsoup遇到的编码问题","date":"2015-03-29T06:43:45.000Z","_content":"在刚开始使用github pages的时候,我用python写了一个爬虫,计划是从csdn和cnblogs等博客网站上,把自己之前写的博客爬取下来,然后再转换成hexo用的markdown格式,样就可以直接添加到我的github pages.\n>项目主页: https://github.com/Jackroyal/blog2markdown\n\n最近刚好在学习python,刚好就把它给优化了一下,顺便做了个跨平台(哈哈,win和ubuntu都可以跑哈),昨天遇到很蛋疼的问题,一它给了我很多思路帮助我定位问题,.直搞到凌晨两点才弄好.\n非常非常感谢[【总结】Python 2.x中常见字符编码和解码方面的错误及其解决办法](http://www.crifan.com/summary_python_2_x_common_string_encode_decode_error_reason_and_solution/)\n作者做了一个很好的总结,帮助我们定位问题.\n<!-- more -->\n\n# 1 编码类型\n首先确定好你的编码类型,比如一般推荐用utf-8.当确定编码类型后,就要保持统一,不要又弄些GBK的编码在里面.\n+ 1.1  编辑器编码\n    * 我们有时候会犯一个错误,我在py文件的头部声明当前文件是按照utf-8来编码.但是文件实际保存的编却不是utf-8,这样也会导致乱码.建议使用可以查看当前文件编码的编辑器,比如sublime text或者notepad++ 或者pycharm.<br>在sublime下如图所示<br>![sublime显示当前文件编码](http://ww2.sinaimg.cn/large/692869a3gw1eqmn535qb7j208u028t8k.jpg)\n    * 文件编码声明,我们要在py文件的头部添加一行`# -*- coding: utf-8 -*-`,表明我接下来要使用utf-8编码\n+ 1.2  python解释器\n    * 如果是Python的IDLE，如果你没修改defaultencoding，那么就使用默认的字符编码可以通过sys.getdefaultencoding()而获得，比如此处获得是：ascii<br>![win中python解释器编码](http://ww4.sinaimg.cn/large/692869a3gw1eqmnd8fgrjj20b205kabi.jpg)<br>![ubuntu终端解释器的编码](http://ww3.sinaimg.cn/large/692869a3gw1eqmnfd29u7j20k5047wfv.jpg)\n+ 1.3  执行python代码\n    * 其中，很常见的几种动作是：\n        * 打印print对应的所获得的字符\n            * 对于字符串打印,Python的逻辑:\n                * 如果是Unicode字符串,则可以,自动地,编码为对应的终端所用编码,然后正确的显示出来\n                * 比如unicode的字符串,输出到windows的默认编码为GBK的cmd中,则Python可以自动将Unicode编码为GBK,然后输出到cmd中\n                * 个别特殊情况,也会出错:\n                    * 当此unicode字符串中包含某特殊字符,而目标终端的编码集合中,没有此字符,则很明显也是无法实现将Unicode编码为对应的特定编码的字符串,无法正确显示的\n                * 如果是某种编码类型的str,则需要该str的编码类型,和目标终端编码匹配\n                    * 比如GBK的字符串,输出到windows的默认编码为GBK的cmd,则是可以正常输出的\n                    * 此处后来经过代码测试，就发现一个有趣或者说诡异的问题，虽然我们python文件声明的UTF-8编码，但是实际上实际上是用GBK编码，而此时，文件中的字符串，很明显是用GBK存储的，所以，将此GBK字符，输出到GBK的cmd中，是可以正常输出的。即，此处字符串的类型，很明显只和文件所用的实际编码有关，而和文件所声明的代码无关。\n                * 如果是UTF-8的字符串,输出到windows的默认编码为GBK的cmd,就会出错\n                    * 对相应的字符，进行编码（为某种特定类型的字符str），或解码（为对应的unicode类型的字符）\n                    * 比如将当前的某种编码的字符串，解码为Unicode字符串\n                        * 很明显，也是要保证，你字符串本身的编码和所指定的编码，两者之间要一致的\n                        * 比如：decodedUnicode = someUtf8Str.decode(\"UTF-8\")\n                        * 而如果用这样的：decodedUnicode = someGbkStr.decode(\"UTF-8\")，那就会出现错误\n\n# 2 常用方法\n### 2.1 encode和decode\nencode()  unicode编码->其他编码\n\ndecode()  其他编码->unicode编码\n\n使用这两个方法的前提是,你要知道当前是什么编码.然后用对应的编码去进行解码\n比如对于s字符串可以用\n```\ns.encode('utf-8') # 将s由unicode转码成utf-8\ns.decode('GBK') # s是GBK编码,将s转换成unicode\n```\n### 2.2 isinstance()\n```\nisinstance(s , unicode) # 检测s是否是unicode编码\n\nisinstance(s , str) # 检测s是否是str格式\n```\n\n\n# 3 beautifulsoup编码问题\n\n### Beautiful Soup 会按顺序尝试不同的编码将你的文档转换为Unicode：\n+   可以通过from_encoding参数传递编码类型给soup的构造器\n+   通过文档本身找到编码类型：例如XML的声明或者HTML文档http-equiv的META标签。 \n+   如果Beautiful Soup在文档中发现编码类型，它试着使用找到的类型转换文档。 +\n+   但是，如果你明显的指定一个编码类型， \n+   并且成功使用了编码：这时它会忽略任何它在文档中发现的编码类型。\n+   通过嗅探文件开头的一下数据，判断编码。如果编码类型可以被检测到，\n+   它将是这些中的一个：UTF-*编码，EBCDIC或者ASCII。\n+   通过chardet库,嗅探编码，如果你安装了这个库。\n+   UTF-8\n+   Windows-1252\n\n一般来说,bs的自动识别,是不会有问题的,但是在我这里除了问题,具体原因不太清楚\n我的网页上已经声明了是`utf-8`编码\n原来代码如下\n```\n# 这是原来的编码,在win下面乱码\nself.soup = bs((response.read()))\nprint self.soup.originalEncoding   # 此处结果竟然返回Windows-1252\n```\n修改后代码如下\n```\n# win下乱码的关键在这里,beautifulsoup解析的编码不对,我们这里直接指定编码\nself.soup = bs((response.read()), from_encoding='utf-8')\nprint self.soup.originalEncoding   # 修正后代码正确返回'utf-8'\n```\n\n看来beautifulsoup的自动识别编码不能全部依赖.\n好不容易才定位到这里的问题,折腾了一天啊\n这里用了一个方法来检测编码.就是soup.iriginalEncoding属性\n```\nprint self.soup.originalEncoding   # 修正后代码正确返回'utf-8'\n```\n\n这篇博客好水,毕竟不是很懂,所以说不出来\n\nupdate:2015-03-30\n# 4 新技能get\n之前都没好好理解原作者的博客,觉得没办法一个程序在win和ubuntu中不更改正常运行,现在发现,如果把编码改为unicode格式输出,那么系统会自动转换,这样就不存在utf-8编码在windows下cmd乱码了.\n\n\n# 参考文献\n1 [【总结】Python 2.x中常见字符编码和解码方面的错误及其解决办法](http://www.crifan.com/summary_python_2_x_common_string_encode_decode_error_reason_and_solution/)\n2 [【已解决】python中文字符乱码（GB2312，GBK，GB18030相关的问题）](http://www.crifan.com/resolved_python_garbled_chinese_characters_gb2312_gbk_gb18030-related_issues/)\n参考资料太多,贴不过来啊,主要都是cifan的博客,里面资料很多,一步一步都有过程,非常好用,谢谢cifan作者\n","source":"_posts/python-blog-spider.md","raw":"title: python学习笔记--python和beautifulsoup遇到的编码问题\ndate: 2015-03-29 14:43:45\ntags:\n- python\n- 爬虫\ncategories:\n- python学习笔记\n---\n在刚开始使用github pages的时候,我用python写了一个爬虫,计划是从csdn和cnblogs等博客网站上,把自己之前写的博客爬取下来,然后再转换成hexo用的markdown格式,样就可以直接添加到我的github pages.\n>项目主页: https://github.com/Jackroyal/blog2markdown\n\n最近刚好在学习python,刚好就把它给优化了一下,顺便做了个跨平台(哈哈,win和ubuntu都可以跑哈),昨天遇到很蛋疼的问题,一它给了我很多思路帮助我定位问题,.直搞到凌晨两点才弄好.\n非常非常感谢[【总结】Python 2.x中常见字符编码和解码方面的错误及其解决办法](http://www.crifan.com/summary_python_2_x_common_string_encode_decode_error_reason_and_solution/)\n作者做了一个很好的总结,帮助我们定位问题.\n<!-- more -->\n\n# 1 编码类型\n首先确定好你的编码类型,比如一般推荐用utf-8.当确定编码类型后,就要保持统一,不要又弄些GBK的编码在里面.\n+ 1.1  编辑器编码\n    * 我们有时候会犯一个错误,我在py文件的头部声明当前文件是按照utf-8来编码.但是文件实际保存的编却不是utf-8,这样也会导致乱码.建议使用可以查看当前文件编码的编辑器,比如sublime text或者notepad++ 或者pycharm.<br>在sublime下如图所示<br>![sublime显示当前文件编码](http://ww2.sinaimg.cn/large/692869a3gw1eqmn535qb7j208u028t8k.jpg)\n    * 文件编码声明,我们要在py文件的头部添加一行`# -*- coding: utf-8 -*-`,表明我接下来要使用utf-8编码\n+ 1.2  python解释器\n    * 如果是Python的IDLE，如果你没修改defaultencoding，那么就使用默认的字符编码可以通过sys.getdefaultencoding()而获得，比如此处获得是：ascii<br>![win中python解释器编码](http://ww4.sinaimg.cn/large/692869a3gw1eqmnd8fgrjj20b205kabi.jpg)<br>![ubuntu终端解释器的编码](http://ww3.sinaimg.cn/large/692869a3gw1eqmnfd29u7j20k5047wfv.jpg)\n+ 1.3  执行python代码\n    * 其中，很常见的几种动作是：\n        * 打印print对应的所获得的字符\n            * 对于字符串打印,Python的逻辑:\n                * 如果是Unicode字符串,则可以,自动地,编码为对应的终端所用编码,然后正确的显示出来\n                * 比如unicode的字符串,输出到windows的默认编码为GBK的cmd中,则Python可以自动将Unicode编码为GBK,然后输出到cmd中\n                * 个别特殊情况,也会出错:\n                    * 当此unicode字符串中包含某特殊字符,而目标终端的编码集合中,没有此字符,则很明显也是无法实现将Unicode编码为对应的特定编码的字符串,无法正确显示的\n                * 如果是某种编码类型的str,则需要该str的编码类型,和目标终端编码匹配\n                    * 比如GBK的字符串,输出到windows的默认编码为GBK的cmd,则是可以正常输出的\n                    * 此处后来经过代码测试，就发现一个有趣或者说诡异的问题，虽然我们python文件声明的UTF-8编码，但是实际上实际上是用GBK编码，而此时，文件中的字符串，很明显是用GBK存储的，所以，将此GBK字符，输出到GBK的cmd中，是可以正常输出的。即，此处字符串的类型，很明显只和文件所用的实际编码有关，而和文件所声明的代码无关。\n                * 如果是UTF-8的字符串,输出到windows的默认编码为GBK的cmd,就会出错\n                    * 对相应的字符，进行编码（为某种特定类型的字符str），或解码（为对应的unicode类型的字符）\n                    * 比如将当前的某种编码的字符串，解码为Unicode字符串\n                        * 很明显，也是要保证，你字符串本身的编码和所指定的编码，两者之间要一致的\n                        * 比如：decodedUnicode = someUtf8Str.decode(\"UTF-8\")\n                        * 而如果用这样的：decodedUnicode = someGbkStr.decode(\"UTF-8\")，那就会出现错误\n\n# 2 常用方法\n### 2.1 encode和decode\nencode()  unicode编码->其他编码\n\ndecode()  其他编码->unicode编码\n\n使用这两个方法的前提是,你要知道当前是什么编码.然后用对应的编码去进行解码\n比如对于s字符串可以用\n```\ns.encode('utf-8') # 将s由unicode转码成utf-8\ns.decode('GBK') # s是GBK编码,将s转换成unicode\n```\n### 2.2 isinstance()\n```\nisinstance(s , unicode) # 检测s是否是unicode编码\n\nisinstance(s , str) # 检测s是否是str格式\n```\n\n\n# 3 beautifulsoup编码问题\n\n### Beautiful Soup 会按顺序尝试不同的编码将你的文档转换为Unicode：\n+   可以通过from_encoding参数传递编码类型给soup的构造器\n+   通过文档本身找到编码类型：例如XML的声明或者HTML文档http-equiv的META标签。 \n+   如果Beautiful Soup在文档中发现编码类型，它试着使用找到的类型转换文档。 +\n+   但是，如果你明显的指定一个编码类型， \n+   并且成功使用了编码：这时它会忽略任何它在文档中发现的编码类型。\n+   通过嗅探文件开头的一下数据，判断编码。如果编码类型可以被检测到，\n+   它将是这些中的一个：UTF-*编码，EBCDIC或者ASCII。\n+   通过chardet库,嗅探编码，如果你安装了这个库。\n+   UTF-8\n+   Windows-1252\n\n一般来说,bs的自动识别,是不会有问题的,但是在我这里除了问题,具体原因不太清楚\n我的网页上已经声明了是`utf-8`编码\n原来代码如下\n```\n# 这是原来的编码,在win下面乱码\nself.soup = bs((response.read()))\nprint self.soup.originalEncoding   # 此处结果竟然返回Windows-1252\n```\n修改后代码如下\n```\n# win下乱码的关键在这里,beautifulsoup解析的编码不对,我们这里直接指定编码\nself.soup = bs((response.read()), from_encoding='utf-8')\nprint self.soup.originalEncoding   # 修正后代码正确返回'utf-8'\n```\n\n看来beautifulsoup的自动识别编码不能全部依赖.\n好不容易才定位到这里的问题,折腾了一天啊\n这里用了一个方法来检测编码.就是soup.iriginalEncoding属性\n```\nprint self.soup.originalEncoding   # 修正后代码正确返回'utf-8'\n```\n\n这篇博客好水,毕竟不是很懂,所以说不出来\n\nupdate:2015-03-30\n# 4 新技能get\n之前都没好好理解原作者的博客,觉得没办法一个程序在win和ubuntu中不更改正常运行,现在发现,如果把编码改为unicode格式输出,那么系统会自动转换,这样就不存在utf-8编码在windows下cmd乱码了.\n\n\n# 参考文献\n1 [【总结】Python 2.x中常见字符编码和解码方面的错误及其解决办法](http://www.crifan.com/summary_python_2_x_common_string_encode_decode_error_reason_and_solution/)\n2 [【已解决】python中文字符乱码（GB2312，GBK，GB18030相关的问题）](http://www.crifan.com/resolved_python_garbled_chinese_characters_gb2312_gbk_gb18030-related_issues/)\n参考资料太多,贴不过来啊,主要都是cifan的博客,里面资料很多,一步一步都有过程,非常好用,谢谢cifan作者\n","slug":"python-blog-spider","published":1,"updated":"2015-10-29T06:08:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7ysd007px8cd5ulhtwc9","content":"<p>在刚开始使用github pages的时候,我用python写了一个爬虫,计划是从csdn和cnblogs等博客网站上,把自己之前写的博客爬取下来,然后再转换成hexo用的markdown格式,样就可以直接添加到我的github pages.</p>\n<blockquote>\n<p>项目主页: <a href=\"https://github.com/Jackroyal/blog2markdown\" target=\"_blank\" rel=\"external\">https://github.com/Jackroyal/blog2markdown</a></p>\n</blockquote>\n<p>最近刚好在学习python,刚好就把它给优化了一下,顺便做了个跨平台(哈哈,win和ubuntu都可以跑哈),昨天遇到很蛋疼的问题,一它给了我很多思路帮助我定位问题,.直搞到凌晨两点才弄好.<br>非常非常感谢<a href=\"http://www.crifan.com/summary_python_2_x_common_string_encode_decode_error_reason_and_solution/\" target=\"_blank\" rel=\"external\">【总结】Python 2.x中常见字符编码和解码方面的错误及其解决办法</a><br>作者做了一个很好的总结,帮助我们定位问题.<br><a id=\"more\"></a></p>\n<h1 id=\"1-编码类型\"><a href=\"#1-编码类型\" class=\"headerlink\" title=\"1 编码类型\"></a>1 编码类型</h1><p>首先确定好你的编码类型,比如一般推荐用utf-8.当确定编码类型后,就要保持统一,不要又弄些GBK的编码在里面.</p>\n<ul>\n<li>1.1  编辑器编码<ul>\n<li>我们有时候会犯一个错误,我在py文件的头部声明当前文件是按照utf-8来编码.但是文件实际保存的编却不是utf-8,这样也会导致乱码.建议使用可以查看当前文件编码的编辑器,比如sublime text或者notepad++ 或者pycharm.<br>在sublime下如图所示<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1eqmn535qb7j208u028t8k.jpg\" alt=\"sublime显示当前文件编码\"></li>\n<li>文件编码声明,我们要在py文件的头部添加一行<code># -*- coding: utf-8 -*-</code>,表明我接下来要使用utf-8编码</li>\n</ul>\n</li>\n<li>1.2  python解释器<ul>\n<li>如果是Python的IDLE，如果你没修改defaultencoding，那么就使用默认的字符编码可以通过sys.getdefaultencoding()而获得，比如此处获得是：ascii<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1eqmnd8fgrjj20b205kabi.jpg\" alt=\"win中python解释器编码\"><br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1eqmnfd29u7j20k5047wfv.jpg\" alt=\"ubuntu终端解释器的编码\"></li>\n</ul>\n</li>\n<li>1.3  执行python代码<ul>\n<li>其中，很常见的几种动作是：<ul>\n<li>打印print对应的所获得的字符<ul>\n<li>对于字符串打印,Python的逻辑:<ul>\n<li>如果是Unicode字符串,则可以,自动地,编码为对应的终端所用编码,然后正确的显示出来</li>\n<li>比如unicode的字符串,输出到windows的默认编码为GBK的cmd中,则Python可以自动将Unicode编码为GBK,然后输出到cmd中</li>\n<li>个别特殊情况,也会出错:<ul>\n<li>当此unicode字符串中包含某特殊字符,而目标终端的编码集合中,没有此字符,则很明显也是无法实现将Unicode编码为对应的特定编码的字符串,无法正确显示的</li>\n</ul>\n</li>\n<li>如果是某种编码类型的str,则需要该str的编码类型,和目标终端编码匹配<ul>\n<li>比如GBK的字符串,输出到windows的默认编码为GBK的cmd,则是可以正常输出的</li>\n<li>此处后来经过代码测试，就发现一个有趣或者说诡异的问题，虽然我们python文件声明的UTF-8编码，但是实际上实际上是用GBK编码，而此时，文件中的字符串，很明显是用GBK存储的，所以，将此GBK字符，输出到GBK的cmd中，是可以正常输出的。即，此处字符串的类型，很明显只和文件所用的实际编码有关，而和文件所声明的代码无关。</li>\n</ul>\n</li>\n<li>如果是UTF-8的字符串,输出到windows的默认编码为GBK的cmd,就会出错<ul>\n<li>对相应的字符，进行编码（为某种特定类型的字符str），或解码（为对应的unicode类型的字符）</li>\n<li>比如将当前的某种编码的字符串，解码为Unicode字符串<ul>\n<li>很明显，也是要保证，你字符串本身的编码和所指定的编码，两者之间要一致的</li>\n<li>比如：decodedUnicode = someUtf8Str.decode(“UTF-8”)</li>\n<li>而如果用这样的：decodedUnicode = someGbkStr.decode(“UTF-8”)，那就会出现错误</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"2-常用方法\"><a href=\"#2-常用方法\" class=\"headerlink\" title=\"2 常用方法\"></a>2 常用方法</h1><h3 id=\"2-1-encode和decode\"><a href=\"#2-1-encode和decode\" class=\"headerlink\" title=\"2.1 encode和decode\"></a>2.1 encode和decode</h3><p>encode()  unicode编码-&gt;其他编码</p>\n<p>decode()  其他编码-&gt;unicode编码</p>\n<p>使用这两个方法的前提是,你要知道当前是什么编码.然后用对应的编码去进行解码<br>比如对于s字符串可以用<br><figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">s.encode(<span class=\"string\">'utf-8'</span>) <span class=\"meta\"># 将s由unicode转码成utf-8</span></div><div class=\"line\">s.decode(<span class=\"string\">'GBK'</span>) <span class=\"meta\"># s是GBK编码,将s转换成unicode</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"2-2-isinstance\"><a href=\"#2-2-isinstance\" class=\"headerlink\" title=\"2.2 isinstance()\"></a>2.2 isinstance()</h3><figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">isinstance(s , unicode) <span class=\"meta\"># 检测s是否是unicode编码</span></div><div class=\"line\"></div><div class=\"line\">isinstance(s , <span class=\"keyword\">str</span>) <span class=\"meta\"># 检测s是否是str格式</span></div></pre></td></tr></table></figure>\n<h1 id=\"3-beautifulsoup编码问题\"><a href=\"#3-beautifulsoup编码问题\" class=\"headerlink\" title=\"3 beautifulsoup编码问题\"></a>3 beautifulsoup编码问题</h1><h3 id=\"Beautiful-Soup-会按顺序尝试不同的编码将你的文档转换为Unicode：\"><a href=\"#Beautiful-Soup-会按顺序尝试不同的编码将你的文档转换为Unicode：\" class=\"headerlink\" title=\"Beautiful Soup 会按顺序尝试不同的编码将你的文档转换为Unicode：\"></a>Beautiful Soup 会按顺序尝试不同的编码将你的文档转换为Unicode：</h3><ul>\n<li>可以通过from_encoding参数传递编码类型给soup的构造器</li>\n<li>通过文档本身找到编码类型：例如XML的声明或者HTML文档http-equiv的META标签。 </li>\n<li>如果Beautiful Soup在文档中发现编码类型，它试着使用找到的类型转换文档。 +</li>\n<li>但是，如果你明显的指定一个编码类型， </li>\n<li>并且成功使用了编码：这时它会忽略任何它在文档中发现的编码类型。</li>\n<li>通过嗅探文件开头的一下数据，判断编码。如果编码类型可以被检测到，</li>\n<li>它将是这些中的一个：UTF-*编码，EBCDIC或者ASCII。</li>\n<li>通过chardet库,嗅探编码，如果你安装了这个库。</li>\n<li>UTF-8</li>\n<li>Windows-1252</li>\n</ul>\n<p>一般来说,bs的自动识别,是不会有问题的,但是在我这里除了问题,具体原因不太清楚<br>我的网页上已经声明了是<code>utf-8</code>编码<br>原来代码如下<br><figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># 这是原来的编码,在win下面乱码</span></div><div class=\"line\"><span class=\"built_in\">self</span>.soup = bs((response.read()))</div><div class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">self</span>.soup.originalEncoding<span class=\"meta\">   # 此处结果竟然返回Windows-1252</span></div></pre></td></tr></table></figure></p>\n<p>修改后代码如下<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># win下乱码的关键在这里,beautifulsoup解析的编码不对,我们这里直接指定编码</span></div><div class=\"line\"><span class=\"keyword\">self</span>.soup = bs((response.read()), from_encoding=<span class=\"string\">'utf-8'</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"keyword\">self</span>.soup.originalEncoding   <span class=\"comment\"># 修正后代码正确返回'utf-8'</span></div></pre></td></tr></table></figure></p>\n<p>看来beautifulsoup的自动识别编码不能全部依赖.<br>好不容易才定位到这里的问题,折腾了一天啊<br>这里用了一个方法来检测编码.就是soup.iriginalEncoding属性<br><figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">self</span>.soup.originalEncoding<span class=\"meta\">   # 修正后代码正确返回'utf-8'</span></div></pre></td></tr></table></figure></p>\n<p>这篇博客好水,毕竟不是很懂,所以说不出来</p>\n<p>update:2015-03-30</p>\n<h1 id=\"4-新技能get\"><a href=\"#4-新技能get\" class=\"headerlink\" title=\"4 新技能get\"></a>4 新技能get</h1><p>之前都没好好理解原作者的博客,觉得没办法一个程序在win和ubuntu中不更改正常运行,现在发现,如果把编码改为unicode格式输出,那么系统会自动转换,这样就不存在utf-8编码在windows下cmd乱码了.</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"http://www.crifan.com/summary_python_2_x_common_string_encode_decode_error_reason_and_solution/\" target=\"_blank\" rel=\"external\">【总结】Python 2.x中常见字符编码和解码方面的错误及其解决办法</a><br>2 <a href=\"http://www.crifan.com/resolved_python_garbled_chinese_characters_gb2312_gbk_gb18030-related_issues/\" target=\"_blank\" rel=\"external\">【已解决】python中文字符乱码（GB2312，GBK，GB18030相关的问题）</a><br>参考资料太多,贴不过来啊,主要都是cifan的博客,里面资料很多,一步一步都有过程,非常好用,谢谢cifan作者</p>\n","excerpt":"<p>在刚开始使用github pages的时候,我用python写了一个爬虫,计划是从csdn和cnblogs等博客网站上,把自己之前写的博客爬取下来,然后再转换成hexo用的markdown格式,样就可以直接添加到我的github pages.</p>\n<blockquote>\n<p>项目主页: <a href=\"https://github.com/Jackroyal/blog2markdown\">https://github.com/Jackroyal/blog2markdown</a></p>\n</blockquote>\n<p>最近刚好在学习python,刚好就把它给优化了一下,顺便做了个跨平台(哈哈,win和ubuntu都可以跑哈),昨天遇到很蛋疼的问题,一它给了我很多思路帮助我定位问题,.直搞到凌晨两点才弄好.<br>非常非常感谢<a href=\"http://www.crifan.com/summary_python_2_x_common_string_encode_decode_error_reason_and_solution/\">【总结】Python 2.x中常见字符编码和解码方面的错误及其解决办法</a><br>作者做了一个很好的总结,帮助我们定位问题.<br>","more":"</p>\n<h1 id=\"1-编码类型\"><a href=\"#1-编码类型\" class=\"headerlink\" title=\"1 编码类型\"></a>1 编码类型</h1><p>首先确定好你的编码类型,比如一般推荐用utf-8.当确定编码类型后,就要保持统一,不要又弄些GBK的编码在里面.</p>\n<ul>\n<li>1.1  编辑器编码<ul>\n<li>我们有时候会犯一个错误,我在py文件的头部声明当前文件是按照utf-8来编码.但是文件实际保存的编却不是utf-8,这样也会导致乱码.建议使用可以查看当前文件编码的编辑器,比如sublime text或者notepad++ 或者pycharm.<br>在sublime下如图所示<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1eqmn535qb7j208u028t8k.jpg\" alt=\"sublime显示当前文件编码\"></li>\n<li>文件编码声明,我们要在py文件的头部添加一行<code># -*- coding: utf-8 -*-</code>,表明我接下来要使用utf-8编码</li>\n</ul>\n</li>\n<li>1.2  python解释器<ul>\n<li>如果是Python的IDLE，如果你没修改defaultencoding，那么就使用默认的字符编码可以通过sys.getdefaultencoding()而获得，比如此处获得是：ascii<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1eqmnd8fgrjj20b205kabi.jpg\" alt=\"win中python解释器编码\"><br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1eqmnfd29u7j20k5047wfv.jpg\" alt=\"ubuntu终端解释器的编码\"></li>\n</ul>\n</li>\n<li>1.3  执行python代码<ul>\n<li>其中，很常见的几种动作是：<ul>\n<li>打印print对应的所获得的字符<ul>\n<li>对于字符串打印,Python的逻辑:<ul>\n<li>如果是Unicode字符串,则可以,自动地,编码为对应的终端所用编码,然后正确的显示出来</li>\n<li>比如unicode的字符串,输出到windows的默认编码为GBK的cmd中,则Python可以自动将Unicode编码为GBK,然后输出到cmd中</li>\n<li>个别特殊情况,也会出错:<ul>\n<li>当此unicode字符串中包含某特殊字符,而目标终端的编码集合中,没有此字符,则很明显也是无法实现将Unicode编码为对应的特定编码的字符串,无法正确显示的</li>\n</ul>\n</li>\n<li>如果是某种编码类型的str,则需要该str的编码类型,和目标终端编码匹配<ul>\n<li>比如GBK的字符串,输出到windows的默认编码为GBK的cmd,则是可以正常输出的</li>\n<li>此处后来经过代码测试，就发现一个有趣或者说诡异的问题，虽然我们python文件声明的UTF-8编码，但是实际上实际上是用GBK编码，而此时，文件中的字符串，很明显是用GBK存储的，所以，将此GBK字符，输出到GBK的cmd中，是可以正常输出的。即，此处字符串的类型，很明显只和文件所用的实际编码有关，而和文件所声明的代码无关。</li>\n</ul>\n</li>\n<li>如果是UTF-8的字符串,输出到windows的默认编码为GBK的cmd,就会出错<ul>\n<li>对相应的字符，进行编码（为某种特定类型的字符str），或解码（为对应的unicode类型的字符）</li>\n<li>比如将当前的某种编码的字符串，解码为Unicode字符串<ul>\n<li>很明显，也是要保证，你字符串本身的编码和所指定的编码，两者之间要一致的</li>\n<li>比如：decodedUnicode = someUtf8Str.decode(“UTF-8”)</li>\n<li>而如果用这样的：decodedUnicode = someGbkStr.decode(“UTF-8”)，那就会出现错误</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"2-常用方法\"><a href=\"#2-常用方法\" class=\"headerlink\" title=\"2 常用方法\"></a>2 常用方法</h1><h3 id=\"2-1-encode和decode\"><a href=\"#2-1-encode和decode\" class=\"headerlink\" title=\"2.1 encode和decode\"></a>2.1 encode和decode</h3><p>encode()  unicode编码-&gt;其他编码</p>\n<p>decode()  其他编码-&gt;unicode编码</p>\n<p>使用这两个方法的前提是,你要知道当前是什么编码.然后用对应的编码去进行解码<br>比如对于s字符串可以用<br><figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">s.encode(<span class=\"string\">'utf-8'</span>) <span class=\"meta\"># 将s由unicode转码成utf-8</span></div><div class=\"line\">s.decode(<span class=\"string\">'GBK'</span>) <span class=\"meta\"># s是GBK编码,将s转换成unicode</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"2-2-isinstance\"><a href=\"#2-2-isinstance\" class=\"headerlink\" title=\"2.2 isinstance()\"></a>2.2 isinstance()</h3><figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">isinstance(s , unicode) <span class=\"meta\"># 检测s是否是unicode编码</span></div><div class=\"line\"></div><div class=\"line\">isinstance(s , <span class=\"keyword\">str</span>) <span class=\"meta\"># 检测s是否是str格式</span></div></pre></td></tr></table></figure>\n<h1 id=\"3-beautifulsoup编码问题\"><a href=\"#3-beautifulsoup编码问题\" class=\"headerlink\" title=\"3 beautifulsoup编码问题\"></a>3 beautifulsoup编码问题</h1><h3 id=\"Beautiful-Soup-会按顺序尝试不同的编码将你的文档转换为Unicode：\"><a href=\"#Beautiful-Soup-会按顺序尝试不同的编码将你的文档转换为Unicode：\" class=\"headerlink\" title=\"Beautiful Soup 会按顺序尝试不同的编码将你的文档转换为Unicode：\"></a>Beautiful Soup 会按顺序尝试不同的编码将你的文档转换为Unicode：</h3><ul>\n<li>可以通过from_encoding参数传递编码类型给soup的构造器</li>\n<li>通过文档本身找到编码类型：例如XML的声明或者HTML文档http-equiv的META标签。 </li>\n<li>如果Beautiful Soup在文档中发现编码类型，它试着使用找到的类型转换文档。 +</li>\n<li>但是，如果你明显的指定一个编码类型， </li>\n<li>并且成功使用了编码：这时它会忽略任何它在文档中发现的编码类型。</li>\n<li>通过嗅探文件开头的一下数据，判断编码。如果编码类型可以被检测到，</li>\n<li>它将是这些中的一个：UTF-*编码，EBCDIC或者ASCII。</li>\n<li>通过chardet库,嗅探编码，如果你安装了这个库。</li>\n<li>UTF-8</li>\n<li>Windows-1252</li>\n</ul>\n<p>一般来说,bs的自动识别,是不会有问题的,但是在我这里除了问题,具体原因不太清楚<br>我的网页上已经声明了是<code>utf-8</code>编码<br>原来代码如下<br><figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># 这是原来的编码,在win下面乱码</span></div><div class=\"line\"><span class=\"built_in\">self</span>.soup = bs((response.read()))</div><div class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">self</span>.soup.originalEncoding<span class=\"meta\">   # 此处结果竟然返回Windows-1252</span></div></pre></td></tr></table></figure></p>\n<p>修改后代码如下<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># win下乱码的关键在这里,beautifulsoup解析的编码不对,我们这里直接指定编码</span></div><div class=\"line\"><span class=\"keyword\">self</span>.soup = bs((response.read()), from_encoding=<span class=\"string\">'utf-8'</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"keyword\">self</span>.soup.originalEncoding   <span class=\"comment\"># 修正后代码正确返回'utf-8'</span></div></pre></td></tr></table></figure></p>\n<p>看来beautifulsoup的自动识别编码不能全部依赖.<br>好不容易才定位到这里的问题,折腾了一天啊<br>这里用了一个方法来检测编码.就是soup.iriginalEncoding属性<br><figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">self</span>.soup.originalEncoding<span class=\"meta\">   # 修正后代码正确返回'utf-8'</span></div></pre></td></tr></table></figure></p>\n<p>这篇博客好水,毕竟不是很懂,所以说不出来</p>\n<p>update:2015-03-30</p>\n<h1 id=\"4-新技能get\"><a href=\"#4-新技能get\" class=\"headerlink\" title=\"4 新技能get\"></a>4 新技能get</h1><p>之前都没好好理解原作者的博客,觉得没办法一个程序在win和ubuntu中不更改正常运行,现在发现,如果把编码改为unicode格式输出,那么系统会自动转换,这样就不存在utf-8编码在windows下cmd乱码了.</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"http://www.crifan.com/summary_python_2_x_common_string_encode_decode_error_reason_and_solution/\">【总结】Python 2.x中常见字符编码和解码方面的错误及其解决办法</a><br>2 <a href=\"http://www.crifan.com/resolved_python_garbled_chinese_characters_gb2312_gbk_gb18030-related_issues/\">【已解决】python中文字符乱码（GB2312，GBK，GB18030相关的问题）</a><br>参考资料太多,贴不过来啊,主要都是cifan的博客,里面资料很多,一步一步都有过程,非常好用,谢谢cifan作者</p>"},{"title":"python学习笔记--socket编程端口复用","date":"2015-03-18T00:47:02.000Z","_content":"最近在学习socket编程,遇到一个问题:\n我先bind一个端口后,如果通过ctr+c关闭进程.接下来执行程序的时候,就会提示`socket.error: Address already in use`.\n<!-- more -->\n照例google一番,找到[这个](http://blog.csdn.net/xl_xunzhao/article/details/3130037).博主说的情况和我的一样.\n我还在stackoverflow上找到[这个](http://stackoverflow.com/questions/4465959/python-errno-98-address-already-in-use).\n修改后代码如下:\n```\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # 下面这行是关健\n    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n\n    server_socket.bind(('', PORT))\n    server_socket.listen(5)\n```\n然后就搞定了.\n\n下面的代码是socket编程敲得两个小例子,基于socket的聊天小程序都是别人的东西,只是练习一下,源地址在本文最后.\n## 多线程版本服务器端程序server2.py\n```\n# !/usr/bin/env python\n# -*- coding:utf-8-*-\n__author__ = 'chen'\n\n\nimport socket,sys\nfrom thread import *\n\nHOST = ''\nPORT = 8888\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nprint 'socket created'\n\ntry:\n    s.bind((HOST, PORT))\nexcept socket.error, msg:\n    print 'bind failed.Error code: |||%S Message: %s' %(str(msg[0]), msg[1])\n    sys.exit()\n\n\nprint 'socket bind complete'\n\ns.listen(10)\nprint 'socket now listening'\n\ndef clientthread(conn):\n    conn.send('welcome to the server.Type something and hit enter\\n')\n\n    while True:\n        data = conn.recv(1024)\n        reply = 'ok...' + data\n        if not data:\n            break\n        conn.sendall(reply)\n    conn.close()\n\nwhile 1:\n    conn, addr = s.accept()\n    print 'connected with %s : %s' %(addr[0],str(addr[1]))\n\n    start_new_thread(clientthread, (conn,))\n\ns.close()\n```\n直接telnet连接socket,就可以调试\n```\ntelnet localhost 8888\n```\n## 改良版,带广播的聊天室程序server3.py\n```\n# !/usr/bin/env python\n# -*- coding:utf-8-*-\n__author__ = 'chen'\n\nimport socket, select\n\ndef broadcast_data(sock, message):\n    for socket in CONNECTION_LIST:\n        if socket != server_socket != sock:\n            try:\n                socket.send(message)\n            except msg:\n                socket.close()\n                CONNECTION_LIST.remove(socket)\n\nif __name__ == \"__main__\":\n    CONNECTION_LIST = []\n    RECV_BUFFER = 4096\n    PORT = 5000\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    server_socket.bind(('', PORT))\n    server_socket.listen(5)\n\n    CONNECTION_LIST.append(server_socket)\n    print \"chat server started on port %s\" % str(PORT)\n\n    while 1:\n        read_sockets, write_sockets,error_sockets = select.select(CONNECTION_LIST, [], [])\n\n        for sock in read_sockets:\n            if sock == server_socket:\n                sockfd,addr = server_socket.accept()\n                CONNECTION_LIST.append(sockfd)\n                print \"client (%s, %s) connected\" % addr\n\n                broadcast_data(sockfd, \"[%s:%s] entered room\\n\" % addr)\n\n            else:\n                try:\n                    data = sock.recv(RECV_BUFFER)\n                    if data:\n                        print  \"[%s:%s]\" % (str(sock.getpeername()), data)\n                        broadcast_data(sock, \"[%s:%s]\" % (str(sock.getpeername()), data))\n                except msg:\n                    print msg\n                    broadcast_data(sock, \"client (%s, %s) is offline \"% addr)\n                    print \"client (%s,%s) is offline \" % addr\n                    sock.close()\n                    CONNECTION_LIST.remove(sock)\n                    continue\n    server_socket.close()\n```\n## 客户端程序client3.py\n```\n# !/usr/bin/env python\n# -*- coding:utf-8-*-\n__author__ = 'chen'\n\nimport socket,select,string,sys\n\ndef prompt():\n    sys.stdout.write('[you]')\n    sys.stdout.flush()\n\nif __name__ == \"__main__\":\n    if(len(sys.argv)<3):\n        print 'usage: python client3.py hostname port'\n        sys.exit()\n\n    host = sys.argv[1]\n    port = int(sys.argv[2])\n\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.settimeout(2)\n\n    try:\n        s.connect((host, port))\n    except:\n        print 'unable to connect'\n        sys.exit()\n\n    print 'connected to remote host. start sending messages'\n    prompt()\n\n    while 1:\n        rlist = [sys.stdin, s]\n\n        read_list, write_list, error_list = select.select(rlist, [], [])\n\n        for sock in read_list:\n            if sock == s:\n                data = sock.recv(4096)\n                if not data:\n                    print '\\nDisconnected from chat server'\n                    sys.exit()\n                else:\n                    sys.stdout.write(data)\n                    prompt()\n\n            else:\n                msg = sys.stdin.readline()\n                s.send(msg)\n                prompt()\n```\n---\n# 参考文献\n1 [Python Socket 网络编程](http://www.cnblogs.com/hazir/p/python_socket_programming.html)\n2 [Python Socket 编程——聊天室示例程序](http://www.cnblogs.com/hazir/p/python_chat_room.html)\n","source":"_posts/python-socket-port-reuse.md","raw":"title: python学习笔记--socket编程端口复用\ndate: 2015-03-18 08:47:02\ntags:\n- python\n- socket\n- Linux\ncategories:\n- python学习笔记\n---\n最近在学习socket编程,遇到一个问题:\n我先bind一个端口后,如果通过ctr+c关闭进程.接下来执行程序的时候,就会提示`socket.error: Address already in use`.\n<!-- more -->\n照例google一番,找到[这个](http://blog.csdn.net/xl_xunzhao/article/details/3130037).博主说的情况和我的一样.\n我还在stackoverflow上找到[这个](http://stackoverflow.com/questions/4465959/python-errno-98-address-already-in-use).\n修改后代码如下:\n```\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # 下面这行是关健\n    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n\n    server_socket.bind(('', PORT))\n    server_socket.listen(5)\n```\n然后就搞定了.\n\n下面的代码是socket编程敲得两个小例子,基于socket的聊天小程序都是别人的东西,只是练习一下,源地址在本文最后.\n## 多线程版本服务器端程序server2.py\n```\n# !/usr/bin/env python\n# -*- coding:utf-8-*-\n__author__ = 'chen'\n\n\nimport socket,sys\nfrom thread import *\n\nHOST = ''\nPORT = 8888\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nprint 'socket created'\n\ntry:\n    s.bind((HOST, PORT))\nexcept socket.error, msg:\n    print 'bind failed.Error code: |||%S Message: %s' %(str(msg[0]), msg[1])\n    sys.exit()\n\n\nprint 'socket bind complete'\n\ns.listen(10)\nprint 'socket now listening'\n\ndef clientthread(conn):\n    conn.send('welcome to the server.Type something and hit enter\\n')\n\n    while True:\n        data = conn.recv(1024)\n        reply = 'ok...' + data\n        if not data:\n            break\n        conn.sendall(reply)\n    conn.close()\n\nwhile 1:\n    conn, addr = s.accept()\n    print 'connected with %s : %s' %(addr[0],str(addr[1]))\n\n    start_new_thread(clientthread, (conn,))\n\ns.close()\n```\n直接telnet连接socket,就可以调试\n```\ntelnet localhost 8888\n```\n## 改良版,带广播的聊天室程序server3.py\n```\n# !/usr/bin/env python\n# -*- coding:utf-8-*-\n__author__ = 'chen'\n\nimport socket, select\n\ndef broadcast_data(sock, message):\n    for socket in CONNECTION_LIST:\n        if socket != server_socket != sock:\n            try:\n                socket.send(message)\n            except msg:\n                socket.close()\n                CONNECTION_LIST.remove(socket)\n\nif __name__ == \"__main__\":\n    CONNECTION_LIST = []\n    RECV_BUFFER = 4096\n    PORT = 5000\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    server_socket.bind(('', PORT))\n    server_socket.listen(5)\n\n    CONNECTION_LIST.append(server_socket)\n    print \"chat server started on port %s\" % str(PORT)\n\n    while 1:\n        read_sockets, write_sockets,error_sockets = select.select(CONNECTION_LIST, [], [])\n\n        for sock in read_sockets:\n            if sock == server_socket:\n                sockfd,addr = server_socket.accept()\n                CONNECTION_LIST.append(sockfd)\n                print \"client (%s, %s) connected\" % addr\n\n                broadcast_data(sockfd, \"[%s:%s] entered room\\n\" % addr)\n\n            else:\n                try:\n                    data = sock.recv(RECV_BUFFER)\n                    if data:\n                        print  \"[%s:%s]\" % (str(sock.getpeername()), data)\n                        broadcast_data(sock, \"[%s:%s]\" % (str(sock.getpeername()), data))\n                except msg:\n                    print msg\n                    broadcast_data(sock, \"client (%s, %s) is offline \"% addr)\n                    print \"client (%s,%s) is offline \" % addr\n                    sock.close()\n                    CONNECTION_LIST.remove(sock)\n                    continue\n    server_socket.close()\n```\n## 客户端程序client3.py\n```\n# !/usr/bin/env python\n# -*- coding:utf-8-*-\n__author__ = 'chen'\n\nimport socket,select,string,sys\n\ndef prompt():\n    sys.stdout.write('[you]')\n    sys.stdout.flush()\n\nif __name__ == \"__main__\":\n    if(len(sys.argv)<3):\n        print 'usage: python client3.py hostname port'\n        sys.exit()\n\n    host = sys.argv[1]\n    port = int(sys.argv[2])\n\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.settimeout(2)\n\n    try:\n        s.connect((host, port))\n    except:\n        print 'unable to connect'\n        sys.exit()\n\n    print 'connected to remote host. start sending messages'\n    prompt()\n\n    while 1:\n        rlist = [sys.stdin, s]\n\n        read_list, write_list, error_list = select.select(rlist, [], [])\n\n        for sock in read_list:\n            if sock == s:\n                data = sock.recv(4096)\n                if not data:\n                    print '\\nDisconnected from chat server'\n                    sys.exit()\n                else:\n                    sys.stdout.write(data)\n                    prompt()\n\n            else:\n                msg = sys.stdin.readline()\n                s.send(msg)\n                prompt()\n```\n---\n# 参考文献\n1 [Python Socket 网络编程](http://www.cnblogs.com/hazir/p/python_socket_programming.html)\n2 [Python Socket 编程——聊天室示例程序](http://www.cnblogs.com/hazir/p/python_chat_room.html)\n","slug":"python-socket-port-reuse","published":1,"updated":"2015-10-29T06:08:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yse007rx8cdkfe8vtu1","content":"<p>最近在学习socket编程,遇到一个问题:<br>我先bind一个端口后,如果通过ctr+c关闭进程.接下来执行程序的时候,就会提示<code>socket.error: Address already in use</code>.<br><a id=\"more\"></a><br>照例google一番,找到<a href=\"http://blog.csdn.net/xl_xunzhao/article/details/3130037\" target=\"_blank\" rel=\"external\">这个</a>.博主说的情况和我的一样.<br>我还在stackoverflow上找到<a href=\"http://stackoverflow.com/questions/4465959/python-errno-98-address-already-in-use\" target=\"_blank\" rel=\"external\">这个</a>.<br>修改后代码如下:<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">server_socket = <span class=\"built_in\">socket</span>.<span class=\"built_in\">socket</span>(<span class=\"built_in\">socket</span>.AF_INET, <span class=\"built_in\">socket</span>.SOCK_STREAM)</div><div class=\"line\"><span class=\"comment\"># 下面这行是关健</span></div><div class=\"line\">server_socket.setsockopt(<span class=\"built_in\">socket</span>.SOL_SOCKET, <span class=\"built_in\">socket</span>.SO_REUSEADDR, <span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\">server_socket.bind((<span class=\"string\">''</span>, PORT))</div><div class=\"line\">server_socket.listen(<span class=\"number\">5</span>)</div></pre></td></tr></table></figure></p>\n<p>然后就搞定了.</p>\n<p>下面的代码是socket编程敲得两个小例子,基于socket的聊天小程序都是别人的东西,只是练习一下,源地址在本文最后.</p>\n<h2 id=\"多线程版本服务器端程序server2-py\"><a href=\"#多线程版本服务器端程序server2-py\" class=\"headerlink\" title=\"多线程版本服务器端程序server2.py\"></a>多线程版本服务器端程序server2.py</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># !/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8-*-</span></div><div class=\"line\">__author__ = <span class=\"string\">'chen'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> socket,sys</div><div class=\"line\"><span class=\"keyword\">from</span> thread <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">HOST = <span class=\"string\">''</span></div><div class=\"line\">PORT = <span class=\"number\">8888</span></div><div class=\"line\"></div><div class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'socket created'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">try</span>:</div><div class=\"line\">    s.bind((HOST, PORT))</div><div class=\"line\"><span class=\"keyword\">except</span> socket.error, msg:</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'bind failed.Error code: |||%S Message: %s'</span> %(str(msg[<span class=\"number\">0</span>]), msg[<span class=\"number\">1</span>])</div><div class=\"line\">    sys.exit()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'socket bind complete'</span></div><div class=\"line\"></div><div class=\"line\">s.listen(<span class=\"number\">10</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'socket now listening'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clientthread</span><span class=\"params\">(conn)</span>:</span></div><div class=\"line\">    conn.send(<span class=\"string\">'welcome to the server.Type something and hit enter\\n'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">        data = conn.recv(<span class=\"number\">1024</span>)</div><div class=\"line\">        reply = <span class=\"string\">'ok...'</span> + data</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</div><div class=\"line\">            <span class=\"keyword\">break</span></div><div class=\"line\">        conn.sendall(reply)</div><div class=\"line\">    conn.close()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"number\">1</span>:</div><div class=\"line\">    conn, addr = s.accept()</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'connected with %s : %s'</span> %(addr[<span class=\"number\">0</span>],str(addr[<span class=\"number\">1</span>]))</div><div class=\"line\"></div><div class=\"line\">    start_new_thread(clientthread, (conn,))</div><div class=\"line\"></div><div class=\"line\">s.close()</div></pre></td></tr></table></figure>\n<p>直接telnet连接socket,就可以调试<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">telnet localhost <span class=\"number\">8888</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"改良版-带广播的聊天室程序server3-py\"><a href=\"#改良版-带广播的聊天室程序server3-py\" class=\"headerlink\" title=\"改良版,带广播的聊天室程序server3.py\"></a>改良版,带广播的聊天室程序server3.py</h2><figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># !/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8-*-</span></div><div class=\"line\">__author_<span class=\"number\">_</span> = <span class=\"string\">'chen'</span></div><div class=\"line\"></div><div class=\"line\">import <span class=\"keyword\">socket</span>, <span class=\"keyword\">select</span></div><div class=\"line\"></div><div class=\"line\">def broadcast_data(sock, message):</div><div class=\"line\">    <span class=\"keyword\">for</span> <span class=\"keyword\">socket</span> in CONNECTION_LIST:</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">socket</span> != server_socket != sock:</div><div class=\"line\">            try:</div><div class=\"line\">                socket.send(message)</div><div class=\"line\">            except msg:</div><div class=\"line\">                socket.close()</div><div class=\"line\">                CONNECTION_LIST.remove(<span class=\"keyword\">socket</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name_<span class=\"number\">_</span> == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    CONNECTION_LIST = []</div><div class=\"line\">    RECV_BUFFER = <span class=\"number\">4096</span></div><div class=\"line\">    PORT = <span class=\"number\">5000</span></div><div class=\"line\">    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class=\"line\">    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class=\"number\">1</span>)</div><div class=\"line\">    server_socket.bind((<span class=\"string\">''</span>, PORT))</div><div class=\"line\">    server_socket.listen(<span class=\"number\">5</span>)</div><div class=\"line\"></div><div class=\"line\">    CONNECTION_LIST.append(server_socket)</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"chat server started on port %s\"</span> % str(PORT)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</div><div class=\"line\">        read_sockets, write_sockets,error_sockets = select.select(CONNECTION_LIST, [], [])</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> sock in read_sockets:</div><div class=\"line\">            <span class=\"keyword\">if</span> sock == server_socket:</div><div class=\"line\">                sockfd,addr = server_socket.accept()</div><div class=\"line\">                CONNECTION_LIST.append(sockfd)</div><div class=\"line\">                <span class=\"keyword\">print</span> <span class=\"string\">\"client (%s, %s) connected\"</span> % addr</div><div class=\"line\"></div><div class=\"line\">                broadcast_data(sockfd, <span class=\"string\">\"[%s:%s] entered room\\n\"</span> % addr)</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                try:</div><div class=\"line\">                    data = sock.recv(RECV_BUFFER)</div><div class=\"line\">                    <span class=\"keyword\">if</span> data:</div><div class=\"line\">                        <span class=\"keyword\">print</span>  <span class=\"string\">\"[%s:%s]\"</span> % (str(sock.getpeername()), data)</div><div class=\"line\">                        broadcast_data(sock, <span class=\"string\">\"[%s:%s]\"</span> % (str(sock.getpeername()), data))</div><div class=\"line\">                except msg:</div><div class=\"line\">                    <span class=\"keyword\">print</span> msg</div><div class=\"line\">                    broadcast_data(sock, <span class=\"string\">\"client (%s, %s) is offline \"</span>% addr)</div><div class=\"line\">                    <span class=\"keyword\">print</span> <span class=\"string\">\"client (%s,%s) is offline \"</span> % addr</div><div class=\"line\">                    sock.close()</div><div class=\"line\">                    CONNECTION_LIST.remove(sock)</div><div class=\"line\">                    <span class=\"keyword\">continue</span></div><div class=\"line\">    server_socket.close()</div></pre></td></tr></table></figure>\n<h2 id=\"客户端程序client3-py\"><a href=\"#客户端程序client3-py\" class=\"headerlink\" title=\"客户端程序client3.py\"></a>客户端程序client3.py</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># !/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8-*-</span></div><div class=\"line\">__author__ = <span class=\"string\">'chen'</span></div><div class=\"line\"></div><div class=\"line\">import socket,select,string,sys</div><div class=\"line\"></div><div class=\"line\">def prompt():</div><div class=\"line\">    sys.stdout.write(<span class=\"string\">'[you]'</span>)</div><div class=\"line\">    sys.stdout.flush()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    <span class=\"keyword\">if</span>(len(sys.argv)&lt;<span class=\"number\">3</span>):</div><div class=\"line\">        print <span class=\"string\">'usage: python client3.py hostname port'</span></div><div class=\"line\">        sys.<span class=\"keyword\">exit</span>()</div><div class=\"line\"></div><div class=\"line\">    host = sys.argv[<span class=\"number\">1</span>]</div><div class=\"line\">    port = int(sys.argv[<span class=\"number\">2</span>])</div><div class=\"line\"></div><div class=\"line\">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class=\"line\">    s.settimeout(<span class=\"number\">2</span>)</div><div class=\"line\"></div><div class=\"line\">    try:</div><div class=\"line\">        s.connect((host, port))</div><div class=\"line\">    except:</div><div class=\"line\">        print <span class=\"string\">'unable to connect'</span></div><div class=\"line\">        sys.<span class=\"keyword\">exit</span>()</div><div class=\"line\"></div><div class=\"line\">    print <span class=\"string\">'connected to remote host. start sending messages'</span></div><div class=\"line\">    prompt()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</div><div class=\"line\">        rlist = [sys.stdin, s]</div><div class=\"line\"></div><div class=\"line\">        read_list, write_list, error_list = select.select(rlist, [], [])</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> sock <span class=\"keyword\">in</span> read_list:</div><div class=\"line\">            <span class=\"keyword\">if</span> sock == s:</div><div class=\"line\">                data = sock.recv(<span class=\"number\">4096</span>)</div><div class=\"line\">                <span class=\"keyword\">if</span> not data:</div><div class=\"line\">                    print <span class=\"string\">'\\nDisconnected from chat server'</span></div><div class=\"line\">                    sys.<span class=\"keyword\">exit</span>()</div><div class=\"line\">                <span class=\"keyword\">else</span>:</div><div class=\"line\">                    sys.stdout.write(data)</div><div class=\"line\">                    prompt()</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                msg = sys.stdin.readline()</div><div class=\"line\">                s.send(msg)</div><div class=\"line\">                prompt()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"http://www.cnblogs.com/hazir/p/python_socket_programming.html\" target=\"_blank\" rel=\"external\">Python Socket 网络编程</a><br>2 <a href=\"http://www.cnblogs.com/hazir/p/python_chat_room.html\" target=\"_blank\" rel=\"external\">Python Socket 编程——聊天室示例程序</a></p>\n","excerpt":"<p>最近在学习socket编程,遇到一个问题:<br>我先bind一个端口后,如果通过ctr+c关闭进程.接下来执行程序的时候,就会提示<code>socket.error: Address already in use</code>.<br>","more":"<br>照例google一番,找到<a href=\"http://blog.csdn.net/xl_xunzhao/article/details/3130037\">这个</a>.博主说的情况和我的一样.<br>我还在stackoverflow上找到<a href=\"http://stackoverflow.com/questions/4465959/python-errno-98-address-already-in-use\">这个</a>.<br>修改后代码如下:<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">server_socket = <span class=\"built_in\">socket</span>.<span class=\"built_in\">socket</span>(<span class=\"built_in\">socket</span>.AF_INET, <span class=\"built_in\">socket</span>.SOCK_STREAM)</div><div class=\"line\"><span class=\"comment\"># 下面这行是关健</span></div><div class=\"line\">server_socket.setsockopt(<span class=\"built_in\">socket</span>.SOL_SOCKET, <span class=\"built_in\">socket</span>.SO_REUSEADDR, <span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\">server_socket.bind((<span class=\"string\">''</span>, PORT))</div><div class=\"line\">server_socket.listen(<span class=\"number\">5</span>)</div></pre></td></tr></table></figure></p>\n<p>然后就搞定了.</p>\n<p>下面的代码是socket编程敲得两个小例子,基于socket的聊天小程序都是别人的东西,只是练习一下,源地址在本文最后.</p>\n<h2 id=\"多线程版本服务器端程序server2-py\"><a href=\"#多线程版本服务器端程序server2-py\" class=\"headerlink\" title=\"多线程版本服务器端程序server2.py\"></a>多线程版本服务器端程序server2.py</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># !/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8-*-</span></div><div class=\"line\">__author__ = <span class=\"string\">'chen'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> socket,sys</div><div class=\"line\"><span class=\"keyword\">from</span> thread <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">HOST = <span class=\"string\">''</span></div><div class=\"line\">PORT = <span class=\"number\">8888</span></div><div class=\"line\"></div><div class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'socket created'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">try</span>:</div><div class=\"line\">    s.bind((HOST, PORT))</div><div class=\"line\"><span class=\"keyword\">except</span> socket.error, msg:</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'bind failed.Error code: |||%S Message: %s'</span> %(str(msg[<span class=\"number\">0</span>]), msg[<span class=\"number\">1</span>])</div><div class=\"line\">    sys.exit()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'socket bind complete'</span></div><div class=\"line\"></div><div class=\"line\">s.listen(<span class=\"number\">10</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'socket now listening'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clientthread</span><span class=\"params\">(conn)</span>:</span></div><div class=\"line\">    conn.send(<span class=\"string\">'welcome to the server.Type something and hit enter\\n'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">        data = conn.recv(<span class=\"number\">1024</span>)</div><div class=\"line\">        reply = <span class=\"string\">'ok...'</span> + data</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</div><div class=\"line\">            <span class=\"keyword\">break</span></div><div class=\"line\">        conn.sendall(reply)</div><div class=\"line\">    conn.close()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"number\">1</span>:</div><div class=\"line\">    conn, addr = s.accept()</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'connected with %s : %s'</span> %(addr[<span class=\"number\">0</span>],str(addr[<span class=\"number\">1</span>]))</div><div class=\"line\"></div><div class=\"line\">    start_new_thread(clientthread, (conn,))</div><div class=\"line\"></div><div class=\"line\">s.close()</div></pre></td></tr></table></figure>\n<p>直接telnet连接socket,就可以调试<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">telnet localhost <span class=\"number\">8888</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"改良版-带广播的聊天室程序server3-py\"><a href=\"#改良版-带广播的聊天室程序server3-py\" class=\"headerlink\" title=\"改良版,带广播的聊天室程序server3.py\"></a>改良版,带广播的聊天室程序server3.py</h2><figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># !/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8-*-</span></div><div class=\"line\">__author_<span class=\"number\">_</span> = <span class=\"string\">'chen'</span></div><div class=\"line\"></div><div class=\"line\">import <span class=\"keyword\">socket</span>, <span class=\"keyword\">select</span></div><div class=\"line\"></div><div class=\"line\">def broadcast_data(sock, message):</div><div class=\"line\">    <span class=\"keyword\">for</span> <span class=\"keyword\">socket</span> in CONNECTION_LIST:</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">socket</span> != server_socket != sock:</div><div class=\"line\">            try:</div><div class=\"line\">                socket.send(message)</div><div class=\"line\">            except msg:</div><div class=\"line\">                socket.close()</div><div class=\"line\">                CONNECTION_LIST.remove(<span class=\"keyword\">socket</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name_<span class=\"number\">_</span> == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    CONNECTION_LIST = []</div><div class=\"line\">    RECV_BUFFER = <span class=\"number\">4096</span></div><div class=\"line\">    PORT = <span class=\"number\">5000</span></div><div class=\"line\">    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class=\"line\">    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class=\"number\">1</span>)</div><div class=\"line\">    server_socket.bind((<span class=\"string\">''</span>, PORT))</div><div class=\"line\">    server_socket.listen(<span class=\"number\">5</span>)</div><div class=\"line\"></div><div class=\"line\">    CONNECTION_LIST.append(server_socket)</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"chat server started on port %s\"</span> % str(PORT)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</div><div class=\"line\">        read_sockets, write_sockets,error_sockets = select.select(CONNECTION_LIST, [], [])</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> sock in read_sockets:</div><div class=\"line\">            <span class=\"keyword\">if</span> sock == server_socket:</div><div class=\"line\">                sockfd,addr = server_socket.accept()</div><div class=\"line\">                CONNECTION_LIST.append(sockfd)</div><div class=\"line\">                <span class=\"keyword\">print</span> <span class=\"string\">\"client (%s, %s) connected\"</span> % addr</div><div class=\"line\"></div><div class=\"line\">                broadcast_data(sockfd, <span class=\"string\">\"[%s:%s] entered room\\n\"</span> % addr)</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                try:</div><div class=\"line\">                    data = sock.recv(RECV_BUFFER)</div><div class=\"line\">                    <span class=\"keyword\">if</span> data:</div><div class=\"line\">                        <span class=\"keyword\">print</span>  <span class=\"string\">\"[%s:%s]\"</span> % (str(sock.getpeername()), data)</div><div class=\"line\">                        broadcast_data(sock, <span class=\"string\">\"[%s:%s]\"</span> % (str(sock.getpeername()), data))</div><div class=\"line\">                except msg:</div><div class=\"line\">                    <span class=\"keyword\">print</span> msg</div><div class=\"line\">                    broadcast_data(sock, <span class=\"string\">\"client (%s, %s) is offline \"</span>% addr)</div><div class=\"line\">                    <span class=\"keyword\">print</span> <span class=\"string\">\"client (%s,%s) is offline \"</span> % addr</div><div class=\"line\">                    sock.close()</div><div class=\"line\">                    CONNECTION_LIST.remove(sock)</div><div class=\"line\">                    <span class=\"keyword\">continue</span></div><div class=\"line\">    server_socket.close()</div></pre></td></tr></table></figure>\n<h2 id=\"客户端程序client3-py\"><a href=\"#客户端程序client3-py\" class=\"headerlink\" title=\"客户端程序client3.py\"></a>客户端程序client3.py</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># !/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8-*-</span></div><div class=\"line\">__author__ = <span class=\"string\">'chen'</span></div><div class=\"line\"></div><div class=\"line\">import socket,select,string,sys</div><div class=\"line\"></div><div class=\"line\">def prompt():</div><div class=\"line\">    sys.stdout.write(<span class=\"string\">'[you]'</span>)</div><div class=\"line\">    sys.stdout.flush()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    <span class=\"keyword\">if</span>(len(sys.argv)&lt;<span class=\"number\">3</span>):</div><div class=\"line\">        print <span class=\"string\">'usage: python client3.py hostname port'</span></div><div class=\"line\">        sys.<span class=\"keyword\">exit</span>()</div><div class=\"line\"></div><div class=\"line\">    host = sys.argv[<span class=\"number\">1</span>]</div><div class=\"line\">    port = int(sys.argv[<span class=\"number\">2</span>])</div><div class=\"line\"></div><div class=\"line\">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class=\"line\">    s.settimeout(<span class=\"number\">2</span>)</div><div class=\"line\"></div><div class=\"line\">    try:</div><div class=\"line\">        s.connect((host, port))</div><div class=\"line\">    except:</div><div class=\"line\">        print <span class=\"string\">'unable to connect'</span></div><div class=\"line\">        sys.<span class=\"keyword\">exit</span>()</div><div class=\"line\"></div><div class=\"line\">    print <span class=\"string\">'connected to remote host. start sending messages'</span></div><div class=\"line\">    prompt()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</div><div class=\"line\">        rlist = [sys.stdin, s]</div><div class=\"line\"></div><div class=\"line\">        read_list, write_list, error_list = select.select(rlist, [], [])</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> sock <span class=\"keyword\">in</span> read_list:</div><div class=\"line\">            <span class=\"keyword\">if</span> sock == s:</div><div class=\"line\">                data = sock.recv(<span class=\"number\">4096</span>)</div><div class=\"line\">                <span class=\"keyword\">if</span> not data:</div><div class=\"line\">                    print <span class=\"string\">'\\nDisconnected from chat server'</span></div><div class=\"line\">                    sys.<span class=\"keyword\">exit</span>()</div><div class=\"line\">                <span class=\"keyword\">else</span>:</div><div class=\"line\">                    sys.stdout.write(data)</div><div class=\"line\">                    prompt()</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                msg = sys.stdin.readline()</div><div class=\"line\">                s.send(msg)</div><div class=\"line\">                prompt()</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"http://www.cnblogs.com/hazir/p/python_socket_programming.html\">Python Socket 网络编程</a><br>2 <a href=\"http://www.cnblogs.com/hazir/p/python_chat_room.html\">Python Socket 编程——聊天室示例程序</a></p>"},{"title":"python学习笔记--一个简单聊天室的实现","date":"2015-03-26T13:33:35.000Z","_content":"最近项目真多,一个接一个的失之交臂,全部都错过了.最近状态有些不好,容易胡思乱想.\n这是来自书上的一个python聊天程序,我照着敲了一遍,然后给扩展了一下,加了多个房间和创建选择房间的功能,写了好久好久,感觉都拖了一个星期了.\n下一步是做一个gui,恩,那将是我的第一个gui程序.\n<!-- more -->\n# 先贴一下代码 server5.py\n```\n# !/usr/bin/env python\n# -*- coding:utf-8-*-\n__author__ = 'chen'\n\nfrom asyncore import  dispatcher\nfrom  asynchat import async_chat\nimport socket,asyncore\n\nPORT = 5005  # 设定程序的端口号\nNAME = 'testchat'  # 给服务器一个名称\n\nclass EndSession(Exception):pass\n\nclass CommandHandler:\n    \"\"\"\n    类似标准库中cmd.Cmd的简单命令处理程序\n    \"\"\"\n    # 如果输入的命令,那么就返回unknown命令\n    def unknown(self, session, cmd):\n        session.push('Unknown command: %s \\r\\n' % cmd)\n    \n    def handle(self, session, line):\n        if not line.strip():\n            return\n        parts = line.split(' ', 1)\n        cmd = parts[0]\n        try:\n            line = parts[1].strip()\n        except IndexError:line = ''\n        meth = getattr(self, 'do_' + cmd, None)\n        try:\n            meth(session, line)\n        except TypeError:\n            self.unknown(session, cmd)\n# 这个类是聊天房间的类,继承上面的类是为了继承执行命令的功能\nclass ChatRoom(CommandHandler):\n    def __init__(self, name, server):\n        self.server = server\n        self.name = name\n        self.sessions = []\n\n    def add(self, session):\n        self.broadcast(session.name + ' has entered the room %s\\r\\n' % self.name)\n        session.push('you can type \"h\" for help\\r\\n')\n        ## 因为后面要将用户挪动房间,所以必须保存每个用户的session,这样才能挪动和删除\n        self.server.users[session.name] = session\n        self.sessions.append(session)\n\n    def remove(self, session):\n        try:\n            self.sessions.remove(session)\n        except: pass # 如果此处的sessions为空或者已经不存在,会出错,此处不上报\n\n    def broadcast(self, line):\n        # 广播,只广播到当前房间\n        for session in self.sessions:\n            session.push(line)\n\n    def do_say(self, session, line):\n        # 说话\n        self.broadcast(session.name + \":\" + line + '\\r\\n')\n\n    def do_login(self, session, line):\n        # login,其实是实现改名字的功能,懒得去改函数名了\n        name = line.strip()\n        if not name:\n            session.push('please enter a name\\r\\n')\n        elif name in self.server.users.keys():\n            session.push('The name %s is taken\\r\\n' % name)\n            session.push('please try again\\r\\n')\n        else:\n            session.server.users[name] = session.server.users.pop(session.name)\n            session.name = name\n            session.enter(self)\n            self.do_list(session, '')\n            session.push('type \"select name\" to choose one room\\r\\n')\n    # 查看当前房间有哪些人\n    def do_look(self, session, line):\n        session.push('the following are in this room:\\r\\n')\n        for other in self.sessions:\n            session.push(other.name + \"\\r\\n\")\n    # 查看当前在线的用户,所有房间的用户\n    def do_who(self, session, line):\n        session.push('the following are logged in:\\r\\n')\n        for name in self.server.users:\n            session.push(name + '\\r\\n')\n    # 查看当前所有的房间\n    def do_list(self, session, line):\n        session.push('the room list is below\\r\\n')\n        session.push('   '.join(self.server.rooms) + '\\r\\n')\n    # 选择房间\n    def do_select(self, session, line):\n        name = line.strip()\n        if not name:\n            session.push('please enter a room name\\r\\n')\n        elif name in self.server.rooms.keys():\n            session.enter(self.server.rooms[name])\n            self.broadcast(' %s ,welcome to join %s\\r\\n'% (session.name, name))\n    # 输出帮助\n    def do_h(self, session, line):\n        session.push('you can use this commands:\\r\\n1,who to see who is on this server(online and offline)\\r\\n2,'\n        'list to see how many room are avaliable\\r\\n3,look to see who are in this room\\r\\n4,login to login online and '\n        'change a name\\r\\n5,create to create a new room')\n    # 创建新房间\n    def do_create(self, session, line):\n        name = line.strip()\n        if not name:\n            session.push('please enter a name\\r\\n')\n        elif name in self.server.rooms.keys():\n            session.push('The room name %s is taken\\r\\n' % name)\n            session.push('please try again\\r\\n')\n        else:\n            ChatRoom(name, self.server)\n            session.server.rooms[name] = ChatRoom(name, self.server)\n            session.push(\"the room %s create successful\\r\\n\" % name)\n            session.enter(session.server.rooms[name])\n# 每个用户回话,这个是重点类\nclass ChatSession(async_chat):\n    def __init__(self, server, sock):\n        async_chat.__init__(self, sock)\n        self.server = server\n        self.set_terminator('\\r\\n')\n        self.data = []\n        self.name = 'visitor' + str(len(server.users))# 初始化用户名,用visitor1之类来表示\n        self.room = self.server.main_room\n        self.enter(self.server.main_room)\n\n    def enter(self, room):\n        try:\n            cur = self.room\n        except AttributeError: pass\n        else: cur.remove(self)\n        self.room = room\n        room.add(self)\n    # 当用户有输入的时候\n    def collect_incoming_data(self, data):\n        self.data.append(data)\n    # 当用户输入终止符的时候\n    def found_terminator(self):\n        line = ''.join(self.data)\n        self.data = []\n        try:\n            self.room.handle(self, line)\n        except EndSession:\n            self.handle_close()\n    # 关闭用户回话\n    def handle_close(self):\n        async_chat.handle_close(self)\n        # self.enter()\n\n# 服务器类,这个也是重点类\nclass ChatServer(dispatcher):\n    def __init__(self, port, name):\n        dispatcher.__init__(self)\n        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)\n        # 端口复用\n        self.set_reuse_addr()\n        self.bind(('', port))\n        self.listen(5)\n        self.sessions = {}\n        self.name = name\n        self.users = {}\n        self.rooms = {}\n        # 新建一个房间hall,因为每个初始登陆的用户没有房间,但是操作是依赖与ChatRoom类的,所以给一个初始默认的房间\n        self.main_room = ChatRoom('hall', self)\n        self.rooms[self.main_room.name] = self.main_room\n\n    def handle_accept(self):\n        conn,addr = self.accept()\n        ChatSession(self, conn)\n        print 'connection attempt from ', addr[0]\n\nif __name__ == \"__main__\":\n    print 'server start'\n    s = ChatServer(PORT, NAME)\n    try:\n        asyncore.loop()\n    except KeyboardInterrupt: print\n```\n效果如图所示\n![运行效果](http://ww3.sinaimg.cn/large/692869a3gw1eqjhaekoz0j20ii0h5q62.jpg)\n","source":"_posts/python-im.md","raw":"title: python学习笔记--一个简单聊天室的实现\ndate: 2015-03-26 21:33:35\ntags:\n- python\n- socket\ncategories:\n- python学习笔记\n---\n最近项目真多,一个接一个的失之交臂,全部都错过了.最近状态有些不好,容易胡思乱想.\n这是来自书上的一个python聊天程序,我照着敲了一遍,然后给扩展了一下,加了多个房间和创建选择房间的功能,写了好久好久,感觉都拖了一个星期了.\n下一步是做一个gui,恩,那将是我的第一个gui程序.\n<!-- more -->\n# 先贴一下代码 server5.py\n```\n# !/usr/bin/env python\n# -*- coding:utf-8-*-\n__author__ = 'chen'\n\nfrom asyncore import  dispatcher\nfrom  asynchat import async_chat\nimport socket,asyncore\n\nPORT = 5005  # 设定程序的端口号\nNAME = 'testchat'  # 给服务器一个名称\n\nclass EndSession(Exception):pass\n\nclass CommandHandler:\n    \"\"\"\n    类似标准库中cmd.Cmd的简单命令处理程序\n    \"\"\"\n    # 如果输入的命令,那么就返回unknown命令\n    def unknown(self, session, cmd):\n        session.push('Unknown command: %s \\r\\n' % cmd)\n    \n    def handle(self, session, line):\n        if not line.strip():\n            return\n        parts = line.split(' ', 1)\n        cmd = parts[0]\n        try:\n            line = parts[1].strip()\n        except IndexError:line = ''\n        meth = getattr(self, 'do_' + cmd, None)\n        try:\n            meth(session, line)\n        except TypeError:\n            self.unknown(session, cmd)\n# 这个类是聊天房间的类,继承上面的类是为了继承执行命令的功能\nclass ChatRoom(CommandHandler):\n    def __init__(self, name, server):\n        self.server = server\n        self.name = name\n        self.sessions = []\n\n    def add(self, session):\n        self.broadcast(session.name + ' has entered the room %s\\r\\n' % self.name)\n        session.push('you can type \"h\" for help\\r\\n')\n        ## 因为后面要将用户挪动房间,所以必须保存每个用户的session,这样才能挪动和删除\n        self.server.users[session.name] = session\n        self.sessions.append(session)\n\n    def remove(self, session):\n        try:\n            self.sessions.remove(session)\n        except: pass # 如果此处的sessions为空或者已经不存在,会出错,此处不上报\n\n    def broadcast(self, line):\n        # 广播,只广播到当前房间\n        for session in self.sessions:\n            session.push(line)\n\n    def do_say(self, session, line):\n        # 说话\n        self.broadcast(session.name + \":\" + line + '\\r\\n')\n\n    def do_login(self, session, line):\n        # login,其实是实现改名字的功能,懒得去改函数名了\n        name = line.strip()\n        if not name:\n            session.push('please enter a name\\r\\n')\n        elif name in self.server.users.keys():\n            session.push('The name %s is taken\\r\\n' % name)\n            session.push('please try again\\r\\n')\n        else:\n            session.server.users[name] = session.server.users.pop(session.name)\n            session.name = name\n            session.enter(self)\n            self.do_list(session, '')\n            session.push('type \"select name\" to choose one room\\r\\n')\n    # 查看当前房间有哪些人\n    def do_look(self, session, line):\n        session.push('the following are in this room:\\r\\n')\n        for other in self.sessions:\n            session.push(other.name + \"\\r\\n\")\n    # 查看当前在线的用户,所有房间的用户\n    def do_who(self, session, line):\n        session.push('the following are logged in:\\r\\n')\n        for name in self.server.users:\n            session.push(name + '\\r\\n')\n    # 查看当前所有的房间\n    def do_list(self, session, line):\n        session.push('the room list is below\\r\\n')\n        session.push('   '.join(self.server.rooms) + '\\r\\n')\n    # 选择房间\n    def do_select(self, session, line):\n        name = line.strip()\n        if not name:\n            session.push('please enter a room name\\r\\n')\n        elif name in self.server.rooms.keys():\n            session.enter(self.server.rooms[name])\n            self.broadcast(' %s ,welcome to join %s\\r\\n'% (session.name, name))\n    # 输出帮助\n    def do_h(self, session, line):\n        session.push('you can use this commands:\\r\\n1,who to see who is on this server(online and offline)\\r\\n2,'\n        'list to see how many room are avaliable\\r\\n3,look to see who are in this room\\r\\n4,login to login online and '\n        'change a name\\r\\n5,create to create a new room')\n    # 创建新房间\n    def do_create(self, session, line):\n        name = line.strip()\n        if not name:\n            session.push('please enter a name\\r\\n')\n        elif name in self.server.rooms.keys():\n            session.push('The room name %s is taken\\r\\n' % name)\n            session.push('please try again\\r\\n')\n        else:\n            ChatRoom(name, self.server)\n            session.server.rooms[name] = ChatRoom(name, self.server)\n            session.push(\"the room %s create successful\\r\\n\" % name)\n            session.enter(session.server.rooms[name])\n# 每个用户回话,这个是重点类\nclass ChatSession(async_chat):\n    def __init__(self, server, sock):\n        async_chat.__init__(self, sock)\n        self.server = server\n        self.set_terminator('\\r\\n')\n        self.data = []\n        self.name = 'visitor' + str(len(server.users))# 初始化用户名,用visitor1之类来表示\n        self.room = self.server.main_room\n        self.enter(self.server.main_room)\n\n    def enter(self, room):\n        try:\n            cur = self.room\n        except AttributeError: pass\n        else: cur.remove(self)\n        self.room = room\n        room.add(self)\n    # 当用户有输入的时候\n    def collect_incoming_data(self, data):\n        self.data.append(data)\n    # 当用户输入终止符的时候\n    def found_terminator(self):\n        line = ''.join(self.data)\n        self.data = []\n        try:\n            self.room.handle(self, line)\n        except EndSession:\n            self.handle_close()\n    # 关闭用户回话\n    def handle_close(self):\n        async_chat.handle_close(self)\n        # self.enter()\n\n# 服务器类,这个也是重点类\nclass ChatServer(dispatcher):\n    def __init__(self, port, name):\n        dispatcher.__init__(self)\n        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)\n        # 端口复用\n        self.set_reuse_addr()\n        self.bind(('', port))\n        self.listen(5)\n        self.sessions = {}\n        self.name = name\n        self.users = {}\n        self.rooms = {}\n        # 新建一个房间hall,因为每个初始登陆的用户没有房间,但是操作是依赖与ChatRoom类的,所以给一个初始默认的房间\n        self.main_room = ChatRoom('hall', self)\n        self.rooms[self.main_room.name] = self.main_room\n\n    def handle_accept(self):\n        conn,addr = self.accept()\n        ChatSession(self, conn)\n        print 'connection attempt from ', addr[0]\n\nif __name__ == \"__main__\":\n    print 'server start'\n    s = ChatServer(PORT, NAME)\n    try:\n        asyncore.loop()\n    except KeyboardInterrupt: print\n```\n效果如图所示\n![运行效果](http://ww3.sinaimg.cn/large/692869a3gw1eqjhaekoz0j20ii0h5q62.jpg)\n","slug":"python-im","published":1,"updated":"2015-10-29T06:08:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7ysh007ux8cd70zykzs5","content":"<p>最近项目真多,一个接一个的失之交臂,全部都错过了.最近状态有些不好,容易胡思乱想.<br>这是来自书上的一个python聊天程序,我照着敲了一遍,然后给扩展了一下,加了多个房间和创建选择房间的功能,写了好久好久,感觉都拖了一个星期了.<br>下一步是做一个gui,恩,那将是我的第一个gui程序.<br><a id=\"more\"></a></p>\n<h1 id=\"先贴一下代码-server5-py\"><a href=\"#先贴一下代码-server5-py\" class=\"headerlink\" title=\"先贴一下代码 server5.py\"></a>先贴一下代码 server5.py</h1><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># !/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8-*-</span></div><div class=\"line\">__author_<span class=\"number\">_</span> = <span class=\"string\">'chen'</span></div><div class=\"line\"></div><div class=\"line\">from asyncore import  dispatcher</div><div class=\"line\">from  asynchat import async_chat</div><div class=\"line\">import socket,asyncore</div><div class=\"line\"></div><div class=\"line\">PORT = <span class=\"number\">5005</span>  <span class=\"comment\"># 设定程序的端口号</span></div><div class=\"line\">NAME = <span class=\"string\">'testchat'</span>  <span class=\"comment\"># 给服务器一个名称</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EndSession</span>(<span class=\"title\">Exception</span>):<span class=\"title\">pass</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandHandler</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"</span><span class=\"string\">\"</span></div><div class=\"line\">    类似标准库中cmd.Cmd的简单命令处理程序</div><div class=\"line\">    \"<span class=\"string\">\"\"</span></div><div class=\"line\">    <span class=\"comment\"># 如果输入的命令,那么就返回unknown命令</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unknown</span><span class=\"params\">(<span class=\"keyword\">self</span>, session, cmd)</span></span>:</div><div class=\"line\">        session.push(<span class=\"string\">'Unknown command: %s \\r\\n'</span> % cmd)</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle</span><span class=\"params\">(<span class=\"keyword\">self</span>, session, line)</span></span>:</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> line.strip():</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\">        parts = line.split(<span class=\"string\">' '</span>, <span class=\"number\">1</span>)</div><div class=\"line\">        cmd = parts[<span class=\"number\">0</span>]</div><div class=\"line\">        <span class=\"symbol\">try:</span></div><div class=\"line\">            line = parts[<span class=\"number\">1</span>].strip()</div><div class=\"line\">        except <span class=\"symbol\">IndexError:</span>line = <span class=\"string\">''</span></div><div class=\"line\">        meth = getattr(<span class=\"keyword\">self</span>, <span class=\"string\">'do_'</span> + cmd, None)</div><div class=\"line\">        <span class=\"symbol\">try:</span></div><div class=\"line\">            meth(session, line)</div><div class=\"line\">        except <span class=\"symbol\">TypeError:</span></div><div class=\"line\">            <span class=\"keyword\">self</span>.unknown(session, cmd)</div><div class=\"line\"><span class=\"comment\"># 这个类是聊天房间的类,继承上面的类是为了继承执行命令的功能</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChatRoom</span>(<span class=\"title\">CommandHandler</span>):</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(<span class=\"keyword\">self</span>, name, server)</span></span>:</div><div class=\"line\">        <span class=\"keyword\">self</span>.server = server</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">        <span class=\"keyword\">self</span>.sessions = []</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">self</span>, session)</span></span>:</div><div class=\"line\">        <span class=\"keyword\">self</span>.broadcast(session.name + <span class=\"string\">' has entered the room %s\\r\\n'</span> % <span class=\"keyword\">self</span>.name)</div><div class=\"line\">        session.push(<span class=\"string\">'you can type \"h\" for help\\r\\n'</span>)</div><div class=\"line\">        <span class=\"comment\">## 因为后面要将用户挪动房间,所以必须保存每个用户的session,这样才能挪动和删除</span></div><div class=\"line\">        <span class=\"keyword\">self</span>.server.users[session.name] = session</div><div class=\"line\">        <span class=\"keyword\">self</span>.sessions.append(session)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">self</span>, session)</span></span>:</div><div class=\"line\">        <span class=\"symbol\">try:</span></div><div class=\"line\">            <span class=\"keyword\">self</span>.sessions.remove(session)</div><div class=\"line\">        <span class=\"symbol\">except:</span> pass <span class=\"comment\"># 如果此处的sessions为空或者已经不存在,会出错,此处不上报</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">broadcast</span><span class=\"params\">(<span class=\"keyword\">self</span>, line)</span></span>:</div><div class=\"line\">        <span class=\"comment\"># 广播,只广播到当前房间</span></div><div class=\"line\">        <span class=\"keyword\">for</span> session <span class=\"keyword\">in</span> <span class=\"keyword\">self</span>.<span class=\"symbol\">sessions:</span></div><div class=\"line\">            session.push(line)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_say</span><span class=\"params\">(<span class=\"keyword\">self</span>, session, line)</span></span>:</div><div class=\"line\">        <span class=\"comment\"># 说话</span></div><div class=\"line\">        <span class=\"keyword\">self</span>.broadcast(session.name + <span class=\"string\">\":\"</span> + line + <span class=\"string\">'\\r\\n'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_login</span><span class=\"params\">(<span class=\"keyword\">self</span>, session, line)</span></span>:</div><div class=\"line\">        <span class=\"comment\"># login,其实是实现改名字的功能,懒得去改函数名了</span></div><div class=\"line\">        name = line.strip()</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"symbol\">name:</span></div><div class=\"line\">            session.push(<span class=\"string\">'please enter a name\\r\\n'</span>)</div><div class=\"line\">        elif name <span class=\"keyword\">in</span> <span class=\"keyword\">self</span>.server.users.keys():</div><div class=\"line\">            session.push(<span class=\"string\">'The name %s is taken\\r\\n'</span> % name)</div><div class=\"line\">            session.push(<span class=\"string\">'please try again\\r\\n'</span>)</div><div class=\"line\">        <span class=\"symbol\">else:</span></div><div class=\"line\">            session.server.users[name] = session.server.users.pop(session.name)</div><div class=\"line\">            session.name = name</div><div class=\"line\">            session.enter(<span class=\"keyword\">self</span>)</div><div class=\"line\">            <span class=\"keyword\">self</span>.do_list(session, <span class=\"string\">''</span>)</div><div class=\"line\">            session.push(<span class=\"string\">'type \"select name\" to choose one room\\r\\n'</span>)</div><div class=\"line\">    <span class=\"comment\"># 查看当前房间有哪些人</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_look</span><span class=\"params\">(<span class=\"keyword\">self</span>, session, line)</span></span>:</div><div class=\"line\">        session.push(<span class=\"string\">'the following are in this room:\\r\\n'</span>)</div><div class=\"line\">        <span class=\"keyword\">for</span> other <span class=\"keyword\">in</span> <span class=\"keyword\">self</span>.<span class=\"symbol\">sessions:</span></div><div class=\"line\">            session.push(other.name + <span class=\"string\">\"\\r\\n\"</span>)</div><div class=\"line\">    <span class=\"comment\"># 查看当前在线的用户,所有房间的用户</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_who</span><span class=\"params\">(<span class=\"keyword\">self</span>, session, line)</span></span>:</div><div class=\"line\">        session.push(<span class=\"string\">'the following are logged in:\\r\\n'</span>)</div><div class=\"line\">        <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> <span class=\"keyword\">self</span>.server.<span class=\"symbol\">users:</span></div><div class=\"line\">            session.push(name + <span class=\"string\">'\\r\\n'</span>)</div><div class=\"line\">    <span class=\"comment\"># 查看当前所有的房间</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_list</span><span class=\"params\">(<span class=\"keyword\">self</span>, session, line)</span></span>:</div><div class=\"line\">        session.push(<span class=\"string\">'the room list is below\\r\\n'</span>)</div><div class=\"line\">        session.push(<span class=\"string\">'   '</span>.join(<span class=\"keyword\">self</span>.server.rooms) + <span class=\"string\">'\\r\\n'</span>)</div><div class=\"line\">    <span class=\"comment\"># 选择房间</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_select</span><span class=\"params\">(<span class=\"keyword\">self</span>, session, line)</span></span>:</div><div class=\"line\">        name = line.strip()</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"symbol\">name:</span></div><div class=\"line\">            session.push(<span class=\"string\">'please enter a room name\\r\\n'</span>)</div><div class=\"line\">        elif name <span class=\"keyword\">in</span> <span class=\"keyword\">self</span>.server.rooms.keys():</div><div class=\"line\">            session.enter(<span class=\"keyword\">self</span>.server.rooms[name])</div><div class=\"line\">            <span class=\"keyword\">self</span>.broadcast(<span class=\"string\">' %s ,welcome to join %s\\r\\n'</span>% (session.name, name))</div><div class=\"line\">    <span class=\"comment\"># 输出帮助</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_h</span><span class=\"params\">(<span class=\"keyword\">self</span>, session, line)</span></span>:</div><div class=\"line\">        session.push(<span class=\"string\">'you can use this commands:\\r\\n1,who to see who is on this server(online and offline)\\r\\n2,'</span></div><div class=\"line\">        <span class=\"string\">'list to see how many room are avaliable\\r\\n3,look to see who are in this room\\r\\n4,login to login online and '</span></div><div class=\"line\">        <span class=\"string\">'change a name\\r\\n5,create to create a new room'</span>)</div><div class=\"line\">    <span class=\"comment\"># 创建新房间</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_create</span><span class=\"params\">(<span class=\"keyword\">self</span>, session, line)</span></span>:</div><div class=\"line\">        name = line.strip()</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"symbol\">name:</span></div><div class=\"line\">            session.push(<span class=\"string\">'please enter a name\\r\\n'</span>)</div><div class=\"line\">        elif name <span class=\"keyword\">in</span> <span class=\"keyword\">self</span>.server.rooms.keys():</div><div class=\"line\">            session.push(<span class=\"string\">'The room name %s is taken\\r\\n'</span> % name)</div><div class=\"line\">            session.push(<span class=\"string\">'please try again\\r\\n'</span>)</div><div class=\"line\">        <span class=\"symbol\">else:</span></div><div class=\"line\">            ChatRoom(name, <span class=\"keyword\">self</span>.server)</div><div class=\"line\">            session.server.rooms[name] = ChatRoom(name, <span class=\"keyword\">self</span>.server)</div><div class=\"line\">            session.push(<span class=\"string\">\"the room %s create successful\\r\\n\"</span> % name)</div><div class=\"line\">            session.enter(session.server.rooms[name])</div><div class=\"line\"><span class=\"comment\"># 每个用户回话,这个是重点类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChatSession</span>(<span class=\"title\">async_chat</span>):</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(<span class=\"keyword\">self</span>, server, sock)</span></span>:</div><div class=\"line\">        async_chat.__init_<span class=\"number\">_</span>(<span class=\"keyword\">self</span>, sock)</div><div class=\"line\">        <span class=\"keyword\">self</span>.server = server</div><div class=\"line\">        <span class=\"keyword\">self</span>.set_terminator(<span class=\"string\">'\\r\\n'</span>)</div><div class=\"line\">        <span class=\"keyword\">self</span>.data = []</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = <span class=\"string\">'visitor'</span> + str(len(server.users))<span class=\"comment\"># 初始化用户名,用visitor1之类来表示</span></div><div class=\"line\">        <span class=\"keyword\">self</span>.room = <span class=\"keyword\">self</span>.server.main_room</div><div class=\"line\">        <span class=\"keyword\">self</span>.enter(<span class=\"keyword\">self</span>.server.main_room)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">enter</span><span class=\"params\">(<span class=\"keyword\">self</span>, room)</span></span>:</div><div class=\"line\">        <span class=\"symbol\">try:</span></div><div class=\"line\">            cur = <span class=\"keyword\">self</span>.room</div><div class=\"line\">        except <span class=\"symbol\">AttributeError:</span> pass</div><div class=\"line\">        <span class=\"symbol\">else:</span> cur.remove(<span class=\"keyword\">self</span>)</div><div class=\"line\">        <span class=\"keyword\">self</span>.room = room</div><div class=\"line\">        room.add(<span class=\"keyword\">self</span>)</div><div class=\"line\">    <span class=\"comment\"># 当用户有输入的时候</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">collect_incoming_data</span><span class=\"params\">(<span class=\"keyword\">self</span>, data)</span></span>:</div><div class=\"line\">        <span class=\"keyword\">self</span>.data.append(data)</div><div class=\"line\">    <span class=\"comment\"># 当用户输入终止符的时候</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">found_terminator</span><span class=\"params\">(<span class=\"keyword\">self</span>)</span></span>:</div><div class=\"line\">        line = <span class=\"string\">''</span>.join(<span class=\"keyword\">self</span>.data)</div><div class=\"line\">        <span class=\"keyword\">self</span>.data = []</div><div class=\"line\">        <span class=\"symbol\">try:</span></div><div class=\"line\">            <span class=\"keyword\">self</span>.room.handle(<span class=\"keyword\">self</span>, line)</div><div class=\"line\">        except <span class=\"symbol\">EndSession:</span></div><div class=\"line\">            <span class=\"keyword\">self</span>.handle_close()</div><div class=\"line\">    <span class=\"comment\"># 关闭用户回话</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle_close</span><span class=\"params\">(<span class=\"keyword\">self</span>)</span></span>:</div><div class=\"line\">        async_chat.handle_close(<span class=\"keyword\">self</span>)</div><div class=\"line\">        <span class=\"comment\"># self.enter()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 服务器类,这个也是重点类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChatServer</span>(<span class=\"title\">dispatcher</span>):</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(<span class=\"keyword\">self</span>, port, name)</span></span>:</div><div class=\"line\">        dispatcher.__init_<span class=\"number\">_</span>(<span class=\"keyword\">self</span>)</div><div class=\"line\">        <span class=\"keyword\">self</span>.create_socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class=\"line\">        <span class=\"comment\"># 端口复用</span></div><div class=\"line\">        <span class=\"keyword\">self</span>.set_reuse_addr()</div><div class=\"line\">        <span class=\"keyword\">self</span>.bind((<span class=\"string\">''</span>, port))</div><div class=\"line\">        <span class=\"keyword\">self</span>.listen(<span class=\"number\">5</span>)</div><div class=\"line\">        <span class=\"keyword\">self</span>.sessions = &#123;&#125;</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">        <span class=\"keyword\">self</span>.users = &#123;&#125;</div><div class=\"line\">        <span class=\"keyword\">self</span>.rooms = &#123;&#125;</div><div class=\"line\">        <span class=\"comment\"># 新建一个房间hall,因为每个初始登陆的用户没有房间,但是操作是依赖与ChatRoom类的,所以给一个初始默认的房间</span></div><div class=\"line\">        <span class=\"keyword\">self</span>.main_room = ChatRoom(<span class=\"string\">'hall'</span>, <span class=\"keyword\">self</span>)</div><div class=\"line\">        <span class=\"keyword\">self</span>.rooms[<span class=\"keyword\">self</span>.main_room.name] = <span class=\"keyword\">self</span>.main_room</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle_accept</span><span class=\"params\">(<span class=\"keyword\">self</span>)</span></span>:</div><div class=\"line\">        conn,addr = <span class=\"keyword\">self</span>.accept()</div><div class=\"line\">        ChatSession(<span class=\"keyword\">self</span>, conn)</div><div class=\"line\">        print <span class=\"string\">'connection attempt from '</span>, addr[<span class=\"number\">0</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name_<span class=\"number\">_</span> == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    print <span class=\"string\">'server start'</span></div><div class=\"line\">    s = ChatServer(PORT, NAME)</div><div class=\"line\">    <span class=\"symbol\">try:</span></div><div class=\"line\">        asyncore.loop()</div><div class=\"line\">    except <span class=\"symbol\">KeyboardInterrupt:</span> print</div></pre></td></tr></table></figure>\n<p>效果如图所示<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1eqjhaekoz0j20ii0h5q62.jpg\" alt=\"运行效果\"></p>\n","excerpt":"<p>最近项目真多,一个接一个的失之交臂,全部都错过了.最近状态有些不好,容易胡思乱想.<br>这是来自书上的一个python聊天程序,我照着敲了一遍,然后给扩展了一下,加了多个房间和创建选择房间的功能,写了好久好久,感觉都拖了一个星期了.<br>下一步是做一个gui,恩,那将是我的第一个gui程序.<br>","more":"</p>\n<h1 id=\"先贴一下代码-server5-py\"><a href=\"#先贴一下代码-server5-py\" class=\"headerlink\" title=\"先贴一下代码 server5.py\"></a>先贴一下代码 server5.py</h1><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># !/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8-*-</span></div><div class=\"line\">__author_<span class=\"number\">_</span> = <span class=\"string\">'chen'</span></div><div class=\"line\"></div><div class=\"line\">from asyncore import  dispatcher</div><div class=\"line\">from  asynchat import async_chat</div><div class=\"line\">import socket,asyncore</div><div class=\"line\"></div><div class=\"line\">PORT = <span class=\"number\">5005</span>  <span class=\"comment\"># 设定程序的端口号</span></div><div class=\"line\">NAME = <span class=\"string\">'testchat'</span>  <span class=\"comment\"># 给服务器一个名称</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EndSession</span>(<span class=\"title\">Exception</span>):<span class=\"title\">pass</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandHandler</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"</span><span class=\"string\">\"</div><div class=\"line\">    类似标准库中cmd.Cmd的简单命令处理程序</div><div class=\"line\">    \"</span><span class=\"string\">\"\"</span></div><div class=\"line\">    <span class=\"comment\"># 如果输入的命令,那么就返回unknown命令</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unknown</span><span class=\"params\">(<span class=\"keyword\">self</span>, session, cmd)</span></span>:</div><div class=\"line\">        session.push(<span class=\"string\">'Unknown command: %s \\r\\n'</span> % cmd)</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle</span><span class=\"params\">(<span class=\"keyword\">self</span>, session, line)</span></span>:</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> line.strip():</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\">        parts = line.split(<span class=\"string\">' '</span>, <span class=\"number\">1</span>)</div><div class=\"line\">        cmd = parts[<span class=\"number\">0</span>]</div><div class=\"line\">        <span class=\"symbol\">try:</span></div><div class=\"line\">            line = parts[<span class=\"number\">1</span>].strip()</div><div class=\"line\">        except <span class=\"symbol\">IndexError:</span>line = <span class=\"string\">''</span></div><div class=\"line\">        meth = getattr(<span class=\"keyword\">self</span>, <span class=\"string\">'do_'</span> + cmd, None)</div><div class=\"line\">        <span class=\"symbol\">try:</span></div><div class=\"line\">            meth(session, line)</div><div class=\"line\">        except <span class=\"symbol\">TypeError:</span></div><div class=\"line\">            <span class=\"keyword\">self</span>.unknown(session, cmd)</div><div class=\"line\"><span class=\"comment\"># 这个类是聊天房间的类,继承上面的类是为了继承执行命令的功能</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChatRoom</span>(<span class=\"title\">CommandHandler</span>):</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(<span class=\"keyword\">self</span>, name, server)</span></span>:</div><div class=\"line\">        <span class=\"keyword\">self</span>.server = server</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">        <span class=\"keyword\">self</span>.sessions = []</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">self</span>, session)</span></span>:</div><div class=\"line\">        <span class=\"keyword\">self</span>.broadcast(session.name + <span class=\"string\">' has entered the room %s\\r\\n'</span> % <span class=\"keyword\">self</span>.name)</div><div class=\"line\">        session.push(<span class=\"string\">'you can type \"h\" for help\\r\\n'</span>)</div><div class=\"line\">        <span class=\"comment\">## 因为后面要将用户挪动房间,所以必须保存每个用户的session,这样才能挪动和删除</span></div><div class=\"line\">        <span class=\"keyword\">self</span>.server.users[session.name] = session</div><div class=\"line\">        <span class=\"keyword\">self</span>.sessions.append(session)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">self</span>, session)</span></span>:</div><div class=\"line\">        <span class=\"symbol\">try:</span></div><div class=\"line\">            <span class=\"keyword\">self</span>.sessions.remove(session)</div><div class=\"line\">        <span class=\"symbol\">except:</span> pass <span class=\"comment\"># 如果此处的sessions为空或者已经不存在,会出错,此处不上报</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">broadcast</span><span class=\"params\">(<span class=\"keyword\">self</span>, line)</span></span>:</div><div class=\"line\">        <span class=\"comment\"># 广播,只广播到当前房间</span></div><div class=\"line\">        <span class=\"keyword\">for</span> session <span class=\"keyword\">in</span> <span class=\"keyword\">self</span>.<span class=\"symbol\">sessions:</span></div><div class=\"line\">            session.push(line)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_say</span><span class=\"params\">(<span class=\"keyword\">self</span>, session, line)</span></span>:</div><div class=\"line\">        <span class=\"comment\"># 说话</span></div><div class=\"line\">        <span class=\"keyword\">self</span>.broadcast(session.name + <span class=\"string\">\":\"</span> + line + <span class=\"string\">'\\r\\n'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_login</span><span class=\"params\">(<span class=\"keyword\">self</span>, session, line)</span></span>:</div><div class=\"line\">        <span class=\"comment\"># login,其实是实现改名字的功能,懒得去改函数名了</span></div><div class=\"line\">        name = line.strip()</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"symbol\">name:</span></div><div class=\"line\">            session.push(<span class=\"string\">'please enter a name\\r\\n'</span>)</div><div class=\"line\">        elif name <span class=\"keyword\">in</span> <span class=\"keyword\">self</span>.server.users.keys():</div><div class=\"line\">            session.push(<span class=\"string\">'The name %s is taken\\r\\n'</span> % name)</div><div class=\"line\">            session.push(<span class=\"string\">'please try again\\r\\n'</span>)</div><div class=\"line\">        <span class=\"symbol\">else:</span></div><div class=\"line\">            session.server.users[name] = session.server.users.pop(session.name)</div><div class=\"line\">            session.name = name</div><div class=\"line\">            session.enter(<span class=\"keyword\">self</span>)</div><div class=\"line\">            <span class=\"keyword\">self</span>.do_list(session, <span class=\"string\">''</span>)</div><div class=\"line\">            session.push(<span class=\"string\">'type \"select name\" to choose one room\\r\\n'</span>)</div><div class=\"line\">    <span class=\"comment\"># 查看当前房间有哪些人</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_look</span><span class=\"params\">(<span class=\"keyword\">self</span>, session, line)</span></span>:</div><div class=\"line\">        session.push(<span class=\"string\">'the following are in this room:\\r\\n'</span>)</div><div class=\"line\">        <span class=\"keyword\">for</span> other <span class=\"keyword\">in</span> <span class=\"keyword\">self</span>.<span class=\"symbol\">sessions:</span></div><div class=\"line\">            session.push(other.name + <span class=\"string\">\"\\r\\n\"</span>)</div><div class=\"line\">    <span class=\"comment\"># 查看当前在线的用户,所有房间的用户</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_who</span><span class=\"params\">(<span class=\"keyword\">self</span>, session, line)</span></span>:</div><div class=\"line\">        session.push(<span class=\"string\">'the following are logged in:\\r\\n'</span>)</div><div class=\"line\">        <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> <span class=\"keyword\">self</span>.server.<span class=\"symbol\">users:</span></div><div class=\"line\">            session.push(name + <span class=\"string\">'\\r\\n'</span>)</div><div class=\"line\">    <span class=\"comment\"># 查看当前所有的房间</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_list</span><span class=\"params\">(<span class=\"keyword\">self</span>, session, line)</span></span>:</div><div class=\"line\">        session.push(<span class=\"string\">'the room list is below\\r\\n'</span>)</div><div class=\"line\">        session.push(<span class=\"string\">'   '</span>.join(<span class=\"keyword\">self</span>.server.rooms) + <span class=\"string\">'\\r\\n'</span>)</div><div class=\"line\">    <span class=\"comment\"># 选择房间</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_select</span><span class=\"params\">(<span class=\"keyword\">self</span>, session, line)</span></span>:</div><div class=\"line\">        name = line.strip()</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"symbol\">name:</span></div><div class=\"line\">            session.push(<span class=\"string\">'please enter a room name\\r\\n'</span>)</div><div class=\"line\">        elif name <span class=\"keyword\">in</span> <span class=\"keyword\">self</span>.server.rooms.keys():</div><div class=\"line\">            session.enter(<span class=\"keyword\">self</span>.server.rooms[name])</div><div class=\"line\">            <span class=\"keyword\">self</span>.broadcast(<span class=\"string\">' %s ,welcome to join %s\\r\\n'</span>% (session.name, name))</div><div class=\"line\">    <span class=\"comment\"># 输出帮助</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_h</span><span class=\"params\">(<span class=\"keyword\">self</span>, session, line)</span></span>:</div><div class=\"line\">        session.push(<span class=\"string\">'you can use this commands:\\r\\n1,who to see who is on this server(online and offline)\\r\\n2,'</span></div><div class=\"line\">        <span class=\"string\">'list to see how many room are avaliable\\r\\n3,look to see who are in this room\\r\\n4,login to login online and '</span></div><div class=\"line\">        <span class=\"string\">'change a name\\r\\n5,create to create a new room'</span>)</div><div class=\"line\">    <span class=\"comment\"># 创建新房间</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_create</span><span class=\"params\">(<span class=\"keyword\">self</span>, session, line)</span></span>:</div><div class=\"line\">        name = line.strip()</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"symbol\">name:</span></div><div class=\"line\">            session.push(<span class=\"string\">'please enter a name\\r\\n'</span>)</div><div class=\"line\">        elif name <span class=\"keyword\">in</span> <span class=\"keyword\">self</span>.server.rooms.keys():</div><div class=\"line\">            session.push(<span class=\"string\">'The room name %s is taken\\r\\n'</span> % name)</div><div class=\"line\">            session.push(<span class=\"string\">'please try again\\r\\n'</span>)</div><div class=\"line\">        <span class=\"symbol\">else:</span></div><div class=\"line\">            ChatRoom(name, <span class=\"keyword\">self</span>.server)</div><div class=\"line\">            session.server.rooms[name] = ChatRoom(name, <span class=\"keyword\">self</span>.server)</div><div class=\"line\">            session.push(<span class=\"string\">\"the room %s create successful\\r\\n\"</span> % name)</div><div class=\"line\">            session.enter(session.server.rooms[name])</div><div class=\"line\"><span class=\"comment\"># 每个用户回话,这个是重点类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChatSession</span>(<span class=\"title\">async_chat</span>):</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(<span class=\"keyword\">self</span>, server, sock)</span></span>:</div><div class=\"line\">        async_chat.__init_<span class=\"number\">_</span>(<span class=\"keyword\">self</span>, sock)</div><div class=\"line\">        <span class=\"keyword\">self</span>.server = server</div><div class=\"line\">        <span class=\"keyword\">self</span>.set_terminator(<span class=\"string\">'\\r\\n'</span>)</div><div class=\"line\">        <span class=\"keyword\">self</span>.data = []</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = <span class=\"string\">'visitor'</span> + str(len(server.users))<span class=\"comment\"># 初始化用户名,用visitor1之类来表示</span></div><div class=\"line\">        <span class=\"keyword\">self</span>.room = <span class=\"keyword\">self</span>.server.main_room</div><div class=\"line\">        <span class=\"keyword\">self</span>.enter(<span class=\"keyword\">self</span>.server.main_room)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">enter</span><span class=\"params\">(<span class=\"keyword\">self</span>, room)</span></span>:</div><div class=\"line\">        <span class=\"symbol\">try:</span></div><div class=\"line\">            cur = <span class=\"keyword\">self</span>.room</div><div class=\"line\">        except <span class=\"symbol\">AttributeError:</span> pass</div><div class=\"line\">        <span class=\"symbol\">else:</span> cur.remove(<span class=\"keyword\">self</span>)</div><div class=\"line\">        <span class=\"keyword\">self</span>.room = room</div><div class=\"line\">        room.add(<span class=\"keyword\">self</span>)</div><div class=\"line\">    <span class=\"comment\"># 当用户有输入的时候</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">collect_incoming_data</span><span class=\"params\">(<span class=\"keyword\">self</span>, data)</span></span>:</div><div class=\"line\">        <span class=\"keyword\">self</span>.data.append(data)</div><div class=\"line\">    <span class=\"comment\"># 当用户输入终止符的时候</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">found_terminator</span><span class=\"params\">(<span class=\"keyword\">self</span>)</span></span>:</div><div class=\"line\">        line = <span class=\"string\">''</span>.join(<span class=\"keyword\">self</span>.data)</div><div class=\"line\">        <span class=\"keyword\">self</span>.data = []</div><div class=\"line\">        <span class=\"symbol\">try:</span></div><div class=\"line\">            <span class=\"keyword\">self</span>.room.handle(<span class=\"keyword\">self</span>, line)</div><div class=\"line\">        except <span class=\"symbol\">EndSession:</span></div><div class=\"line\">            <span class=\"keyword\">self</span>.handle_close()</div><div class=\"line\">    <span class=\"comment\"># 关闭用户回话</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle_close</span><span class=\"params\">(<span class=\"keyword\">self</span>)</span></span>:</div><div class=\"line\">        async_chat.handle_close(<span class=\"keyword\">self</span>)</div><div class=\"line\">        <span class=\"comment\"># self.enter()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 服务器类,这个也是重点类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChatServer</span>(<span class=\"title\">dispatcher</span>):</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(<span class=\"keyword\">self</span>, port, name)</span></span>:</div><div class=\"line\">        dispatcher.__init_<span class=\"number\">_</span>(<span class=\"keyword\">self</span>)</div><div class=\"line\">        <span class=\"keyword\">self</span>.create_socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class=\"line\">        <span class=\"comment\"># 端口复用</span></div><div class=\"line\">        <span class=\"keyword\">self</span>.set_reuse_addr()</div><div class=\"line\">        <span class=\"keyword\">self</span>.bind((<span class=\"string\">''</span>, port))</div><div class=\"line\">        <span class=\"keyword\">self</span>.listen(<span class=\"number\">5</span>)</div><div class=\"line\">        <span class=\"keyword\">self</span>.sessions = &#123;&#125;</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">        <span class=\"keyword\">self</span>.users = &#123;&#125;</div><div class=\"line\">        <span class=\"keyword\">self</span>.rooms = &#123;&#125;</div><div class=\"line\">        <span class=\"comment\"># 新建一个房间hall,因为每个初始登陆的用户没有房间,但是操作是依赖与ChatRoom类的,所以给一个初始默认的房间</span></div><div class=\"line\">        <span class=\"keyword\">self</span>.main_room = ChatRoom(<span class=\"string\">'hall'</span>, <span class=\"keyword\">self</span>)</div><div class=\"line\">        <span class=\"keyword\">self</span>.rooms[<span class=\"keyword\">self</span>.main_room.name] = <span class=\"keyword\">self</span>.main_room</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle_accept</span><span class=\"params\">(<span class=\"keyword\">self</span>)</span></span>:</div><div class=\"line\">        conn,addr = <span class=\"keyword\">self</span>.accept()</div><div class=\"line\">        ChatSession(<span class=\"keyword\">self</span>, conn)</div><div class=\"line\">        print <span class=\"string\">'connection attempt from '</span>, addr[<span class=\"number\">0</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name_<span class=\"number\">_</span> == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    print <span class=\"string\">'server start'</span></div><div class=\"line\">    s = ChatServer(PORT, NAME)</div><div class=\"line\">    <span class=\"symbol\">try:</span></div><div class=\"line\">        asyncore.loop()</div><div class=\"line\">    except <span class=\"symbol\">KeyboardInterrupt:</span> print</div></pre></td></tr></table></figure>\n<p>效果如图所示<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1eqjhaekoz0j20ii0h5q62.jpg\" alt=\"运行效果\"></p>"},{"title":"近期任务","date":"2014-12-02T14:56:31.000Z","_content":"2014-12-02 22:56:31  接下来的一个星期，我的任务是学习python爬虫的编写，至少要实现csdn博客转markdown的任务\n","source":"_posts/recent-task.md","raw":"title: 近期任务\ndate: 2014-12-02 22:56:31\ntags:\ncategories:\n- 杂文\n---\n2014-12-02 22:56:31  接下来的一个星期，我的任务是学习python爬虫的编写，至少要实现csdn博客转markdown的任务\n","slug":"recent-task","published":1,"updated":"2015-09-29T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7ysk007xx8cd7zecbvfq","content":"<p>2014-12-02 22:56:31  接下来的一个星期，我的任务是学习python爬虫的编写，至少要实现csdn博客转markdown的任务</p>\n","excerpt":"","more":"<p>2014-12-02 22:56:31  接下来的一个星期，我的任务是学习python爬虫的编写，至少要实现csdn博客转markdown的任务</p>\n"},{"title":"sql中left_join和right_join混用","date":"2014-08-08T02:02:00.000Z","_content":"left join(左联接) 返回包括左表中的所有记录和右表中联结字段相等的记录 \n\nright join(右联接) 返回包括右表中的所有记录和左表中联结字段相等的记录\n\ninner join(等值连接) 只返回两个表中联结字段相等的行\n\n\n\n如上所言,我们只做一下left join的实验,right join和left join 类似\n\n测试一共三张表,a  b   c\n![]()\n\n表结构和数据分别如下\n\na表                                                                  b表                                                              c表\n![]()         ![]()          ![]()\n\n然后我们来试一下左连接\n\n1,  我们来查询a b两张表,连接他们aid=bid的选项\nsql>>SELECT \\*  FROM a   LEFT JOIN b on aid=bid\n\n\n![]()\n\n\n\n看图很好理解,因为是a左连接b,所以b中为空的元素 ,在查询结果中以NULL的形式补全\n\n同理可得\n\nsql>>SELECT \\* FROM a LEFT JOIN c on aid=cid\n![]()\n\n\nsql>>SELECT \\* FROM c LEFT JOIN b on bid=cid\nsql>>SELECT \\* FROM c LEFT JOIN b on cid=bid\n\n\n![]()\n\n\n\n也就是on后面的顺序无所谓,无论是bid=cid还是cid=bid,重点是前面的left join还是right join\n\n\n\n\n\n\n\n2,我们来试一下如果三张表左连接呢,会有什么情况?\n\nsql>>SELECT \\* FROM a\n\n           LEFT JOIN b on bid=aid \n\n           LEFT JOIN c on aid=cid\n![]()\n\n\n\nsql>>SELECT \\* FROM a LEFT JOIN b on bid=aid LEFT JOIN c on bid=cid\n![]()\n\n\n\n3,如果我用了一个right join呢?\n\nsql>>SELECT \\* FROM a LEFT JOIN b on bid=aid RIGHT JOIN c on bid=cid\n![]()\n\n\n\n这里该怎么理解呢?\n感谢[http://blog.csdn.net/sqlserverdiscovery/article/details/6893288](http://blog.csdn.net/sqlserverdiscovery/article/details/6893288)\n\n我们理解的时候可以把它拆成两部分去理解\n\n比如第一部分\nsql>>SELECT \\* FROM a LEFT JOIN b on bid=aid\n\n\n![]()\n\n\n\n然后再思考第二部分,假如上图是一张表  我们叫它a_b\n\n你可以新建一个视图,就可以真成为一张虚表了\n\nsql>>create  VIEW a_b  as (SELECT \\* FROM a LEFT JOIN b on bid=aid)\n![]()\n\n\n\n然后我们继续做下面一部分\n\nsql>>select \\* from a_b right join c on bid=cid\n![]()\n\n\n\n可见,与上面的结果是一样的,当然这是我们理解的过程,实际数据库服务器执行的时候可能不是这样的,它会做一些优化,提高效率\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/sql中left_join和right_join混用.md","raw":"title: 'sql中left_join和right_join混用'\ndate: 2014-08-08 10:02\ntags:\n- sql\n- select\ncategories:\n- 数据库\n---\nleft join(左联接) 返回包括左表中的所有记录和右表中联结字段相等的记录 \n\nright join(右联接) 返回包括右表中的所有记录和左表中联结字段相等的记录\n\ninner join(等值连接) 只返回两个表中联结字段相等的行\n\n\n\n如上所言,我们只做一下left join的实验,right join和left join 类似\n\n测试一共三张表,a  b   c\n![]()\n\n表结构和数据分别如下\n\na表                                                                  b表                                                              c表\n![]()         ![]()          ![]()\n\n然后我们来试一下左连接\n\n1,  我们来查询a b两张表,连接他们aid=bid的选项\nsql>>SELECT \\*  FROM a   LEFT JOIN b on aid=bid\n\n\n![]()\n\n\n\n看图很好理解,因为是a左连接b,所以b中为空的元素 ,在查询结果中以NULL的形式补全\n\n同理可得\n\nsql>>SELECT \\* FROM a LEFT JOIN c on aid=cid\n![]()\n\n\nsql>>SELECT \\* FROM c LEFT JOIN b on bid=cid\nsql>>SELECT \\* FROM c LEFT JOIN b on cid=bid\n\n\n![]()\n\n\n\n也就是on后面的顺序无所谓,无论是bid=cid还是cid=bid,重点是前面的left join还是right join\n\n\n\n\n\n\n\n2,我们来试一下如果三张表左连接呢,会有什么情况?\n\nsql>>SELECT \\* FROM a\n\n           LEFT JOIN b on bid=aid \n\n           LEFT JOIN c on aid=cid\n![]()\n\n\n\nsql>>SELECT \\* FROM a LEFT JOIN b on bid=aid LEFT JOIN c on bid=cid\n![]()\n\n\n\n3,如果我用了一个right join呢?\n\nsql>>SELECT \\* FROM a LEFT JOIN b on bid=aid RIGHT JOIN c on bid=cid\n![]()\n\n\n\n这里该怎么理解呢?\n感谢[http://blog.csdn.net/sqlserverdiscovery/article/details/6893288](http://blog.csdn.net/sqlserverdiscovery/article/details/6893288)\n\n我们理解的时候可以把它拆成两部分去理解\n\n比如第一部分\nsql>>SELECT \\* FROM a LEFT JOIN b on bid=aid\n\n\n![]()\n\n\n\n然后再思考第二部分,假如上图是一张表  我们叫它a_b\n\n你可以新建一个视图,就可以真成为一张虚表了\n\nsql>>create  VIEW a_b  as (SELECT \\* FROM a LEFT JOIN b on bid=aid)\n![]()\n\n\n\n然后我们继续做下面一部分\n\nsql>>select \\* from a_b right join c on bid=cid\n![]()\n\n\n\n可见,与上面的结果是一样的,当然这是我们理解的过程,实际数据库服务器执行的时候可能不是这样的,它会做一些优化,提高效率\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"sql中left_join和right_join混用","published":1,"updated":"2015-09-29T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7ysn0080x8cdxjjokg0t","content":"<p>left join(左联接) 返回包括左表中的所有记录和右表中联结字段相等的记录 </p>\n<p>right join(右联接) 返回包括右表中的所有记录和左表中联结字段相等的记录</p>\n<p>inner join(等值连接) 只返回两个表中联结字段相等的行</p>\n<p>如上所言,我们只做一下left join的实验,right join和left join 类似</p>\n<p>测试一共三张表,a  b   c<br><img src=\"\" alt=\"\"></p>\n<p>表结构和数据分别如下</p>\n<p>a表                                                                  b表                                                              c表<br><img src=\"\" alt=\"\">         <img src=\"\" alt=\"\">          <img src=\"\" alt=\"\"></p>\n<p>然后我们来试一下左连接</p>\n<p>1,  我们来查询a b两张表,连接他们aid=bid的选项<br>sql&gt;&gt;SELECT *  FROM a   LEFT JOIN b on aid=bid</p>\n<p><img src=\"\" alt=\"\"></p>\n<p>看图很好理解,因为是a左连接b,所以b中为空的元素 ,在查询结果中以NULL的形式补全</p>\n<p>同理可得</p>\n<p>sql&gt;&gt;SELECT * FROM a LEFT JOIN c on aid=cid<br><img src=\"\" alt=\"\"></p>\n<p>sql&gt;&gt;SELECT * FROM c LEFT JOIN b on bid=cid<br>sql&gt;&gt;SELECT * FROM c LEFT JOIN b on cid=bid</p>\n<p><img src=\"\" alt=\"\"></p>\n<p>也就是on后面的顺序无所谓,无论是bid=cid还是cid=bid,重点是前面的left join还是right join</p>\n<p>2,我们来试一下如果三张表左连接呢,会有什么情况?</p>\n<p>sql&gt;&gt;SELECT * FROM a</p>\n<pre><code>LEFT JOIN b on bid=aid \n\nLEFT JOIN c on aid=cid\n</code></pre><p><img src=\"\" alt=\"\"></p>\n<p>sql&gt;&gt;SELECT * FROM a LEFT JOIN b on bid=aid LEFT JOIN c on bid=cid<br><img src=\"\" alt=\"\"></p>\n<p>3,如果我用了一个right join呢?</p>\n<p>sql&gt;&gt;SELECT * FROM a LEFT JOIN b on bid=aid RIGHT JOIN c on bid=cid<br><img src=\"\" alt=\"\"></p>\n<p>这里该怎么理解呢?<br>感谢<a href=\"http://blog.csdn.net/sqlserverdiscovery/article/details/6893288\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/sqlserverdiscovery/article/details/6893288</a></p>\n<p>我们理解的时候可以把它拆成两部分去理解</p>\n<p>比如第一部分<br>sql&gt;&gt;SELECT * FROM a LEFT JOIN b on bid=aid</p>\n<p><img src=\"\" alt=\"\"></p>\n<p>然后再思考第二部分,假如上图是一张表  我们叫它a_b</p>\n<p>你可以新建一个视图,就可以真成为一张虚表了</p>\n<p>sql&gt;&gt;create  VIEW a_b  as (SELECT * FROM a LEFT JOIN b on bid=aid)<br><img src=\"\" alt=\"\"></p>\n<p>然后我们继续做下面一部分</p>\n<p>sql&gt;&gt;select * from a_b right join c on bid=cid<br><img src=\"\" alt=\"\"></p>\n<p>可见,与上面的结果是一样的,当然这是我们理解的过程,实际数据库服务器执行的时候可能不是这样的,它会做一些优化,提高效率</p>\n","excerpt":"","more":"<p>left join(左联接) 返回包括左表中的所有记录和右表中联结字段相等的记录 </p>\n<p>right join(右联接) 返回包括右表中的所有记录和左表中联结字段相等的记录</p>\n<p>inner join(等值连接) 只返回两个表中联结字段相等的行</p>\n<p>如上所言,我们只做一下left join的实验,right join和left join 类似</p>\n<p>测试一共三张表,a  b   c<br><img src=\"\" alt=\"\"></p>\n<p>表结构和数据分别如下</p>\n<p>a表                                                                  b表                                                              c表<br><img src=\"\" alt=\"\">         <img src=\"\" alt=\"\">          <img src=\"\" alt=\"\"></p>\n<p>然后我们来试一下左连接</p>\n<p>1,  我们来查询a b两张表,连接他们aid=bid的选项<br>sql&gt;&gt;SELECT *  FROM a   LEFT JOIN b on aid=bid</p>\n<p><img src=\"\" alt=\"\"></p>\n<p>看图很好理解,因为是a左连接b,所以b中为空的元素 ,在查询结果中以NULL的形式补全</p>\n<p>同理可得</p>\n<p>sql&gt;&gt;SELECT * FROM a LEFT JOIN c on aid=cid<br><img src=\"\" alt=\"\"></p>\n<p>sql&gt;&gt;SELECT * FROM c LEFT JOIN b on bid=cid<br>sql&gt;&gt;SELECT * FROM c LEFT JOIN b on cid=bid</p>\n<p><img src=\"\" alt=\"\"></p>\n<p>也就是on后面的顺序无所谓,无论是bid=cid还是cid=bid,重点是前面的left join还是right join</p>\n<p>2,我们来试一下如果三张表左连接呢,会有什么情况?</p>\n<p>sql&gt;&gt;SELECT * FROM a</p>\n<pre><code>LEFT JOIN b on bid=aid \n\nLEFT JOIN c on aid=cid\n</code></pre><p><img src=\"\" alt=\"\"></p>\n<p>sql&gt;&gt;SELECT * FROM a LEFT JOIN b on bid=aid LEFT JOIN c on bid=cid<br><img src=\"\" alt=\"\"></p>\n<p>3,如果我用了一个right join呢?</p>\n<p>sql&gt;&gt;SELECT * FROM a LEFT JOIN b on bid=aid RIGHT JOIN c on bid=cid<br><img src=\"\" alt=\"\"></p>\n<p>这里该怎么理解呢?<br>感谢<a href=\"http://blog.csdn.net/sqlserverdiscovery/article/details/6893288\">http://blog.csdn.net/sqlserverdiscovery/article/details/6893288</a></p>\n<p>我们理解的时候可以把它拆成两部分去理解</p>\n<p>比如第一部分<br>sql&gt;&gt;SELECT * FROM a LEFT JOIN b on bid=aid</p>\n<p><img src=\"\" alt=\"\"></p>\n<p>然后再思考第二部分,假如上图是一张表  我们叫它a_b</p>\n<p>你可以新建一个视图,就可以真成为一张虚表了</p>\n<p>sql&gt;&gt;create  VIEW a_b  as (SELECT * FROM a LEFT JOIN b on bid=aid)<br><img src=\"\" alt=\"\"></p>\n<p>然后我们继续做下面一部分</p>\n<p>sql&gt;&gt;select * from a_b right join c on bid=cid<br><img src=\"\" alt=\"\"></p>\n<p>可见,与上面的结果是一样的,当然这是我们理解的过程,实际数据库服务器执行的时候可能不是这样的,它会做一些优化,提高效率</p>\n"},{"title":"基于python的requests库，模拟登录csdn博客","date":"2015-05-23T11:06:04.000Z","_content":"还是继续我的python学习。以前写的爬虫用的urllib2来实现，也用过scrapy的爬虫框架，这次试试requests，刚开始用，用起来确实比urllib2好，封装的更好一些，使用起来简单方便很多。\n<!-- more -->\n# 安装requests库\n在ubuntu下面安装很简单\n```bash\npip install requests\n```\n就搞定了\n\n# 快速上手的小例子\n下面给个快速入门，最简单的例子\n```python\nimport requests\nr = requests.get('http://www.baidu.com')\nprint r.text\n```\n这段代码，很简单。\n第一行，引入requests库，这是必然的。\n第二行，通过get方式获取baidu首页的内容。\n第三行，把返回的response内容，输出出来\n\n果然很简单，这样就可以发送一个get请求，同理，你还可以使用\n`requests.post`,`requests.put`,`requests.options`,`requests.head`，发送请求，没错就是这么简单，果然比urllib2好用。\n# 模拟登录csdn\n我们需要其他的辅助工具\n### 浏览器：Firefox\n### 浏览器插件：tamper data，firebug\n我们需要tamper data来拦截请求，因为chrome没有这个功能的插件，所以这个只能使用firefox来做（除了拦截请求chrome没有，其他的工作都可以用chrome，看个人喜好吧）。\n\n# 分析登录过程\n## 1 打开登录页面\n我们首先打开csdn的登录页面`https://passport.csdn.net/account/login?ref=toolbar`\n这个链接，前面部分是登录的网址，问号后面的参数，顾名思义，referer，就是你从哪里跳过来的，也许是一个页面跳转到登录的，toolbar就是我自己点击顶部导航栏，然后跳转到登录页面的。\n## 2 清除相关的cookie\n为了排除不必要的干扰，我们先清除掉所有的相关的cookie，这样方便我们分析哪些参数是必须的。\n![firefox中，清除cookie](http://ww1.sinaimg.cn/large/692869a3gw1esegc1itw2j20qu075779.jpg)\n## 3 登录过程分析\n清除了cookie后，我们刷新一下页面`https://passport.csdn.net/account/login?ref=toolbar`，重新获取对应的cookie。\n然后我们就开始用tamper data来拦截请求。\n![使用tamper data](http://ww2.sinaimg.cn/large/692869a3gw1esegfztiz7j20s40ftdjw.jpg)\n我们点击`start tamper`，在网页中填写用户名和密码。点击`登录`，会发出一个请求，然后tamper data会拦截下这个请求，询问我们是否拦截，点击tamper，我们可以在这个请求提交之前，查看请求的内容，还可以做删改。\n![发出第一个登录请求前拦截下来，查看表单内容](http://ww1.sinaimg.cn/large/692869a3gw1esegkslypyj20y20gntdt.jpg)\ncsdn的登录过程比较简单，发送一个登录表单过去，就登录成功了，不过记得修改headers，这是后话。\n## 4 开始模拟登录\n知道登录过程了，我们就开始写登录的代码。\n```python\nimport requests\n# 使用beautifulsoup来处理获取的html内容，这个库需要安装，还是使用pip install beautifulsoup4来安装\nfrom bs4 import BeautifulSoup as bs\n# 这个函数使用来提取流水号的\ndef toJson(str):\n    '''\n    提取lt流水号，将数据化为一个字典\n    '''\n    soup = bs(str)\n    tt = {}\n    # 提取form表单中所有的input标签，以字典的形式来保存name：value\n    for inp in soup.form.find_all('input'):\n        if inp.get('name') != None:\n            tt[inp.get('name')] =inp.get('value')\n    return tt\n    \n# 这行代码，是用来维持cookie的，你后续的操作都不用担心cookie，他会自动带上相应的cookie\ns = requests.Session()\n# 我们需要带表单的参数,这里面有个参数lt,登录操作的流水号，我们需要从html页面中进行提取\npayload ={'username':'jackroyal','password':'123456','lt':soup[\"lt\"],'execution':'e1s1','_eventId':'submit'}\nr = s.post(\"http://passport.csdn.net/account/login\",data=payload,headers=header)\nprint r.text\n```\nok，至此，登录就成功了\n## 5 优化\n当你登录成功后，你会问，我怎么知道登录成功了呢？当你试图去抓取`http://write.blog.csdn.net/postlist`的内容的时候，你会发现一个403的错误，这是为啥呢？\n很简单，`user agent`没有修改，我们用的是默认的`user agent`，这可不是一个正常的用户，所以被网站拒绝了。我们加上他就好了\n```python\nheader = {'User-Agent':'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:38.0) Gecko/20100101 Firefox/38.0'}\nr = s.post(\"http://passport.csdn.net/account/login\",data=payload,headers=header)\nprint r.text\n```\n# 后话\n上面的代码还是太简单，我们都知道cookie是有有效期的，我在做调试的时候，没修改一次，就要模拟登录一次，这样不好，我们要保存cookie，这样下次就不需要重新发送登录请求了\n分享出完整的代码\n```python\n# !/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport requests\nimport time\nimport os\nfrom bs4 import BeautifulSoup as bs\nfrom cookielib import LWPCookieJar\n\n\ndef toJson(str):\n    '''\n    提取lt流水号，将数据化为一个字典\n    '''\n    soup = bs(str)\n    tt = {}\n    for inp in soup.form.find_all('input'):\n        if inp.get('name') != None:\n            tt[inp.get('name')] =inp.get('value')\n    return tt\n\n\n# cookie setting\ns = requests.Session()\ns.cookies = LWPCookieJar('cookiejar')\nheader = {'User-Agent':'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:38.0) Gecko/20100101 Firefox/38.0'}\nif not os.path.exists('cookiejar'):\n    print \"there is no cookie,setting\"\n    r = s.get(\"http://passport.csdn.net/account/login\")\n    soup = toJson(r.text)\n    payload ={'username':'jackroyal','password':'123456','lt':soup[\"lt\"],'execution':'e1s1','_eventId':'submit'}\n\n    print payload\n    r = s.post(\"http://passport.csdn.net/account/login\",data=payload,headers=header)\n    s.cookies.save(ignore_discard=True)\n\n    print r.text\nelse:\n    print \"cookie exists,restore\"\n    s.cookies.load(ignore_discard=True)\n\n# r = s.get(\"https://passport.csdn.net/content/loginbox/loginapi.js\")\nr = s.get(\"http://write.blog.csdn.net/postlist\",headers=header)\nprint r.text\n```\n\n\n\n\n# 参考文献\n1 [requests官方文档快速上手——中文版](http://requests-docs-cn.readthedocs.org/zh_CN/latest/user/quickstart.html)\n2 [beautifuisoup官方文档](http://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html)\n3 [python的requests如何保存cookie到文件](http://stackoverflow.com/questions/13030095/how-to-save-requests-python-cookies-to-a-file)\n\n\n\n\n\n\n\n","source":"_posts/python-requests-login-csdn-blog.md","raw":"title: 基于python的requests库，模拟登录csdn博客\ndate: 2015-05-23 19:06:04\ntags:\n- python\n- csdn\n- 模拟登录\n- requests\ncategories:\n- python学习笔记\n---\n还是继续我的python学习。以前写的爬虫用的urllib2来实现，也用过scrapy的爬虫框架，这次试试requests，刚开始用，用起来确实比urllib2好，封装的更好一些，使用起来简单方便很多。\n<!-- more -->\n# 安装requests库\n在ubuntu下面安装很简单\n```bash\npip install requests\n```\n就搞定了\n\n# 快速上手的小例子\n下面给个快速入门，最简单的例子\n```python\nimport requests\nr = requests.get('http://www.baidu.com')\nprint r.text\n```\n这段代码，很简单。\n第一行，引入requests库，这是必然的。\n第二行，通过get方式获取baidu首页的内容。\n第三行，把返回的response内容，输出出来\n\n果然很简单，这样就可以发送一个get请求，同理，你还可以使用\n`requests.post`,`requests.put`,`requests.options`,`requests.head`，发送请求，没错就是这么简单，果然比urllib2好用。\n# 模拟登录csdn\n我们需要其他的辅助工具\n### 浏览器：Firefox\n### 浏览器插件：tamper data，firebug\n我们需要tamper data来拦截请求，因为chrome没有这个功能的插件，所以这个只能使用firefox来做（除了拦截请求chrome没有，其他的工作都可以用chrome，看个人喜好吧）。\n\n# 分析登录过程\n## 1 打开登录页面\n我们首先打开csdn的登录页面`https://passport.csdn.net/account/login?ref=toolbar`\n这个链接，前面部分是登录的网址，问号后面的参数，顾名思义，referer，就是你从哪里跳过来的，也许是一个页面跳转到登录的，toolbar就是我自己点击顶部导航栏，然后跳转到登录页面的。\n## 2 清除相关的cookie\n为了排除不必要的干扰，我们先清除掉所有的相关的cookie，这样方便我们分析哪些参数是必须的。\n![firefox中，清除cookie](http://ww1.sinaimg.cn/large/692869a3gw1esegc1itw2j20qu075779.jpg)\n## 3 登录过程分析\n清除了cookie后，我们刷新一下页面`https://passport.csdn.net/account/login?ref=toolbar`，重新获取对应的cookie。\n然后我们就开始用tamper data来拦截请求。\n![使用tamper data](http://ww2.sinaimg.cn/large/692869a3gw1esegfztiz7j20s40ftdjw.jpg)\n我们点击`start tamper`，在网页中填写用户名和密码。点击`登录`，会发出一个请求，然后tamper data会拦截下这个请求，询问我们是否拦截，点击tamper，我们可以在这个请求提交之前，查看请求的内容，还可以做删改。\n![发出第一个登录请求前拦截下来，查看表单内容](http://ww1.sinaimg.cn/large/692869a3gw1esegkslypyj20y20gntdt.jpg)\ncsdn的登录过程比较简单，发送一个登录表单过去，就登录成功了，不过记得修改headers，这是后话。\n## 4 开始模拟登录\n知道登录过程了，我们就开始写登录的代码。\n```python\nimport requests\n# 使用beautifulsoup来处理获取的html内容，这个库需要安装，还是使用pip install beautifulsoup4来安装\nfrom bs4 import BeautifulSoup as bs\n# 这个函数使用来提取流水号的\ndef toJson(str):\n    '''\n    提取lt流水号，将数据化为一个字典\n    '''\n    soup = bs(str)\n    tt = {}\n    # 提取form表单中所有的input标签，以字典的形式来保存name：value\n    for inp in soup.form.find_all('input'):\n        if inp.get('name') != None:\n            tt[inp.get('name')] =inp.get('value')\n    return tt\n    \n# 这行代码，是用来维持cookie的，你后续的操作都不用担心cookie，他会自动带上相应的cookie\ns = requests.Session()\n# 我们需要带表单的参数,这里面有个参数lt,登录操作的流水号，我们需要从html页面中进行提取\npayload ={'username':'jackroyal','password':'123456','lt':soup[\"lt\"],'execution':'e1s1','_eventId':'submit'}\nr = s.post(\"http://passport.csdn.net/account/login\",data=payload,headers=header)\nprint r.text\n```\nok，至此，登录就成功了\n## 5 优化\n当你登录成功后，你会问，我怎么知道登录成功了呢？当你试图去抓取`http://write.blog.csdn.net/postlist`的内容的时候，你会发现一个403的错误，这是为啥呢？\n很简单，`user agent`没有修改，我们用的是默认的`user agent`，这可不是一个正常的用户，所以被网站拒绝了。我们加上他就好了\n```python\nheader = {'User-Agent':'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:38.0) Gecko/20100101 Firefox/38.0'}\nr = s.post(\"http://passport.csdn.net/account/login\",data=payload,headers=header)\nprint r.text\n```\n# 后话\n上面的代码还是太简单，我们都知道cookie是有有效期的，我在做调试的时候，没修改一次，就要模拟登录一次，这样不好，我们要保存cookie，这样下次就不需要重新发送登录请求了\n分享出完整的代码\n```python\n# !/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport requests\nimport time\nimport os\nfrom bs4 import BeautifulSoup as bs\nfrom cookielib import LWPCookieJar\n\n\ndef toJson(str):\n    '''\n    提取lt流水号，将数据化为一个字典\n    '''\n    soup = bs(str)\n    tt = {}\n    for inp in soup.form.find_all('input'):\n        if inp.get('name') != None:\n            tt[inp.get('name')] =inp.get('value')\n    return tt\n\n\n# cookie setting\ns = requests.Session()\ns.cookies = LWPCookieJar('cookiejar')\nheader = {'User-Agent':'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:38.0) Gecko/20100101 Firefox/38.0'}\nif not os.path.exists('cookiejar'):\n    print \"there is no cookie,setting\"\n    r = s.get(\"http://passport.csdn.net/account/login\")\n    soup = toJson(r.text)\n    payload ={'username':'jackroyal','password':'123456','lt':soup[\"lt\"],'execution':'e1s1','_eventId':'submit'}\n\n    print payload\n    r = s.post(\"http://passport.csdn.net/account/login\",data=payload,headers=header)\n    s.cookies.save(ignore_discard=True)\n\n    print r.text\nelse:\n    print \"cookie exists,restore\"\n    s.cookies.load(ignore_discard=True)\n\n# r = s.get(\"https://passport.csdn.net/content/loginbox/loginapi.js\")\nr = s.get(\"http://write.blog.csdn.net/postlist\",headers=header)\nprint r.text\n```\n\n\n\n\n# 参考文献\n1 [requests官方文档快速上手——中文版](http://requests-docs-cn.readthedocs.org/zh_CN/latest/user/quickstart.html)\n2 [beautifuisoup官方文档](http://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html)\n3 [python的requests如何保存cookie到文件](http://stackoverflow.com/questions/13030095/how-to-save-requests-python-cookies-to-a-file)\n\n\n\n\n\n\n\n","slug":"python-requests-login-csdn-blog","published":1,"updated":"2015-10-29T06:08:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7ysr0085x8cdb1gnfsm3","content":"<p>还是继续我的python学习。以前写的爬虫用的urllib2来实现，也用过scrapy的爬虫框架，这次试试requests，刚开始用，用起来确实比urllib2好，封装的更好一些，使用起来简单方便很多。<br><a id=\"more\"></a></p>\n<h1 id=\"安装requests库\"><a href=\"#安装requests库\" class=\"headerlink\" title=\"安装requests库\"></a>安装requests库</h1><p>在ubuntu下面安装很简单<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install requests</div></pre></td></tr></table></figure></p>\n<p>就搞定了</p>\n<h1 id=\"快速上手的小例子\"><a href=\"#快速上手的小例子\" class=\"headerlink\" title=\"快速上手的小例子\"></a>快速上手的小例子</h1><p>下面给个快速入门，最简单的例子<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\">r = requests.get(<span class=\"string\">'http://www.baidu.com'</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> r.text</div></pre></td></tr></table></figure></p>\n<p>这段代码，很简单。<br>第一行，引入requests库，这是必然的。<br>第二行，通过get方式获取baidu首页的内容。<br>第三行，把返回的response内容，输出出来</p>\n<p>果然很简单，这样就可以发送一个get请求，同理，你还可以使用<br><code>requests.post</code>,<code>requests.put</code>,<code>requests.options</code>,<code>requests.head</code>，发送请求，没错就是这么简单，果然比urllib2好用。</p>\n<h1 id=\"模拟登录csdn\"><a href=\"#模拟登录csdn\" class=\"headerlink\" title=\"模拟登录csdn\"></a>模拟登录csdn</h1><p>我们需要其他的辅助工具</p>\n<h3 id=\"浏览器：Firefox\"><a href=\"#浏览器：Firefox\" class=\"headerlink\" title=\"浏览器：Firefox\"></a>浏览器：Firefox</h3><h3 id=\"浏览器插件：tamper-data，firebug\"><a href=\"#浏览器插件：tamper-data，firebug\" class=\"headerlink\" title=\"浏览器插件：tamper data，firebug\"></a>浏览器插件：tamper data，firebug</h3><p>我们需要tamper data来拦截请求，因为chrome没有这个功能的插件，所以这个只能使用firefox来做（除了拦截请求chrome没有，其他的工作都可以用chrome，看个人喜好吧）。</p>\n<h1 id=\"分析登录过程\"><a href=\"#分析登录过程\" class=\"headerlink\" title=\"分析登录过程\"></a>分析登录过程</h1><h2 id=\"1-打开登录页面\"><a href=\"#1-打开登录页面\" class=\"headerlink\" title=\"1 打开登录页面\"></a>1 打开登录页面</h2><p>我们首先打开csdn的登录页面<code>https://passport.csdn.net/account/login?ref=toolbar</code><br>这个链接，前面部分是登录的网址，问号后面的参数，顾名思义，referer，就是你从哪里跳过来的，也许是一个页面跳转到登录的，toolbar就是我自己点击顶部导航栏，然后跳转到登录页面的。</p>\n<h2 id=\"2-清除相关的cookie\"><a href=\"#2-清除相关的cookie\" class=\"headerlink\" title=\"2 清除相关的cookie\"></a>2 清除相关的cookie</h2><p>为了排除不必要的干扰，我们先清除掉所有的相关的cookie，这样方便我们分析哪些参数是必须的。<br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1esegc1itw2j20qu075779.jpg\" alt=\"firefox中，清除cookie\"></p>\n<h2 id=\"3-登录过程分析\"><a href=\"#3-登录过程分析\" class=\"headerlink\" title=\"3 登录过程分析\"></a>3 登录过程分析</h2><p>清除了cookie后，我们刷新一下页面<code>https://passport.csdn.net/account/login?ref=toolbar</code>，重新获取对应的cookie。<br>然后我们就开始用tamper data来拦截请求。<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1esegfztiz7j20s40ftdjw.jpg\" alt=\"使用tamper data\"><br>我们点击<code>start tamper</code>，在网页中填写用户名和密码。点击<code>登录</code>，会发出一个请求，然后tamper data会拦截下这个请求，询问我们是否拦截，点击tamper，我们可以在这个请求提交之前，查看请求的内容，还可以做删改。<br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1esegkslypyj20y20gntdt.jpg\" alt=\"发出第一个登录请求前拦截下来，查看表单内容\"><br>csdn的登录过程比较简单，发送一个登录表单过去，就登录成功了，不过记得修改headers，这是后话。</p>\n<h2 id=\"4-开始模拟登录\"><a href=\"#4-开始模拟登录\" class=\"headerlink\" title=\"4 开始模拟登录\"></a>4 开始模拟登录</h2><p>知道登录过程了，我们就开始写登录的代码。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"><span class=\"comment\"># 使用beautifulsoup来处理获取的html内容，这个库需要安装，还是使用pip install beautifulsoup4来安装</span></div><div class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup <span class=\"keyword\">as</span> bs</div><div class=\"line\"><span class=\"comment\"># 这个函数使用来提取流水号的</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toJson</span><span class=\"params\">(str)</span>:</span></div><div class=\"line\">    <span class=\"string\">'''</span></div><div class=\"line\">    提取lt流水号，将数据化为一个字典</div><div class=\"line\">    '''</div><div class=\"line\">    soup = bs(str)</div><div class=\"line\">    tt = &#123;&#125;</div><div class=\"line\">    <span class=\"comment\"># 提取form表单中所有的input标签，以字典的形式来保存name：value</span></div><div class=\"line\">    <span class=\"keyword\">for</span> inp <span class=\"keyword\">in</span> soup.form.find_all(<span class=\"string\">'input'</span>):</div><div class=\"line\">        <span class=\"keyword\">if</span> inp.get(<span class=\"string\">'name'</span>) != <span class=\"keyword\">None</span>:</div><div class=\"line\">            tt[inp.get(<span class=\"string\">'name'</span>)] =inp.get(<span class=\"string\">'value'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> tt</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\"># 这行代码，是用来维持cookie的，你后续的操作都不用担心cookie，他会自动带上相应的cookie</span></div><div class=\"line\">s = requests.Session()</div><div class=\"line\"><span class=\"comment\"># 我们需要带表单的参数,这里面有个参数lt,登录操作的流水号，我们需要从html页面中进行提取</span></div><div class=\"line\">payload =&#123;<span class=\"string\">'username'</span>:<span class=\"string\">'jackroyal'</span>,<span class=\"string\">'password'</span>:<span class=\"string\">'123456'</span>,<span class=\"string\">'lt'</span>:soup[<span class=\"string\">\"lt\"</span>],<span class=\"string\">'execution'</span>:<span class=\"string\">'e1s1'</span>,<span class=\"string\">'_eventId'</span>:<span class=\"string\">'submit'</span>&#125;</div><div class=\"line\">r = s.post(<span class=\"string\">\"http://passport.csdn.net/account/login\"</span>,data=payload,headers=header)</div><div class=\"line\"><span class=\"keyword\">print</span> r.text</div></pre></td></tr></table></figure></p>\n<p>ok，至此，登录就成功了</p>\n<h2 id=\"5-优化\"><a href=\"#5-优化\" class=\"headerlink\" title=\"5 优化\"></a>5 优化</h2><p>当你登录成功后，你会问，我怎么知道登录成功了呢？当你试图去抓取<code>http://write.blog.csdn.net/postlist</code>的内容的时候，你会发现一个403的错误，这是为啥呢？<br>很简单，<code>user agent</code>没有修改，我们用的是默认的<code>user agent</code>，这可不是一个正常的用户，所以被网站拒绝了。我们加上他就好了<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">header = &#123;<span class=\"string\">'User-Agent'</span>:<span class=\"string\">'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:38.0) Gecko/20100101 Firefox/38.0'</span>&#125;</div><div class=\"line\">r = s.post(<span class=\"string\">\"http://passport.csdn.net/account/login\"</span>,data=payload,headers=header)</div><div class=\"line\"><span class=\"keyword\">print</span> r.text</div></pre></td></tr></table></figure></p>\n<h1 id=\"后话\"><a href=\"#后话\" class=\"headerlink\" title=\"后话\"></a>后话</h1><p>上面的代码还是太简单，我们都知道cookie是有有效期的，我在做调试的时候，没修改一次，就要模拟登录一次，这样不好，我们要保存cookie，这样下次就不需要重新发送登录请求了<br>分享出完整的代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># !/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup <span class=\"keyword\">as</span> bs</div><div class=\"line\"><span class=\"keyword\">from</span> cookielib <span class=\"keyword\">import</span> LWPCookieJar</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toJson</span><span class=\"params\">(str)</span>:</span></div><div class=\"line\">    <span class=\"string\">'''</span></div><div class=\"line\">    提取lt流水号，将数据化为一个字典</div><div class=\"line\">    '''</div><div class=\"line\">    soup = bs(str)</div><div class=\"line\">    tt = &#123;&#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> inp <span class=\"keyword\">in</span> soup.form.find_all(<span class=\"string\">'input'</span>):</div><div class=\"line\">        <span class=\"keyword\">if</span> inp.get(<span class=\"string\">'name'</span>) != <span class=\"keyword\">None</span>:</div><div class=\"line\">            tt[inp.get(<span class=\"string\">'name'</span>)] =inp.get(<span class=\"string\">'value'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> tt</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># cookie setting</span></div><div class=\"line\">s = requests.Session()</div><div class=\"line\">s.cookies = LWPCookieJar(<span class=\"string\">'cookiejar'</span>)</div><div class=\"line\">header = &#123;<span class=\"string\">'User-Agent'</span>:<span class=\"string\">'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:38.0) Gecko/20100101 Firefox/38.0'</span>&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(<span class=\"string\">'cookiejar'</span>):</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"there is no cookie,setting\"</span></div><div class=\"line\">    r = s.get(<span class=\"string\">\"http://passport.csdn.net/account/login\"</span>)</div><div class=\"line\">    soup = toJson(r.text)</div><div class=\"line\">    payload =&#123;<span class=\"string\">'username'</span>:<span class=\"string\">'jackroyal'</span>,<span class=\"string\">'password'</span>:<span class=\"string\">'123456'</span>,<span class=\"string\">'lt'</span>:soup[<span class=\"string\">\"lt\"</span>],<span class=\"string\">'execution'</span>:<span class=\"string\">'e1s1'</span>,<span class=\"string\">'_eventId'</span>:<span class=\"string\">'submit'</span>&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">print</span> payload</div><div class=\"line\">    r = s.post(<span class=\"string\">\"http://passport.csdn.net/account/login\"</span>,data=payload,headers=header)</div><div class=\"line\">    s.cookies.save(ignore_discard=<span class=\"keyword\">True</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">print</span> r.text</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"cookie exists,restore\"</span></div><div class=\"line\">    s.cookies.load(ignore_discard=<span class=\"keyword\">True</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># r = s.get(\"https://passport.csdn.net/content/loginbox/loginapi.js\")</span></div><div class=\"line\">r = s.get(<span class=\"string\">\"http://write.blog.csdn.net/postlist\"</span>,headers=header)</div><div class=\"line\"><span class=\"keyword\">print</span> r.text</div></pre></td></tr></table></figure></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"http://requests-docs-cn.readthedocs.org/zh_CN/latest/user/quickstart.html\" target=\"_blank\" rel=\"external\">requests官方文档快速上手——中文版</a><br>2 <a href=\"http://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html\" target=\"_blank\" rel=\"external\">beautifuisoup官方文档</a><br>3 <a href=\"http://stackoverflow.com/questions/13030095/how-to-save-requests-python-cookies-to-a-file\" target=\"_blank\" rel=\"external\">python的requests如何保存cookie到文件</a></p>\n","excerpt":"<p>还是继续我的python学习。以前写的爬虫用的urllib2来实现，也用过scrapy的爬虫框架，这次试试requests，刚开始用，用起来确实比urllib2好，封装的更好一些，使用起来简单方便很多。<br>","more":"</p>\n<h1 id=\"安装requests库\"><a href=\"#安装requests库\" class=\"headerlink\" title=\"安装requests库\"></a>安装requests库</h1><p>在ubuntu下面安装很简单<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install requests</div></pre></td></tr></table></figure></p>\n<p>就搞定了</p>\n<h1 id=\"快速上手的小例子\"><a href=\"#快速上手的小例子\" class=\"headerlink\" title=\"快速上手的小例子\"></a>快速上手的小例子</h1><p>下面给个快速入门，最简单的例子<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\">r = requests.get(<span class=\"string\">'http://www.baidu.com'</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> r.text</div></pre></td></tr></table></figure></p>\n<p>这段代码，很简单。<br>第一行，引入requests库，这是必然的。<br>第二行，通过get方式获取baidu首页的内容。<br>第三行，把返回的response内容，输出出来</p>\n<p>果然很简单，这样就可以发送一个get请求，同理，你还可以使用<br><code>requests.post</code>,<code>requests.put</code>,<code>requests.options</code>,<code>requests.head</code>，发送请求，没错就是这么简单，果然比urllib2好用。</p>\n<h1 id=\"模拟登录csdn\"><a href=\"#模拟登录csdn\" class=\"headerlink\" title=\"模拟登录csdn\"></a>模拟登录csdn</h1><p>我们需要其他的辅助工具</p>\n<h3 id=\"浏览器：Firefox\"><a href=\"#浏览器：Firefox\" class=\"headerlink\" title=\"浏览器：Firefox\"></a>浏览器：Firefox</h3><h3 id=\"浏览器插件：tamper-data，firebug\"><a href=\"#浏览器插件：tamper-data，firebug\" class=\"headerlink\" title=\"浏览器插件：tamper data，firebug\"></a>浏览器插件：tamper data，firebug</h3><p>我们需要tamper data来拦截请求，因为chrome没有这个功能的插件，所以这个只能使用firefox来做（除了拦截请求chrome没有，其他的工作都可以用chrome，看个人喜好吧）。</p>\n<h1 id=\"分析登录过程\"><a href=\"#分析登录过程\" class=\"headerlink\" title=\"分析登录过程\"></a>分析登录过程</h1><h2 id=\"1-打开登录页面\"><a href=\"#1-打开登录页面\" class=\"headerlink\" title=\"1 打开登录页面\"></a>1 打开登录页面</h2><p>我们首先打开csdn的登录页面<code>https://passport.csdn.net/account/login?ref=toolbar</code><br>这个链接，前面部分是登录的网址，问号后面的参数，顾名思义，referer，就是你从哪里跳过来的，也许是一个页面跳转到登录的，toolbar就是我自己点击顶部导航栏，然后跳转到登录页面的。</p>\n<h2 id=\"2-清除相关的cookie\"><a href=\"#2-清除相关的cookie\" class=\"headerlink\" title=\"2 清除相关的cookie\"></a>2 清除相关的cookie</h2><p>为了排除不必要的干扰，我们先清除掉所有的相关的cookie，这样方便我们分析哪些参数是必须的。<br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1esegc1itw2j20qu075779.jpg\" alt=\"firefox中，清除cookie\"></p>\n<h2 id=\"3-登录过程分析\"><a href=\"#3-登录过程分析\" class=\"headerlink\" title=\"3 登录过程分析\"></a>3 登录过程分析</h2><p>清除了cookie后，我们刷新一下页面<code>https://passport.csdn.net/account/login?ref=toolbar</code>，重新获取对应的cookie。<br>然后我们就开始用tamper data来拦截请求。<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1esegfztiz7j20s40ftdjw.jpg\" alt=\"使用tamper data\"><br>我们点击<code>start tamper</code>，在网页中填写用户名和密码。点击<code>登录</code>，会发出一个请求，然后tamper data会拦截下这个请求，询问我们是否拦截，点击tamper，我们可以在这个请求提交之前，查看请求的内容，还可以做删改。<br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1esegkslypyj20y20gntdt.jpg\" alt=\"发出第一个登录请求前拦截下来，查看表单内容\"><br>csdn的登录过程比较简单，发送一个登录表单过去，就登录成功了，不过记得修改headers，这是后话。</p>\n<h2 id=\"4-开始模拟登录\"><a href=\"#4-开始模拟登录\" class=\"headerlink\" title=\"4 开始模拟登录\"></a>4 开始模拟登录</h2><p>知道登录过程了，我们就开始写登录的代码。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"><span class=\"comment\"># 使用beautifulsoup来处理获取的html内容，这个库需要安装，还是使用pip install beautifulsoup4来安装</span></div><div class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup <span class=\"keyword\">as</span> bs</div><div class=\"line\"><span class=\"comment\"># 这个函数使用来提取流水号的</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toJson</span><span class=\"params\">(str)</span>:</span></div><div class=\"line\">    <span class=\"string\">'''</div><div class=\"line\">    提取lt流水号，将数据化为一个字典</div><div class=\"line\">    '''</span></div><div class=\"line\">    soup = bs(str)</div><div class=\"line\">    tt = &#123;&#125;</div><div class=\"line\">    <span class=\"comment\"># 提取form表单中所有的input标签，以字典的形式来保存name：value</span></div><div class=\"line\">    <span class=\"keyword\">for</span> inp <span class=\"keyword\">in</span> soup.form.find_all(<span class=\"string\">'input'</span>):</div><div class=\"line\">        <span class=\"keyword\">if</span> inp.get(<span class=\"string\">'name'</span>) != <span class=\"keyword\">None</span>:</div><div class=\"line\">            tt[inp.get(<span class=\"string\">'name'</span>)] =inp.get(<span class=\"string\">'value'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> tt</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\"># 这行代码，是用来维持cookie的，你后续的操作都不用担心cookie，他会自动带上相应的cookie</span></div><div class=\"line\">s = requests.Session()</div><div class=\"line\"><span class=\"comment\"># 我们需要带表单的参数,这里面有个参数lt,登录操作的流水号，我们需要从html页面中进行提取</span></div><div class=\"line\">payload =&#123;<span class=\"string\">'username'</span>:<span class=\"string\">'jackroyal'</span>,<span class=\"string\">'password'</span>:<span class=\"string\">'123456'</span>,<span class=\"string\">'lt'</span>:soup[<span class=\"string\">\"lt\"</span>],<span class=\"string\">'execution'</span>:<span class=\"string\">'e1s1'</span>,<span class=\"string\">'_eventId'</span>:<span class=\"string\">'submit'</span>&#125;</div><div class=\"line\">r = s.post(<span class=\"string\">\"http://passport.csdn.net/account/login\"</span>,data=payload,headers=header)</div><div class=\"line\"><span class=\"keyword\">print</span> r.text</div></pre></td></tr></table></figure></p>\n<p>ok，至此，登录就成功了</p>\n<h2 id=\"5-优化\"><a href=\"#5-优化\" class=\"headerlink\" title=\"5 优化\"></a>5 优化</h2><p>当你登录成功后，你会问，我怎么知道登录成功了呢？当你试图去抓取<code>http://write.blog.csdn.net/postlist</code>的内容的时候，你会发现一个403的错误，这是为啥呢？<br>很简单，<code>user agent</code>没有修改，我们用的是默认的<code>user agent</code>，这可不是一个正常的用户，所以被网站拒绝了。我们加上他就好了<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">header = &#123;<span class=\"string\">'User-Agent'</span>:<span class=\"string\">'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:38.0) Gecko/20100101 Firefox/38.0'</span>&#125;</div><div class=\"line\">r = s.post(<span class=\"string\">\"http://passport.csdn.net/account/login\"</span>,data=payload,headers=header)</div><div class=\"line\"><span class=\"keyword\">print</span> r.text</div></pre></td></tr></table></figure></p>\n<h1 id=\"后话\"><a href=\"#后话\" class=\"headerlink\" title=\"后话\"></a>后话</h1><p>上面的代码还是太简单，我们都知道cookie是有有效期的，我在做调试的时候，没修改一次，就要模拟登录一次，这样不好，我们要保存cookie，这样下次就不需要重新发送登录请求了<br>分享出完整的代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># !/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup <span class=\"keyword\">as</span> bs</div><div class=\"line\"><span class=\"keyword\">from</span> cookielib <span class=\"keyword\">import</span> LWPCookieJar</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toJson</span><span class=\"params\">(str)</span>:</span></div><div class=\"line\">    <span class=\"string\">'''</div><div class=\"line\">    提取lt流水号，将数据化为一个字典</div><div class=\"line\">    '''</span></div><div class=\"line\">    soup = bs(str)</div><div class=\"line\">    tt = &#123;&#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> inp <span class=\"keyword\">in</span> soup.form.find_all(<span class=\"string\">'input'</span>):</div><div class=\"line\">        <span class=\"keyword\">if</span> inp.get(<span class=\"string\">'name'</span>) != <span class=\"keyword\">None</span>:</div><div class=\"line\">            tt[inp.get(<span class=\"string\">'name'</span>)] =inp.get(<span class=\"string\">'value'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> tt</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># cookie setting</span></div><div class=\"line\">s = requests.Session()</div><div class=\"line\">s.cookies = LWPCookieJar(<span class=\"string\">'cookiejar'</span>)</div><div class=\"line\">header = &#123;<span class=\"string\">'User-Agent'</span>:<span class=\"string\">'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:38.0) Gecko/20100101 Firefox/38.0'</span>&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(<span class=\"string\">'cookiejar'</span>):</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"there is no cookie,setting\"</span></div><div class=\"line\">    r = s.get(<span class=\"string\">\"http://passport.csdn.net/account/login\"</span>)</div><div class=\"line\">    soup = toJson(r.text)</div><div class=\"line\">    payload =&#123;<span class=\"string\">'username'</span>:<span class=\"string\">'jackroyal'</span>,<span class=\"string\">'password'</span>:<span class=\"string\">'123456'</span>,<span class=\"string\">'lt'</span>:soup[<span class=\"string\">\"lt\"</span>],<span class=\"string\">'execution'</span>:<span class=\"string\">'e1s1'</span>,<span class=\"string\">'_eventId'</span>:<span class=\"string\">'submit'</span>&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">print</span> payload</div><div class=\"line\">    r = s.post(<span class=\"string\">\"http://passport.csdn.net/account/login\"</span>,data=payload,headers=header)</div><div class=\"line\">    s.cookies.save(ignore_discard=<span class=\"keyword\">True</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">print</span> r.text</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"cookie exists,restore\"</span></div><div class=\"line\">    s.cookies.load(ignore_discard=<span class=\"keyword\">True</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># r = s.get(\"https://passport.csdn.net/content/loginbox/loginapi.js\")</span></div><div class=\"line\">r = s.get(<span class=\"string\">\"http://write.blog.csdn.net/postlist\"</span>,headers=header)</div><div class=\"line\"><span class=\"keyword\">print</span> r.text</div></pre></td></tr></table></figure></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"http://requests-docs-cn.readthedocs.org/zh_CN/latest/user/quickstart.html\">requests官方文档快速上手——中文版</a><br>2 <a href=\"http://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html\">beautifuisoup官方文档</a><br>3 <a href=\"http://stackoverflow.com/questions/13030095/how-to-save-requests-python-cookies-to-a-file\">python的requests如何保存cookie到文件</a></p>"},{"title":"ubuntu 14.04 安装denyhosts","date":"2015-04-28T12:19:23.000Z","_content":"# 起因\n因为之前服务器两次被黑，妈蛋。今天在上google+的时候，无意中看到一个维护vps的帖子，就顺手把我的服务器维护下。\n之前被黑经历也很简单，因为方便管理的缘故，我给root用户设置了密码，没错，是弱口令，一扫不要一分钟就可以出来的那种。\n我在那篇帖子中看到denyhosts这货。东西很简单，分析你的日志，如果有人连续登陆几次密码都错误，那么把他的ip添加到denyhost当中，禁止它继续扫描。这货还很多功能，可以设置禁止时间以后，自动解禁；可以配置自动解禁的次数;还可以配置用户密码尝试的次数，给管理员发邮件等。\n<!-- more -->\n# 安装\n## 1、下载源码包,解压源码包\n```python\nwget http://sourceforge.net/projects/denyhosts/files/denyhosts/2.6/DenyHosts-2.6.tar.gz\ntar zxvf DenyHosts-2.6.tar.gz\ncd DenyHosts-2.6\n```\n## 2、安装部署\n```python\npython setup.py install\ncd /usr/share/denyhosts/\ncp denyhosts.cfg-dist denyhosts.cfg\ncp daemon-control-dist daemon-control\n```\n## 3、编辑配置文件denyhosts.cfg\n```python\nsudo vi denyhosts.cfg\n```\n几个常见的参数如下所示：\n```\nPURGE_DENY：当一个IP被阻止以后，过多长时间被自动解禁。可选如3m（三分钟）、5h（5小时）、2d（两天）、8w（8周）、1y（一年）；\nPURGE_THRESHOLD：定义了某一IP最多被解封多少次。即某一IP由于暴力破解SSH密码被阻止/解封达到了PURGE_THRESHOLD次，则会被永久禁止；\nBLOCK_SERVICE：需要阻止的服务名；\nDENY_THRESHOLD_INVALID：某一无效用户名（不存在的用户）尝试多少次登录后被阻止；\nDENY_THRESHOLD_VALID：某一有效用户名尝试多少次登陆后被阻止（比如账号正确但密码错误），root除外；\nDENY_THRESHOLD_ROOT：root用户尝试登录多少次后被阻止；\nHOSTNAME_LOOKUP：是否尝试解析源IP的域名；```\n\n一般我们就用默认就好，我们只需要改两个地方：\n### 第一个，我们注释掉第12行，启用第15行，修改以后结果如下(原因是ubuntu中的log不在/var/log/secure中，而是在/var/log/auth.log中)\n![修改后的denyhosts.cfg](http://ww3.sinaimg.cn/large/692869a3gw1erll3zp3xpj20id0b5q63.jpg)\n### 第二个，我们启用第64行，也就是设置，ip被禁止后，禁止5天，这个时间你可以自行设置\n去掉前面的`# `,就行了，修改后结果如下\n```bash\n 63 # purge entries older than 5 days\n 64 PURGE_DENY = 5d\n 65 ###################################################################### #\n 66 \n```\n## 4、编辑配置文件daemon-control\n因为在ubuntu系统中，有些文件不在预设的位置，所以我们需要编辑这个文件\n我们只需要改第14行就好了，修改`/usr/bin/denyhosts.py`为`/usr/local/bin/denyhosts.py`，修改后结果如下\n```bash\n 13 \n 14 DENYHOSTS_BIN   = \"/usr/local/bin/denyhosts.py\"\n 15 DENYHOSTS_LOCK  = \"/var/lock/subsys/denyhosts\"\n 16 DENYHOSTS_CFG   = \"/usr/share/denyhosts/denyhosts.cfg\"\n 17 \n 18 PYTHON_BIN      = \"/usr/bin/env python\"\n 19 \n\n```\n## 5、运行\n运行，额，错误一堆啊，我们执行`sudo ./daemon-control start`,然后得到如下错误\n```bash\nstarting DenyHosts:    /usr/bin/env python /usr/local/bin/denyhosts.py --daemon --config=/usr/share/denyhosts/denyhosts.cfg\nDenyHosts could not obtain lock (pid: )\n[Errno 2] No such file or directory: '/var/lock/subsys/denyhosts'\n\n```\n我们可以去`/var/lock`下面的确看不到subsys这个文件夹，那我们就手动创建他\n```bash\nmkdir -p /var/lock/subsys\n```\n继续执行`sudo ./daemon-control start`，应该就会成功\nps：如果还不成功，他缺什么文件我们就用`touch`新建这个文件，如果说`file exists`,我们就删除那个文件\n## 6、添加到开机启动\n第一种是将DenyHosts作为类似apache、mysql一样的服务，这种方法可以通过 /etc/init.d/denyhosts 命令来控制其状态。方法如下：\n```\ncd /etc/init.d\nln -s /usr/share/denyhosts/daemon-control denyhosts\n# 上面的操作就把他变成了一个服务 我们可以使用service denyhosts start来启动服务\n# 下面把他添加到开机自启动，我们这里需要安装一个软件来实现\n# ubuntu中没有chkconfig命令，网上的教程是用的chkconfig，具体操作查看后面的参考文献1，ubuntu中对应的是update-rc.d，但是不好用，所以我用sysv-rc-conf \nsudo apt-get install sysv-rc-conf\nsudo sysv-rc-conf\n```\n我们设置运行级别2345，编辑以后如下所示\n![设置denyhosts开机自启动](http://ww2.sinaimg.cn/large/692869a3gw1erlmrt5ht5j20j80m40zg.jpg)\n按`q`，退出并保存\n\n第二种是将Denyhosts直接加入rc.local中自动启动（类似于Windows中的“启动文件夹”）：\n```bash\necho '/usr/share/denyhosts/daemon-control start' >> /etc/rc.local\n```\n\n# 参考文献\n1 [通过DenyHosts阻止SSH暴力攻击教程](http://www.bootf.com/571.html)\n\n2 [/var/log/secure not present in 14.04 ,is there any alternative?](http://askubuntu.com/questions/534324/var-log-secure-not-present-in-14-04-is-there-any-alternative)\n","source":"_posts/ubuntu-denyhosts.md","raw":"title: ubuntu 14.04 安装denyhosts\ndate: 2015-04-28 20:19:23\ntags:\n- Linux\n- ubuntu\ncategories:\n- Linux\n---\n# 起因\n因为之前服务器两次被黑，妈蛋。今天在上google+的时候，无意中看到一个维护vps的帖子，就顺手把我的服务器维护下。\n之前被黑经历也很简单，因为方便管理的缘故，我给root用户设置了密码，没错，是弱口令，一扫不要一分钟就可以出来的那种。\n我在那篇帖子中看到denyhosts这货。东西很简单，分析你的日志，如果有人连续登陆几次密码都错误，那么把他的ip添加到denyhost当中，禁止它继续扫描。这货还很多功能，可以设置禁止时间以后，自动解禁；可以配置自动解禁的次数;还可以配置用户密码尝试的次数，给管理员发邮件等。\n<!-- more -->\n# 安装\n## 1、下载源码包,解压源码包\n```python\nwget http://sourceforge.net/projects/denyhosts/files/denyhosts/2.6/DenyHosts-2.6.tar.gz\ntar zxvf DenyHosts-2.6.tar.gz\ncd DenyHosts-2.6\n```\n## 2、安装部署\n```python\npython setup.py install\ncd /usr/share/denyhosts/\ncp denyhosts.cfg-dist denyhosts.cfg\ncp daemon-control-dist daemon-control\n```\n## 3、编辑配置文件denyhosts.cfg\n```python\nsudo vi denyhosts.cfg\n```\n几个常见的参数如下所示：\n```\nPURGE_DENY：当一个IP被阻止以后，过多长时间被自动解禁。可选如3m（三分钟）、5h（5小时）、2d（两天）、8w（8周）、1y（一年）；\nPURGE_THRESHOLD：定义了某一IP最多被解封多少次。即某一IP由于暴力破解SSH密码被阻止/解封达到了PURGE_THRESHOLD次，则会被永久禁止；\nBLOCK_SERVICE：需要阻止的服务名；\nDENY_THRESHOLD_INVALID：某一无效用户名（不存在的用户）尝试多少次登录后被阻止；\nDENY_THRESHOLD_VALID：某一有效用户名尝试多少次登陆后被阻止（比如账号正确但密码错误），root除外；\nDENY_THRESHOLD_ROOT：root用户尝试登录多少次后被阻止；\nHOSTNAME_LOOKUP：是否尝试解析源IP的域名；```\n\n一般我们就用默认就好，我们只需要改两个地方：\n### 第一个，我们注释掉第12行，启用第15行，修改以后结果如下(原因是ubuntu中的log不在/var/log/secure中，而是在/var/log/auth.log中)\n![修改后的denyhosts.cfg](http://ww3.sinaimg.cn/large/692869a3gw1erll3zp3xpj20id0b5q63.jpg)\n### 第二个，我们启用第64行，也就是设置，ip被禁止后，禁止5天，这个时间你可以自行设置\n去掉前面的`# `,就行了，修改后结果如下\n```bash\n 63 # purge entries older than 5 days\n 64 PURGE_DENY = 5d\n 65 ###################################################################### #\n 66 \n```\n## 4、编辑配置文件daemon-control\n因为在ubuntu系统中，有些文件不在预设的位置，所以我们需要编辑这个文件\n我们只需要改第14行就好了，修改`/usr/bin/denyhosts.py`为`/usr/local/bin/denyhosts.py`，修改后结果如下\n```bash\n 13 \n 14 DENYHOSTS_BIN   = \"/usr/local/bin/denyhosts.py\"\n 15 DENYHOSTS_LOCK  = \"/var/lock/subsys/denyhosts\"\n 16 DENYHOSTS_CFG   = \"/usr/share/denyhosts/denyhosts.cfg\"\n 17 \n 18 PYTHON_BIN      = \"/usr/bin/env python\"\n 19 \n\n```\n## 5、运行\n运行，额，错误一堆啊，我们执行`sudo ./daemon-control start`,然后得到如下错误\n```bash\nstarting DenyHosts:    /usr/bin/env python /usr/local/bin/denyhosts.py --daemon --config=/usr/share/denyhosts/denyhosts.cfg\nDenyHosts could not obtain lock (pid: )\n[Errno 2] No such file or directory: '/var/lock/subsys/denyhosts'\n\n```\n我们可以去`/var/lock`下面的确看不到subsys这个文件夹，那我们就手动创建他\n```bash\nmkdir -p /var/lock/subsys\n```\n继续执行`sudo ./daemon-control start`，应该就会成功\nps：如果还不成功，他缺什么文件我们就用`touch`新建这个文件，如果说`file exists`,我们就删除那个文件\n## 6、添加到开机启动\n第一种是将DenyHosts作为类似apache、mysql一样的服务，这种方法可以通过 /etc/init.d/denyhosts 命令来控制其状态。方法如下：\n```\ncd /etc/init.d\nln -s /usr/share/denyhosts/daemon-control denyhosts\n# 上面的操作就把他变成了一个服务 我们可以使用service denyhosts start来启动服务\n# 下面把他添加到开机自启动，我们这里需要安装一个软件来实现\n# ubuntu中没有chkconfig命令，网上的教程是用的chkconfig，具体操作查看后面的参考文献1，ubuntu中对应的是update-rc.d，但是不好用，所以我用sysv-rc-conf \nsudo apt-get install sysv-rc-conf\nsudo sysv-rc-conf\n```\n我们设置运行级别2345，编辑以后如下所示\n![设置denyhosts开机自启动](http://ww2.sinaimg.cn/large/692869a3gw1erlmrt5ht5j20j80m40zg.jpg)\n按`q`，退出并保存\n\n第二种是将Denyhosts直接加入rc.local中自动启动（类似于Windows中的“启动文件夹”）：\n```bash\necho '/usr/share/denyhosts/daemon-control start' >> /etc/rc.local\n```\n\n# 参考文献\n1 [通过DenyHosts阻止SSH暴力攻击教程](http://www.bootf.com/571.html)\n\n2 [/var/log/secure not present in 14.04 ,is there any alternative?](http://askubuntu.com/questions/534324/var-log-secure-not-present-in-14-04-is-there-any-alternative)\n","slug":"ubuntu-denyhosts","published":1,"updated":"2015-10-29T06:08:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yst0089x8cdlsegn70r","content":"<h1 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h1><p>因为之前服务器两次被黑，妈蛋。今天在上google+的时候，无意中看到一个维护vps的帖子，就顺手把我的服务器维护下。<br>之前被黑经历也很简单，因为方便管理的缘故，我给root用户设置了密码，没错，是弱口令，一扫不要一分钟就可以出来的那种。<br>我在那篇帖子中看到denyhosts这货。东西很简单，分析你的日志，如果有人连续登陆几次密码都错误，那么把他的ip添加到denyhost当中，禁止它继续扫描。这货还很多功能，可以设置禁止时间以后，自动解禁；可以配置自动解禁的次数;还可以配置用户密码尝试的次数，给管理员发邮件等。<br><a id=\"more\"></a></p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><h2 id=\"1、下载源码包-解压源码包\"><a href=\"#1、下载源码包-解压源码包\" class=\"headerlink\" title=\"1、下载源码包,解压源码包\"></a>1、下载源码包,解压源码包</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://sourceforge.net/projects/denyhosts/files/denyhosts/<span class=\"number\">2.6</span>/DenyHosts<span class=\"number\">-2.6</span>.tar.gz</div><div class=\"line\">tar zxvf DenyHosts<span class=\"number\">-2.6</span>.tar.gz</div><div class=\"line\">cd DenyHosts<span class=\"number\">-2.6</span></div></pre></td></tr></table></figure>\n<h2 id=\"2、安装部署\"><a href=\"#2、安装部署\" class=\"headerlink\" title=\"2、安装部署\"></a>2、安装部署</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">python setup.py install</div><div class=\"line\">cd /usr/share/denyhosts/</div><div class=\"line\">cp denyhosts.cfg-dist denyhosts.cfg</div><div class=\"line\">cp daemon-control-dist daemon-control</div></pre></td></tr></table></figure>\n<h2 id=\"3、编辑配置文件denyhosts-cfg\"><a href=\"#3、编辑配置文件denyhosts-cfg\" class=\"headerlink\" title=\"3、编辑配置文件denyhosts.cfg\"></a>3、编辑配置文件denyhosts.cfg</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vi denyhosts.cfg</div></pre></td></tr></table></figure>\n<p>几个常见的参数如下所示：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">PURGE_DENY：当一个IP被阻止以后，过多长时间被自动解禁。可选如<span class=\"number\">3</span>m（三分钟）、<span class=\"number\">5</span>h（<span class=\"number\">5</span>小时）、<span class=\"number\">2</span>d（两天）、<span class=\"number\">8</span>w（<span class=\"number\">8</span>周）、<span class=\"number\">1</span>y（一年）；</div><div class=\"line\">PURGE_THRESHOLD：定义了某一IP最多被解封多少次。即某一IP由于暴力破解SSH密码被阻止/解封达到了PURGE_THRESHOLD次，则会被永久禁止；</div><div class=\"line\">BLOCK_SERVICE：需要阻止的服务名；</div><div class=\"line\">DENY_THRESHOLD_INVALID：某一无效用户名（不存在的用户）尝试多少次登录后被阻止；</div><div class=\"line\">DENY_THRESHOLD_VALID：某一有效用户名尝试多少次登陆后被阻止（比如账号正确但密码错误），root除外；</div><div class=\"line\">DENY_THRESHOLD_ROOT：root用户尝试登录多少次后被阻止；</div><div class=\"line\">HOSTNAME_LOOKUP：是否尝试解析源IP的域名；</div></pre></td></tr></table></figure></p>\n<p>一般我们就用默认就好，我们只需要改两个地方：</p>\n<h3 id=\"第一个，我们注释掉第12行，启用第15行，修改以后结果如下-原因是ubuntu中的log不在-var-log-secure中，而是在-var-log-auth-log中\"><a href=\"#第一个，我们注释掉第12行，启用第15行，修改以后结果如下-原因是ubuntu中的log不在-var-log-secure中，而是在-var-log-auth-log中\" class=\"headerlink\" title=\"第一个，我们注释掉第12行，启用第15行，修改以后结果如下(原因是ubuntu中的log不在/var/log/secure中，而是在/var/log/auth.log中)\"></a>第一个，我们注释掉第12行，启用第15行，修改以后结果如下(原因是ubuntu中的log不在/var/log/secure中，而是在/var/log/auth.log中)</h3><p><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1erll3zp3xpj20id0b5q63.jpg\" alt=\"修改后的denyhosts.cfg\"></p>\n<h3 id=\"第二个，我们启用第64行，也就是设置，ip被禁止后，禁止5天，这个时间你可以自行设置\"><a href=\"#第二个，我们启用第64行，也就是设置，ip被禁止后，禁止5天，这个时间你可以自行设置\" class=\"headerlink\" title=\"第二个，我们启用第64行，也就是设置，ip被禁止后，禁止5天，这个时间你可以自行设置\"></a>第二个，我们启用第64行，也就是设置，ip被禁止后，禁止5天，这个时间你可以自行设置</h3><p>去掉前面的<code>#</code>,就行了，修改后结果如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">63 <span class=\"comment\"># purge entries older than 5 days</span></div><div class=\"line\">64 PURGE_DENY = 5d</div><div class=\"line\">65 <span class=\"comment\">###################################################################### #</span></div><div class=\"line\">66</div></pre></td></tr></table></figure></p>\n<h2 id=\"4、编辑配置文件daemon-control\"><a href=\"#4、编辑配置文件daemon-control\" class=\"headerlink\" title=\"4、编辑配置文件daemon-control\"></a>4、编辑配置文件daemon-control</h2><p>因为在ubuntu系统中，有些文件不在预设的位置，所以我们需要编辑这个文件<br>我们只需要改第14行就好了，修改<code>/usr/bin/denyhosts.py</code>为<code>/usr/local/bin/denyhosts.py</code>，修改后结果如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">13 </div><div class=\"line\">14 DENYHOSTS_BIN   = <span class=\"string\">\"/usr/local/bin/denyhosts.py\"</span></div><div class=\"line\">15 DENYHOSTS_LOCK  = <span class=\"string\">\"/var/lock/subsys/denyhosts\"</span></div><div class=\"line\">16 DENYHOSTS_CFG   = <span class=\"string\">\"/usr/share/denyhosts/denyhosts.cfg\"</span></div><div class=\"line\">17 </div><div class=\"line\">18 PYTHON_BIN      = <span class=\"string\">\"/usr/bin/env python\"</span></div><div class=\"line\">19</div></pre></td></tr></table></figure></p>\n<h2 id=\"5、运行\"><a href=\"#5、运行\" class=\"headerlink\" title=\"5、运行\"></a>5、运行</h2><p>运行，额，错误一堆啊，我们执行<code>sudo ./daemon-control start</code>,然后得到如下错误<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">starting DenyHosts:    /usr/bin/env python /usr/<span class=\"built_in\">local</span>/bin/denyhosts.py --daemon --config=/usr/share/denyhosts/denyhosts.cfg</div><div class=\"line\">DenyHosts could not obtain lock (pid: )</div><div class=\"line\">[Errno 2] No such file or directory: <span class=\"string\">'/var/lock/subsys/denyhosts'</span></div></pre></td></tr></table></figure></p>\n<p>我们可以去<code>/var/lock</code>下面的确看不到subsys这个文件夹，那我们就手动创建他<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir -p /var/lock/subsys</div></pre></td></tr></table></figure></p>\n<p>继续执行<code>sudo ./daemon-control start</code>，应该就会成功<br>ps：如果还不成功，他缺什么文件我们就用<code>touch</code>新建这个文件，如果说<code>file exists</code>,我们就删除那个文件</p>\n<h2 id=\"6、添加到开机启动\"><a href=\"#6、添加到开机启动\" class=\"headerlink\" title=\"6、添加到开机启动\"></a>6、添加到开机启动</h2><p>第一种是将DenyHosts作为类似apache、mysql一样的服务，这种方法可以通过 /etc/init.d/denyhosts 命令来控制其状态。方法如下：<br><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /etc/init.d</div><div class=\"line\">ln -s /usr/share/denyhosts/daemon-control denyhosts</div><div class=\"line\"><span class=\"meta\"># 上面的操作就把他变成了一个服务 我们可以使用service denyhosts start来启动服务</span></div><div class=\"line\"><span class=\"meta\"># 下面把他添加到开机自启动，我们这里需要安装一个软件来实现</span></div><div class=\"line\"><span class=\"meta\"># ubuntu中没有chkconfig命令，网上的教程是用的chkconfig，具体操作查看后面的参考文献1，ubuntu中对应的是update-rc.d，但是不好用，所以我用sysv-rc-conf </span></div><div class=\"line\">sudo apt-<span class=\"keyword\">get</span> install sysv-rc-conf</div><div class=\"line\">sudo sysv-rc-conf</div></pre></td></tr></table></figure></p>\n<p>我们设置运行级别2345，编辑以后如下所示<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1erlmrt5ht5j20j80m40zg.jpg\" alt=\"设置denyhosts开机自启动\"><br>按<code>q</code>，退出并保存</p>\n<p>第二种是将Denyhosts直接加入rc.local中自动启动（类似于Windows中的“启动文件夹”）：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'/usr/share/denyhosts/daemon-control start'</span> &gt;&gt; /etc/rc.local</div></pre></td></tr></table></figure></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"http://www.bootf.com/571.html\" target=\"_blank\" rel=\"external\">通过DenyHosts阻止SSH暴力攻击教程</a></p>\n<p>2 <a href=\"http://askubuntu.com/questions/534324/var-log-secure-not-present-in-14-04-is-there-any-alternative\" target=\"_blank\" rel=\"external\">/var/log/secure not present in 14.04 ,is there any alternative?</a></p>\n","excerpt":"<h1 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h1><p>因为之前服务器两次被黑，妈蛋。今天在上google+的时候，无意中看到一个维护vps的帖子，就顺手把我的服务器维护下。<br>之前被黑经历也很简单，因为方便管理的缘故，我给root用户设置了密码，没错，是弱口令，一扫不要一分钟就可以出来的那种。<br>我在那篇帖子中看到denyhosts这货。东西很简单，分析你的日志，如果有人连续登陆几次密码都错误，那么把他的ip添加到denyhost当中，禁止它继续扫描。这货还很多功能，可以设置禁止时间以后，自动解禁；可以配置自动解禁的次数;还可以配置用户密码尝试的次数，给管理员发邮件等。<br>","more":"</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><h2 id=\"1、下载源码包-解压源码包\"><a href=\"#1、下载源码包-解压源码包\" class=\"headerlink\" title=\"1、下载源码包,解压源码包\"></a>1、下载源码包,解压源码包</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://sourceforge.net/projects/denyhosts/files/denyhosts/<span class=\"number\">2.6</span>/DenyHosts<span class=\"number\">-2.6</span>.tar.gz</div><div class=\"line\">tar zxvf DenyHosts<span class=\"number\">-2.6</span>.tar.gz</div><div class=\"line\">cd DenyHosts<span class=\"number\">-2.6</span></div></pre></td></tr></table></figure>\n<h2 id=\"2、安装部署\"><a href=\"#2、安装部署\" class=\"headerlink\" title=\"2、安装部署\"></a>2、安装部署</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">python setup.py install</div><div class=\"line\">cd /usr/share/denyhosts/</div><div class=\"line\">cp denyhosts.cfg-dist denyhosts.cfg</div><div class=\"line\">cp daemon-control-dist daemon-control</div></pre></td></tr></table></figure>\n<h2 id=\"3、编辑配置文件denyhosts-cfg\"><a href=\"#3、编辑配置文件denyhosts-cfg\" class=\"headerlink\" title=\"3、编辑配置文件denyhosts.cfg\"></a>3、编辑配置文件denyhosts.cfg</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vi denyhosts.cfg</div></pre></td></tr></table></figure>\n<p>几个常见的参数如下所示：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">PURGE_DENY：当一个IP被阻止以后，过多长时间被自动解禁。可选如<span class=\"number\">3</span>m（三分钟）、<span class=\"number\">5</span>h（<span class=\"number\">5</span>小时）、<span class=\"number\">2</span>d（两天）、<span class=\"number\">8</span>w（<span class=\"number\">8</span>周）、<span class=\"number\">1</span>y（一年）；</div><div class=\"line\">PURGE_THRESHOLD：定义了某一IP最多被解封多少次。即某一IP由于暴力破解SSH密码被阻止/解封达到了PURGE_THRESHOLD次，则会被永久禁止；</div><div class=\"line\">BLOCK_SERVICE：需要阻止的服务名；</div><div class=\"line\">DENY_THRESHOLD_INVALID：某一无效用户名（不存在的用户）尝试多少次登录后被阻止；</div><div class=\"line\">DENY_THRESHOLD_VALID：某一有效用户名尝试多少次登陆后被阻止（比如账号正确但密码错误），root除外；</div><div class=\"line\">DENY_THRESHOLD_ROOT：root用户尝试登录多少次后被阻止；</div><div class=\"line\">HOSTNAME_LOOKUP：是否尝试解析源IP的域名；</div></pre></td></tr></table></figure></p>\n<p>一般我们就用默认就好，我们只需要改两个地方：</p>\n<h3 id=\"第一个，我们注释掉第12行，启用第15行，修改以后结果如下-原因是ubuntu中的log不在-var-log-secure中，而是在-var-log-auth-log中\"><a href=\"#第一个，我们注释掉第12行，启用第15行，修改以后结果如下-原因是ubuntu中的log不在-var-log-secure中，而是在-var-log-auth-log中\" class=\"headerlink\" title=\"第一个，我们注释掉第12行，启用第15行，修改以后结果如下(原因是ubuntu中的log不在/var/log/secure中，而是在/var/log/auth.log中)\"></a>第一个，我们注释掉第12行，启用第15行，修改以后结果如下(原因是ubuntu中的log不在/var/log/secure中，而是在/var/log/auth.log中)</h3><p><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1erll3zp3xpj20id0b5q63.jpg\" alt=\"修改后的denyhosts.cfg\"></p>\n<h3 id=\"第二个，我们启用第64行，也就是设置，ip被禁止后，禁止5天，这个时间你可以自行设置\"><a href=\"#第二个，我们启用第64行，也就是设置，ip被禁止后，禁止5天，这个时间你可以自行设置\" class=\"headerlink\" title=\"第二个，我们启用第64行，也就是设置，ip被禁止后，禁止5天，这个时间你可以自行设置\"></a>第二个，我们启用第64行，也就是设置，ip被禁止后，禁止5天，这个时间你可以自行设置</h3><p>去掉前面的<code>#</code>,就行了，修改后结果如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">63 <span class=\"comment\"># purge entries older than 5 days</span></div><div class=\"line\">64 PURGE_DENY = 5d</div><div class=\"line\">65 <span class=\"comment\">###################################################################### #</span></div><div class=\"line\">66</div></pre></td></tr></table></figure></p>\n<h2 id=\"4、编辑配置文件daemon-control\"><a href=\"#4、编辑配置文件daemon-control\" class=\"headerlink\" title=\"4、编辑配置文件daemon-control\"></a>4、编辑配置文件daemon-control</h2><p>因为在ubuntu系统中，有些文件不在预设的位置，所以我们需要编辑这个文件<br>我们只需要改第14行就好了，修改<code>/usr/bin/denyhosts.py</code>为<code>/usr/local/bin/denyhosts.py</code>，修改后结果如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">13 </div><div class=\"line\">14 DENYHOSTS_BIN   = <span class=\"string\">\"/usr/local/bin/denyhosts.py\"</span></div><div class=\"line\">15 DENYHOSTS_LOCK  = <span class=\"string\">\"/var/lock/subsys/denyhosts\"</span></div><div class=\"line\">16 DENYHOSTS_CFG   = <span class=\"string\">\"/usr/share/denyhosts/denyhosts.cfg\"</span></div><div class=\"line\">17 </div><div class=\"line\">18 PYTHON_BIN      = <span class=\"string\">\"/usr/bin/env python\"</span></div><div class=\"line\">19</div></pre></td></tr></table></figure></p>\n<h2 id=\"5、运行\"><a href=\"#5、运行\" class=\"headerlink\" title=\"5、运行\"></a>5、运行</h2><p>运行，额，错误一堆啊，我们执行<code>sudo ./daemon-control start</code>,然后得到如下错误<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">starting DenyHosts:    /usr/bin/env python /usr/<span class=\"built_in\">local</span>/bin/denyhosts.py --daemon --config=/usr/share/denyhosts/denyhosts.cfg</div><div class=\"line\">DenyHosts could not obtain lock (pid: )</div><div class=\"line\">[Errno 2] No such file or directory: <span class=\"string\">'/var/lock/subsys/denyhosts'</span></div></pre></td></tr></table></figure></p>\n<p>我们可以去<code>/var/lock</code>下面的确看不到subsys这个文件夹，那我们就手动创建他<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir -p /var/lock/subsys</div></pre></td></tr></table></figure></p>\n<p>继续执行<code>sudo ./daemon-control start</code>，应该就会成功<br>ps：如果还不成功，他缺什么文件我们就用<code>touch</code>新建这个文件，如果说<code>file exists</code>,我们就删除那个文件</p>\n<h2 id=\"6、添加到开机启动\"><a href=\"#6、添加到开机启动\" class=\"headerlink\" title=\"6、添加到开机启动\"></a>6、添加到开机启动</h2><p>第一种是将DenyHosts作为类似apache、mysql一样的服务，这种方法可以通过 /etc/init.d/denyhosts 命令来控制其状态。方法如下：<br><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /etc/init.d</div><div class=\"line\">ln -s /usr/share/denyhosts/daemon-control denyhosts</div><div class=\"line\"><span class=\"meta\"># 上面的操作就把他变成了一个服务 我们可以使用service denyhosts start来启动服务</span></div><div class=\"line\"><span class=\"meta\"># 下面把他添加到开机自启动，我们这里需要安装一个软件来实现</span></div><div class=\"line\"><span class=\"meta\"># ubuntu中没有chkconfig命令，网上的教程是用的chkconfig，具体操作查看后面的参考文献1，ubuntu中对应的是update-rc.d，但是不好用，所以我用sysv-rc-conf </span></div><div class=\"line\">sudo apt-<span class=\"keyword\">get</span> install sysv-rc-conf</div><div class=\"line\">sudo sysv-rc-conf</div></pre></td></tr></table></figure></p>\n<p>我们设置运行级别2345，编辑以后如下所示<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1erlmrt5ht5j20j80m40zg.jpg\" alt=\"设置denyhosts开机自启动\"><br>按<code>q</code>，退出并保存</p>\n<p>第二种是将Denyhosts直接加入rc.local中自动启动（类似于Windows中的“启动文件夹”）：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'/usr/share/denyhosts/daemon-control start'</span> &gt;&gt; /etc/rc.local</div></pre></td></tr></table></figure></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"http://www.bootf.com/571.html\">通过DenyHosts阻止SSH暴力攻击教程</a></p>\n<p>2 <a href=\"http://askubuntu.com/questions/534324/var-log-secure-not-present-in-14-04-is-there-any-alternative\">/var/log/secure not present in 14.04 ,is there any alternative?</a></p>"},{"title":"ubuntu 14.04配置thinkphp路由,隐藏index.php","date":"2015-06-29T12:16:17.000Z","_content":"今天把代码发布到服务器上去,发现服务器的rewrite有问题,无法实现隐藏index.php的功能.\n<!-- more -->\n# 环境\n服务器:ubuntu 14.04 lts\napache:2.4.7\nphp:5.5.9-\nmysql:5.5.43\n\n# 开启rewrite模块\n在ubuntu中,开启很简单,执行以下bash命令即可\n```bash\nsudo a2enmod rewrite\n```\n# 添加.htaccess支持\n默认apache会忽视所有的规则重写,即使添加了`.htaccess`文件,他不认.\n在ubuntu 14.04中设置,跟其他版本的ubuntu有点不同\n核心操作还是修改 `AllowOverride None`为` AllowOverride All`.\n问题是这个文件到底在哪儿.\n在网上找的教程中,有的说是在`/etc/apache2/sites-available/000-default.conf`中,在我这个版本的apache中,它不在这里.\n他在`/etc/apache2/apache2.conf`中.\n我们打开这个文件,大概在166行.\n```bash\n<Directory /var/www/>\n        Options Indexes FollowSymLinks\n        AllowOverride All\n        Require all granted\n</Directory>\n```\n# 重启apache服务器\nok,都改完了,就剩一步,重启apache服务器.\n```bash\nsudo service apache2 restart\n```\n搞定!\n![热疯了,空调房都热](http://ww3.sinaimg.cn/large/692869a3gw1etl9v3c6wzj20go09dmx6.jpg)\n\n\n\n\n\n\n[](http://www.dev-metal.com/enable-mod_rewrite-ubuntu-14-04-lts/)\n","source":"_posts/ubuntu-14-04-setting-about-thinkphp-url-rewrite.md","raw":"title: ubuntu 14.04配置thinkphp路由,隐藏index.php\ndate: 2015-06-29 20:16:17\ntags:\n- ubuntu\n- thinkphp\ncategories:\n- Linux\n---\n今天把代码发布到服务器上去,发现服务器的rewrite有问题,无法实现隐藏index.php的功能.\n<!-- more -->\n# 环境\n服务器:ubuntu 14.04 lts\napache:2.4.7\nphp:5.5.9-\nmysql:5.5.43\n\n# 开启rewrite模块\n在ubuntu中,开启很简单,执行以下bash命令即可\n```bash\nsudo a2enmod rewrite\n```\n# 添加.htaccess支持\n默认apache会忽视所有的规则重写,即使添加了`.htaccess`文件,他不认.\n在ubuntu 14.04中设置,跟其他版本的ubuntu有点不同\n核心操作还是修改 `AllowOverride None`为` AllowOverride All`.\n问题是这个文件到底在哪儿.\n在网上找的教程中,有的说是在`/etc/apache2/sites-available/000-default.conf`中,在我这个版本的apache中,它不在这里.\n他在`/etc/apache2/apache2.conf`中.\n我们打开这个文件,大概在166行.\n```bash\n<Directory /var/www/>\n        Options Indexes FollowSymLinks\n        AllowOverride All\n        Require all granted\n</Directory>\n```\n# 重启apache服务器\nok,都改完了,就剩一步,重启apache服务器.\n```bash\nsudo service apache2 restart\n```\n搞定!\n![热疯了,空调房都热](http://ww3.sinaimg.cn/large/692869a3gw1etl9v3c6wzj20go09dmx6.jpg)\n\n\n\n\n\n\n[](http://www.dev-metal.com/enable-mod_rewrite-ubuntu-14-04-lts/)\n","slug":"ubuntu-14-04-setting-about-thinkphp-url-rewrite","published":1,"updated":"2015-10-29T06:08:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7ysv008bx8cdfoow771q","content":"<p>今天把代码发布到服务器上去,发现服务器的rewrite有问题,无法实现隐藏index.php的功能.<br><a id=\"more\"></a></p>\n<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><p>服务器:ubuntu 14.04 lts<br>apache:2.4.7<br>php:5.5.9-<br>mysql:5.5.43</p>\n<h1 id=\"开启rewrite模块\"><a href=\"#开启rewrite模块\" class=\"headerlink\" title=\"开启rewrite模块\"></a>开启rewrite模块</h1><p>在ubuntu中,开启很简单,执行以下bash命令即可<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo a2enmod rewrite</div></pre></td></tr></table></figure></p>\n<h1 id=\"添加-htaccess支持\"><a href=\"#添加-htaccess支持\" class=\"headerlink\" title=\"添加.htaccess支持\"></a>添加.htaccess支持</h1><p>默认apache会忽视所有的规则重写,即使添加了<code>.htaccess</code>文件,他不认.<br>在ubuntu 14.04中设置,跟其他版本的ubuntu有点不同<br>核心操作还是修改 <code>AllowOverride None</code>为<code>AllowOverride All</code>.<br>问题是这个文件到底在哪儿.<br>在网上找的教程中,有的说是在<code>/etc/apache2/sites-available/000-default.conf</code>中,在我这个版本的apache中,它不在这里.<br>他在<code>/etc/apache2/apache2.conf</code>中.<br>我们打开这个文件,大概在166行.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Directory /var/www/&gt;</div><div class=\"line\">        Options Indexes FollowSymLinks</div><div class=\"line\">        AllowOverride All</div><div class=\"line\">        Require all granted</div><div class=\"line\">&lt;/Directory&gt;</div></pre></td></tr></table></figure></p>\n<h1 id=\"重启apache服务器\"><a href=\"#重启apache服务器\" class=\"headerlink\" title=\"重启apache服务器\"></a>重启apache服务器</h1><p>ok,都改完了,就剩一步,重启apache服务器.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo service apache2 restart</div></pre></td></tr></table></figure></p>\n<p>搞定!<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1etl9v3c6wzj20go09dmx6.jpg\" alt=\"热疯了,空调房都热\"></p>\n<p><a href=\"http://www.dev-metal.com/enable-mod_rewrite-ubuntu-14-04-lts/\" target=\"_blank\" rel=\"external\"></a></p>\n","excerpt":"<p>今天把代码发布到服务器上去,发现服务器的rewrite有问题,无法实现隐藏index.php的功能.<br>","more":"</p>\n<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><p>服务器:ubuntu 14.04 lts<br>apache:2.4.7<br>php:5.5.9-<br>mysql:5.5.43</p>\n<h1 id=\"开启rewrite模块\"><a href=\"#开启rewrite模块\" class=\"headerlink\" title=\"开启rewrite模块\"></a>开启rewrite模块</h1><p>在ubuntu中,开启很简单,执行以下bash命令即可<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo a2enmod rewrite</div></pre></td></tr></table></figure></p>\n<h1 id=\"添加-htaccess支持\"><a href=\"#添加-htaccess支持\" class=\"headerlink\" title=\"添加.htaccess支持\"></a>添加.htaccess支持</h1><p>默认apache会忽视所有的规则重写,即使添加了<code>.htaccess</code>文件,他不认.<br>在ubuntu 14.04中设置,跟其他版本的ubuntu有点不同<br>核心操作还是修改 <code>AllowOverride None</code>为<code>AllowOverride All</code>.<br>问题是这个文件到底在哪儿.<br>在网上找的教程中,有的说是在<code>/etc/apache2/sites-available/000-default.conf</code>中,在我这个版本的apache中,它不在这里.<br>他在<code>/etc/apache2/apache2.conf</code>中.<br>我们打开这个文件,大概在166行.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Directory /var/www/&gt;</div><div class=\"line\">        Options Indexes FollowSymLinks</div><div class=\"line\">        AllowOverride All</div><div class=\"line\">        Require all granted</div><div class=\"line\">&lt;/Directory&gt;</div></pre></td></tr></table></figure></p>\n<h1 id=\"重启apache服务器\"><a href=\"#重启apache服务器\" class=\"headerlink\" title=\"重启apache服务器\"></a>重启apache服务器</h1><p>ok,都改完了,就剩一步,重启apache服务器.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo service apache2 restart</div></pre></td></tr></table></figure></p>\n<p>搞定!<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1etl9v3c6wzj20go09dmx6.jpg\" alt=\"热疯了,空调房都热\"></p>\n<p><a href=\"http://www.dev-metal.com/enable-mod_rewrite-ubuntu-14-04-lts/\"></a></p>"},{"title":"ubuntu下设置apache的目录映射","date":"2015-10-15T14:12:37.000Z","_content":"好吧,我的博客一不小心又荒废下来了,话不多说,进入正文.\n<!-- more -->\n最近的项目一直在忙,发布代码的时候遇到一个麻烦事,由于所有项目代码都放在服务器的根目录,也就是`/var/www/html`下;然后还有一个api的页面,我放在一个`api`文件夹中,然后把整个`api`文件夹放在`html`目录下.由于每次发布代码都是替换整个根目录`html`下的文件,你懂的,我每次发布项目代码后,`api`就没了,需要我单独解压,再复制,blablabla,总之一个字,**  烦  **.\n我突然想起来,phpmyadmin安装后就不在网站的根目录,但是访问的时候我却还是直接在ip后面跟目录,比如`http://127.0.0.1/phpmyadmin`,这货应该是用了一个映射,我照着这个样子搞一个,不就行了,说干就干.\n\n# 1 使用的命令\n`Alias` 这个是这次主要使用的命令,使用的方法很简单,如下所示\n```shell\nAlias /api /home/ch/api\n```\n意思就是如果你在ip后面添加`/api`后缀,也就是你在浏览器访问`http://127.0.0.1/api`,那么实际就会访问到`/home/ch/api`目录下\n# 2 使用方法\n### Linux下\n由于我用的是ubuntu,所以具体说下ubuntu下怎么用.\n根据[在Ubuntu上安装LAMP服务器并简单配置](http://huirong.github.io/2015/04/01/installLamp/),这篇文章中关于`phpmyadmin`的设置部分,以下为摘抄\n```\n配置Apache服务器\n如果此时在浏览器中输入http://localhost/phpmyadmin，会提示404错误\n此时应该进行简单的配置，将phpMyAdmin的配置文件，复制到Apache2下\n\ncp /etc/phpmyadmin/apache.conf /etc/apache2/conf-enabled/phpmyadmin.conf\n然后重启Apache服务器\n\nservice apache2 restart\n\n```\n我们得到启发,本来phpmyadmin也是不在`html`根目录下的,上面的操作做了什么呢?\n我们打开`/etc/apache2/conf-enabled/phpmyadmin.conf`这个文件看看\n```\n# phpMyAdmin default Apache configuration\n\nAlias /phpmyadmin /usr/share/phpmyadmin\n\n<Directory /usr/share/phpmyadmin>\n    Options FollowSymLinks\n    DirectoryIndex index.php\n\n    <IfModule mod_php5.c>\n        AddType application/x-httpd-php .php\n\n        php_flag magic_quotes_gpc Off\n        php_flag track_vars On\n        php_flag register_globals Off\n        php_admin_flag allow_url_fopen Off\n        php_value include_path .\n        php_admin_value upload_tmp_dir /var/lib/phpmyadmin/tmp\n        php_admin_value open_basedir /usr/share/phpmyadmin/:/etc/phpmyadmin/:/var/lib/phpmyadmin/:/usr/share/php/php-gettext/:/usr/share/javascript/\n    </IfModule>\n\n</Directory>\n\n# Authorize for setup\n<Directory /usr/share/phpmyadmin/setup>\n    <IfModule mod_authn_file.c>\n    AuthType Basic\n    AuthName \"phpMyAdmin Setup\"\n    AuthUserFile /etc/phpmyadmin/htpasswd.setup\n    </IfModule>\n    Require valid-user\n</Directory>\n\n# Disallow web access to directories that don't need it\n<Directory /usr/share/phpmyadmin/libraries>\n    Order Deny,Allow\n    Deny from All\n</Directory>\n<Directory /usr/share/phpmyadmin/setup/lib>\n    Order Deny,Allow\n    Deny from All\n</Directory>\n\n\n```\n看看这个文件的第一行,soga,原来他用的也是`Alias`命令,接下来我们继续往下走,下面的代码是什么意思呢?下面的代码是用来设置文件目录的权限的,就是`<Directory>`标签里面的内容.\n关于这里的设置,我们可以参考[apache官网](https://httpd.apache.org/docs/2.2/mod/mod_authz_host.html# order)上的描述.简而言之\n`Order Deny,Allow`其实是Allow优先,举个例子\n```\nOrder Deny,Allow\nAllow from All\nDeny from All\n```\n由于`Deny`规则在`Allow`之前(Order规定的),所以先Deny所有的请求,然后`Allow`规则在其后,最后的结果就是所有的人都可以随意访问.假设你要对访问进行限制,建议按照下面这样设置\n```\nOrder Deny,Allow\nAllow from 192.168.1.122\nDeny from All\n```\n也就是指允许ip为`192.168.1.122`的用户去访问,其他的用户都会被`Deny`\n# 3 最后的结果\n结合上面的分析,给出我最后的结果\n```\nAlias /api /var/www/api\n<Directory /var/www/api>\n Options FollowSymLinks Includes -Indexes\n\n  AllowOverride None\n  Order allow,deny\n  allow from all\n</Directory>\n\n```\n这里的`-Indexes`选项的意思是,不要列出目录\n打完收工\n","source":"_posts/ubuntu-lamp-alias-setting.md","raw":"title: ubuntu下设置apache的目录映射\ndate: 2015-10-15 22:12:37\ntags:\n- ubuntu\n- apache\ncategories:\n- 服务器\n---\n好吧,我的博客一不小心又荒废下来了,话不多说,进入正文.\n<!-- more -->\n最近的项目一直在忙,发布代码的时候遇到一个麻烦事,由于所有项目代码都放在服务器的根目录,也就是`/var/www/html`下;然后还有一个api的页面,我放在一个`api`文件夹中,然后把整个`api`文件夹放在`html`目录下.由于每次发布代码都是替换整个根目录`html`下的文件,你懂的,我每次发布项目代码后,`api`就没了,需要我单独解压,再复制,blablabla,总之一个字,**  烦  **.\n我突然想起来,phpmyadmin安装后就不在网站的根目录,但是访问的时候我却还是直接在ip后面跟目录,比如`http://127.0.0.1/phpmyadmin`,这货应该是用了一个映射,我照着这个样子搞一个,不就行了,说干就干.\n\n# 1 使用的命令\n`Alias` 这个是这次主要使用的命令,使用的方法很简单,如下所示\n```shell\nAlias /api /home/ch/api\n```\n意思就是如果你在ip后面添加`/api`后缀,也就是你在浏览器访问`http://127.0.0.1/api`,那么实际就会访问到`/home/ch/api`目录下\n# 2 使用方法\n### Linux下\n由于我用的是ubuntu,所以具体说下ubuntu下怎么用.\n根据[在Ubuntu上安装LAMP服务器并简单配置](http://huirong.github.io/2015/04/01/installLamp/),这篇文章中关于`phpmyadmin`的设置部分,以下为摘抄\n```\n配置Apache服务器\n如果此时在浏览器中输入http://localhost/phpmyadmin，会提示404错误\n此时应该进行简单的配置，将phpMyAdmin的配置文件，复制到Apache2下\n\ncp /etc/phpmyadmin/apache.conf /etc/apache2/conf-enabled/phpmyadmin.conf\n然后重启Apache服务器\n\nservice apache2 restart\n\n```\n我们得到启发,本来phpmyadmin也是不在`html`根目录下的,上面的操作做了什么呢?\n我们打开`/etc/apache2/conf-enabled/phpmyadmin.conf`这个文件看看\n```\n# phpMyAdmin default Apache configuration\n\nAlias /phpmyadmin /usr/share/phpmyadmin\n\n<Directory /usr/share/phpmyadmin>\n    Options FollowSymLinks\n    DirectoryIndex index.php\n\n    <IfModule mod_php5.c>\n        AddType application/x-httpd-php .php\n\n        php_flag magic_quotes_gpc Off\n        php_flag track_vars On\n        php_flag register_globals Off\n        php_admin_flag allow_url_fopen Off\n        php_value include_path .\n        php_admin_value upload_tmp_dir /var/lib/phpmyadmin/tmp\n        php_admin_value open_basedir /usr/share/phpmyadmin/:/etc/phpmyadmin/:/var/lib/phpmyadmin/:/usr/share/php/php-gettext/:/usr/share/javascript/\n    </IfModule>\n\n</Directory>\n\n# Authorize for setup\n<Directory /usr/share/phpmyadmin/setup>\n    <IfModule mod_authn_file.c>\n    AuthType Basic\n    AuthName \"phpMyAdmin Setup\"\n    AuthUserFile /etc/phpmyadmin/htpasswd.setup\n    </IfModule>\n    Require valid-user\n</Directory>\n\n# Disallow web access to directories that don't need it\n<Directory /usr/share/phpmyadmin/libraries>\n    Order Deny,Allow\n    Deny from All\n</Directory>\n<Directory /usr/share/phpmyadmin/setup/lib>\n    Order Deny,Allow\n    Deny from All\n</Directory>\n\n\n```\n看看这个文件的第一行,soga,原来他用的也是`Alias`命令,接下来我们继续往下走,下面的代码是什么意思呢?下面的代码是用来设置文件目录的权限的,就是`<Directory>`标签里面的内容.\n关于这里的设置,我们可以参考[apache官网](https://httpd.apache.org/docs/2.2/mod/mod_authz_host.html# order)上的描述.简而言之\n`Order Deny,Allow`其实是Allow优先,举个例子\n```\nOrder Deny,Allow\nAllow from All\nDeny from All\n```\n由于`Deny`规则在`Allow`之前(Order规定的),所以先Deny所有的请求,然后`Allow`规则在其后,最后的结果就是所有的人都可以随意访问.假设你要对访问进行限制,建议按照下面这样设置\n```\nOrder Deny,Allow\nAllow from 192.168.1.122\nDeny from All\n```\n也就是指允许ip为`192.168.1.122`的用户去访问,其他的用户都会被`Deny`\n# 3 最后的结果\n结合上面的分析,给出我最后的结果\n```\nAlias /api /var/www/api\n<Directory /var/www/api>\n Options FollowSymLinks Includes -Indexes\n\n  AllowOverride None\n  Order allow,deny\n  allow from all\n</Directory>\n\n```\n这里的`-Indexes`选项的意思是,不要列出目录\n打完收工\n","slug":"ubuntu-lamp-alias-setting","published":1,"updated":"2015-10-29T06:08:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7ysx008ex8cdo8f67mjw","content":"<p>好吧,我的博客一不小心又荒废下来了,话不多说,进入正文.<br><a id=\"more\"></a><br>最近的项目一直在忙,发布代码的时候遇到一个麻烦事,由于所有项目代码都放在服务器的根目录,也就是<code>/var/www/html</code>下;然后还有一个api的页面,我放在一个<code>api</code>文件夹中,然后把整个<code>api</code>文件夹放在<code>html</code>目录下.由于每次发布代码都是替换整个根目录<code>html</code>下的文件,你懂的,我每次发布项目代码后,<code>api</code>就没了,需要我单独解压,再复制,blablabla,总之一个字,<strong>  烦  </strong>.<br>我突然想起来,phpmyadmin安装后就不在网站的根目录,但是访问的时候我却还是直接在ip后面跟目录,比如<code>http://127.0.0.1/phpmyadmin</code>,这货应该是用了一个映射,我照着这个样子搞一个,不就行了,说干就干.</p>\n<h1 id=\"1-使用的命令\"><a href=\"#1-使用的命令\" class=\"headerlink\" title=\"1 使用的命令\"></a>1 使用的命令</h1><p><code>Alias</code> 这个是这次主要使用的命令,使用的方法很简单,如下所示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Alias /api /home/ch/api</div></pre></td></tr></table></figure></p>\n<p>意思就是如果你在ip后面添加<code>/api</code>后缀,也就是你在浏览器访问<code>http://127.0.0.1/api</code>,那么实际就会访问到<code>/home/ch/api</code>目录下</p>\n<h1 id=\"2-使用方法\"><a href=\"#2-使用方法\" class=\"headerlink\" title=\"2 使用方法\"></a>2 使用方法</h1><h3 id=\"Linux下\"><a href=\"#Linux下\" class=\"headerlink\" title=\"Linux下\"></a>Linux下</h3><p>由于我用的是ubuntu,所以具体说下ubuntu下怎么用.<br>根据<a href=\"http://huirong.github.io/2015/04/01/installLamp/\" target=\"_blank\" rel=\"external\">在Ubuntu上安装LAMP服务器并简单配置</a>,这篇文章中关于<code>phpmyadmin</code>的设置部分,以下为摘抄<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">配置Apache服务器</div><div class=\"line\">如果此时在浏览器中输入<span class=\"string\">http:</span><span class=\"comment\">//localhost/phpmyadmin，会提示404错误</span></div><div class=\"line\">此时应该进行简单的配置，将phpMyAdmin的配置文件，复制到Apache2下</div><div class=\"line\"></div><div class=\"line\">cp <span class=\"regexp\">/etc/</span>phpmyadmin<span class=\"regexp\">/apache.conf /</span>etc<span class=\"regexp\">/apache2/</span>conf-enabled/phpmyadmin.conf</div><div class=\"line\">然后重启Apache服务器</div><div class=\"line\"></div><div class=\"line\">service apache2 restart</div></pre></td></tr></table></figure></p>\n<p>我们得到启发,本来phpmyadmin也是不在<code>html</code>根目录下的,上面的操作做了什么呢?<br>我们打开<code>/etc/apache2/conf-enabled/phpmyadmin.conf</code>这个文件看看<br><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># phpMyAdmin default Apache configuration</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attribute\">Alias</span> /phpmyadmin /usr/share/phpmyadmin</div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">&lt;Directory /usr/share/phpmyadmin&gt;</span></div><div class=\"line\">    <span class=\"attribute\"><span class=\"nomarkup\">Options</span></span> FollowSymLinks</div><div class=\"line\">    <span class=\"attribute\">DirectoryIndex</span> index.php</div><div class=\"line\"></div><div class=\"line\">    <span class=\"section\">&lt;IfModule mod_php5.c&gt;</span></div><div class=\"line\">        <span class=\"attribute\">AddType</span> application/x-httpd-php .php</div><div class=\"line\"></div><div class=\"line\">        <span class=\"attribute\">php_flag</span> magic_quotes_gpc <span class=\"literal\">Off</span></div><div class=\"line\">        <span class=\"attribute\">php_flag</span> track_vars <span class=\"literal\">On</span></div><div class=\"line\">        <span class=\"attribute\">php_flag</span> register_globals <span class=\"literal\">Off</span></div><div class=\"line\">        <span class=\"attribute\">php_admin_flag</span> allow_url_fopen <span class=\"literal\">Off</span></div><div class=\"line\">        <span class=\"attribute\">php_value</span> include_path .</div><div class=\"line\">        <span class=\"attribute\">php_admin_value</span> upload_tmp_dir /var/lib/phpmyadmin/tmp</div><div class=\"line\">        <span class=\"attribute\">php_admin_value</span> open_basedir /usr/share/phpmyadmin/:/etc/phpmyadmin/:/var/lib/phpmyadmin/:/usr/share/php/php-gettext/:/usr/share/javascript/</div><div class=\"line\">    <span class=\"section\">&lt;/IfModule&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">&lt;/Directory&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Authorize for setup</span></div><div class=\"line\"><span class=\"section\">&lt;Directory /usr/share/phpmyadmin/setup&gt;</span></div><div class=\"line\">    <span class=\"section\">&lt;IfModule mod_authn_file.c&gt;</span></div><div class=\"line\">    <span class=\"attribute\">AuthType</span> Basic</div><div class=\"line\">    <span class=\"attribute\">AuthName</span> <span class=\"string\">\"phpMyAdmin Setup\"</span></div><div class=\"line\">    <span class=\"attribute\">AuthUserFile</span> /etc/phpmyadmin/htpasswd.setup</div><div class=\"line\">    <span class=\"section\">&lt;/IfModule&gt;</span></div><div class=\"line\">    <span class=\"attribute\">Require</span> valid-user</div><div class=\"line\"><span class=\"section\">&lt;/Directory&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Disallow web access to directories that don't need it</span></div><div class=\"line\"><span class=\"section\">&lt;Directory /usr/share/phpmyadmin/libraries&gt;</span></div><div class=\"line\">    <span class=\"attribute\"><span class=\"nomarkup\">Order</span></span> Deny,Allow</div><div class=\"line\">    <span class=\"attribute\"><span class=\"nomarkup\">Deny</span></span> from <span class=\"literal\">All</span></div><div class=\"line\"><span class=\"section\">&lt;/Directory&gt;</span></div><div class=\"line\"><span class=\"section\">&lt;Directory /usr/share/phpmyadmin/setup/lib&gt;</span></div><div class=\"line\">    <span class=\"attribute\"><span class=\"nomarkup\">Order</span></span> Deny,Allow</div><div class=\"line\">    <span class=\"attribute\"><span class=\"nomarkup\">Deny</span></span> from <span class=\"literal\">All</span></div><div class=\"line\"><span class=\"section\">&lt;/Directory&gt;</span></div></pre></td></tr></table></figure></p>\n<p>看看这个文件的第一行,soga,原来他用的也是<code>Alias</code>命令,接下来我们继续往下走,下面的代码是什么意思呢?下面的代码是用来设置文件目录的权限的,就是<code>&lt;Directory&gt;</code>标签里面的内容.<br>关于这里的设置,我们可以参考<a href=\"https://httpd.apache.org/docs/2.2/mod/mod_authz_host.html# order\" target=\"_blank\" rel=\"external\">apache官网</a>上的描述.简而言之<br><code>Order Deny,Allow</code>其实是Allow优先,举个例子<br><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\"><span class=\"nomarkup\">Order</span></span> Deny,Allow</div><div class=\"line\"><span class=\"attribute\"><span class=\"nomarkup\">Allow</span></span> from <span class=\"literal\">All</span></div><div class=\"line\"><span class=\"attribute\"><span class=\"nomarkup\">Deny</span></span> from <span class=\"literal\">All</span></div></pre></td></tr></table></figure></p>\n<p>由于<code>Deny</code>规则在<code>Allow</code>之前(Order规定的),所以先Deny所有的请求,然后<code>Allow</code>规则在其后,最后的结果就是所有的人都可以随意访问.假设你要对访问进行限制,建议按照下面这样设置<br><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\"><span class=\"nomarkup\">Order</span></span> Deny,Allow</div><div class=\"line\"><span class=\"attribute\"><span class=\"nomarkup\">Allow</span></span> from 192.168.1.122</div><div class=\"line\"><span class=\"attribute\"><span class=\"nomarkup\">Deny</span></span> from <span class=\"literal\">All</span></div></pre></td></tr></table></figure></p>\n<p>也就是指允许ip为<code>192.168.1.122</code>的用户去访问,其他的用户都会被<code>Deny</code></p>\n<h1 id=\"3-最后的结果\"><a href=\"#3-最后的结果\" class=\"headerlink\" title=\"3 最后的结果\"></a>3 最后的结果</h1><p>结合上面的分析,给出我最后的结果<br><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Alias</span> /api /var/www/api</div><div class=\"line\"><span class=\"section\">&lt;Directory /var/www/api&gt;</span></div><div class=\"line\"> <span class=\"attribute\"><span class=\"nomarkup\">Options</span></span> FollowSymLinks Includes -Indexes</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attribute\">AllowOverride</span> None</div><div class=\"line\">  <span class=\"attribute\"><span class=\"nomarkup\">Order</span></span> allow,deny</div><div class=\"line\">  <span class=\"attribute\"><span class=\"nomarkup\">allow</span></span> from <span class=\"literal\">all</span></div><div class=\"line\"><span class=\"section\">&lt;/Directory&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这里的<code>-Indexes</code>选项的意思是,不要列出目录<br>打完收工</p>\n","excerpt":"<p>好吧,我的博客一不小心又荒废下来了,话不多说,进入正文.<br>","more":"<br>最近的项目一直在忙,发布代码的时候遇到一个麻烦事,由于所有项目代码都放在服务器的根目录,也就是<code>/var/www/html</code>下;然后还有一个api的页面,我放在一个<code>api</code>文件夹中,然后把整个<code>api</code>文件夹放在<code>html</code>目录下.由于每次发布代码都是替换整个根目录<code>html</code>下的文件,你懂的,我每次发布项目代码后,<code>api</code>就没了,需要我单独解压,再复制,blablabla,总之一个字,<strong>  烦  </strong>.<br>我突然想起来,phpmyadmin安装后就不在网站的根目录,但是访问的时候我却还是直接在ip后面跟目录,比如<code>http://127.0.0.1/phpmyadmin</code>,这货应该是用了一个映射,我照着这个样子搞一个,不就行了,说干就干.</p>\n<h1 id=\"1-使用的命令\"><a href=\"#1-使用的命令\" class=\"headerlink\" title=\"1 使用的命令\"></a>1 使用的命令</h1><p><code>Alias</code> 这个是这次主要使用的命令,使用的方法很简单,如下所示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Alias /api /home/ch/api</div></pre></td></tr></table></figure></p>\n<p>意思就是如果你在ip后面添加<code>/api</code>后缀,也就是你在浏览器访问<code>http://127.0.0.1/api</code>,那么实际就会访问到<code>/home/ch/api</code>目录下</p>\n<h1 id=\"2-使用方法\"><a href=\"#2-使用方法\" class=\"headerlink\" title=\"2 使用方法\"></a>2 使用方法</h1><h3 id=\"Linux下\"><a href=\"#Linux下\" class=\"headerlink\" title=\"Linux下\"></a>Linux下</h3><p>由于我用的是ubuntu,所以具体说下ubuntu下怎么用.<br>根据<a href=\"http://huirong.github.io/2015/04/01/installLamp/\">在Ubuntu上安装LAMP服务器并简单配置</a>,这篇文章中关于<code>phpmyadmin</code>的设置部分,以下为摘抄<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">配置Apache服务器</div><div class=\"line\">如果此时在浏览器中输入<span class=\"string\">http:</span><span class=\"comment\">//localhost/phpmyadmin，会提示404错误</span></div><div class=\"line\">此时应该进行简单的配置，将phpMyAdmin的配置文件，复制到Apache2下</div><div class=\"line\"></div><div class=\"line\">cp <span class=\"regexp\">/etc/</span>phpmyadmin<span class=\"regexp\">/apache.conf /</span>etc<span class=\"regexp\">/apache2/</span>conf-enabled/phpmyadmin.conf</div><div class=\"line\">然后重启Apache服务器</div><div class=\"line\"></div><div class=\"line\">service apache2 restart</div></pre></td></tr></table></figure></p>\n<p>我们得到启发,本来phpmyadmin也是不在<code>html</code>根目录下的,上面的操作做了什么呢?<br>我们打开<code>/etc/apache2/conf-enabled/phpmyadmin.conf</code>这个文件看看<br><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># phpMyAdmin default Apache configuration</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attribute\">Alias</span> /phpmyadmin /usr/share/phpmyadmin</div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">&lt;Directory /usr/share/phpmyadmin&gt;</span></div><div class=\"line\">    <span class=\"attribute\"><span class=\"nomarkup\">Options</span></span> FollowSymLinks</div><div class=\"line\">    <span class=\"attribute\">DirectoryIndex</span> index.php</div><div class=\"line\"></div><div class=\"line\">    <span class=\"section\">&lt;IfModule mod_php5.c&gt;</span></div><div class=\"line\">        <span class=\"attribute\">AddType</span> application/x-httpd-php .php</div><div class=\"line\"></div><div class=\"line\">        <span class=\"attribute\">php_flag</span> magic_quotes_gpc <span class=\"literal\">Off</span></div><div class=\"line\">        <span class=\"attribute\">php_flag</span> track_vars <span class=\"literal\">On</span></div><div class=\"line\">        <span class=\"attribute\">php_flag</span> register_globals <span class=\"literal\">Off</span></div><div class=\"line\">        <span class=\"attribute\">php_admin_flag</span> allow_url_fopen <span class=\"literal\">Off</span></div><div class=\"line\">        <span class=\"attribute\">php_value</span> include_path .</div><div class=\"line\">        <span class=\"attribute\">php_admin_value</span> upload_tmp_dir /var/lib/phpmyadmin/tmp</div><div class=\"line\">        <span class=\"attribute\">php_admin_value</span> open_basedir /usr/share/phpmyadmin/:/etc/phpmyadmin/:/var/lib/phpmyadmin/:/usr/share/php/php-gettext/:/usr/share/javascript/</div><div class=\"line\">    <span class=\"section\">&lt;/IfModule&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">&lt;/Directory&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Authorize for setup</span></div><div class=\"line\"><span class=\"section\">&lt;Directory /usr/share/phpmyadmin/setup&gt;</span></div><div class=\"line\">    <span class=\"section\">&lt;IfModule mod_authn_file.c&gt;</span></div><div class=\"line\">    <span class=\"attribute\">AuthType</span> Basic</div><div class=\"line\">    <span class=\"attribute\">AuthName</span> <span class=\"string\">\"phpMyAdmin Setup\"</span></div><div class=\"line\">    <span class=\"attribute\">AuthUserFile</span> /etc/phpmyadmin/htpasswd.setup</div><div class=\"line\">    <span class=\"section\">&lt;/IfModule&gt;</span></div><div class=\"line\">    <span class=\"attribute\">Require</span> valid-user</div><div class=\"line\"><span class=\"section\">&lt;/Directory&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Disallow web access to directories that don't need it</span></div><div class=\"line\"><span class=\"section\">&lt;Directory /usr/share/phpmyadmin/libraries&gt;</span></div><div class=\"line\">    <span class=\"attribute\"><span class=\"nomarkup\">Order</span></span> Deny,Allow</div><div class=\"line\">    <span class=\"attribute\"><span class=\"nomarkup\">Deny</span></span> from <span class=\"literal\">All</span></div><div class=\"line\"><span class=\"section\">&lt;/Directory&gt;</span></div><div class=\"line\"><span class=\"section\">&lt;Directory /usr/share/phpmyadmin/setup/lib&gt;</span></div><div class=\"line\">    <span class=\"attribute\"><span class=\"nomarkup\">Order</span></span> Deny,Allow</div><div class=\"line\">    <span class=\"attribute\"><span class=\"nomarkup\">Deny</span></span> from <span class=\"literal\">All</span></div><div class=\"line\"><span class=\"section\">&lt;/Directory&gt;</span></div></pre></td></tr></table></figure></p>\n<p>看看这个文件的第一行,soga,原来他用的也是<code>Alias</code>命令,接下来我们继续往下走,下面的代码是什么意思呢?下面的代码是用来设置文件目录的权限的,就是<code>&lt;Directory&gt;</code>标签里面的内容.<br>关于这里的设置,我们可以参考<a href=\"https://httpd.apache.org/docs/2.2/mod/mod_authz_host.html# order\">apache官网</a>上的描述.简而言之<br><code>Order Deny,Allow</code>其实是Allow优先,举个例子<br><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\"><span class=\"nomarkup\">Order</span></span> Deny,Allow</div><div class=\"line\"><span class=\"attribute\"><span class=\"nomarkup\">Allow</span></span> from <span class=\"literal\">All</span></div><div class=\"line\"><span class=\"attribute\"><span class=\"nomarkup\">Deny</span></span> from <span class=\"literal\">All</span></div></pre></td></tr></table></figure></p>\n<p>由于<code>Deny</code>规则在<code>Allow</code>之前(Order规定的),所以先Deny所有的请求,然后<code>Allow</code>规则在其后,最后的结果就是所有的人都可以随意访问.假设你要对访问进行限制,建议按照下面这样设置<br><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\"><span class=\"nomarkup\">Order</span></span> Deny,Allow</div><div class=\"line\"><span class=\"attribute\"><span class=\"nomarkup\">Allow</span></span> from 192.168.1.122</div><div class=\"line\"><span class=\"attribute\"><span class=\"nomarkup\">Deny</span></span> from <span class=\"literal\">All</span></div></pre></td></tr></table></figure></p>\n<p>也就是指允许ip为<code>192.168.1.122</code>的用户去访问,其他的用户都会被<code>Deny</code></p>\n<h1 id=\"3-最后的结果\"><a href=\"#3-最后的结果\" class=\"headerlink\" title=\"3 最后的结果\"></a>3 最后的结果</h1><p>结合上面的分析,给出我最后的结果<br><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Alias</span> /api /var/www/api</div><div class=\"line\"><span class=\"section\">&lt;Directory /var/www/api&gt;</span></div><div class=\"line\"> <span class=\"attribute\"><span class=\"nomarkup\">Options</span></span> FollowSymLinks Includes -Indexes</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attribute\">AllowOverride</span> None</div><div class=\"line\">  <span class=\"attribute\"><span class=\"nomarkup\">Order</span></span> allow,deny</div><div class=\"line\">  <span class=\"attribute\"><span class=\"nomarkup\">allow</span></span> from <span class=\"literal\">all</span></div><div class=\"line\"><span class=\"section\">&lt;/Directory&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这里的<code>-Indexes</code>选项的意思是,不要列出目录<br>打完收工</p>"},{"title":"wamp与sql_server_因为端口80冲突,无法开启wamp","date":"2014-11-14T10:09:00.000Z","_content":"\n因为80端口占用,导致无法启动,其实不必关闭sql server太多的东西,只需要关闭SQL Server Reporting Services 就行了,这样也不会影响sql server的使用\n\n如图\n![](http://img.blog.csdn.net/20141114175909339?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n\n\n打开sqlserver 配置管理器,关闭以上服务\n\n或者打开控制面板->管理->服务工具->SQL Server Reporting Services\n\n然后就可以打开wamp了\n","source":"_posts/wamp与sql_server_因为端口80冲突,无法开启wamp.md","raw":"title: 'wamp与sql_server_因为端口80冲突,无法开启wamp'\ndate: 2014-11-14 18:09\ntags:\n- sql server\n- wamp\ncategories:\n- 软件安装与技巧\n---\n\n因为80端口占用,导致无法启动,其实不必关闭sql server太多的东西,只需要关闭SQL Server Reporting Services 就行了,这样也不会影响sql server的使用\n\n如图\n![](http://img.blog.csdn.net/20141114175909339?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n\n\n打开sqlserver 配置管理器,关闭以上服务\n\n或者打开控制面板->管理->服务工具->SQL Server Reporting Services\n\n然后就可以打开wamp了\n","slug":"wamp与sql_server_因为端口80冲突,无法开启wamp","published":1,"updated":"2015-09-29T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7ysy008ix8cdhevb2gzm","content":"<p>因为80端口占用,导致无法启动,其实不必关闭sql server太多的东西,只需要关闭SQL Server Reporting Services 就行了,这样也不会影响sql server的使用</p>\n<p>如图<br><img src=\"http://img.blog.csdn.net/20141114175909339?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>打开sqlserver 配置管理器,关闭以上服务</p>\n<p>或者打开控制面板-&gt;管理-&gt;服务工具-&gt;SQL Server Reporting Services</p>\n<p>然后就可以打开wamp了</p>\n","excerpt":"","more":"<p>因为80端口占用,导致无法启动,其实不必关闭sql server太多的东西,只需要关闭SQL Server Reporting Services 就行了,这样也不会影响sql server的使用</p>\n<p>如图<br><img src=\"http://img.blog.csdn.net/20141114175909339?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>打开sqlserver 配置管理器,关闭以上服务</p>\n<p>或者打开控制面板-&gt;管理-&gt;服务工具-&gt;SQL Server Reporting Services</p>\n<p>然后就可以打开wamp了</p>\n"},{"title":"微信支付app支付3.0接口开发","date":"2015-10-25T13:30:03.000Z","_content":"最近在做微信支付,因为前段时间做了微信的公众账号支付,我以为是一个东西,结果发现不是,我真是醉了,竟然是独立的两套东西.\n<!-- more -->\n![微信支付架构图](http://ww4.sinaimg.cn/large/692869a3gw1exdqakso33j20ny0dptbi.jpg)\n整个微信支付,分为三大平台,公众平台(就是公众账号那个),开发平台(主要针对app这块),商户平台(所有微信支付的结算,最终在这里).三个平台的账号都不同,而且必须不同,不然不让你注册.\n其中,需要用户注册的是公众平台和开放平台,当你审核通过以后,就会给你分配一个对应的商户号.也就是说,你一个公司,申请一个公众号和一个开放平台账号,分别给你一个商户号,你就一共有两个商户号.这两个商户号不同,我之前就是拿着公众账号对应的商户号(客户给错了),去做app支付,一直说不对应.\n下面进入正文,看看怎么开发\n# 准备工作\n首先你需要注册[开放平台](https://open.weixin.qq.com/)账号,然后添加一个app应用(里面包含你的appid和appkey),并且进行认证,然后就会收到一封邮件,里面包含了你分到的商户号.\n\n# 1 流程图\n接下来,我们需要搞清楚微信app支付开发的流程,如下图所示.\n![微信app支付流程图](http://ww1.sinaimg.cn/large/692869a3gw1exgxrb07bfj20ou0sy453.jpg)\n其中,红色的部分是需要我们做的,具体分下来,客户端要做的事就比较少,生成预支付订单,返回签名的package这些都是服务端做的(开发客户端真爽),当然从另外一个角度来说,这些事情也确实应该放在服务器端来做,因为涉及到一些key和密钥之类的东西,放在客户端app中不安全,如果app被反编译就暴露了这些信息.\n```\n商户系统和微信支付系统主要交互说明：\n步骤1：用户在商户APP中选择商品，提交订单，选择微信支付。\n步骤2：商户后台收到用户支付单，调用微信支付统一下单接口。参见【统一下单API】。\n步骤3：统一下单接口返回正常的prepay_id，再按签名规范重新生成签名后，将数据传输给APP。参与签名的字段名为appId，partnerId，prepayId，nonceStr，timeStamp，package。注意：package的值格式为Sign=WXPay\n步骤4：商户APP调起微信支付。api参见本章节【app端开发步骤说明】\n步骤5：商户后台接收支付通知。api参见【支付结果通知API】\n步骤6：商户后台查询支付结果。，api参见【查询订单API】\n```\n服务端要做的,就是步骤1235,客户端做步骤4就行了,步骤6看自己的需求,我们没有做.\n首先,生成商户服务器订单,这个自不必说,只有生成订单,才有订单号,才能做后面的工作.\n我们重点看下步骤2和步骤3\n\n# 2  调用统一下单接口\n首先,我们需要看一下[统一下单接口](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=9_1)文档,里面包含了请求的地址和要传的参数,顾名思义,那些必填字段是必须要填写的,这是我的请求参数列表`out_trade_no`,`body`,`total_fee`,`time_start`,`time_expire`,`spbill_create_ip`,`notify_url`,`trade_type`还有一个签名`sign`,这就是所有的请求字段.\n## 签名\n签名的思路是,把所有得除`sign`字段以外的字段,按照参数名ASCII码从小到大排序,使用URL键值对的格式（即key1=value1&key2=value2…）拼接成字符串stringA。在stringA最后拼接上key得到stringSignTemp字符串，并对stringSignTemp进行MD5运算，再将得到的字符串所有字符转换为大写，得到sign值signValue。[官方文档](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_3).\n\n签名可能有点蛋疼,你可以看[这个](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_3)文档.微信也提供了签名的[在线调试工具](https://pay.weixin.qq.com/wiki/tools/signverify/),你把参数填进去,看看签名拿到的值是否和你签名的结果一样.\n\n## 调用unifiedOrder\n由于统一下单接口,所有的支付方式都会调用,包括公众账号的几种支付方式,而且官方没有app支付的sdk代码,所以我们直接用公众号支付的js sdk代码.\nsdk里面已经封装好了对统一下单接口的调用,包括签名,所以我们只需要调用这个就好了.\n\n## 整理参数\n调用统一下单接口后,会返回很多数据,我们还是调用js sdk里面的处理函数,因为返回的是xml的内容,有些数据我们不要,(下面的结果是js api的,结果跟app除了trade_type不同,其他都是一样的)\n```\n<xml>\n   <return_code><![CDATA[SUCCESS]]></return_code>\n   <return_msg><![CDATA[OK]]></return_msg>\n   <appid><![CDATA[wx2421b1c4370ec43b]]></appid>\n   <mch_id><![CDATA[10000100]]></mch_id>\n   <nonce_str><![CDATA[IITRi8Iabbblz1Jc]]></nonce_str>\n   <sign><![CDATA[7921E432F65EB8ED0CE9755F0E86D72F]]></sign>\n   <result_code><![CDATA[SUCCESS]]></result_code>\n   <prepay_id><![CDATA[wx201411101639507cbf6ffd8b0779950874]]></prepay_id>\n   <trade_type><![CDATA[JSAPI]]></trade_type>\n</xml>\n```\n上面的参数中,我们需要appid(就是你配置中的那个appid),prepay_id(预支付id,之前都是为了它),partnerid(就是你配置的商户号mch_id),其他的就没啥用了,我们接下来要给客户端返回一个数据包,全部的数据如下\n```\n{\"appid\":\"wx8c965dd8b4794241\",\"noncestr\":\"oxh4g98rfgbmugwbmxfg72ay6qpvieos\",\"package\":\"Sign=WXpay\",\"partnerid\":\"1277670101\",\"prepayid\":\"wx2015102014523449175fc2fd0939076028\",\"timestamp\":\"1445323951\",\"sign\":\"7F84997FDW40F6F15DD1C28A9E313122\"}\n```\n`noncestr`是重新生成的,`package`是固定写法,里面的内容必须写`\"Sign=WXpay\"`,`timestamp`也是重新生成的,`sign`是重新签名后的结果.\n然后把数据返回给客户端就行了,客户端调起支付.\n\n# 3  支付回调\n和支付宝原理一样,不过微信返回的数据不是标准的`post`,所以你没法通过`$_POST['out_trade_no']`这样来获取数据.\n所以,我的做法还是调用js sdk里面的回调方法,把那个回调类继承了一下,我们只需要重写`NotifyProcess`函数就行了,在这里面加入自己的逻辑,比如判断订单是否存在,订单是否已经处理过之类的.\n至此,大流程已经走通了.\n# 4  优化\n在调试过程中,我发现同一个订单号不能重复的去获取预支付的prepay_id,所以,我们在整理参数那一步后,需要将返回参数存到数据库,下次申请支付的时候,先去数据库查一下,有的话,就不用给微信服务器请求了\n\n\n打完收工.\n\n# 参考文献\n1 [微信官方sdk下载](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=11_1)\n","source":"_posts/weixin-app-pay-v3-0.md","raw":"title: 微信支付app支付3.0接口开发\ndate: 2015-10-25 21:30:03\ntags:\n- 微信支付\n- api\ncategories:\n- php\n---\n最近在做微信支付,因为前段时间做了微信的公众账号支付,我以为是一个东西,结果发现不是,我真是醉了,竟然是独立的两套东西.\n<!-- more -->\n![微信支付架构图](http://ww4.sinaimg.cn/large/692869a3gw1exdqakso33j20ny0dptbi.jpg)\n整个微信支付,分为三大平台,公众平台(就是公众账号那个),开发平台(主要针对app这块),商户平台(所有微信支付的结算,最终在这里).三个平台的账号都不同,而且必须不同,不然不让你注册.\n其中,需要用户注册的是公众平台和开放平台,当你审核通过以后,就会给你分配一个对应的商户号.也就是说,你一个公司,申请一个公众号和一个开放平台账号,分别给你一个商户号,你就一共有两个商户号.这两个商户号不同,我之前就是拿着公众账号对应的商户号(客户给错了),去做app支付,一直说不对应.\n下面进入正文,看看怎么开发\n# 准备工作\n首先你需要注册[开放平台](https://open.weixin.qq.com/)账号,然后添加一个app应用(里面包含你的appid和appkey),并且进行认证,然后就会收到一封邮件,里面包含了你分到的商户号.\n\n# 1 流程图\n接下来,我们需要搞清楚微信app支付开发的流程,如下图所示.\n![微信app支付流程图](http://ww1.sinaimg.cn/large/692869a3gw1exgxrb07bfj20ou0sy453.jpg)\n其中,红色的部分是需要我们做的,具体分下来,客户端要做的事就比较少,生成预支付订单,返回签名的package这些都是服务端做的(开发客户端真爽),当然从另外一个角度来说,这些事情也确实应该放在服务器端来做,因为涉及到一些key和密钥之类的东西,放在客户端app中不安全,如果app被反编译就暴露了这些信息.\n```\n商户系统和微信支付系统主要交互说明：\n步骤1：用户在商户APP中选择商品，提交订单，选择微信支付。\n步骤2：商户后台收到用户支付单，调用微信支付统一下单接口。参见【统一下单API】。\n步骤3：统一下单接口返回正常的prepay_id，再按签名规范重新生成签名后，将数据传输给APP。参与签名的字段名为appId，partnerId，prepayId，nonceStr，timeStamp，package。注意：package的值格式为Sign=WXPay\n步骤4：商户APP调起微信支付。api参见本章节【app端开发步骤说明】\n步骤5：商户后台接收支付通知。api参见【支付结果通知API】\n步骤6：商户后台查询支付结果。，api参见【查询订单API】\n```\n服务端要做的,就是步骤1235,客户端做步骤4就行了,步骤6看自己的需求,我们没有做.\n首先,生成商户服务器订单,这个自不必说,只有生成订单,才有订单号,才能做后面的工作.\n我们重点看下步骤2和步骤3\n\n# 2  调用统一下单接口\n首先,我们需要看一下[统一下单接口](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=9_1)文档,里面包含了请求的地址和要传的参数,顾名思义,那些必填字段是必须要填写的,这是我的请求参数列表`out_trade_no`,`body`,`total_fee`,`time_start`,`time_expire`,`spbill_create_ip`,`notify_url`,`trade_type`还有一个签名`sign`,这就是所有的请求字段.\n## 签名\n签名的思路是,把所有得除`sign`字段以外的字段,按照参数名ASCII码从小到大排序,使用URL键值对的格式（即key1=value1&key2=value2…）拼接成字符串stringA。在stringA最后拼接上key得到stringSignTemp字符串，并对stringSignTemp进行MD5运算，再将得到的字符串所有字符转换为大写，得到sign值signValue。[官方文档](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_3).\n\n签名可能有点蛋疼,你可以看[这个](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_3)文档.微信也提供了签名的[在线调试工具](https://pay.weixin.qq.com/wiki/tools/signverify/),你把参数填进去,看看签名拿到的值是否和你签名的结果一样.\n\n## 调用unifiedOrder\n由于统一下单接口,所有的支付方式都会调用,包括公众账号的几种支付方式,而且官方没有app支付的sdk代码,所以我们直接用公众号支付的js sdk代码.\nsdk里面已经封装好了对统一下单接口的调用,包括签名,所以我们只需要调用这个就好了.\n\n## 整理参数\n调用统一下单接口后,会返回很多数据,我们还是调用js sdk里面的处理函数,因为返回的是xml的内容,有些数据我们不要,(下面的结果是js api的,结果跟app除了trade_type不同,其他都是一样的)\n```\n<xml>\n   <return_code><![CDATA[SUCCESS]]></return_code>\n   <return_msg><![CDATA[OK]]></return_msg>\n   <appid><![CDATA[wx2421b1c4370ec43b]]></appid>\n   <mch_id><![CDATA[10000100]]></mch_id>\n   <nonce_str><![CDATA[IITRi8Iabbblz1Jc]]></nonce_str>\n   <sign><![CDATA[7921E432F65EB8ED0CE9755F0E86D72F]]></sign>\n   <result_code><![CDATA[SUCCESS]]></result_code>\n   <prepay_id><![CDATA[wx201411101639507cbf6ffd8b0779950874]]></prepay_id>\n   <trade_type><![CDATA[JSAPI]]></trade_type>\n</xml>\n```\n上面的参数中,我们需要appid(就是你配置中的那个appid),prepay_id(预支付id,之前都是为了它),partnerid(就是你配置的商户号mch_id),其他的就没啥用了,我们接下来要给客户端返回一个数据包,全部的数据如下\n```\n{\"appid\":\"wx8c965dd8b4794241\",\"noncestr\":\"oxh4g98rfgbmugwbmxfg72ay6qpvieos\",\"package\":\"Sign=WXpay\",\"partnerid\":\"1277670101\",\"prepayid\":\"wx2015102014523449175fc2fd0939076028\",\"timestamp\":\"1445323951\",\"sign\":\"7F84997FDW40F6F15DD1C28A9E313122\"}\n```\n`noncestr`是重新生成的,`package`是固定写法,里面的内容必须写`\"Sign=WXpay\"`,`timestamp`也是重新生成的,`sign`是重新签名后的结果.\n然后把数据返回给客户端就行了,客户端调起支付.\n\n# 3  支付回调\n和支付宝原理一样,不过微信返回的数据不是标准的`post`,所以你没法通过`$_POST['out_trade_no']`这样来获取数据.\n所以,我的做法还是调用js sdk里面的回调方法,把那个回调类继承了一下,我们只需要重写`NotifyProcess`函数就行了,在这里面加入自己的逻辑,比如判断订单是否存在,订单是否已经处理过之类的.\n至此,大流程已经走通了.\n# 4  优化\n在调试过程中,我发现同一个订单号不能重复的去获取预支付的prepay_id,所以,我们在整理参数那一步后,需要将返回参数存到数据库,下次申请支付的时候,先去数据库查一下,有的话,就不用给微信服务器请求了\n\n\n打完收工.\n\n# 参考文献\n1 [微信官方sdk下载](https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=11_1)\n","slug":"weixin-app-pay-v3-0","published":1,"updated":"2015-10-29T06:13:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yt0008lx8cdgdi20yb3","content":"<p>最近在做微信支付,因为前段时间做了微信的公众账号支付,我以为是一个东西,结果发现不是,我真是醉了,竟然是独立的两套东西.<br><a id=\"more\"></a><br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1exdqakso33j20ny0dptbi.jpg\" alt=\"微信支付架构图\"><br>整个微信支付,分为三大平台,公众平台(就是公众账号那个),开发平台(主要针对app这块),商户平台(所有微信支付的结算,最终在这里).三个平台的账号都不同,而且必须不同,不然不让你注册.<br>其中,需要用户注册的是公众平台和开放平台,当你审核通过以后,就会给你分配一个对应的商户号.也就是说,你一个公司,申请一个公众号和一个开放平台账号,分别给你一个商户号,你就一共有两个商户号.这两个商户号不同,我之前就是拿着公众账号对应的商户号(客户给错了),去做app支付,一直说不对应.<br>下面进入正文,看看怎么开发</p>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><p>首先你需要注册<a href=\"https://open.weixin.qq.com/\" target=\"_blank\" rel=\"external\">开放平台</a>账号,然后添加一个app应用(里面包含你的appid和appkey),并且进行认证,然后就会收到一封邮件,里面包含了你分到的商户号.</p>\n<h1 id=\"1-流程图\"><a href=\"#1-流程图\" class=\"headerlink\" title=\"1 流程图\"></a>1 流程图</h1><p>接下来,我们需要搞清楚微信app支付开发的流程,如下图所示.<br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1exgxrb07bfj20ou0sy453.jpg\" alt=\"微信app支付流程图\"><br>其中,红色的部分是需要我们做的,具体分下来,客户端要做的事就比较少,生成预支付订单,返回签名的package这些都是服务端做的(开发客户端真爽),当然从另外一个角度来说,这些事情也确实应该放在服务器端来做,因为涉及到一些key和密钥之类的东西,放在客户端app中不安全,如果app被反编译就暴露了这些信息.<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">商户系统和微信支付系统主要交互说明：</div><div class=\"line\">步骤<span class=\"number\">1</span>：用户在商户APP中选择商品，提交订单，选择微信支付。</div><div class=\"line\">步骤<span class=\"number\">2</span>：商户后台收到用户支付单，调用微信支付统一下单接口。参见【统一下单API】。</div><div class=\"line\">步骤<span class=\"number\">3</span>：统一下单接口返回正常的prepay_id，再按签名规范重新生成签名后，将数据传输给APP。参与签名的字段名为appId，partnerId，prepayId，nonceStr，timeStamp，package。注意：package的值格式为Sign=WXPay</div><div class=\"line\">步骤<span class=\"number\">4</span>：商户APP调起微信支付。api参见本章节【app端开发步骤说明】</div><div class=\"line\">步骤<span class=\"number\">5</span>：商户后台接收支付通知。api参见【支付结果通知API】</div><div class=\"line\">步骤<span class=\"number\">6</span>：商户后台查询支付结果。，api参见【查询订单API】</div></pre></td></tr></table></figure></p>\n<p>服务端要做的,就是步骤1235,客户端做步骤4就行了,步骤6看自己的需求,我们没有做.<br>首先,生成商户服务器订单,这个自不必说,只有生成订单,才有订单号,才能做后面的工作.<br>我们重点看下步骤2和步骤3</p>\n<h1 id=\"2-调用统一下单接口\"><a href=\"#2-调用统一下单接口\" class=\"headerlink\" title=\"2  调用统一下单接口\"></a>2  调用统一下单接口</h1><p>首先,我们需要看一下<a href=\"https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=9_1\" target=\"_blank\" rel=\"external\">统一下单接口</a>文档,里面包含了请求的地址和要传的参数,顾名思义,那些必填字段是必须要填写的,这是我的请求参数列表<code>out_trade_no</code>,<code>body</code>,<code>total_fee</code>,<code>time_start</code>,<code>time_expire</code>,<code>spbill_create_ip</code>,<code>notify_url</code>,<code>trade_type</code>还有一个签名<code>sign</code>,这就是所有的请求字段.</p>\n<h2 id=\"签名\"><a href=\"#签名\" class=\"headerlink\" title=\"签名\"></a>签名</h2><p>签名的思路是,把所有得除<code>sign</code>字段以外的字段,按照参数名ASCII码从小到大排序,使用URL键值对的格式（即key1=value1&amp;key2=value2…）拼接成字符串stringA。在stringA最后拼接上key得到stringSignTemp字符串，并对stringSignTemp进行MD5运算，再将得到的字符串所有字符转换为大写，得到sign值signValue。<a href=\"https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_3\" target=\"_blank\" rel=\"external\">官方文档</a>.</p>\n<p>签名可能有点蛋疼,你可以看<a href=\"https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_3\" target=\"_blank\" rel=\"external\">这个</a>文档.微信也提供了签名的<a href=\"https://pay.weixin.qq.com/wiki/tools/signverify/\" target=\"_blank\" rel=\"external\">在线调试工具</a>,你把参数填进去,看看签名拿到的值是否和你签名的结果一样.</p>\n<h2 id=\"调用unifiedOrder\"><a href=\"#调用unifiedOrder\" class=\"headerlink\" title=\"调用unifiedOrder\"></a>调用unifiedOrder</h2><p>由于统一下单接口,所有的支付方式都会调用,包括公众账号的几种支付方式,而且官方没有app支付的sdk代码,所以我们直接用公众号支付的js sdk代码.<br>sdk里面已经封装好了对统一下单接口的调用,包括签名,所以我们只需要调用这个就好了.</p>\n<h2 id=\"整理参数\"><a href=\"#整理参数\" class=\"headerlink\" title=\"整理参数\"></a>整理参数</h2><p>调用统一下单接口后,会返回很多数据,我们还是调用js sdk里面的处理函数,因为返回的是xml的内容,有些数据我们不要,(下面的结果是js api的,结果跟app除了trade_type不同,其他都是一样的)<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">xml</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">return_code</span>&gt;</span>&lt;![CDATA[SUCCESS]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">return_code</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">return_msg</span>&gt;</span>&lt;![CDATA[OK]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">return_msg</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">appid</span>&gt;</span>&lt;![CDATA[wx2421b1c4370ec43b]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">appid</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">mch_id</span>&gt;</span>&lt;![CDATA[10000100]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">mch_id</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">nonce_str</span>&gt;</span>&lt;![CDATA[IITRi8Iabbblz1Jc]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">nonce_str</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">sign</span>&gt;</span>&lt;![CDATA[7921E432F65EB8ED0CE9755F0E86D72F]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">sign</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">result_code</span>&gt;</span>&lt;![CDATA[SUCCESS]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">result_code</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">prepay_id</span>&gt;</span>&lt;![CDATA[wx201411101639507cbf6ffd8b0779950874]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">prepay_id</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">trade_type</span>&gt;</span>&lt;![CDATA[JSAPI]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">trade_type</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">xml</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>上面的参数中,我们需要appid(就是你配置中的那个appid),prepay_id(预支付id,之前都是为了它),partnerid(就是你配置的商户号mch_id),其他的就没啥用了,我们接下来要给客户端返回一个数据包,全部的数据如下<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;<span class=\"attr\">\"appid\"</span>:<span class=\"string\">\"wx8c965dd8b4794241\"</span>,<span class=\"attr\">\"noncestr\"</span>:<span class=\"string\">\"oxh4g98rfgbmugwbmxfg72ay6qpvieos\"</span>,<span class=\"attr\">\"package\"</span>:<span class=\"string\">\"Sign=WXpay\"</span>,<span class=\"attr\">\"partnerid\"</span>:<span class=\"string\">\"1277670101\"</span>,<span class=\"attr\">\"prepayid\"</span>:<span class=\"string\">\"wx2015102014523449175fc2fd0939076028\"</span>,<span class=\"attr\">\"timestamp\"</span>:<span class=\"string\">\"1445323951\"</span>,<span class=\"attr\">\"sign\"</span>:<span class=\"string\">\"7F84997FDW40F6F15DD1C28A9E313122\"</span>&#125;</div></pre></td></tr></table></figure></p>\n<p><code>noncestr</code>是重新生成的,<code>package</code>是固定写法,里面的内容必须写<code>&quot;Sign=WXpay&quot;</code>,<code>timestamp</code>也是重新生成的,<code>sign</code>是重新签名后的结果.<br>然后把数据返回给客户端就行了,客户端调起支付.</p>\n<h1 id=\"3-支付回调\"><a href=\"#3-支付回调\" class=\"headerlink\" title=\"3  支付回调\"></a>3  支付回调</h1><p>和支付宝原理一样,不过微信返回的数据不是标准的<code>post</code>,所以你没法通过<code>$_POST[&#39;out_trade_no&#39;]</code>这样来获取数据.<br>所以,我的做法还是调用js sdk里面的回调方法,把那个回调类继承了一下,我们只需要重写<code>NotifyProcess</code>函数就行了,在这里面加入自己的逻辑,比如判断订单是否存在,订单是否已经处理过之类的.<br>至此,大流程已经走通了.</p>\n<h1 id=\"4-优化\"><a href=\"#4-优化\" class=\"headerlink\" title=\"4  优化\"></a>4  优化</h1><p>在调试过程中,我发现同一个订单号不能重复的去获取预支付的prepay_id,所以,我们在整理参数那一步后,需要将返回参数存到数据库,下次申请支付的时候,先去数据库查一下,有的话,就不用给微信服务器请求了</p>\n<p>打完收工.</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=11_1\" target=\"_blank\" rel=\"external\">微信官方sdk下载</a></p>\n","excerpt":"<p>最近在做微信支付,因为前段时间做了微信的公众账号支付,我以为是一个东西,结果发现不是,我真是醉了,竟然是独立的两套东西.<br>","more":"<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1exdqakso33j20ny0dptbi.jpg\" alt=\"微信支付架构图\"><br>整个微信支付,分为三大平台,公众平台(就是公众账号那个),开发平台(主要针对app这块),商户平台(所有微信支付的结算,最终在这里).三个平台的账号都不同,而且必须不同,不然不让你注册.<br>其中,需要用户注册的是公众平台和开放平台,当你审核通过以后,就会给你分配一个对应的商户号.也就是说,你一个公司,申请一个公众号和一个开放平台账号,分别给你一个商户号,你就一共有两个商户号.这两个商户号不同,我之前就是拿着公众账号对应的商户号(客户给错了),去做app支付,一直说不对应.<br>下面进入正文,看看怎么开发</p>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><p>首先你需要注册<a href=\"https://open.weixin.qq.com/\">开放平台</a>账号,然后添加一个app应用(里面包含你的appid和appkey),并且进行认证,然后就会收到一封邮件,里面包含了你分到的商户号.</p>\n<h1 id=\"1-流程图\"><a href=\"#1-流程图\" class=\"headerlink\" title=\"1 流程图\"></a>1 流程图</h1><p>接下来,我们需要搞清楚微信app支付开发的流程,如下图所示.<br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1exgxrb07bfj20ou0sy453.jpg\" alt=\"微信app支付流程图\"><br>其中,红色的部分是需要我们做的,具体分下来,客户端要做的事就比较少,生成预支付订单,返回签名的package这些都是服务端做的(开发客户端真爽),当然从另外一个角度来说,这些事情也确实应该放在服务器端来做,因为涉及到一些key和密钥之类的东西,放在客户端app中不安全,如果app被反编译就暴露了这些信息.<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">商户系统和微信支付系统主要交互说明：</div><div class=\"line\">步骤<span class=\"number\">1</span>：用户在商户APP中选择商品，提交订单，选择微信支付。</div><div class=\"line\">步骤<span class=\"number\">2</span>：商户后台收到用户支付单，调用微信支付统一下单接口。参见【统一下单API】。</div><div class=\"line\">步骤<span class=\"number\">3</span>：统一下单接口返回正常的prepay_id，再按签名规范重新生成签名后，将数据传输给APP。参与签名的字段名为appId，partnerId，prepayId，nonceStr，timeStamp，package。注意：package的值格式为Sign=WXPay</div><div class=\"line\">步骤<span class=\"number\">4</span>：商户APP调起微信支付。api参见本章节【app端开发步骤说明】</div><div class=\"line\">步骤<span class=\"number\">5</span>：商户后台接收支付通知。api参见【支付结果通知API】</div><div class=\"line\">步骤<span class=\"number\">6</span>：商户后台查询支付结果。，api参见【查询订单API】</div></pre></td></tr></table></figure></p>\n<p>服务端要做的,就是步骤1235,客户端做步骤4就行了,步骤6看自己的需求,我们没有做.<br>首先,生成商户服务器订单,这个自不必说,只有生成订单,才有订单号,才能做后面的工作.<br>我们重点看下步骤2和步骤3</p>\n<h1 id=\"2-调用统一下单接口\"><a href=\"#2-调用统一下单接口\" class=\"headerlink\" title=\"2  调用统一下单接口\"></a>2  调用统一下单接口</h1><p>首先,我们需要看一下<a href=\"https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=9_1\">统一下单接口</a>文档,里面包含了请求的地址和要传的参数,顾名思义,那些必填字段是必须要填写的,这是我的请求参数列表<code>out_trade_no</code>,<code>body</code>,<code>total_fee</code>,<code>time_start</code>,<code>time_expire</code>,<code>spbill_create_ip</code>,<code>notify_url</code>,<code>trade_type</code>还有一个签名<code>sign</code>,这就是所有的请求字段.</p>\n<h2 id=\"签名\"><a href=\"#签名\" class=\"headerlink\" title=\"签名\"></a>签名</h2><p>签名的思路是,把所有得除<code>sign</code>字段以外的字段,按照参数名ASCII码从小到大排序,使用URL键值对的格式（即key1=value1&amp;key2=value2…）拼接成字符串stringA。在stringA最后拼接上key得到stringSignTemp字符串，并对stringSignTemp进行MD5运算，再将得到的字符串所有字符转换为大写，得到sign值signValue。<a href=\"https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_3\">官方文档</a>.</p>\n<p>签名可能有点蛋疼,你可以看<a href=\"https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=4_3\">这个</a>文档.微信也提供了签名的<a href=\"https://pay.weixin.qq.com/wiki/tools/signverify/\">在线调试工具</a>,你把参数填进去,看看签名拿到的值是否和你签名的结果一样.</p>\n<h2 id=\"调用unifiedOrder\"><a href=\"#调用unifiedOrder\" class=\"headerlink\" title=\"调用unifiedOrder\"></a>调用unifiedOrder</h2><p>由于统一下单接口,所有的支付方式都会调用,包括公众账号的几种支付方式,而且官方没有app支付的sdk代码,所以我们直接用公众号支付的js sdk代码.<br>sdk里面已经封装好了对统一下单接口的调用,包括签名,所以我们只需要调用这个就好了.</p>\n<h2 id=\"整理参数\"><a href=\"#整理参数\" class=\"headerlink\" title=\"整理参数\"></a>整理参数</h2><p>调用统一下单接口后,会返回很多数据,我们还是调用js sdk里面的处理函数,因为返回的是xml的内容,有些数据我们不要,(下面的结果是js api的,结果跟app除了trade_type不同,其他都是一样的)<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">xml</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">return_code</span>&gt;</span>&lt;![CDATA[SUCCESS]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">return_code</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">return_msg</span>&gt;</span>&lt;![CDATA[OK]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">return_msg</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">appid</span>&gt;</span>&lt;![CDATA[wx2421b1c4370ec43b]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">appid</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">mch_id</span>&gt;</span>&lt;![CDATA[10000100]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">mch_id</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">nonce_str</span>&gt;</span>&lt;![CDATA[IITRi8Iabbblz1Jc]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">nonce_str</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">sign</span>&gt;</span>&lt;![CDATA[7921E432F65EB8ED0CE9755F0E86D72F]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">sign</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">result_code</span>&gt;</span>&lt;![CDATA[SUCCESS]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">result_code</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">prepay_id</span>&gt;</span>&lt;![CDATA[wx201411101639507cbf6ffd8b0779950874]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">prepay_id</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">trade_type</span>&gt;</span>&lt;![CDATA[JSAPI]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">trade_type</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">xml</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>上面的参数中,我们需要appid(就是你配置中的那个appid),prepay_id(预支付id,之前都是为了它),partnerid(就是你配置的商户号mch_id),其他的就没啥用了,我们接下来要给客户端返回一个数据包,全部的数据如下<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;<span class=\"attr\">\"appid\"</span>:<span class=\"string\">\"wx8c965dd8b4794241\"</span>,<span class=\"attr\">\"noncestr\"</span>:<span class=\"string\">\"oxh4g98rfgbmugwbmxfg72ay6qpvieos\"</span>,<span class=\"attr\">\"package\"</span>:<span class=\"string\">\"Sign=WXpay\"</span>,<span class=\"attr\">\"partnerid\"</span>:<span class=\"string\">\"1277670101\"</span>,<span class=\"attr\">\"prepayid\"</span>:<span class=\"string\">\"wx2015102014523449175fc2fd0939076028\"</span>,<span class=\"attr\">\"timestamp\"</span>:<span class=\"string\">\"1445323951\"</span>,<span class=\"attr\">\"sign\"</span>:<span class=\"string\">\"7F84997FDW40F6F15DD1C28A9E313122\"</span>&#125;</div></pre></td></tr></table></figure></p>\n<p><code>noncestr</code>是重新生成的,<code>package</code>是固定写法,里面的内容必须写<code>&quot;Sign=WXpay&quot;</code>,<code>timestamp</code>也是重新生成的,<code>sign</code>是重新签名后的结果.<br>然后把数据返回给客户端就行了,客户端调起支付.</p>\n<h1 id=\"3-支付回调\"><a href=\"#3-支付回调\" class=\"headerlink\" title=\"3  支付回调\"></a>3  支付回调</h1><p>和支付宝原理一样,不过微信返回的数据不是标准的<code>post</code>,所以你没法通过<code>$_POST[&#39;out_trade_no&#39;]</code>这样来获取数据.<br>所以,我的做法还是调用js sdk里面的回调方法,把那个回调类继承了一下,我们只需要重写<code>NotifyProcess</code>函数就行了,在这里面加入自己的逻辑,比如判断订单是否存在,订单是否已经处理过之类的.<br>至此,大流程已经走通了.</p>\n<h1 id=\"4-优化\"><a href=\"#4-优化\" class=\"headerlink\" title=\"4  优化\"></a>4  优化</h1><p>在调试过程中,我发现同一个订单号不能重复的去获取预支付的prepay_id,所以,我们在整理参数那一步后,需要将返回参数存到数据库,下次申请支付的时候,先去数据库查一下,有的话,就不用给微信服务器请求了</p>\n<p>打完收工.</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"https://pay.weixin.qq.com/wiki/doc/api/app.php?chapter=11_1\">微信官方sdk下载</a></p>"},{"title":"阿里云windows_server_2003_搭建邮件服务器","date":"2014-06-28T14:30:00.000Z","_content":"\n    笔者最近遇到一个在阿里云上搭建邮件服务器的问题，总算搞定，记录一下。\n\n     整个搭建过程，包括pop3服务的安装和开启，smtp服务的安装和开启，dns服务的安装和设置。\n    参考文章[http://hi.baidu.com/senya/item/63bd6588b6817056e63d1996](http://hi.baidu.com/senya/item/63bd6588b6817056e63d1996)\n   [http://firefish.blog.51cto.com/298258/57983](http://firefish.blog.51cto.com/298258/57983)\n\n不在赘述，直接粘贴原文\n\n\n__　　一、安装Windows Server 2003邮件服务器组件__\n\n\n\n(因为盗图的缘故,图片都挂了,这里大家都去看上面的参考文章连接吧,设置dns的时候再回来)\n\n图一　“管理您的服务器”控制台\n\n\n　　依次单击“开始”——“管理工具”——“管理您的服务器”，打开“管理您的服务器”控制台。在这个管理控制台中我们可以看到服务器已经成为的角色。单击“添加或删除角色”命令，开始管理服务器的角色。\n\n\n\n\n\n图二　配置服务器向导\n\n\n　　当我们单击“添加或删除角色”命令，就会运行配置服务器向导。\n\n\n\n\n\n图三　服务器管理程序检测网络连接\n\n\n\n\n\n图四　管理服务器角色\n\n\n　　在图四中，可以查看已经安装的服务和支持而没有安装的服务。此时的服务器还不是邮件服务器，选择“邮件服务器(POP3,SMTP)”，单击“下一步”：\n\n\n\n\n\n图五　配置“身份验证方法”及“电子邮件域名”\n\n\n\n\n\n\n\n图六　单击“下一步”\n\n\n\n\n\n图七　安装邮件服务:POP3和SMTP\n\n\n\n\n\n图八　安装成功\n\n__　　二、管理邮件服务器__\n\n\n　　Windows Server 2003的电子邮件服务器的功能很简单，管理界面也很简洁。单击“管理工具”下的“POP3服务”：\n\n\n\n\n\n图九 POP3服务\n\n\n\n图十　为用户添加邮箱\n\n\n　　在“POP3服务”中单击“添加邮箱”命令，在弹出的对话框内输入邮箱名（用户名）及密码。\n\n\n\n\n\n图十一\n\n__　　三、配置smtp__\n\n\n　　方法和上面类似，在图二的画面中我们选择应用程序服务器\n\n![]()\n\n\n\n\n如图，我的已经开启了。\n\n\n下一步，依次打开“开始-程序-管理工具-internet信息服务”，在窗口左面，鼠标右键点击“smtp虚拟服务器”属性。切换到常规选项卡”IP地址“选择服务器的ip地址，点击确定就行了。\n\n__四、配置DNS__\n\n\n\n服务器已经配置好了，我们接下来设置下dns，这样才能解析到，不然还是无法使用的\n\n\n\n依次打开，“开始-程序-管理工具-配置您的服务器向导”\n\n\n\n![]()\n\n\n\n\n选择自定义配置\n\n![]()\n\n\n\n\n选择dns服务器，下一步\n\n![]()\n\n\n\n\n\n\n\n![]()\n\n\n\n![]()\n\n\n\n![]()\n\n\n\n![]()\n\n\n\n![]()\n\n\n\n![]()\n\n\n\n\n点击正向查找域里面的区域名称，在右边的空白处点击右键，新建主机，分别新建POP3，smtp等主机\n\n![]()\n\n\n\n\n还是空白处，右键，新建邮件交换器，分别新建smtp和pop3的邮件交换器\n\n![]()\n\n\n\n![]()\n\n\n\n注意：完全合格的域名后面没有点号，邮件服务器的完全合格的域名后面有点号，例如是smtp.ip-tcp.com.\n\n到此，邮件服务器搭建完成，可以去测试了\n\n此处参考原文[http://www.docin.com/p-156566941.html](http://www.docin.com/p-156566941.html)\n\n\n\n\n\n经过我的测试，可以收邮件，但是不能发邮件（可以自己给自己发，但是不能给qq，网易等邮箱发），一直报错550 5.7.1 Unable to relay for [](mailto:xxx@xxx.com)[xxx@xxx.com](mailto:xxx@xxx.com)\n\n最后找到答案\n\n\n\n\n\n\n\n\n\n\n\n在IIS管理器里打开“默认SMTP虚拟服务器”的属性设置对话框，在“访问”选项卡中，点击“中继”按钮，弹出“中继限制”对话框，默认为选中了“仅以下列表”，修改为选中“仅以下列表除外”即可。\n\n另外下面的“允许所有通过身份验证的计算机进行中继，而忽略上表”一项要保持选中状态（默认是选中的）。\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/阿里云windows_server_2003_搭建邮件服务器.md","raw":"title: '阿里云windows_server_2003_搭建邮件服务器'\ndate: 2014-06-28 22:30\ncategories:\n- 服务器\n---\n\n    笔者最近遇到一个在阿里云上搭建邮件服务器的问题，总算搞定，记录一下。\n\n     整个搭建过程，包括pop3服务的安装和开启，smtp服务的安装和开启，dns服务的安装和设置。\n    参考文章[http://hi.baidu.com/senya/item/63bd6588b6817056e63d1996](http://hi.baidu.com/senya/item/63bd6588b6817056e63d1996)\n   [http://firefish.blog.51cto.com/298258/57983](http://firefish.blog.51cto.com/298258/57983)\n\n不在赘述，直接粘贴原文\n\n\n__　　一、安装Windows Server 2003邮件服务器组件__\n\n\n\n(因为盗图的缘故,图片都挂了,这里大家都去看上面的参考文章连接吧,设置dns的时候再回来)\n\n图一　“管理您的服务器”控制台\n\n\n　　依次单击“开始”——“管理工具”——“管理您的服务器”，打开“管理您的服务器”控制台。在这个管理控制台中我们可以看到服务器已经成为的角色。单击“添加或删除角色”命令，开始管理服务器的角色。\n\n\n\n\n\n图二　配置服务器向导\n\n\n　　当我们单击“添加或删除角色”命令，就会运行配置服务器向导。\n\n\n\n\n\n图三　服务器管理程序检测网络连接\n\n\n\n\n\n图四　管理服务器角色\n\n\n　　在图四中，可以查看已经安装的服务和支持而没有安装的服务。此时的服务器还不是邮件服务器，选择“邮件服务器(POP3,SMTP)”，单击“下一步”：\n\n\n\n\n\n图五　配置“身份验证方法”及“电子邮件域名”\n\n\n\n\n\n\n\n图六　单击“下一步”\n\n\n\n\n\n图七　安装邮件服务:POP3和SMTP\n\n\n\n\n\n图八　安装成功\n\n__　　二、管理邮件服务器__\n\n\n　　Windows Server 2003的电子邮件服务器的功能很简单，管理界面也很简洁。单击“管理工具”下的“POP3服务”：\n\n\n\n\n\n图九 POP3服务\n\n\n\n图十　为用户添加邮箱\n\n\n　　在“POP3服务”中单击“添加邮箱”命令，在弹出的对话框内输入邮箱名（用户名）及密码。\n\n\n\n\n\n图十一\n\n__　　三、配置smtp__\n\n\n　　方法和上面类似，在图二的画面中我们选择应用程序服务器\n\n![]()\n\n\n\n\n如图，我的已经开启了。\n\n\n下一步，依次打开“开始-程序-管理工具-internet信息服务”，在窗口左面，鼠标右键点击“smtp虚拟服务器”属性。切换到常规选项卡”IP地址“选择服务器的ip地址，点击确定就行了。\n\n__四、配置DNS__\n\n\n\n服务器已经配置好了，我们接下来设置下dns，这样才能解析到，不然还是无法使用的\n\n\n\n依次打开，“开始-程序-管理工具-配置您的服务器向导”\n\n\n\n![]()\n\n\n\n\n选择自定义配置\n\n![]()\n\n\n\n\n选择dns服务器，下一步\n\n![]()\n\n\n\n\n\n\n\n![]()\n\n\n\n![]()\n\n\n\n![]()\n\n\n\n![]()\n\n\n\n![]()\n\n\n\n![]()\n\n\n\n\n点击正向查找域里面的区域名称，在右边的空白处点击右键，新建主机，分别新建POP3，smtp等主机\n\n![]()\n\n\n\n\n还是空白处，右键，新建邮件交换器，分别新建smtp和pop3的邮件交换器\n\n![]()\n\n\n\n![]()\n\n\n\n注意：完全合格的域名后面没有点号，邮件服务器的完全合格的域名后面有点号，例如是smtp.ip-tcp.com.\n\n到此，邮件服务器搭建完成，可以去测试了\n\n此处参考原文[http://www.docin.com/p-156566941.html](http://www.docin.com/p-156566941.html)\n\n\n\n\n\n经过我的测试，可以收邮件，但是不能发邮件（可以自己给自己发，但是不能给qq，网易等邮箱发），一直报错550 5.7.1 Unable to relay for [](mailto:xxx@xxx.com)[xxx@xxx.com](mailto:xxx@xxx.com)\n\n最后找到答案\n\n\n\n\n\n\n\n\n\n\n\n在IIS管理器里打开“默认SMTP虚拟服务器”的属性设置对话框，在“访问”选项卡中，点击“中继”按钮，弹出“中继限制”对话框，默认为选中了“仅以下列表”，修改为选中“仅以下列表除外”即可。\n\n另外下面的“允许所有通过身份验证的计算机进行中继，而忽略上表”一项要保持选中状态（默认是选中的）。\n\n\n\n\n\n\n\n\n\n\n\n","slug":"阿里云windows_server_2003_搭建邮件服务器","published":1,"updated":"2015-09-29T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yt3008px8cdjqmrf5pb","content":"<pre><code>笔者最近遇到一个在阿里云上搭建邮件服务器的问题，总算搞定，记录一下。\n\n 整个搭建过程，包括pop3服务的安装和开启，smtp服务的安装和开启，dns服务的安装和设置。\n参考文章[http://hi.baidu.com/senya/item/63bd6588b6817056e63d1996](http://hi.baidu.com/senya/item/63bd6588b6817056e63d1996)\n</code></pre><p>   <a href=\"http://firefish.blog.51cto.com/298258/57983\" target=\"_blank\" rel=\"external\">http://firefish.blog.51cto.com/298258/57983</a></p>\n<p>不在赘述，直接粘贴原文</p>\n<p><strong>　　一、安装Windows Server 2003邮件服务器组件</strong></p>\n<p>(因为盗图的缘故,图片都挂了,这里大家都去看上面的参考文章连接吧,设置dns的时候再回来)</p>\n<p>图一　“管理您的服务器”控制台</p>\n<p>　　依次单击“开始”——“管理工具”——“管理您的服务器”，打开“管理您的服务器”控制台。在这个管理控制台中我们可以看到服务器已经成为的角色。单击“添加或删除角色”命令，开始管理服务器的角色。</p>\n<p>图二　配置服务器向导</p>\n<p>　　当我们单击“添加或删除角色”命令，就会运行配置服务器向导。</p>\n<p>图三　服务器管理程序检测网络连接</p>\n<p>图四　管理服务器角色</p>\n<p>　　在图四中，可以查看已经安装的服务和支持而没有安装的服务。此时的服务器还不是邮件服务器，选择“邮件服务器(POP3,SMTP)”，单击“下一步”：</p>\n<p>图五　配置“身份验证方法”及“电子邮件域名”</p>\n<p>图六　单击“下一步”</p>\n<p>图七　安装邮件服务:POP3和SMTP</p>\n<p>图八　安装成功</p>\n<p><strong>　　二、管理邮件服务器</strong></p>\n<p>　　Windows Server 2003的电子邮件服务器的功能很简单，管理界面也很简洁。单击“管理工具”下的“POP3服务”：</p>\n<p>图九 POP3服务</p>\n<p>图十　为用户添加邮箱</p>\n<p>　　在“POP3服务”中单击“添加邮箱”命令，在弹出的对话框内输入邮箱名（用户名）及密码。</p>\n<p>图十一</p>\n<p><strong>　　三、配置smtp</strong></p>\n<p>　　方法和上面类似，在图二的画面中我们选择应用程序服务器</p>\n<p><img src=\"\" alt=\"\"></p>\n<p>如图，我的已经开启了。</p>\n<p>下一步，依次打开“开始-程序-管理工具-internet信息服务”，在窗口左面，鼠标右键点击“smtp虚拟服务器”属性。切换到常规选项卡”IP地址“选择服务器的ip地址，点击确定就行了。</p>\n<p><strong>四、配置DNS</strong></p>\n<p>服务器已经配置好了，我们接下来设置下dns，这样才能解析到，不然还是无法使用的</p>\n<p>依次打开，“开始-程序-管理工具-配置您的服务器向导”</p>\n<p><img src=\"\" alt=\"\"></p>\n<p>选择自定义配置</p>\n<p><img src=\"\" alt=\"\"></p>\n<p>选择dns服务器，下一步</p>\n<p><img src=\"\" alt=\"\"></p>\n<p><img src=\"\" alt=\"\"></p>\n<p><img src=\"\" alt=\"\"></p>\n<p><img src=\"\" alt=\"\"></p>\n<p><img src=\"\" alt=\"\"></p>\n<p><img src=\"\" alt=\"\"></p>\n<p><img src=\"\" alt=\"\"></p>\n<p>点击正向查找域里面的区域名称，在右边的空白处点击右键，新建主机，分别新建POP3，smtp等主机</p>\n<p><img src=\"\" alt=\"\"></p>\n<p>还是空白处，右键，新建邮件交换器，分别新建smtp和pop3的邮件交换器</p>\n<p><img src=\"\" alt=\"\"></p>\n<p><img src=\"\" alt=\"\"></p>\n<p>注意：完全合格的域名后面没有点号，邮件服务器的完全合格的域名后面有点号，例如是smtp.ip-tcp.com.</p>\n<p>到此，邮件服务器搭建完成，可以去测试了</p>\n<p>此处参考原文<a href=\"http://www.docin.com/p-156566941.html\" target=\"_blank\" rel=\"external\">http://www.docin.com/p-156566941.html</a></p>\n<p>经过我的测试，可以收邮件，但是不能发邮件（可以自己给自己发，但是不能给qq，网易等邮箱发），一直报错550 5.7.1 Unable to relay for <a href=\"mailto:xxx@xxx.com\" target=\"_blank\" rel=\"external\"></a><a href=\"mailto:xxx@xxx.com\" target=\"_blank\" rel=\"external\">xxx@xxx.com</a></p>\n<p>最后找到答案</p>\n<p>在IIS管理器里打开“默认SMTP虚拟服务器”的属性设置对话框，在“访问”选项卡中，点击“中继”按钮，弹出“中继限制”对话框，默认为选中了“仅以下列表”，修改为选中“仅以下列表除外”即可。</p>\n<p>另外下面的“允许所有通过身份验证的计算机进行中继，而忽略上表”一项要保持选中状态（默认是选中的）。</p>\n","excerpt":"","more":"<pre><code>笔者最近遇到一个在阿里云上搭建邮件服务器的问题，总算搞定，记录一下。\n\n 整个搭建过程，包括pop3服务的安装和开启，smtp服务的安装和开启，dns服务的安装和设置。\n参考文章[http://hi.baidu.com/senya/item/63bd6588b6817056e63d1996](http://hi.baidu.com/senya/item/63bd6588b6817056e63d1996)\n</code></pre><p>   <a href=\"http://firefish.blog.51cto.com/298258/57983\">http://firefish.blog.51cto.com/298258/57983</a></p>\n<p>不在赘述，直接粘贴原文</p>\n<p><strong>　　一、安装Windows Server 2003邮件服务器组件</strong></p>\n<p>(因为盗图的缘故,图片都挂了,这里大家都去看上面的参考文章连接吧,设置dns的时候再回来)</p>\n<p>图一　“管理您的服务器”控制台</p>\n<p>　　依次单击“开始”——“管理工具”——“管理您的服务器”，打开“管理您的服务器”控制台。在这个管理控制台中我们可以看到服务器已经成为的角色。单击“添加或删除角色”命令，开始管理服务器的角色。</p>\n<p>图二　配置服务器向导</p>\n<p>　　当我们单击“添加或删除角色”命令，就会运行配置服务器向导。</p>\n<p>图三　服务器管理程序检测网络连接</p>\n<p>图四　管理服务器角色</p>\n<p>　　在图四中，可以查看已经安装的服务和支持而没有安装的服务。此时的服务器还不是邮件服务器，选择“邮件服务器(POP3,SMTP)”，单击“下一步”：</p>\n<p>图五　配置“身份验证方法”及“电子邮件域名”</p>\n<p>图六　单击“下一步”</p>\n<p>图七　安装邮件服务:POP3和SMTP</p>\n<p>图八　安装成功</p>\n<p><strong>　　二、管理邮件服务器</strong></p>\n<p>　　Windows Server 2003的电子邮件服务器的功能很简单，管理界面也很简洁。单击“管理工具”下的“POP3服务”：</p>\n<p>图九 POP3服务</p>\n<p>图十　为用户添加邮箱</p>\n<p>　　在“POP3服务”中单击“添加邮箱”命令，在弹出的对话框内输入邮箱名（用户名）及密码。</p>\n<p>图十一</p>\n<p><strong>　　三、配置smtp</strong></p>\n<p>　　方法和上面类似，在图二的画面中我们选择应用程序服务器</p>\n<p><img src=\"\" alt=\"\"></p>\n<p>如图，我的已经开启了。</p>\n<p>下一步，依次打开“开始-程序-管理工具-internet信息服务”，在窗口左面，鼠标右键点击“smtp虚拟服务器”属性。切换到常规选项卡”IP地址“选择服务器的ip地址，点击确定就行了。</p>\n<p><strong>四、配置DNS</strong></p>\n<p>服务器已经配置好了，我们接下来设置下dns，这样才能解析到，不然还是无法使用的</p>\n<p>依次打开，“开始-程序-管理工具-配置您的服务器向导”</p>\n<p><img src=\"\" alt=\"\"></p>\n<p>选择自定义配置</p>\n<p><img src=\"\" alt=\"\"></p>\n<p>选择dns服务器，下一步</p>\n<p><img src=\"\" alt=\"\"></p>\n<p><img src=\"\" alt=\"\"></p>\n<p><img src=\"\" alt=\"\"></p>\n<p><img src=\"\" alt=\"\"></p>\n<p><img src=\"\" alt=\"\"></p>\n<p><img src=\"\" alt=\"\"></p>\n<p><img src=\"\" alt=\"\"></p>\n<p>点击正向查找域里面的区域名称，在右边的空白处点击右键，新建主机，分别新建POP3，smtp等主机</p>\n<p><img src=\"\" alt=\"\"></p>\n<p>还是空白处，右键，新建邮件交换器，分别新建smtp和pop3的邮件交换器</p>\n<p><img src=\"\" alt=\"\"></p>\n<p><img src=\"\" alt=\"\"></p>\n<p>注意：完全合格的域名后面没有点号，邮件服务器的完全合格的域名后面有点号，例如是smtp.ip-tcp.com.</p>\n<p>到此，邮件服务器搭建完成，可以去测试了</p>\n<p>此处参考原文<a href=\"http://www.docin.com/p-156566941.html\">http://www.docin.com/p-156566941.html</a></p>\n<p>经过我的测试，可以收邮件，但是不能发邮件（可以自己给自己发，但是不能给qq，网易等邮箱发），一直报错550 5.7.1 Unable to relay for <a href=\"mailto:xxx@xxx.com\"></a><a href=\"mailto:xxx@xxx.com\">xxx@xxx.com</a></p>\n<p>最后找到答案</p>\n<p>在IIS管理器里打开“默认SMTP虚拟服务器”的属性设置对话框，在“访问”选项卡中，点击“中继”按钮，弹出“中继限制”对话框，默认为选中了“仅以下列表”，修改为选中“仅以下列表除外”即可。</p>\n<p>另外下面的“允许所有通过身份验证的计算机进行中继，而忽略上表”一项要保持选中状态（默认是选中的）。</p>\n"},{"title":"shadowsocks的安装和配置--在ubuntu和ubuntu中","date":"2015-03-09T14:26:21.000Z","_content":"最近我的vpn一直在抽风，几乎没法正常使用，而且我的chrome也是各种花屏，我快疯了，没办法，只能改用shadowsocks了。\n搭建过程分为两部分:服务端和客户端(这里是主要是ubuntu的客户端)。\n<!-- more -->\n# 1 系统环境\n**服务器**:DigitalOcean上的Ubuntu 14.04 LTS\n**客户端**:Ubuntu 14.04 LTS\n\n# 2 服务器端安装和配置\n这里主要是参考github的[官方说明](https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E)\n通过ssh登陆的服务器上去,这里不在赘述如何登陆.\n以下主要针对linux服务器,windows服务器查看[这里](https://github.com/shadowsocks/shadowsocks/wiki/Install-Shadowsocks-Server-on-Windows)\n## 安装\nLinux不同的发行版本执行的命令如下\n```\nDebian / Ubuntu:\n\napt-get install python-pip\npip install shadowsocks\n\nCentOS:\n\nyum install python-setuptools && easy_install pip\npip install shadowsocks\n```\n\n## 配置\n```\nsudo vi /etc/shadowsocks.json\n```\n配置文件的内容大致如下:\n```\n{\n    \"server\":\"你的服务器的ip\",\n    \"server_port\":8388,\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"你设置的密码\",\n    \"timeout\":300,\n    \"method\":\"aes-256-cfb\",\n    \"fast_open\": false\n}\n```\n**参数名称       解释**\nserver         安装shadowsocks服务器ip\nserver_port    服务器端口号\nlocal_address  本地服务器默认是127.0.0.1\nlocal_port     本地监听的端口号\npassword       密码\ntimeout        超时时间,单位是秒\nmethod         加密方法默认是: \"aes-256-cfb\"可以用其他加密方法\nfast_open      是否使用TCP_FASTOPEN,默认为不使用\nworkers        number of workers, available on Unix/Linux\n\n## 运行\n前台运行的命令\n`ssserver -c /etc/shadowsocks.json`\n后台运行\n`ssserver -c /etc/shadowsocks.json -d start`\n`ssserver -c /etc/shadowsocks.json -d stop`\nps:我上述两条命令都会出错,这两条命令来自官方的github,我用的是下面的\n`nohup ssserver -c /etc/shadowsocks.json > aa.log`\n\n## 开机自启\n我们把它写入/etc/rc.local中就可以完成开机自启动了.\n```\nsudo vi /etc/rc.local  # 打开rc.local文件\n# 然后在exit前面加入下面这一行\n# nohup /usr/local/bin/ssserver -c /etc/shadowsocks.json > aa.log\n```\nps:这里我之前犯了一个错误,没有写`ssserver`的绝对路径,导致开机无法自启动,但是手动执行的话,又是可以执行的\n# 3 客户端的安装和配置\n客户端按理说和服务器端类似,安装shadowsocks,但是我的就是这个出了问题.\n## 1) 安装相关软件\nshadowsocks有各种客户端版本,各个系统都有.在ubuntu下带图形化界面的有shadowsocks-qt5,还可以直接用命令行.\n\n**图形化:**\n```\nsudo add-apt-repository ppa:hzwhuang/ss-qt5\nsudo apt-get update\nsudo apt-get install shadowsocks-qt5\n```\n*PS:*我的电脑安装这个以后,会自动卸载我的chrome\n*PPS:*我刚才又试了一次,我在安装了命令行模式的shadowsocks以后,现在不会卸载我的chrome,总算正常了\n```\nThe following extra packages will be installed:\n  libbotan-1.10-0 libqrencode3 libqtshadowsocks libzbar0\nThe following packages will be REMOVED:\n  libbotan-1.10-0:i386 libqtshadowsocks:i386 libzbar0:i386\nThe following NEW packages will be installed:\n  libbotan-1.10-0 libqrencode3 libqtshadowsocks libzbar0 shadowsocks-qt5\n0 upgraded, 5 newly installed, 3 to remove and 19 not upgraded.\nNeed to get 1,280 kB of archives.\nAfter this operation, 662 kB of additional disk space will be used.\nDo you want to continue? [Y/n] \n```\n\n**命令行模式:**\n```\nsudo apt-get install python-pip python-dev build-essential \nsudo pip install  pip\nsudo apt-get install python-m2crypto\nsudo pip install shadowsocks\n```\n我因为之前在环境中就安装过pip,所以我只需要执行倒数第三个和第四个命令.\n但是我的倒数第四个命令`pip install shadowsocks`一直报错:\n```\nException: Traceback (most recent call last):\nFile \"/usr/lib/python2.7/dist-packages/pip/basecommand.py\", line 122, in main\n  status = self.run(options, args)\nFile \"/usr/lib/python2.7/dist-packages/pip/commands/install.py\", line 278, in run\n  requirement_set.prepare_files(finder, force_root_egg_info=self.bundle, bundle=self.bundle) \nFile \"/usr/lib/python2.7/dist-packages/pip/req.py\", line 1177, in prepare_files \n  url = finder.find_requirement(req_to_install, upgrade=self.upgrade) \nFile \"/usr/lib/python2.7/dist-packages/pip/index.py\", line 256, in find_requirement\n  page_versions.extend(self._package_versions(page.links, req.name.lower())) \nFile \"/usr/lib/python2.7/dist-packages/pip/index.py\", line 432, in _package_versions \n  for link in self._sort_links(links): \nFile \"/usr/lib/python2.7/dist-packages/pip/index.py\", line 422, in _sort_links \n  for link in links: \nFile \"/usr/lib/python2.7/dist-packages/pip/index.py\", line 769, in links \n  for anchor in self.parsed.findall(\".//a\"):\nAttributeError: 'Document' object has no attribute 'findall'\n\nStoring debug log for failure in /root/.pip/pip.log\n```\n网上搜索一番,在[这里](https://github.com/pypa/pip/issues/1742)找到答案.\n解决方法很简单,执行`easy_install pip`,就ok(貌似是把pip重新安装了一次).\n\n## 2) 客户端运行\nshadowsocks图形化的比较简单,这里不表.\n命令行模式,启动如下:\n```\nsslocal -s 服务器ip -p 8388 -k 密码\n```\n启动成功后会有如下输出:\n```\n2015-03-10 11:12:59 INFO     loading libcrypto from libcrypto.so.1.0.0\n2015-03-10 11:12:59 INFO     starting local at 127.0.0.1:1080\n```\n\n## 3) 浏览器代理设置\n一般来说我们不希望shadowsocks做全局的翻墙,那样,访问国内的速度也会变慢,我们在chome浏览器中安装switchysharp,来管理代理.具体设置如下所示:\n![swichysharp设置](http://ww3.sinaimg.cn/large/692869a3gw1eq0k16t5ejj20ne0ihmzh.jpg)\n\n\nenjoy it!\n\n# 后记\n\n安卓客户端安装,[点我点我](https://apps.evozi.com/apk-downloader/?id=com.github.shadowsocks)\n\n# 参考文献\n1 这是一篇好博客 <http://mushapi.com/shadowsocks-install-config-using.html>\n2 [shadowsocks使用说明](https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E)\n3 [修复我pip问题的一个issue](https://github.com/pypa/pip/issues/1742)\n\n# 致谢\n这个网站可以下载google play的apk,对于我等天朝良民来说,可真是个好东西\n<https://apps.evozi.com/apk-downloader/?id=com.github.shadowsocks>\n\n我们家[笨笨的博客](http://huirong.github.io)弄好了,欢迎访问\n","source":"_posts/use-ss.md","raw":"title: shadowsocks的安装和配置--在ubuntu和ubuntu中\ndate: 2015-03-09 22:26:21\ntags:\n- Linux\n- ubuntu\n- shadowsocks\n\ncategories:\n- Linux\n---\n最近我的vpn一直在抽风，几乎没法正常使用，而且我的chrome也是各种花屏，我快疯了，没办法，只能改用shadowsocks了。\n搭建过程分为两部分:服务端和客户端(这里是主要是ubuntu的客户端)。\n<!-- more -->\n# 1 系统环境\n**服务器**:DigitalOcean上的Ubuntu 14.04 LTS\n**客户端**:Ubuntu 14.04 LTS\n\n# 2 服务器端安装和配置\n这里主要是参考github的[官方说明](https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E)\n通过ssh登陆的服务器上去,这里不在赘述如何登陆.\n以下主要针对linux服务器,windows服务器查看[这里](https://github.com/shadowsocks/shadowsocks/wiki/Install-Shadowsocks-Server-on-Windows)\n## 安装\nLinux不同的发行版本执行的命令如下\n```\nDebian / Ubuntu:\n\napt-get install python-pip\npip install shadowsocks\n\nCentOS:\n\nyum install python-setuptools && easy_install pip\npip install shadowsocks\n```\n\n## 配置\n```\nsudo vi /etc/shadowsocks.json\n```\n配置文件的内容大致如下:\n```\n{\n    \"server\":\"你的服务器的ip\",\n    \"server_port\":8388,\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"你设置的密码\",\n    \"timeout\":300,\n    \"method\":\"aes-256-cfb\",\n    \"fast_open\": false\n}\n```\n**参数名称       解释**\nserver         安装shadowsocks服务器ip\nserver_port    服务器端口号\nlocal_address  本地服务器默认是127.0.0.1\nlocal_port     本地监听的端口号\npassword       密码\ntimeout        超时时间,单位是秒\nmethod         加密方法默认是: \"aes-256-cfb\"可以用其他加密方法\nfast_open      是否使用TCP_FASTOPEN,默认为不使用\nworkers        number of workers, available on Unix/Linux\n\n## 运行\n前台运行的命令\n`ssserver -c /etc/shadowsocks.json`\n后台运行\n`ssserver -c /etc/shadowsocks.json -d start`\n`ssserver -c /etc/shadowsocks.json -d stop`\nps:我上述两条命令都会出错,这两条命令来自官方的github,我用的是下面的\n`nohup ssserver -c /etc/shadowsocks.json > aa.log`\n\n## 开机自启\n我们把它写入/etc/rc.local中就可以完成开机自启动了.\n```\nsudo vi /etc/rc.local  # 打开rc.local文件\n# 然后在exit前面加入下面这一行\n# nohup /usr/local/bin/ssserver -c /etc/shadowsocks.json > aa.log\n```\nps:这里我之前犯了一个错误,没有写`ssserver`的绝对路径,导致开机无法自启动,但是手动执行的话,又是可以执行的\n# 3 客户端的安装和配置\n客户端按理说和服务器端类似,安装shadowsocks,但是我的就是这个出了问题.\n## 1) 安装相关软件\nshadowsocks有各种客户端版本,各个系统都有.在ubuntu下带图形化界面的有shadowsocks-qt5,还可以直接用命令行.\n\n**图形化:**\n```\nsudo add-apt-repository ppa:hzwhuang/ss-qt5\nsudo apt-get update\nsudo apt-get install shadowsocks-qt5\n```\n*PS:*我的电脑安装这个以后,会自动卸载我的chrome\n*PPS:*我刚才又试了一次,我在安装了命令行模式的shadowsocks以后,现在不会卸载我的chrome,总算正常了\n```\nThe following extra packages will be installed:\n  libbotan-1.10-0 libqrencode3 libqtshadowsocks libzbar0\nThe following packages will be REMOVED:\n  libbotan-1.10-0:i386 libqtshadowsocks:i386 libzbar0:i386\nThe following NEW packages will be installed:\n  libbotan-1.10-0 libqrencode3 libqtshadowsocks libzbar0 shadowsocks-qt5\n0 upgraded, 5 newly installed, 3 to remove and 19 not upgraded.\nNeed to get 1,280 kB of archives.\nAfter this operation, 662 kB of additional disk space will be used.\nDo you want to continue? [Y/n] \n```\n\n**命令行模式:**\n```\nsudo apt-get install python-pip python-dev build-essential \nsudo pip install  pip\nsudo apt-get install python-m2crypto\nsudo pip install shadowsocks\n```\n我因为之前在环境中就安装过pip,所以我只需要执行倒数第三个和第四个命令.\n但是我的倒数第四个命令`pip install shadowsocks`一直报错:\n```\nException: Traceback (most recent call last):\nFile \"/usr/lib/python2.7/dist-packages/pip/basecommand.py\", line 122, in main\n  status = self.run(options, args)\nFile \"/usr/lib/python2.7/dist-packages/pip/commands/install.py\", line 278, in run\n  requirement_set.prepare_files(finder, force_root_egg_info=self.bundle, bundle=self.bundle) \nFile \"/usr/lib/python2.7/dist-packages/pip/req.py\", line 1177, in prepare_files \n  url = finder.find_requirement(req_to_install, upgrade=self.upgrade) \nFile \"/usr/lib/python2.7/dist-packages/pip/index.py\", line 256, in find_requirement\n  page_versions.extend(self._package_versions(page.links, req.name.lower())) \nFile \"/usr/lib/python2.7/dist-packages/pip/index.py\", line 432, in _package_versions \n  for link in self._sort_links(links): \nFile \"/usr/lib/python2.7/dist-packages/pip/index.py\", line 422, in _sort_links \n  for link in links: \nFile \"/usr/lib/python2.7/dist-packages/pip/index.py\", line 769, in links \n  for anchor in self.parsed.findall(\".//a\"):\nAttributeError: 'Document' object has no attribute 'findall'\n\nStoring debug log for failure in /root/.pip/pip.log\n```\n网上搜索一番,在[这里](https://github.com/pypa/pip/issues/1742)找到答案.\n解决方法很简单,执行`easy_install pip`,就ok(貌似是把pip重新安装了一次).\n\n## 2) 客户端运行\nshadowsocks图形化的比较简单,这里不表.\n命令行模式,启动如下:\n```\nsslocal -s 服务器ip -p 8388 -k 密码\n```\n启动成功后会有如下输出:\n```\n2015-03-10 11:12:59 INFO     loading libcrypto from libcrypto.so.1.0.0\n2015-03-10 11:12:59 INFO     starting local at 127.0.0.1:1080\n```\n\n## 3) 浏览器代理设置\n一般来说我们不希望shadowsocks做全局的翻墙,那样,访问国内的速度也会变慢,我们在chome浏览器中安装switchysharp,来管理代理.具体设置如下所示:\n![swichysharp设置](http://ww3.sinaimg.cn/large/692869a3gw1eq0k16t5ejj20ne0ihmzh.jpg)\n\n\nenjoy it!\n\n# 后记\n\n安卓客户端安装,[点我点我](https://apps.evozi.com/apk-downloader/?id=com.github.shadowsocks)\n\n# 参考文献\n1 这是一篇好博客 <http://mushapi.com/shadowsocks-install-config-using.html>\n2 [shadowsocks使用说明](https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E)\n3 [修复我pip问题的一个issue](https://github.com/pypa/pip/issues/1742)\n\n# 致谢\n这个网站可以下载google play的apk,对于我等天朝良民来说,可真是个好东西\n<https://apps.evozi.com/apk-downloader/?id=com.github.shadowsocks>\n\n我们家[笨笨的博客](http://huirong.github.io)弄好了,欢迎访问\n","slug":"use-ss","published":1,"updated":"2015-10-29T06:08:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yt4008sx8cdybcnflbb","content":"<p>最近我的vpn一直在抽风，几乎没法正常使用，而且我的chrome也是各种花屏，我快疯了，没办法，只能改用shadowsocks了。<br>搭建过程分为两部分:服务端和客户端(这里是主要是ubuntu的客户端)。<br><a id=\"more\"></a></p>\n<h1 id=\"1-系统环境\"><a href=\"#1-系统环境\" class=\"headerlink\" title=\"1 系统环境\"></a>1 系统环境</h1><p><strong>服务器</strong>:DigitalOcean上的Ubuntu 14.04 LTS<br><strong>客户端</strong>:Ubuntu 14.04 LTS</p>\n<h1 id=\"2-服务器端安装和配置\"><a href=\"#2-服务器端安装和配置\" class=\"headerlink\" title=\"2 服务器端安装和配置\"></a>2 服务器端安装和配置</h1><p>这里主要是参考github的<a href=\"https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E\" target=\"_blank\" rel=\"external\">官方说明</a><br>通过ssh登陆的服务器上去,这里不在赘述如何登陆.<br>以下主要针对linux服务器,windows服务器查看<a href=\"https://github.com/shadowsocks/shadowsocks/wiki/Install-Shadowsocks-Server-on-Windows\" target=\"_blank\" rel=\"external\">这里</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>Linux不同的发行版本执行的命令如下<br><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Debian / Ubuntu:</div><div class=\"line\"></div><div class=\"line\">apt-get <span class=\"keyword\">install</span> python-pip</div><div class=\"line\">pip <span class=\"keyword\">install</span> shadowsocks</div><div class=\"line\"></div><div class=\"line\">CentOS:</div><div class=\"line\"></div><div class=\"line\">yum <span class=\"keyword\">install</span> python-setuptools &amp;&amp; easy_install pip</div><div class=\"line\">pip <span class=\"keyword\">install</span> shadowsocks</div></pre></td></tr></table></figure></p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vi <span class=\"regexp\">/etc/</span>shadowsocks.json</div></pre></td></tr></table></figure>\n<p>配置文件的内容大致如下:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"server\"</span>:<span class=\"string\">\"你的服务器的ip\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"server_port\"</span>:<span class=\"number\">8388</span>,</div><div class=\"line\">    <span class=\"attr\">\"local_address\"</span>: <span class=\"string\">\"127.0.0.1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"local_port\"</span>:<span class=\"number\">1080</span>,</div><div class=\"line\">    <span class=\"attr\">\"password\"</span>:<span class=\"string\">\"你设置的密码\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"timeout\"</span>:<span class=\"number\">300</span>,</div><div class=\"line\">    <span class=\"attr\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"fast_open\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>参数名称       解释</strong><br>server         安装shadowsocks服务器ip<br>server_port    服务器端口号<br>local_address  本地服务器默认是127.0.0.1<br>local_port     本地监听的端口号<br>password       密码<br>timeout        超时时间,单位是秒<br>method         加密方法默认是: “aes-256-cfb”可以用其他加密方法<br>fast_open      是否使用TCP_FASTOPEN,默认为不使用<br>workers        number of workers, available on Unix/Linux</p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>前台运行的命令<br><code>ssserver -c /etc/shadowsocks.json</code><br>后台运行<br><code>ssserver -c /etc/shadowsocks.json -d start</code><br><code>ssserver -c /etc/shadowsocks.json -d stop</code><br>ps:我上述两条命令都会出错,这两条命令来自官方的github,我用的是下面的<br><code>nohup ssserver -c /etc/shadowsocks.json &gt; aa.log</code></p>\n<h2 id=\"开机自启\"><a href=\"#开机自启\" class=\"headerlink\" title=\"开机自启\"></a>开机自启</h2><p>我们把它写入/etc/rc.local中就可以完成开机自启动了.<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vi /etc/rc.<span class=\"keyword\">local</span>  # 打开rc.<span class=\"keyword\">local</span>文件</div><div class=\"line\"># 然后在<span class=\"keyword\">exit</span>前面加入下面这一行</div><div class=\"line\"># nohup /usr/<span class=\"keyword\">local</span>/bin/ssserver -c /etc/shadowsocks.json &gt; aa.<span class=\"built_in\">log</span></div></pre></td></tr></table></figure></p>\n<p>ps:这里我之前犯了一个错误,没有写<code>ssserver</code>的绝对路径,导致开机无法自启动,但是手动执行的话,又是可以执行的</p>\n<h1 id=\"3-客户端的安装和配置\"><a href=\"#3-客户端的安装和配置\" class=\"headerlink\" title=\"3 客户端的安装和配置\"></a>3 客户端的安装和配置</h1><p>客户端按理说和服务器端类似,安装shadowsocks,但是我的就是这个出了问题.</p>\n<h2 id=\"1-安装相关软件\"><a href=\"#1-安装相关软件\" class=\"headerlink\" title=\"1) 安装相关软件\"></a>1) 安装相关软件</h2><p>shadowsocks有各种客户端版本,各个系统都有.在ubuntu下带图形化界面的有shadowsocks-qt5,还可以直接用命令行.</p>\n<p><strong>图形化:</strong><br><figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo<span class=\"built_in\"> add-apt-repository </span>ppa:hzwhuang/ss-qt5</div><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install shadowsocks-qt5</div></pre></td></tr></table></figure></p>\n<p><em>PS:</em>我的电脑安装这个以后,会自动卸载我的chrome<br><em>PPS:</em>我刚才又试了一次,我在安装了命令行模式的shadowsocks以后,现在不会卸载我的chrome,总算正常了<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">The following extra packages will <span class=\"keyword\">be</span> installed:</div><div class=\"line\">  libbotan-<span class=\"number\">1.10</span>-<span class=\"number\">0</span> libqrencode3 libqtshadowsocks libzbar0</div><div class=\"line\">The following packages will <span class=\"keyword\">be</span> REMOVED:</div><div class=\"line\">  libbotan-<span class=\"number\">1.10</span>-<span class=\"number\">0</span>:i386 libqtshadowsock<span class=\"variable\">s:i386</span> libzbar0:i386</div><div class=\"line\">The following NEW packages will <span class=\"keyword\">be</span> installed:</div><div class=\"line\">  libbotan-<span class=\"number\">1.10</span>-<span class=\"number\">0</span> libqrencode3 libqtshadowsocks libzbar0 shadowsocks-qt5</div><div class=\"line\"><span class=\"number\">0</span> upgraded, <span class=\"number\">5</span> newly installed, <span class=\"number\">3</span> <span class=\"keyword\">to</span> <span class=\"built_in\">remove</span> <span class=\"built_in\">and</span> <span class=\"number\">19</span> not upgraded.</div><div class=\"line\">Need <span class=\"keyword\">to</span> <span class=\"built_in\">get</span> <span class=\"number\">1</span>,<span class=\"number\">280</span> kB of archives.</div><div class=\"line\">After this operation, <span class=\"number\">662</span> kB of additional disk space will <span class=\"keyword\">be</span> used.</div><div class=\"line\">Do you want <span class=\"keyword\">to</span> <span class=\"keyword\">continue</span>? [Y/n]</div></pre></td></tr></table></figure></p>\n<p><strong>命令行模式:</strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get <span class=\"keyword\">install</span> python-pip python-dev <span class=\"keyword\">build</span>-essential </div><div class=\"line\">sudo pip <span class=\"keyword\">install</span>  pip</div><div class=\"line\">sudo apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> python-m2crypto</div><div class=\"line\">sudo pip <span class=\"keyword\">install</span> shadowsocks</div></pre></td></tr></table></figure></p>\n<p>我因为之前在环境中就安装过pip,所以我只需要执行倒数第三个和第四个命令.<br>但是我的倒数第四个命令<code>pip install shadowsocks</code>一直报错:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">Exception: Traceback (most recent <span class=\"keyword\">call</span> <span class=\"keyword\">last</span>):</div><div class=\"line\"><span class=\"keyword\">File</span> <span class=\"string\">\"/usr/lib/python2.7/dist-packages/pip/basecommand.py\"</span>, line <span class=\"number\">122</span>, <span class=\"keyword\">in</span> <span class=\"keyword\">main</span></div><div class=\"line\">  <span class=\"keyword\">status</span> = self.run(options, args)</div><div class=\"line\"><span class=\"keyword\">File</span> <span class=\"string\">\"/usr/lib/python2.7/dist-packages/pip/commands/install.py\"</span>, line <span class=\"number\">278</span>, <span class=\"keyword\">in</span> run</div><div class=\"line\">  requirement_set.prepare_files(finder, force_root_egg_info=self.bundle, bundle=self.bundle) </div><div class=\"line\"><span class=\"keyword\">File</span> <span class=\"string\">\"/usr/lib/python2.7/dist-packages/pip/req.py\"</span>, line <span class=\"number\">1177</span>, <span class=\"keyword\">in</span> prepare_files </div><div class=\"line\">  <span class=\"keyword\">url</span> = finder.find_requirement(req_to_install, <span class=\"keyword\">upgrade</span>=self.upgrade) </div><div class=\"line\"><span class=\"keyword\">File</span> <span class=\"string\">\"/usr/lib/python2.7/dist-packages/pip/index.py\"</span>, line <span class=\"number\">256</span>, <span class=\"keyword\">in</span> find_requirement</div><div class=\"line\">  page_versions.extend(self._package_versions(page.links, req.name.lower())) </div><div class=\"line\"><span class=\"keyword\">File</span> <span class=\"string\">\"/usr/lib/python2.7/dist-packages/pip/index.py\"</span>, line <span class=\"number\">432</span>, <span class=\"keyword\">in</span> _package_versions </div><div class=\"line\">  <span class=\"keyword\">for</span> <span class=\"keyword\">link</span> <span class=\"keyword\">in</span> self._sort_links(links): </div><div class=\"line\"><span class=\"keyword\">File</span> <span class=\"string\">\"/usr/lib/python2.7/dist-packages/pip/index.py\"</span>, line <span class=\"number\">422</span>, <span class=\"keyword\">in</span> _sort_links </div><div class=\"line\">  <span class=\"keyword\">for</span> <span class=\"keyword\">link</span> <span class=\"keyword\">in</span> links: </div><div class=\"line\"><span class=\"keyword\">File</span> <span class=\"string\">\"/usr/lib/python2.7/dist-packages/pip/index.py\"</span>, line <span class=\"number\">769</span>, <span class=\"keyword\">in</span> links </div><div class=\"line\">  <span class=\"keyword\">for</span> anchor <span class=\"keyword\">in</span> self.parsed.findall(<span class=\"string\">\".//a\"</span>):</div><div class=\"line\">AttributeError: <span class=\"string\">'Document'</span> <span class=\"keyword\">object</span> has <span class=\"keyword\">no</span> <span class=\"keyword\">attribute</span> <span class=\"string\">'findall'</span></div><div class=\"line\"></div><div class=\"line\">Storing debug <span class=\"keyword\">log</span> <span class=\"keyword\">for</span> <span class=\"keyword\">failure</span> <span class=\"keyword\">in</span> /root/.pip/pip.log</div></pre></td></tr></table></figure></p>\n<p>网上搜索一番,在<a href=\"https://github.com/pypa/pip/issues/1742\" target=\"_blank\" rel=\"external\">这里</a>找到答案.<br>解决方法很简单,执行<code>easy_install pip</code>,就ok(貌似是把pip重新安装了一次).</p>\n<h2 id=\"2-客户端运行\"><a href=\"#2-客户端运行\" class=\"headerlink\" title=\"2) 客户端运行\"></a>2) 客户端运行</h2><p>shadowsocks图形化的比较简单,这里不表.<br>命令行模式,启动如下:<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sslocal -s 服务器ip -<span class=\"selector-tag\">p</span> <span class=\"number\">8388</span> -k 密码</div></pre></td></tr></table></figure></p>\n<p>启动成功后会有如下输出:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">2015<span class=\"selector-tag\">-03-10</span> 11<span class=\"selector-pseudo\">:12</span><span class=\"selector-pseudo\">:59</span> <span class=\"selector-tag\">INFO</span>     <span class=\"selector-tag\">loading</span> <span class=\"selector-tag\">libcrypto</span> <span class=\"selector-tag\">from</span> <span class=\"selector-tag\">libcrypto</span><span class=\"selector-class\">.so</span><span class=\"selector-class\">.1</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.0</span></div><div class=\"line\">2015<span class=\"selector-tag\">-03-10</span> 11<span class=\"selector-pseudo\">:12</span><span class=\"selector-pseudo\">:59</span> <span class=\"selector-tag\">INFO</span>     <span class=\"selector-tag\">starting</span> <span class=\"selector-tag\">local</span> <span class=\"selector-tag\">at</span> 127<span class=\"selector-class\">.0</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.1</span><span class=\"selector-pseudo\">:1080</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"3-浏览器代理设置\"><a href=\"#3-浏览器代理设置\" class=\"headerlink\" title=\"3) 浏览器代理设置\"></a>3) 浏览器代理设置</h2><p>一般来说我们不希望shadowsocks做全局的翻墙,那样,访问国内的速度也会变慢,我们在chome浏览器中安装switchysharp,来管理代理.具体设置如下所示:<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1eq0k16t5ejj20ne0ihmzh.jpg\" alt=\"swichysharp设置\"></p>\n<p>enjoy it!</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>安卓客户端安装,<a href=\"https://apps.evozi.com/apk-downloader/?id=com.github.shadowsocks\" target=\"_blank\" rel=\"external\">点我点我</a></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 这是一篇好博客 <a href=\"http://mushapi.com/shadowsocks-install-config-using.html\" target=\"_blank\" rel=\"external\">http://mushapi.com/shadowsocks-install-config-using.html</a><br>2 <a href=\"https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E\" target=\"_blank\" rel=\"external\">shadowsocks使用说明</a><br>3 <a href=\"https://github.com/pypa/pip/issues/1742\" target=\"_blank\" rel=\"external\">修复我pip问题的一个issue</a></p>\n<h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p>这个网站可以下载google play的apk,对于我等天朝良民来说,可真是个好东西<br><a href=\"https://apps.evozi.com/apk-downloader/?id=com.github.shadowsocks\" target=\"_blank\" rel=\"external\">https://apps.evozi.com/apk-downloader/?id=com.github.shadowsocks</a></p>\n<p>我们家<a href=\"http://huirong.github.io\" target=\"_blank\" rel=\"external\">笨笨的博客</a>弄好了,欢迎访问</p>\n","excerpt":"<p>最近我的vpn一直在抽风，几乎没法正常使用，而且我的chrome也是各种花屏，我快疯了，没办法，只能改用shadowsocks了。<br>搭建过程分为两部分:服务端和客户端(这里是主要是ubuntu的客户端)。<br>","more":"</p>\n<h1 id=\"1-系统环境\"><a href=\"#1-系统环境\" class=\"headerlink\" title=\"1 系统环境\"></a>1 系统环境</h1><p><strong>服务器</strong>:DigitalOcean上的Ubuntu 14.04 LTS<br><strong>客户端</strong>:Ubuntu 14.04 LTS</p>\n<h1 id=\"2-服务器端安装和配置\"><a href=\"#2-服务器端安装和配置\" class=\"headerlink\" title=\"2 服务器端安装和配置\"></a>2 服务器端安装和配置</h1><p>这里主要是参考github的<a href=\"https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E\">官方说明</a><br>通过ssh登陆的服务器上去,这里不在赘述如何登陆.<br>以下主要针对linux服务器,windows服务器查看<a href=\"https://github.com/shadowsocks/shadowsocks/wiki/Install-Shadowsocks-Server-on-Windows\">这里</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>Linux不同的发行版本执行的命令如下<br><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Debian / Ubuntu:</div><div class=\"line\"></div><div class=\"line\">apt-get <span class=\"keyword\">install</span> python-pip</div><div class=\"line\">pip <span class=\"keyword\">install</span> shadowsocks</div><div class=\"line\"></div><div class=\"line\">CentOS:</div><div class=\"line\"></div><div class=\"line\">yum <span class=\"keyword\">install</span> python-setuptools &amp;&amp; easy_install pip</div><div class=\"line\">pip <span class=\"keyword\">install</span> shadowsocks</div></pre></td></tr></table></figure></p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vi <span class=\"regexp\">/etc/</span>shadowsocks.json</div></pre></td></tr></table></figure>\n<p>配置文件的内容大致如下:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"server\"</span>:<span class=\"string\">\"你的服务器的ip\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"server_port\"</span>:<span class=\"number\">8388</span>,</div><div class=\"line\">    <span class=\"attr\">\"local_address\"</span>: <span class=\"string\">\"127.0.0.1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"local_port\"</span>:<span class=\"number\">1080</span>,</div><div class=\"line\">    <span class=\"attr\">\"password\"</span>:<span class=\"string\">\"你设置的密码\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"timeout\"</span>:<span class=\"number\">300</span>,</div><div class=\"line\">    <span class=\"attr\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"fast_open\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>参数名称       解释</strong><br>server         安装shadowsocks服务器ip<br>server_port    服务器端口号<br>local_address  本地服务器默认是127.0.0.1<br>local_port     本地监听的端口号<br>password       密码<br>timeout        超时时间,单位是秒<br>method         加密方法默认是: “aes-256-cfb”可以用其他加密方法<br>fast_open      是否使用TCP_FASTOPEN,默认为不使用<br>workers        number of workers, available on Unix/Linux</p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>前台运行的命令<br><code>ssserver -c /etc/shadowsocks.json</code><br>后台运行<br><code>ssserver -c /etc/shadowsocks.json -d start</code><br><code>ssserver -c /etc/shadowsocks.json -d stop</code><br>ps:我上述两条命令都会出错,这两条命令来自官方的github,我用的是下面的<br><code>nohup ssserver -c /etc/shadowsocks.json &gt; aa.log</code></p>\n<h2 id=\"开机自启\"><a href=\"#开机自启\" class=\"headerlink\" title=\"开机自启\"></a>开机自启</h2><p>我们把它写入/etc/rc.local中就可以完成开机自启动了.<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vi /etc/rc.<span class=\"keyword\">local</span>  # 打开rc.<span class=\"keyword\">local</span>文件</div><div class=\"line\"># 然后在<span class=\"keyword\">exit</span>前面加入下面这一行</div><div class=\"line\"># nohup /usr/<span class=\"keyword\">local</span>/bin/ssserver -c /etc/shadowsocks.json &gt; aa.<span class=\"built_in\">log</span></div></pre></td></tr></table></figure></p>\n<p>ps:这里我之前犯了一个错误,没有写<code>ssserver</code>的绝对路径,导致开机无法自启动,但是手动执行的话,又是可以执行的</p>\n<h1 id=\"3-客户端的安装和配置\"><a href=\"#3-客户端的安装和配置\" class=\"headerlink\" title=\"3 客户端的安装和配置\"></a>3 客户端的安装和配置</h1><p>客户端按理说和服务器端类似,安装shadowsocks,但是我的就是这个出了问题.</p>\n<h2 id=\"1-安装相关软件\"><a href=\"#1-安装相关软件\" class=\"headerlink\" title=\"1) 安装相关软件\"></a>1) 安装相关软件</h2><p>shadowsocks有各种客户端版本,各个系统都有.在ubuntu下带图形化界面的有shadowsocks-qt5,还可以直接用命令行.</p>\n<p><strong>图形化:</strong><br><figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo<span class=\"built_in\"> add-apt-repository </span>ppa:hzwhuang/ss-qt5</div><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install shadowsocks-qt5</div></pre></td></tr></table></figure></p>\n<p><em>PS:</em>我的电脑安装这个以后,会自动卸载我的chrome<br><em>PPS:</em>我刚才又试了一次,我在安装了命令行模式的shadowsocks以后,现在不会卸载我的chrome,总算正常了<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">The following extra packages will <span class=\"keyword\">be</span> installed:</div><div class=\"line\">  libbotan-<span class=\"number\">1.10</span>-<span class=\"number\">0</span> libqrencode3 libqtshadowsocks libzbar0</div><div class=\"line\">The following packages will <span class=\"keyword\">be</span> REMOVED:</div><div class=\"line\">  libbotan-<span class=\"number\">1.10</span>-<span class=\"number\">0</span>:i386 libqtshadowsock<span class=\"variable\">s:i386</span> libzbar0:i386</div><div class=\"line\">The following NEW packages will <span class=\"keyword\">be</span> installed:</div><div class=\"line\">  libbotan-<span class=\"number\">1.10</span>-<span class=\"number\">0</span> libqrencode3 libqtshadowsocks libzbar0 shadowsocks-qt5</div><div class=\"line\"><span class=\"number\">0</span> upgraded, <span class=\"number\">5</span> newly installed, <span class=\"number\">3</span> <span class=\"keyword\">to</span> <span class=\"built_in\">remove</span> <span class=\"built_in\">and</span> <span class=\"number\">19</span> not upgraded.</div><div class=\"line\">Need <span class=\"keyword\">to</span> <span class=\"built_in\">get</span> <span class=\"number\">1</span>,<span class=\"number\">280</span> kB of archives.</div><div class=\"line\">After this operation, <span class=\"number\">662</span> kB of additional disk space will <span class=\"keyword\">be</span> used.</div><div class=\"line\">Do you want <span class=\"keyword\">to</span> <span class=\"keyword\">continue</span>? [Y/n]</div></pre></td></tr></table></figure></p>\n<p><strong>命令行模式:</strong><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get <span class=\"keyword\">install</span> python-pip python-dev <span class=\"keyword\">build</span>-essential </div><div class=\"line\">sudo pip <span class=\"keyword\">install</span>  pip</div><div class=\"line\">sudo apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> python-m2crypto</div><div class=\"line\">sudo pip <span class=\"keyword\">install</span> shadowsocks</div></pre></td></tr></table></figure></p>\n<p>我因为之前在环境中就安装过pip,所以我只需要执行倒数第三个和第四个命令.<br>但是我的倒数第四个命令<code>pip install shadowsocks</code>一直报错:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">Exception: Traceback (most recent <span class=\"keyword\">call</span> <span class=\"keyword\">last</span>):</div><div class=\"line\"><span class=\"keyword\">File</span> <span class=\"string\">\"/usr/lib/python2.7/dist-packages/pip/basecommand.py\"</span>, line <span class=\"number\">122</span>, <span class=\"keyword\">in</span> <span class=\"keyword\">main</span></div><div class=\"line\">  <span class=\"keyword\">status</span> = self.run(options, args)</div><div class=\"line\"><span class=\"keyword\">File</span> <span class=\"string\">\"/usr/lib/python2.7/dist-packages/pip/commands/install.py\"</span>, line <span class=\"number\">278</span>, <span class=\"keyword\">in</span> run</div><div class=\"line\">  requirement_set.prepare_files(finder, force_root_egg_info=self.bundle, bundle=self.bundle) </div><div class=\"line\"><span class=\"keyword\">File</span> <span class=\"string\">\"/usr/lib/python2.7/dist-packages/pip/req.py\"</span>, line <span class=\"number\">1177</span>, <span class=\"keyword\">in</span> prepare_files </div><div class=\"line\">  <span class=\"keyword\">url</span> = finder.find_requirement(req_to_install, <span class=\"keyword\">upgrade</span>=self.upgrade) </div><div class=\"line\"><span class=\"keyword\">File</span> <span class=\"string\">\"/usr/lib/python2.7/dist-packages/pip/index.py\"</span>, line <span class=\"number\">256</span>, <span class=\"keyword\">in</span> find_requirement</div><div class=\"line\">  page_versions.extend(self._package_versions(page.links, req.name.lower())) </div><div class=\"line\"><span class=\"keyword\">File</span> <span class=\"string\">\"/usr/lib/python2.7/dist-packages/pip/index.py\"</span>, line <span class=\"number\">432</span>, <span class=\"keyword\">in</span> _package_versions </div><div class=\"line\">  <span class=\"keyword\">for</span> <span class=\"keyword\">link</span> <span class=\"keyword\">in</span> self._sort_links(links): </div><div class=\"line\"><span class=\"keyword\">File</span> <span class=\"string\">\"/usr/lib/python2.7/dist-packages/pip/index.py\"</span>, line <span class=\"number\">422</span>, <span class=\"keyword\">in</span> _sort_links </div><div class=\"line\">  <span class=\"keyword\">for</span> <span class=\"keyword\">link</span> <span class=\"keyword\">in</span> links: </div><div class=\"line\"><span class=\"keyword\">File</span> <span class=\"string\">\"/usr/lib/python2.7/dist-packages/pip/index.py\"</span>, line <span class=\"number\">769</span>, <span class=\"keyword\">in</span> links </div><div class=\"line\">  <span class=\"keyword\">for</span> anchor <span class=\"keyword\">in</span> self.parsed.findall(<span class=\"string\">\".//a\"</span>):</div><div class=\"line\">AttributeError: <span class=\"string\">'Document'</span> <span class=\"keyword\">object</span> has <span class=\"keyword\">no</span> <span class=\"keyword\">attribute</span> <span class=\"string\">'findall'</span></div><div class=\"line\"></div><div class=\"line\">Storing debug <span class=\"keyword\">log</span> <span class=\"keyword\">for</span> <span class=\"keyword\">failure</span> <span class=\"keyword\">in</span> /root/.pip/pip.log</div></pre></td></tr></table></figure></p>\n<p>网上搜索一番,在<a href=\"https://github.com/pypa/pip/issues/1742\">这里</a>找到答案.<br>解决方法很简单,执行<code>easy_install pip</code>,就ok(貌似是把pip重新安装了一次).</p>\n<h2 id=\"2-客户端运行\"><a href=\"#2-客户端运行\" class=\"headerlink\" title=\"2) 客户端运行\"></a>2) 客户端运行</h2><p>shadowsocks图形化的比较简单,这里不表.<br>命令行模式,启动如下:<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sslocal -s 服务器ip -<span class=\"selector-tag\">p</span> <span class=\"number\">8388</span> -k 密码</div></pre></td></tr></table></figure></p>\n<p>启动成功后会有如下输出:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">2015<span class=\"selector-tag\">-03-10</span> 11<span class=\"selector-pseudo\">:12</span><span class=\"selector-pseudo\">:59</span> <span class=\"selector-tag\">INFO</span>     <span class=\"selector-tag\">loading</span> <span class=\"selector-tag\">libcrypto</span> <span class=\"selector-tag\">from</span> <span class=\"selector-tag\">libcrypto</span><span class=\"selector-class\">.so</span><span class=\"selector-class\">.1</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.0</span></div><div class=\"line\">2015<span class=\"selector-tag\">-03-10</span> 11<span class=\"selector-pseudo\">:12</span><span class=\"selector-pseudo\">:59</span> <span class=\"selector-tag\">INFO</span>     <span class=\"selector-tag\">starting</span> <span class=\"selector-tag\">local</span> <span class=\"selector-tag\">at</span> 127<span class=\"selector-class\">.0</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.1</span><span class=\"selector-pseudo\">:1080</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"3-浏览器代理设置\"><a href=\"#3-浏览器代理设置\" class=\"headerlink\" title=\"3) 浏览器代理设置\"></a>3) 浏览器代理设置</h2><p>一般来说我们不希望shadowsocks做全局的翻墙,那样,访问国内的速度也会变慢,我们在chome浏览器中安装switchysharp,来管理代理.具体设置如下所示:<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1eq0k16t5ejj20ne0ihmzh.jpg\" alt=\"swichysharp设置\"></p>\n<p>enjoy it!</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>安卓客户端安装,<a href=\"https://apps.evozi.com/apk-downloader/?id=com.github.shadowsocks\">点我点我</a></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 这是一篇好博客 <a href=\"http://mushapi.com/shadowsocks-install-config-using.html\">http://mushapi.com/shadowsocks-install-config-using.html</a><br>2 <a href=\"https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E\">shadowsocks使用说明</a><br>3 <a href=\"https://github.com/pypa/pip/issues/1742\">修复我pip问题的一个issue</a></p>\n<h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p>这个网站可以下载google play的apk,对于我等天朝良民来说,可真是个好东西<br><a href=\"https://apps.evozi.com/apk-downloader/?id=com.github.shadowsocks\">https://apps.evozi.com/apk-downloader/?id=com.github.shadowsocks</a></p>\n<p>我们家<a href=\"http://huirong.github.io\">笨笨的博客</a>弄好了,欢迎访问</p>"},{"title":"ubuntu下使用scrapy抓取cnblogs","date":"2015-04-26T08:52:28.000Z","_content":"今天在伯乐在线上看到一篇翻译的博客，讲的是使用scrapy来抓取stackoverflow上的问题，刚好好久没用这个，于是一并捡起来玩一下。\n<!-- more -->\n# 软件安装\n我的环境是：ubuntu 14.04 lts\n需要安装相关软件\n## scrapy\n```\npip install Scrapy\n```\n## PyMongo\n```\npip install pymongo\n\n```\n## Mongodb\n上面安装的是python使用Mongodb的接口，很显然，我们要安装Mongodb才能使用\n```\nsudo apt-get install mongodb-server\n```\n至此，要使用的软件都已经安装完毕\n# 使用scrapy新建工程\n使用scrapy新建工程很简单，如下所示，我们新建一个stack的项目，他会在你的当前目录新建一个stack文件夹\n```\nscrapy startproject stack\n```\n并且会建成如下所示的目录树结构\n```\nchen@chen-P31:~$ tree stack\nstack\n├── stack\n│   ├── __init__.py\n│   ├── items.py\n│   ├── pipelines.py\n│   ├── settings.py\n│   └── spiders\n│       └── __init__.py\n└── scrapy.cfg\n```\n接下来，我们修改items.py的内容，这个文件用于定义存储“容器”，用来存储将要抓取的数据。\n```python\nfrom scrapy.item import Item,Field\n\nclass StackItem(Item):\n    # define the fields for your item here like:\n    # name = scrapy.Field()\n    title = Field()# 我们添加两个字段，我们等会儿会抓取一个标题和url两个字段\n    url = Field()\n```\n接着，还有一个很重要的东西，对，就是我们的蜘蛛，我们在spider目录下，新建一个stack_spider.py文件。顾名思义，这就是我们的蜘蛛。我们需要定义我们爬虫的起点，爬虫的规则等等\n```python\nfrom scrapy import Spider\nfrom stack.items import StackItem  # 导入我们上面定义的容器类\nclass StackSpider(Spider):\n    name = 'stack'   # 定义我们爬虫的名字\n    allowed_domains = [\"cnblogs.com\"]   # 规定爬虫爬取的域名\n    start_urls = ['http://www.cnblogs.com/geqianst/p/',]   # 爬虫工作的起点\n\n    def parse(self, response):# 爬虫用来做数据解析的\n        questions = response.xpath('//div[@id=\"myposts\"]//a[@id]')\n        # xpath选择器，这里的含义是取所有id为myposts的div，在它下面找所有带id的超链接a\n        # 实际结果是这样的\n        # [<Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'<a id=\"PostsList1_rpPosts_TitleUrl_0\" hr'>,\n        # <Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'<a id=\"PostsList1_rpPosts_TitleUrl_1\" hr'>,\n        # <Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'<a id=\"PostsList1_rpPosts_TitleUrl_2\" hr'>,\n        # <Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'<a id=\"PostsList1_rpPosts_TitleUrl_3\" hr'>,\n        # <Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'<a id=\"PostsList1_rpPosts_TitleUrl_4\" hr'>,\n        # <Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'<a id=\"PostsList1_rpPosts_TitleUrl_5\" hr'>,\n        # <Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'<a id=\"PostsList1_rpPosts_TitleUrl_6\" hr'>,\n        # <Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'<a id=\"PostsList1_rpPosts_TitleUrl_7\" hr'>,\n        # <Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'<a id=\"PostsList1_rpPosts_TitleUrl_8\" hr'>,\n        # <Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'<a id=\"PostsList1_rpPosts_TitleUrl_9\" hr'>]\n        #\n\n        for question in questions:\n            item = StackItem()\n            item['title'] = question.xpath(\n                'text()').extract()[0]\n            item['url'] = question.xpath(\n                '@href').extract()[0]\n            print item\n            yield item\n```\n# 测试\nok，上述工作基本完成，我们来测试一下\n```bash\nscrapy crawl stack\n```\n还可以这样测试一下，使用shell命令\n![用shell测试xpath](http://ww4.sinaimg.cn/large/692869a3gw1erjvd7qeqdj213z0j9h2h.jpg)\n妈蛋，我的竟然出错了，输出如下\n```\nchen@chen-P31:~/stack$ scrapy crawl stack\n2015-04-26 16:49:11+0800 [scrapy] INFO: Scrapy 0.24.6 started (bot: stack)\n2015-04-26 16:49:11+0800 [scrapy] INFO: Optional features available: ssl, http11\n2015-04-26 16:49:11+0800 [scrapy] INFO: Overridden settings: {'NEWSPIDER_MODULE': 'stack.spiders', 'SPIDER_MODULES': ['stack.spiders'], 'BOT_NAME': 'stack'}\nTraceback (most recent call last):\n  File \"/usr/local/bin/scrapy\", line 11, in <module>\n    sys.exit(execute())\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py\", line 143, in execute\n    _run_print_help(parser, _run_command, cmd, args, opts)\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py\", line 89, in _run_print_help\n    func(*a, **kw)\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py\", line 150, in _run_command\n    cmd.run(args, opts)\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/commands/crawl.py\", line 60, in run\n    self.crawler_process.start()\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\", line 92, in start\n    if self.start_crawling():\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\", line 124, in start_crawling\n    return self._start_crawler() is not None\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\", line 139, in _start_crawler\n    crawler.configure()\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\", line 46, in configure\n    self.extensions = ExtensionManager.from_crawler(self)\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/middleware.py\", line 50, in from_crawler\n    return cls.from_settings(crawler.settings, crawler)\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/middleware.py\", line 29, in from_settings\n    mwcls = load_object(clspath)\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/utils/misc.py\", line 42, in load_object\n    raise ImportError(\"Error loading object '%s': %s\" % (path, e))\nImportError: Error loading object 'scrapy.telnet.TelnetConsole': No module named conch\n```\n这是什么gui？\n还好我有stackoverflow，google一番，找到解决办法（其实这不是最后的解决办法，请往后看）\n网上说是twisted的问题，重新安装一下就好了，ok，走起\n```\nchen@chen-P31:~/stack$ sudo apt-get install twisted\nReading package lists... Done\nBuilding dependency tree       \nReading state information... Done\nE: Unable to locate package twisted\nchen@chen-P31:~/stack$ sudo apt-get install twisted.conch\nReading package lists... Done\nBuilding dependency tree       \nReading state information... Done\nNote, selecting 'python-twisted-conch' for regex 'twisted.conch'\nNote, selecting 'python2.7-twisted-conch' for regex 'twisted.conch'\nNote, selecting 'python-twisted-conch' instead of 'python2.7-twisted-conch'\nThe following packages were automatically installed and are no longer required:\n  cli-common dockmanager freepats gstreamer1.0-plugins-bad-faad\n  gstreamer1.0-plugins-bad-videoparsers libbotan-1.10-0:i386 libcdaudio1\n  libdbus-glib2.0-cil libdbus2.0-cil libdbusmenu-glib4:i386\n  libdbusmenu-gtk4:i386 libegl1-mesa:i386 libegl1-mesa-drivers:i386 libflite1\n  libfluidsynth1 libgbm1:i386 libgconf2.0-cil libgdiplus libgif4\n  libgles2-mesa:i386 libglib2.0-cil libgme0 libgmp10:i386\n  libgnome-desktop-2-17 libgnome-keyring1.0-cil libgnomedesktop2.20-cil\n  libgstreamer-plugins-bad0.10-0 libgstreamer-plugins-bad1.0-0 libgtk2.0-cil\n  libicu52:i386 libmimic0 libmms0 libmono-addins0.2-cil libmono-cairo4.0-cil\n  libmono-corlib4.0-cil libmono-corlib4.5-cil libmono-data-tds4.0-cil\n  libmono-i18n-west4.0-cil libmono-i18n4.0-cil libmono-posix4.0-cil\n  libmono-security4.0-cil libmono-sharpzip4.84-cil libmono-sqlite4.0-cil\n  libmono-system-configuration4.0-cil libmono-system-core4.0-cil\n  libmono-system-data4.0-cil libmono-system-drawing4.0-cil\n  libmono-system-enterpriseservices4.0-cil\n  libmono-system-runtime-serialization-formatters-soap4.0-cil\n  libmono-system-security4.0-cil libmono-system-transactions4.0-cil\n  libmono-system-web-applicationservices4.0-cil\n  libmono-system-web-services4.0-cil libmono-system-web4.0-cil\n  libmono-system-xml-linq4.0-cil libmono-system-xml4.0-cil\n  libmono-system4.0-cil libmono-web4.0-cil libmpg123-0 libnotify0.4-cil\n  libofa0 libopenal-data libopenal1 libopenvg1-mesa:i386 libqrencode3:i386\n  libqt5core5a:i386 libqt5dbus5:i386 libqt5gui5:i386 libqt5network5:i386\n  libqt5widgets5:i386 libqtshadowsocks:i386 librsvg2-2.18-cil libslv2-9\n  libsoundtouch0 libspandsp2 libsrtp0 libssl1.0.0:i386 libv4l-0:i386\n  libv4lconvert0:i386 libvo-aacenc0 libvo-amrwbenc0 libwayland-client0:i386\n  libwayland-egl1-mesa:i386 libwayland-server0:i386 libwildmidi-config\n  libwildmidi1 libwnck2.20-cil libxcb-icccm4:i386 libxcb-image0:i386\n  libxcb-keysyms1:i386 libxcb-randr0:i386 libxcb-render-util0:i386\n  libxcb-shape0:i386 libxcb-util0:i386 libxcb-xfixes0:i386 libxcb-xkb1:i386\n  libxkbcommon-x11-0:i386 libxkbcommon0:i386 libzbar0:i386 mono-4.0-gac\n  mono-gac mono-runtime mono-runtime-common mono-runtime-sgen python-mpd\n  python-mutagen python-twisted-names\nUse 'apt-get autoremove' to remove them.\nThe following extra packages will be installed:\n  python-pyasn1\nThe following NEW packages will be installed:\n  python-pyasn1 python-twisted-conch\n0 upgraded, 2 newly installed, 0 to remove and 6 not upgraded.\nNeed to get 286 kB of archives.\nAfter this operation, 1,793 kB of additional disk space will be used.\nDo you want to continue? [Y/n] \nGet:1 http://mirrors.ustc.edu.cn/ubuntu/ trusty/main python-pyasn1 all 0.1.7-1ubuntu2 [44.2 kB]\nGet:2 http://mirrors.ustc.edu.cn/ubuntu/ trusty/main python-twisted-conch all 1:13.2.0-1ubuntu1 [242 kB]\nFetched 286 kB in 0s (1,595 kB/s)         \nSelecting previously unselected package python-pyasn1.\n(Reading database ... 359746 files and directories currently installed.)\nPreparing to unpack .../python-pyasn1_0.1.7-1ubuntu2_all.deb ...\nUnpacking python-pyasn1 (0.1.7-1ubuntu2) ...\nSelecting previously unselected package python-twisted-conch.\nPreparing to unpack .../python-twisted-conch_1%3a13.2.0-1ubuntu1_all.deb ...\nUnpacking python-twisted-conch (1:13.2.0-1ubuntu1) ...\nProcessing triggers for doc-base (0.10.5) ...\nProcessing 1 added doc-base file...\nProcessing triggers for man-db (2.6.7.1-1ubuntu1) ...\nSetting up python-pyasn1 (0.1.7-1ubuntu2) ...\nSetting up python-twisted-conch (1:13.2.0-1ubuntu1) ...\n```\n安装总算完成，再试一次，妈蛋，又来一个新错误，这是什么gui？？？\n```bash\nchen@chen-P31:~/stack$ scrapy crawl stack\n2015-04-26 16:50:44+0800 [scrapy] INFO: Scrapy 0.24.6 started (bot: stack)\n2015-04-26 16:50:44+0800 [scrapy] INFO: Optional features available: ssl, http11\n2015-04-26 16:50:44+0800 [scrapy] INFO: Overridden settings: {'NEWSPIDER_MODULE': 'stack.spiders', 'SPIDER_MODULES': ['stack.spiders'], 'BOT_NAME': 'stack'}\nTraceback (most recent call last):\n  File \"/usr/local/bin/scrapy\", line 11, in <module>\n    sys.exit(execute())\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py\", line 143, in execute\n    _run_print_help(parser, _run_command, cmd, args, opts)\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py\", line 89, in _run_print_help\n    func(*a, **kw)\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py\", line 150, in _run_command\n    cmd.run(args, opts)\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/commands/crawl.py\", line 60, in run\n    self.crawler_process.start()\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\", line 92, in start\n    if self.start_crawling():\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\", line 124, in start_crawling\n    return self._start_crawler() is not None\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\", line 139, in _start_crawler\n    crawler.configure()\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\", line 46, in configure\n    self.extensions = ExtensionManager.from_crawler(self)\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/middleware.py\", line 50, in from_crawler\n    return cls.from_settings(crawler.settings, crawler)\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/middleware.py\", line 29, in from_settings\n    mwcls = load_object(clspath)\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/utils/misc.py\", line 42, in load_object\n    raise ImportError(\"Error loading object '%s': %s\" % (path, e))\nImportError: Error loading object 'scrapy.contrib.memusage.MemoryUsage': No module named mail.smtp\n```\n最后的最后，我在我们万能的github上找到[答案](https://github.com/scrapy/scrapy/issues/958)，原来是我们没有安装python-twisted，安装一下，世界都美好了\n```\nsudo apt-get install python-twisted\n```\n## 输出到文件\n为了更直观的看到结果，我们将结果输出到一个json文件\n```\nscrapy crawl stack -o items.json -t json\n```\n噢耶，第一个爬虫成功\n# 存储到mongodb\n接下来，我们做最后一件事，我们将结果存储到mongodb的数据库中\n在这里，我遇到一个大坑，无论是伯乐在线翻译的博客\n还是网上搜索到的一般教程，都是使用pymongo.Connection来连接数据库，可是妈蛋，你使用`pip install pymongo`安装的版本都是最新版本3.0.1，那个Connection的写法已经不支持，被丢弃了，擦。\n我们来看一下版本，我学到一个新命令`pip show pymongo`，用来查看某一个包的版本的。\n![查看pymongo版本](http://ww4.sinaimg.cn/large/692869a3gw1erjct36jnrj20df038dgf.jpg)\n在pymongo 3.0的版本中，已经不再支持pymongo.Connection，而是使用pymongo.MongoClient来替代。\n## 第一步\n创建一个用来保存我们抓取数据的数据库。打开`settings.py`,指定管道，然后加入数据库的相关设置\n```python\n\nBOT_NAME = 'stack'\n\nSPIDER_MODULES = ['stack.spiders']\nNEWSPIDER_MODULE = 'stack.spiders'\n\n# Crawl responsibly by identifying yourself (and your website) on the user-agent\n# USER_AGENT = 'stack (+http://www.yourdomain.com)'\n\nITEM_PIPELINES = ['stack.pipelines.MongoDBPipeline', ]\n# 关于mongodb的相关设置，包括服务器的ip，端口号，数据库名，表名，\n# 我也是第一次使用mongodb竟然不需要用户验证信息，而且这表名确实奇怪，叫做MONGODB_COLLECTION\nMONGODB_SERVER = \"localhost\"\nMONGODB_PORT = 27017\nMONGODB_DB = \"stackoverflow\"\nMONGODB_COLLECTION = \"questions\"\n\nDOWNLOAD_DELAY = 5  # 抓取的延迟\n\n```\n## 第二步\n我们已经能够爬取和解析html数据了，而且已经配置了数据库，接下来，我们通过`pipelines.py`中建立一个管道去连接这两个部分。\n我们首先来完成数据库的连接部分\n```python\nimport pymongo\n\nfrom scrapy.conf import settings\nfrom scrapy.exceptions import DropItem\nfrom scrapy import log\n\n\nclass MongoDBPipeline(object):\n\n    def __init__(self):\n        connection = pymongo.MongoClient(\n            settings['MONGODB_SERVER'],\n            settings['MONGODB_PORT']\n        )\n        db = connection[settings['MONGODB_DB']]\n        self.collection = db[settings['MONGODB_COLLECTION']]\n```\n接下来定义一个处理函数\n```python\n    def process_item(self, item, spider):\n        for data in item:\n            if not data:\n                raise DropItem(\"Missing data!\")\n        self.collection.update({'url': item['url']}, dict(item), upsert=True)\n        log.msg(\"Question added to MongoDB database!\",\n                level=log.DEBUG, spider=spider)\n        return item\n\n```\nok,搞定，我们再测试一把\n```python\nscrapy crawl stack\n```\n## 执行效果如下\n![mongodb数据库管理](http://ww1.sinaimg.cn/large/692869a3gw1erjv5to5w3j20w70g8wio.jpg)\n# 参考文献\n1 [ImportError: Error loading object 'scrapy.contrib.memusage.MemoryUsage': No module named mail.smtp](https://github.com/scrapy/scrapy/issues/958)\n2 <http://stackoverflow.com/questions/8671071/error-to-execute-python-scrappy-module>\n3 [Python下用Scrapy和MongoDB构建爬虫系统（1）](http://python.jobbole.com/81320/)\n","source":"_posts/ubuntu-scrapy-stackoverflow.md","raw":"title: ubuntu下使用scrapy抓取cnblogs\ndate: 2015-04-26 16:52:28\ntags:\n- python\n- scrapy\n- 爬虫\ncategories:\n- python学习笔记\n---\n今天在伯乐在线上看到一篇翻译的博客，讲的是使用scrapy来抓取stackoverflow上的问题，刚好好久没用这个，于是一并捡起来玩一下。\n<!-- more -->\n# 软件安装\n我的环境是：ubuntu 14.04 lts\n需要安装相关软件\n## scrapy\n```\npip install Scrapy\n```\n## PyMongo\n```\npip install pymongo\n\n```\n## Mongodb\n上面安装的是python使用Mongodb的接口，很显然，我们要安装Mongodb才能使用\n```\nsudo apt-get install mongodb-server\n```\n至此，要使用的软件都已经安装完毕\n# 使用scrapy新建工程\n使用scrapy新建工程很简单，如下所示，我们新建一个stack的项目，他会在你的当前目录新建一个stack文件夹\n```\nscrapy startproject stack\n```\n并且会建成如下所示的目录树结构\n```\nchen@chen-P31:~$ tree stack\nstack\n├── stack\n│   ├── __init__.py\n│   ├── items.py\n│   ├── pipelines.py\n│   ├── settings.py\n│   └── spiders\n│       └── __init__.py\n└── scrapy.cfg\n```\n接下来，我们修改items.py的内容，这个文件用于定义存储“容器”，用来存储将要抓取的数据。\n```python\nfrom scrapy.item import Item,Field\n\nclass StackItem(Item):\n    # define the fields for your item here like:\n    # name = scrapy.Field()\n    title = Field()# 我们添加两个字段，我们等会儿会抓取一个标题和url两个字段\n    url = Field()\n```\n接着，还有一个很重要的东西，对，就是我们的蜘蛛，我们在spider目录下，新建一个stack_spider.py文件。顾名思义，这就是我们的蜘蛛。我们需要定义我们爬虫的起点，爬虫的规则等等\n```python\nfrom scrapy import Spider\nfrom stack.items import StackItem  # 导入我们上面定义的容器类\nclass StackSpider(Spider):\n    name = 'stack'   # 定义我们爬虫的名字\n    allowed_domains = [\"cnblogs.com\"]   # 规定爬虫爬取的域名\n    start_urls = ['http://www.cnblogs.com/geqianst/p/',]   # 爬虫工作的起点\n\n    def parse(self, response):# 爬虫用来做数据解析的\n        questions = response.xpath('//div[@id=\"myposts\"]//a[@id]')\n        # xpath选择器，这里的含义是取所有id为myposts的div，在它下面找所有带id的超链接a\n        # 实际结果是这样的\n        # [<Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'<a id=\"PostsList1_rpPosts_TitleUrl_0\" hr'>,\n        # <Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'<a id=\"PostsList1_rpPosts_TitleUrl_1\" hr'>,\n        # <Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'<a id=\"PostsList1_rpPosts_TitleUrl_2\" hr'>,\n        # <Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'<a id=\"PostsList1_rpPosts_TitleUrl_3\" hr'>,\n        # <Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'<a id=\"PostsList1_rpPosts_TitleUrl_4\" hr'>,\n        # <Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'<a id=\"PostsList1_rpPosts_TitleUrl_5\" hr'>,\n        # <Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'<a id=\"PostsList1_rpPosts_TitleUrl_6\" hr'>,\n        # <Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'<a id=\"PostsList1_rpPosts_TitleUrl_7\" hr'>,\n        # <Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'<a id=\"PostsList1_rpPosts_TitleUrl_8\" hr'>,\n        # <Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'<a id=\"PostsList1_rpPosts_TitleUrl_9\" hr'>]\n        #\n\n        for question in questions:\n            item = StackItem()\n            item['title'] = question.xpath(\n                'text()').extract()[0]\n            item['url'] = question.xpath(\n                '@href').extract()[0]\n            print item\n            yield item\n```\n# 测试\nok，上述工作基本完成，我们来测试一下\n```bash\nscrapy crawl stack\n```\n还可以这样测试一下，使用shell命令\n![用shell测试xpath](http://ww4.sinaimg.cn/large/692869a3gw1erjvd7qeqdj213z0j9h2h.jpg)\n妈蛋，我的竟然出错了，输出如下\n```\nchen@chen-P31:~/stack$ scrapy crawl stack\n2015-04-26 16:49:11+0800 [scrapy] INFO: Scrapy 0.24.6 started (bot: stack)\n2015-04-26 16:49:11+0800 [scrapy] INFO: Optional features available: ssl, http11\n2015-04-26 16:49:11+0800 [scrapy] INFO: Overridden settings: {'NEWSPIDER_MODULE': 'stack.spiders', 'SPIDER_MODULES': ['stack.spiders'], 'BOT_NAME': 'stack'}\nTraceback (most recent call last):\n  File \"/usr/local/bin/scrapy\", line 11, in <module>\n    sys.exit(execute())\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py\", line 143, in execute\n    _run_print_help(parser, _run_command, cmd, args, opts)\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py\", line 89, in _run_print_help\n    func(*a, **kw)\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py\", line 150, in _run_command\n    cmd.run(args, opts)\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/commands/crawl.py\", line 60, in run\n    self.crawler_process.start()\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\", line 92, in start\n    if self.start_crawling():\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\", line 124, in start_crawling\n    return self._start_crawler() is not None\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\", line 139, in _start_crawler\n    crawler.configure()\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\", line 46, in configure\n    self.extensions = ExtensionManager.from_crawler(self)\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/middleware.py\", line 50, in from_crawler\n    return cls.from_settings(crawler.settings, crawler)\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/middleware.py\", line 29, in from_settings\n    mwcls = load_object(clspath)\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/utils/misc.py\", line 42, in load_object\n    raise ImportError(\"Error loading object '%s': %s\" % (path, e))\nImportError: Error loading object 'scrapy.telnet.TelnetConsole': No module named conch\n```\n这是什么gui？\n还好我有stackoverflow，google一番，找到解决办法（其实这不是最后的解决办法，请往后看）\n网上说是twisted的问题，重新安装一下就好了，ok，走起\n```\nchen@chen-P31:~/stack$ sudo apt-get install twisted\nReading package lists... Done\nBuilding dependency tree       \nReading state information... Done\nE: Unable to locate package twisted\nchen@chen-P31:~/stack$ sudo apt-get install twisted.conch\nReading package lists... Done\nBuilding dependency tree       \nReading state information... Done\nNote, selecting 'python-twisted-conch' for regex 'twisted.conch'\nNote, selecting 'python2.7-twisted-conch' for regex 'twisted.conch'\nNote, selecting 'python-twisted-conch' instead of 'python2.7-twisted-conch'\nThe following packages were automatically installed and are no longer required:\n  cli-common dockmanager freepats gstreamer1.0-plugins-bad-faad\n  gstreamer1.0-plugins-bad-videoparsers libbotan-1.10-0:i386 libcdaudio1\n  libdbus-glib2.0-cil libdbus2.0-cil libdbusmenu-glib4:i386\n  libdbusmenu-gtk4:i386 libegl1-mesa:i386 libegl1-mesa-drivers:i386 libflite1\n  libfluidsynth1 libgbm1:i386 libgconf2.0-cil libgdiplus libgif4\n  libgles2-mesa:i386 libglib2.0-cil libgme0 libgmp10:i386\n  libgnome-desktop-2-17 libgnome-keyring1.0-cil libgnomedesktop2.20-cil\n  libgstreamer-plugins-bad0.10-0 libgstreamer-plugins-bad1.0-0 libgtk2.0-cil\n  libicu52:i386 libmimic0 libmms0 libmono-addins0.2-cil libmono-cairo4.0-cil\n  libmono-corlib4.0-cil libmono-corlib4.5-cil libmono-data-tds4.0-cil\n  libmono-i18n-west4.0-cil libmono-i18n4.0-cil libmono-posix4.0-cil\n  libmono-security4.0-cil libmono-sharpzip4.84-cil libmono-sqlite4.0-cil\n  libmono-system-configuration4.0-cil libmono-system-core4.0-cil\n  libmono-system-data4.0-cil libmono-system-drawing4.0-cil\n  libmono-system-enterpriseservices4.0-cil\n  libmono-system-runtime-serialization-formatters-soap4.0-cil\n  libmono-system-security4.0-cil libmono-system-transactions4.0-cil\n  libmono-system-web-applicationservices4.0-cil\n  libmono-system-web-services4.0-cil libmono-system-web4.0-cil\n  libmono-system-xml-linq4.0-cil libmono-system-xml4.0-cil\n  libmono-system4.0-cil libmono-web4.0-cil libmpg123-0 libnotify0.4-cil\n  libofa0 libopenal-data libopenal1 libopenvg1-mesa:i386 libqrencode3:i386\n  libqt5core5a:i386 libqt5dbus5:i386 libqt5gui5:i386 libqt5network5:i386\n  libqt5widgets5:i386 libqtshadowsocks:i386 librsvg2-2.18-cil libslv2-9\n  libsoundtouch0 libspandsp2 libsrtp0 libssl1.0.0:i386 libv4l-0:i386\n  libv4lconvert0:i386 libvo-aacenc0 libvo-amrwbenc0 libwayland-client0:i386\n  libwayland-egl1-mesa:i386 libwayland-server0:i386 libwildmidi-config\n  libwildmidi1 libwnck2.20-cil libxcb-icccm4:i386 libxcb-image0:i386\n  libxcb-keysyms1:i386 libxcb-randr0:i386 libxcb-render-util0:i386\n  libxcb-shape0:i386 libxcb-util0:i386 libxcb-xfixes0:i386 libxcb-xkb1:i386\n  libxkbcommon-x11-0:i386 libxkbcommon0:i386 libzbar0:i386 mono-4.0-gac\n  mono-gac mono-runtime mono-runtime-common mono-runtime-sgen python-mpd\n  python-mutagen python-twisted-names\nUse 'apt-get autoremove' to remove them.\nThe following extra packages will be installed:\n  python-pyasn1\nThe following NEW packages will be installed:\n  python-pyasn1 python-twisted-conch\n0 upgraded, 2 newly installed, 0 to remove and 6 not upgraded.\nNeed to get 286 kB of archives.\nAfter this operation, 1,793 kB of additional disk space will be used.\nDo you want to continue? [Y/n] \nGet:1 http://mirrors.ustc.edu.cn/ubuntu/ trusty/main python-pyasn1 all 0.1.7-1ubuntu2 [44.2 kB]\nGet:2 http://mirrors.ustc.edu.cn/ubuntu/ trusty/main python-twisted-conch all 1:13.2.0-1ubuntu1 [242 kB]\nFetched 286 kB in 0s (1,595 kB/s)         \nSelecting previously unselected package python-pyasn1.\n(Reading database ... 359746 files and directories currently installed.)\nPreparing to unpack .../python-pyasn1_0.1.7-1ubuntu2_all.deb ...\nUnpacking python-pyasn1 (0.1.7-1ubuntu2) ...\nSelecting previously unselected package python-twisted-conch.\nPreparing to unpack .../python-twisted-conch_1%3a13.2.0-1ubuntu1_all.deb ...\nUnpacking python-twisted-conch (1:13.2.0-1ubuntu1) ...\nProcessing triggers for doc-base (0.10.5) ...\nProcessing 1 added doc-base file...\nProcessing triggers for man-db (2.6.7.1-1ubuntu1) ...\nSetting up python-pyasn1 (0.1.7-1ubuntu2) ...\nSetting up python-twisted-conch (1:13.2.0-1ubuntu1) ...\n```\n安装总算完成，再试一次，妈蛋，又来一个新错误，这是什么gui？？？\n```bash\nchen@chen-P31:~/stack$ scrapy crawl stack\n2015-04-26 16:50:44+0800 [scrapy] INFO: Scrapy 0.24.6 started (bot: stack)\n2015-04-26 16:50:44+0800 [scrapy] INFO: Optional features available: ssl, http11\n2015-04-26 16:50:44+0800 [scrapy] INFO: Overridden settings: {'NEWSPIDER_MODULE': 'stack.spiders', 'SPIDER_MODULES': ['stack.spiders'], 'BOT_NAME': 'stack'}\nTraceback (most recent call last):\n  File \"/usr/local/bin/scrapy\", line 11, in <module>\n    sys.exit(execute())\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py\", line 143, in execute\n    _run_print_help(parser, _run_command, cmd, args, opts)\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py\", line 89, in _run_print_help\n    func(*a, **kw)\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py\", line 150, in _run_command\n    cmd.run(args, opts)\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/commands/crawl.py\", line 60, in run\n    self.crawler_process.start()\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\", line 92, in start\n    if self.start_crawling():\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\", line 124, in start_crawling\n    return self._start_crawler() is not None\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\", line 139, in _start_crawler\n    crawler.configure()\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\", line 46, in configure\n    self.extensions = ExtensionManager.from_crawler(self)\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/middleware.py\", line 50, in from_crawler\n    return cls.from_settings(crawler.settings, crawler)\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/middleware.py\", line 29, in from_settings\n    mwcls = load_object(clspath)\n  File \"/usr/local/lib/python2.7/dist-packages/scrapy/utils/misc.py\", line 42, in load_object\n    raise ImportError(\"Error loading object '%s': %s\" % (path, e))\nImportError: Error loading object 'scrapy.contrib.memusage.MemoryUsage': No module named mail.smtp\n```\n最后的最后，我在我们万能的github上找到[答案](https://github.com/scrapy/scrapy/issues/958)，原来是我们没有安装python-twisted，安装一下，世界都美好了\n```\nsudo apt-get install python-twisted\n```\n## 输出到文件\n为了更直观的看到结果，我们将结果输出到一个json文件\n```\nscrapy crawl stack -o items.json -t json\n```\n噢耶，第一个爬虫成功\n# 存储到mongodb\n接下来，我们做最后一件事，我们将结果存储到mongodb的数据库中\n在这里，我遇到一个大坑，无论是伯乐在线翻译的博客\n还是网上搜索到的一般教程，都是使用pymongo.Connection来连接数据库，可是妈蛋，你使用`pip install pymongo`安装的版本都是最新版本3.0.1，那个Connection的写法已经不支持，被丢弃了，擦。\n我们来看一下版本，我学到一个新命令`pip show pymongo`，用来查看某一个包的版本的。\n![查看pymongo版本](http://ww4.sinaimg.cn/large/692869a3gw1erjct36jnrj20df038dgf.jpg)\n在pymongo 3.0的版本中，已经不再支持pymongo.Connection，而是使用pymongo.MongoClient来替代。\n## 第一步\n创建一个用来保存我们抓取数据的数据库。打开`settings.py`,指定管道，然后加入数据库的相关设置\n```python\n\nBOT_NAME = 'stack'\n\nSPIDER_MODULES = ['stack.spiders']\nNEWSPIDER_MODULE = 'stack.spiders'\n\n# Crawl responsibly by identifying yourself (and your website) on the user-agent\n# USER_AGENT = 'stack (+http://www.yourdomain.com)'\n\nITEM_PIPELINES = ['stack.pipelines.MongoDBPipeline', ]\n# 关于mongodb的相关设置，包括服务器的ip，端口号，数据库名，表名，\n# 我也是第一次使用mongodb竟然不需要用户验证信息，而且这表名确实奇怪，叫做MONGODB_COLLECTION\nMONGODB_SERVER = \"localhost\"\nMONGODB_PORT = 27017\nMONGODB_DB = \"stackoverflow\"\nMONGODB_COLLECTION = \"questions\"\n\nDOWNLOAD_DELAY = 5  # 抓取的延迟\n\n```\n## 第二步\n我们已经能够爬取和解析html数据了，而且已经配置了数据库，接下来，我们通过`pipelines.py`中建立一个管道去连接这两个部分。\n我们首先来完成数据库的连接部分\n```python\nimport pymongo\n\nfrom scrapy.conf import settings\nfrom scrapy.exceptions import DropItem\nfrom scrapy import log\n\n\nclass MongoDBPipeline(object):\n\n    def __init__(self):\n        connection = pymongo.MongoClient(\n            settings['MONGODB_SERVER'],\n            settings['MONGODB_PORT']\n        )\n        db = connection[settings['MONGODB_DB']]\n        self.collection = db[settings['MONGODB_COLLECTION']]\n```\n接下来定义一个处理函数\n```python\n    def process_item(self, item, spider):\n        for data in item:\n            if not data:\n                raise DropItem(\"Missing data!\")\n        self.collection.update({'url': item['url']}, dict(item), upsert=True)\n        log.msg(\"Question added to MongoDB database!\",\n                level=log.DEBUG, spider=spider)\n        return item\n\n```\nok,搞定，我们再测试一把\n```python\nscrapy crawl stack\n```\n## 执行效果如下\n![mongodb数据库管理](http://ww1.sinaimg.cn/large/692869a3gw1erjv5to5w3j20w70g8wio.jpg)\n# 参考文献\n1 [ImportError: Error loading object 'scrapy.contrib.memusage.MemoryUsage': No module named mail.smtp](https://github.com/scrapy/scrapy/issues/958)\n2 <http://stackoverflow.com/questions/8671071/error-to-execute-python-scrappy-module>\n3 [Python下用Scrapy和MongoDB构建爬虫系统（1）](http://python.jobbole.com/81320/)\n","slug":"ubuntu-scrapy-stackoverflow","published":1,"updated":"2015-10-29T06:08:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ6f7yt6008wx8cd7u2n4h34","content":"<p>今天在伯乐在线上看到一篇翻译的博客，讲的是使用scrapy来抓取stackoverflow上的问题，刚好好久没用这个，于是一并捡起来玩一下。<br><a id=\"more\"></a></p>\n<h1 id=\"软件安装\"><a href=\"#软件安装\" class=\"headerlink\" title=\"软件安装\"></a>软件安装</h1><p>我的环境是：ubuntu 14.04 lts<br>需要安装相关软件</p>\n<h2 id=\"scrapy\"><a href=\"#scrapy\" class=\"headerlink\" title=\"scrapy\"></a>scrapy</h2><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip <span class=\"keyword\">install</span> Scrapy</div></pre></td></tr></table></figure>\n<h2 id=\"PyMongo\"><a href=\"#PyMongo\" class=\"headerlink\" title=\"PyMongo\"></a>PyMongo</h2><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip <span class=\"keyword\">install</span> pymongo</div></pre></td></tr></table></figure>\n<h2 id=\"Mongodb\"><a href=\"#Mongodb\" class=\"headerlink\" title=\"Mongodb\"></a>Mongodb</h2><p>上面安装的是python使用Mongodb的接口，很显然，我们要安装Mongodb才能使用<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get <span class=\"keyword\">install</span> mongodb-<span class=\"keyword\">server</span></div></pre></td></tr></table></figure></p>\n<p>至此，要使用的软件都已经安装完毕</p>\n<h1 id=\"使用scrapy新建工程\"><a href=\"#使用scrapy新建工程\" class=\"headerlink\" title=\"使用scrapy新建工程\"></a>使用scrapy新建工程</h1><p>使用scrapy新建工程很简单，如下所示，我们新建一个stack的项目，他会在你的当前目录新建一个stack文件夹<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">scrapy startproject <span class=\"built_in\">stack</span></div></pre></td></tr></table></figure></p>\n<p>并且会建成如下所示的目录树结构<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">chen@chen-P31:~$ tree stack</div><div class=\"line\">stack</div><div class=\"line\">├── stack</div><div class=\"line\">│   ├── __init__<span class=\"selector-class\">.py</span></div><div class=\"line\">│   ├── items<span class=\"selector-class\">.py</span></div><div class=\"line\">│   ├── pipelines<span class=\"selector-class\">.py</span></div><div class=\"line\">│   ├── settings<span class=\"selector-class\">.py</span></div><div class=\"line\">│   └── spiders</div><div class=\"line\">│       └── __init__<span class=\"selector-class\">.py</span></div><div class=\"line\">└── scrapy.cfg</div></pre></td></tr></table></figure></p>\n<p>接下来，我们修改items.py的内容，这个文件用于定义存储“容器”，用来存储将要抓取的数据。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> scrapy.item <span class=\"keyword\">import</span> Item,Field</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StackItem</span><span class=\"params\">(Item)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># define the fields for your item here like:</span></div><div class=\"line\">    <span class=\"comment\"># name = scrapy.Field()</span></div><div class=\"line\">    title = Field()<span class=\"comment\"># 我们添加两个字段，我们等会儿会抓取一个标题和url两个字段</span></div><div class=\"line\">    url = Field()</div></pre></td></tr></table></figure></p>\n<p>接着，还有一个很重要的东西，对，就是我们的蜘蛛，我们在spider目录下，新建一个stack_spider.py文件。顾名思义，这就是我们的蜘蛛。我们需要定义我们爬虫的起点，爬虫的规则等等<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> scrapy <span class=\"keyword\">import</span> Spider</div><div class=\"line\"><span class=\"keyword\">from</span> stack.items <span class=\"keyword\">import</span> StackItem  <span class=\"comment\"># 导入我们上面定义的容器类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StackSpider</span><span class=\"params\">(Spider)</span>:</span></div><div class=\"line\">    name = <span class=\"string\">'stack'</span>   <span class=\"comment\"># 定义我们爬虫的名字</span></div><div class=\"line\">    allowed_domains = [<span class=\"string\">\"cnblogs.com\"</span>]   <span class=\"comment\"># 规定爬虫爬取的域名</span></div><div class=\"line\">    start_urls = [<span class=\"string\">'http://www.cnblogs.com/geqianst/p/'</span>,]   <span class=\"comment\"># 爬虫工作的起点</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span><span class=\"comment\"># 爬虫用来做数据解析的</span></div><div class=\"line\">        questions = response.xpath(<span class=\"string\">'//div[@id=\"myposts\"]//a[@id]'</span>)</div><div class=\"line\">        <span class=\"comment\"># xpath选择器，这里的含义是取所有id为myposts的div，在它下面找所有带id的超链接a</span></div><div class=\"line\">        <span class=\"comment\"># 实际结果是这样的</span></div><div class=\"line\">        <span class=\"comment\"># [&lt;Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'&lt;a id=\"PostsList1_rpPosts_TitleUrl_0\" hr'&gt;,</span></div><div class=\"line\">        <span class=\"comment\"># &lt;Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'&lt;a id=\"PostsList1_rpPosts_TitleUrl_1\" hr'&gt;,</span></div><div class=\"line\">        <span class=\"comment\"># &lt;Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'&lt;a id=\"PostsList1_rpPosts_TitleUrl_2\" hr'&gt;,</span></div><div class=\"line\">        <span class=\"comment\"># &lt;Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'&lt;a id=\"PostsList1_rpPosts_TitleUrl_3\" hr'&gt;,</span></div><div class=\"line\">        <span class=\"comment\"># &lt;Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'&lt;a id=\"PostsList1_rpPosts_TitleUrl_4\" hr'&gt;,</span></div><div class=\"line\">        <span class=\"comment\"># &lt;Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'&lt;a id=\"PostsList1_rpPosts_TitleUrl_5\" hr'&gt;,</span></div><div class=\"line\">        <span class=\"comment\"># &lt;Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'&lt;a id=\"PostsList1_rpPosts_TitleUrl_6\" hr'&gt;,</span></div><div class=\"line\">        <span class=\"comment\"># &lt;Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'&lt;a id=\"PostsList1_rpPosts_TitleUrl_7\" hr'&gt;,</span></div><div class=\"line\">        <span class=\"comment\"># &lt;Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'&lt;a id=\"PostsList1_rpPosts_TitleUrl_8\" hr'&gt;,</span></div><div class=\"line\">        <span class=\"comment\"># &lt;Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'&lt;a id=\"PostsList1_rpPosts_TitleUrl_9\" hr'&gt;]</span></div><div class=\"line\">        <span class=\"comment\">#</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> question <span class=\"keyword\">in</span> questions:</div><div class=\"line\">            item = StackItem()</div><div class=\"line\">            item[<span class=\"string\">'title'</span>] = question.xpath(</div><div class=\"line\">                <span class=\"string\">'text()'</span>).extract()[<span class=\"number\">0</span>]</div><div class=\"line\">            item[<span class=\"string\">'url'</span>] = question.xpath(</div><div class=\"line\">                <span class=\"string\">'@href'</span>).extract()[<span class=\"number\">0</span>]</div><div class=\"line\">            <span class=\"keyword\">print</span> item</div><div class=\"line\">            <span class=\"keyword\">yield</span> item</div></pre></td></tr></table></figure></p>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>ok，上述工作基本完成，我们来测试一下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">scrapy crawl stack</div></pre></td></tr></table></figure></p>\n<p>还可以这样测试一下，使用shell命令<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1erjvd7qeqdj213z0j9h2h.jpg\" alt=\"用shell测试xpath\"><br>妈蛋，我的竟然出错了，输出如下<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">chen@chen-P31:~/<span class=\"keyword\">stack</span>$ scrapy crawl <span class=\"keyword\">stack</span></div><div class=\"line\">2015-04-26 16:49:11+0800 [scrapy] INFO: Scrapy 0.24.6 started (bot: <span class=\"keyword\">stack</span>)</div><div class=\"line\">2015-04-26 16:49:11+0800 [scrapy] INFO: Optional features available: ssl, http11</div><div class=\"line\">2015-04-26 16:49:11+0800 [scrapy] INFO: Overridden settings: &#123;'NEWSPIDER_MODULE': '<span class=\"keyword\">stack</span>.spiders', 'SPIDER_MODULES': ['<span class=\"keyword\">stack</span>.spiders'], 'BOT_NAME': '<span class=\"keyword\">stack</span>'&#125;</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  <span class=\"keyword\">File</span> <span class=\"string\">\"/usr/local/bin/scrapy\"</span>, <span class=\"keyword\">line</span> 11, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    sys.<span class=\"keyword\">exit</span>(execute())</div><div class=\"line\">  <span class=\"keyword\">File</span> <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py\"</span>, <span class=\"keyword\">line</span> 143, <span class=\"keyword\">in</span> execute</div><div class=\"line\">    _run_print_help(parser, _run_command, cmd, <span class=\"keyword\">args</span>, opts)</div><div class=\"line\">  <span class=\"keyword\">File</span> <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py\"</span>, <span class=\"keyword\">line</span> 89, <span class=\"keyword\">in</span> _run_print_help</div><div class=\"line\">    func(*a, **kw)</div><div class=\"line\">  <span class=\"keyword\">File</span> <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py\"</span>, <span class=\"keyword\">line</span> 150, <span class=\"keyword\">in</span> _run_command</div><div class=\"line\">    cmd.<span class=\"keyword\">run</span>(<span class=\"keyword\">args</span>, opts)</div><div class=\"line\">  <span class=\"keyword\">File</span> <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/commands/crawl.py\"</span>, <span class=\"keyword\">line</span> 60, <span class=\"keyword\">in</span> <span class=\"keyword\">run</span></div><div class=\"line\">    self.crawler_process.start()</div><div class=\"line\">  <span class=\"keyword\">File</span> <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\"</span>, <span class=\"keyword\">line</span> 92, <span class=\"keyword\">in</span> start</div><div class=\"line\">    <span class=\"keyword\">if</span> self.start_crawling():</div><div class=\"line\">  <span class=\"keyword\">File</span> <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\"</span>, <span class=\"keyword\">line</span> 124, <span class=\"keyword\">in</span> start_crawling</div><div class=\"line\">    <span class=\"keyword\">return</span> self._start_crawler() is not None</div><div class=\"line\">  <span class=\"keyword\">File</span> <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\"</span>, <span class=\"keyword\">line</span> 139, <span class=\"keyword\">in</span> _start_crawler</div><div class=\"line\">    crawler.configure()</div><div class=\"line\">  <span class=\"keyword\">File</span> <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\"</span>, <span class=\"keyword\">line</span> 46, <span class=\"keyword\">in</span> configure</div><div class=\"line\">    self.extensions = ExtensionManager.from_crawler(self)</div><div class=\"line\">  <span class=\"keyword\">File</span> <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/middleware.py\"</span>, <span class=\"keyword\">line</span> 50, <span class=\"keyword\">in</span> from_crawler</div><div class=\"line\">    <span class=\"keyword\">return</span> cls.from_settings(crawler.settings, crawler)</div><div class=\"line\">  <span class=\"keyword\">File</span> <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/middleware.py\"</span>, <span class=\"keyword\">line</span> 29, <span class=\"keyword\">in</span> from_settings</div><div class=\"line\">    mwcls = load_object(clspath)</div><div class=\"line\">  <span class=\"keyword\">File</span> <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/utils/misc.py\"</span>, <span class=\"keyword\">line</span> 42, <span class=\"keyword\">in</span> load_object</div><div class=\"line\">    raise ImportError(<span class=\"string\">\"Error loading object '%s': %s\"</span> % (path, <span class=\"keyword\">e</span>))</div><div class=\"line\">ImportError: <span class=\"keyword\">Error</span> loading object 'scrapy.telnet.TelnetConsole': <span class=\"keyword\">No</span> module named conch</div></pre></td></tr></table></figure></p>\n<p>这是什么gui？<br>还好我有stackoverflow，google一番，找到解决办法（其实这不是最后的解决办法，请往后看）<br>网上说是twisted的问题，重新安装一下就好了，ok，走起<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\">chen@chen-P31:~/stack$ sudo apt-<span class=\"built_in\">get</span> install twisted</div><div class=\"line\">Reading package lists... Done</div><div class=\"line\">Building dependency tree       </div><div class=\"line\">Reading state information... Done</div><div class=\"line\">E: Unable <span class=\"keyword\">to</span> locate package twisted</div><div class=\"line\">chen@chen-P31:~/stack$ sudo apt-<span class=\"built_in\">get</span> install twisted.conch</div><div class=\"line\">Reading package lists... Done</div><div class=\"line\">Building dependency tree       </div><div class=\"line\">Reading state information... Done</div><div class=\"line\">Note, selecting <span class=\"string\">'python-twisted-conch'</span> <span class=\"keyword\">for</span> regex <span class=\"string\">'twisted.conch'</span></div><div class=\"line\">Note, selecting <span class=\"string\">'python2.7-twisted-conch'</span> <span class=\"keyword\">for</span> regex <span class=\"string\">'twisted.conch'</span></div><div class=\"line\">Note, selecting <span class=\"string\">'python-twisted-conch'</span> instead of <span class=\"string\">'python2.7-twisted-conch'</span></div><div class=\"line\">The following packages were automatically installed <span class=\"built_in\">and</span> are <span class=\"keyword\">no</span> longer required:</div><div class=\"line\">  cli-common dockmanager freepats gstreamer1.<span class=\"number\">0</span>-plugins-<span class=\"keyword\">bad</span>-faad</div><div class=\"line\">  gstreamer1.<span class=\"number\">0</span>-plugins-<span class=\"keyword\">bad</span>-videoparsers libbotan-<span class=\"number\">1.10</span>-<span class=\"number\">0</span>:i386 libcdaudio1</div><div class=\"line\">  libdbus-glib2.<span class=\"number\">0</span>-cil libdbus2.<span class=\"number\">0</span>-cil libdbusmenu-glib4:i386</div><div class=\"line\">  libdbusmenu-gtk4:i386 libegl1-<span class=\"keyword\">mes</span><span class=\"variable\">a:i386</span> libegl1-mesa-driver<span class=\"variable\">s:i386</span> libflite1</div><div class=\"line\">  libfluidsynth1 libgbm1:i386 libgconf2.<span class=\"number\">0</span>-cil libgdiplus libgif4</div><div class=\"line\">  libgles2-<span class=\"keyword\">mes</span><span class=\"variable\">a:i386</span> libglib2.<span class=\"number\">0</span>-cil libgme0 libgmp10:i386</div><div class=\"line\">  libgnome-desktop-<span class=\"number\">2</span>-<span class=\"number\">17</span> libgnome-keyring1.<span class=\"number\">0</span>-cil libgnomedesktop2.<span class=\"number\">20</span>-cil</div><div class=\"line\">  libgstreamer-plugins-bad0.<span class=\"number\">10</span>-<span class=\"number\">0</span> libgstreamer-plugins-bad1.<span class=\"number\">0</span>-<span class=\"number\">0</span> libgtk2.<span class=\"number\">0</span>-cil</div><div class=\"line\">  libicu52:i386 libmimic0 libmms0 libmono-addins0.<span class=\"number\">2</span>-cil libmono-cairo4.<span class=\"number\">0</span>-cil</div><div class=\"line\">  libmono-corlib4.<span class=\"number\">0</span>-cil libmono-corlib4.<span class=\"number\">5</span>-cil libmono-data-tds4.<span class=\"number\">0</span>-cil</div><div class=\"line\">  libmono-i18n-west4.<span class=\"number\">0</span>-cil libmono-i18n4.<span class=\"number\">0</span>-cil libmono-posix4.<span class=\"number\">0</span>-cil</div><div class=\"line\">  libmono-security4.<span class=\"number\">0</span>-cil libmono-sharpzip4.<span class=\"number\">84</span>-cil libmono-sqlite4.<span class=\"number\">0</span>-cil</div><div class=\"line\">  libmono-<span class=\"built_in\">system</span>-configuration4.<span class=\"number\">0</span>-cil libmono-<span class=\"built_in\">system</span>-core4.<span class=\"number\">0</span>-cil</div><div class=\"line\">  libmono-<span class=\"built_in\">system</span>-data4.<span class=\"number\">0</span>-cil libmono-<span class=\"built_in\">system</span>-drawing4.<span class=\"number\">0</span>-cil</div><div class=\"line\">  libmono-<span class=\"built_in\">system</span>-enterpriseservices4.<span class=\"number\">0</span>-cil</div><div class=\"line\">  libmono-<span class=\"built_in\">system</span>-<span class=\"keyword\">runtime</span>-serialization-formatters-soap4.<span class=\"number\">0</span>-cil</div><div class=\"line\">  libmono-<span class=\"built_in\">system</span>-security4.<span class=\"number\">0</span>-cil libmono-<span class=\"built_in\">system</span>-transactions4.<span class=\"number\">0</span>-cil</div><div class=\"line\">  libmono-<span class=\"built_in\">system</span>-web-applicationservices4.<span class=\"number\">0</span>-cil</div><div class=\"line\">  libmono-<span class=\"built_in\">system</span>-web-services4.<span class=\"number\">0</span>-cil libmono-<span class=\"built_in\">system</span>-web4.<span class=\"number\">0</span>-cil</div><div class=\"line\">  libmono-<span class=\"built_in\">system</span>-xml-linq4.<span class=\"number\">0</span>-cil libmono-<span class=\"built_in\">system</span>-xml4.<span class=\"number\">0</span>-cil</div><div class=\"line\">  libmono-system4.<span class=\"number\">0</span>-cil libmono-web4.<span class=\"number\">0</span>-cil libmpg123-<span class=\"number\">0</span> libnotify0.<span class=\"number\">4</span>-cil</div><div class=\"line\">  libofa0 libopenal-data libopenal1 libopenvg1-<span class=\"keyword\">mes</span><span class=\"variable\">a:i386</span> libqrencode3:i386</div><div class=\"line\">  libqt5core5<span class=\"variable\">a:i386</span> libqt5dbus5:i386 libqt5gui5:i386 libqt5network5:i386</div><div class=\"line\">  libqt5widgets5:i386 libqtshadowsock<span class=\"variable\">s:i386</span> librsvg2-<span class=\"number\">2.18</span>-cil libslv2-<span class=\"number\">9</span></div><div class=\"line\">  libsoundtouch0 libspandsp2 libsrtp0 libssl1.<span class=\"number\">0.0</span>:i386 libv4l-<span class=\"number\">0</span>:i386</div><div class=\"line\">  libv4lconvert0:i386 libvo-aacenc0 libvo-amrwbenc0 libwayland-client0:i386</div><div class=\"line\">  libwayland-egl1-<span class=\"keyword\">mes</span><span class=\"variable\">a:i386</span> libwayland-server0:i386 libwildmidi-config</div><div class=\"line\">  libwildmidi1 libwnck2.<span class=\"number\">20</span>-cil libxcb-icccm4:i386 libxcb-image0:i386</div><div class=\"line\">  libxcb-keysyms1:i386 libxcb-randr0:i386 libxcb-render-util0:i386</div><div class=\"line\">  libxcb-shape0:i386 libxcb-util0:i386 libxcb-xfixes0:i386 libxcb-xkb1:i386</div><div class=\"line\">  libxkbcommon-x11-<span class=\"number\">0</span>:i386 libxkbcommon0:i386 libzbar0:i386 mono-<span class=\"number\">4.0</span>-gac</div><div class=\"line\">  mono-gac mono-<span class=\"keyword\">runtime</span> mono-<span class=\"keyword\">runtime</span>-common mono-<span class=\"keyword\">runtime</span>-sgen <span class=\"keyword\">python</span>-mpd</div><div class=\"line\">  <span class=\"keyword\">python</span>-mutagen <span class=\"keyword\">python</span>-twisted-names</div><div class=\"line\">Use <span class=\"string\">'apt-get autoremove'</span> <span class=\"keyword\">to</span> <span class=\"built_in\">remove</span> them.</div><div class=\"line\">The following extra packages will <span class=\"keyword\">be</span> installed:</div><div class=\"line\">  <span class=\"keyword\">python</span>-pyasn1</div><div class=\"line\">The following NEW packages will <span class=\"keyword\">be</span> installed:</div><div class=\"line\">  <span class=\"keyword\">python</span>-pyasn1 <span class=\"keyword\">python</span>-twisted-conch</div><div class=\"line\"><span class=\"number\">0</span> upgraded, <span class=\"number\">2</span> newly installed, <span class=\"number\">0</span> <span class=\"keyword\">to</span> <span class=\"built_in\">remove</span> <span class=\"built_in\">and</span> <span class=\"number\">6</span> not upgraded.</div><div class=\"line\">Need <span class=\"keyword\">to</span> <span class=\"built_in\">get</span> <span class=\"number\">286</span> kB of archives.</div><div class=\"line\">After this operation, <span class=\"number\">1</span>,<span class=\"number\">793</span> kB of additional disk space will <span class=\"keyword\">be</span> used.</div><div class=\"line\">Do you want <span class=\"keyword\">to</span> <span class=\"keyword\">continue</span>? [Y/n] </div><div class=\"line\">Ge<span class=\"variable\">t:1</span> http://mirrors.ustc.edu.<span class=\"keyword\">cn</span>/ubuntu/ trusty/main <span class=\"keyword\">python</span>-pyasn1 <span class=\"keyword\">all</span> <span class=\"number\">0.1</span>.<span class=\"number\">7</span>-<span class=\"number\">1</span>ubuntu2 [<span class=\"number\">44.2</span> kB]</div><div class=\"line\">Ge<span class=\"variable\">t:2</span> http://mirrors.ustc.edu.<span class=\"keyword\">cn</span>/ubuntu/ trusty/main <span class=\"keyword\">python</span>-twisted-conch <span class=\"keyword\">all</span> <span class=\"number\">1</span>:<span class=\"number\">13.2</span>.<span class=\"number\">0</span>-<span class=\"number\">1</span>ubuntu1 [<span class=\"number\">242</span> kB]</div><div class=\"line\">Fetched <span class=\"number\">286</span> kB in <span class=\"number\">0</span>s (<span class=\"number\">1</span>,<span class=\"number\">595</span> kB/s)         </div><div class=\"line\">Selecting previously unselected package <span class=\"keyword\">python</span>-pyasn1.</div><div class=\"line\">(Reading database ... <span class=\"number\">359746</span> <span class=\"keyword\">files</span> <span class=\"built_in\">and</span> directories currently installed.)</div><div class=\"line\">Preparing <span class=\"keyword\">to</span> unpack .../<span class=\"keyword\">python</span>-pyasn1_0.<span class=\"number\">1.7</span>-<span class=\"number\">1</span>ubuntu2_all.<span class=\"keyword\">deb</span> ...</div><div class=\"line\">Unpacking <span class=\"keyword\">python</span>-pyasn1 (<span class=\"number\">0.1</span>.<span class=\"number\">7</span>-<span class=\"number\">1</span>ubuntu2) ...</div><div class=\"line\">Selecting previously unselected package <span class=\"keyword\">python</span>-twisted-conch.</div><div class=\"line\">Preparing <span class=\"keyword\">to</span> unpack .../<span class=\"keyword\">python</span>-twisted-conch_1%<span class=\"number\">3</span>a13.<span class=\"number\">2.0</span>-<span class=\"number\">1</span>ubuntu1_all.<span class=\"keyword\">deb</span> ...</div><div class=\"line\">Unpacking <span class=\"keyword\">python</span>-twisted-conch (<span class=\"number\">1</span>:<span class=\"number\">13.2</span>.<span class=\"number\">0</span>-<span class=\"number\">1</span>ubuntu1) ...</div><div class=\"line\">Processing triggers <span class=\"keyword\">for</span> doc-base (<span class=\"number\">0.10</span>.<span class=\"number\">5</span>) ...</div><div class=\"line\">Processing <span class=\"number\">1</span> added doc-base <span class=\"keyword\">file</span>...</div><div class=\"line\">Processing triggers <span class=\"keyword\">for</span> man-db (<span class=\"number\">2.6</span>.<span class=\"number\">7.1</span>-<span class=\"number\">1</span>ubuntu1) ...</div><div class=\"line\">Setting <span class=\"keyword\">up</span> <span class=\"keyword\">python</span>-pyasn1 (<span class=\"number\">0.1</span>.<span class=\"number\">7</span>-<span class=\"number\">1</span>ubuntu2) ...</div><div class=\"line\">Setting <span class=\"keyword\">up</span> <span class=\"keyword\">python</span>-twisted-conch (<span class=\"number\">1</span>:<span class=\"number\">13.2</span>.<span class=\"number\">0</span>-<span class=\"number\">1</span>ubuntu1) ...</div></pre></td></tr></table></figure></p>\n<p>安装总算完成，再试一次，妈蛋，又来一个新错误，这是什么gui？？？<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">chen@chen-P31:~/stack$ scrapy crawl stack</div><div class=\"line\">2015-04-26 16:50:44+0800 [scrapy] INFO: Scrapy 0.24.6 started (bot: stack)</div><div class=\"line\">2015-04-26 16:50:44+0800 [scrapy] INFO: Optional features available: ssl, http11</div><div class=\"line\">2015-04-26 16:50:44+0800 [scrapy] INFO: Overridden settings: &#123;<span class=\"string\">'NEWSPIDER_MODULE'</span>: <span class=\"string\">'stack.spiders'</span>, <span class=\"string\">'SPIDER_MODULES'</span>: [<span class=\"string\">'stack.spiders'</span>], <span class=\"string\">'BOT_NAME'</span>: <span class=\"string\">'stack'</span>&#125;</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"/usr/local/bin/scrapy\"</span>, line 11, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    sys.exit(execute())</div><div class=\"line\">  File <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py\"</span>, line 143, <span class=\"keyword\">in</span> execute</div><div class=\"line\">    _run_print_help(parser, _run_command, cmd, args, opts)</div><div class=\"line\">  File <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py\"</span>, line 89, <span class=\"keyword\">in</span> _run_print_help</div><div class=\"line\">    func(*a, **kw)</div><div class=\"line\">  File <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py\"</span>, line 150, <span class=\"keyword\">in</span> _run_command</div><div class=\"line\">    cmd.run(args, opts)</div><div class=\"line\">  File <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/commands/crawl.py\"</span>, line 60, <span class=\"keyword\">in</span> run</div><div class=\"line\">    self.crawler_process.start()</div><div class=\"line\">  File <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\"</span>, line 92, <span class=\"keyword\">in</span> start</div><div class=\"line\">    <span class=\"keyword\">if</span> self.start_crawling():</div><div class=\"line\">  File <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\"</span>, line 124, <span class=\"keyword\">in</span> start_crawling</div><div class=\"line\">    <span class=\"built_in\">return</span> self._start_crawler() is not None</div><div class=\"line\">  File <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\"</span>, line 139, <span class=\"keyword\">in</span> _start_crawler</div><div class=\"line\">    crawler.configure()</div><div class=\"line\">  File <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\"</span>, line 46, <span class=\"keyword\">in</span> configure</div><div class=\"line\">    self.extensions = ExtensionManager.from_crawler(self)</div><div class=\"line\">  File <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/middleware.py\"</span>, line 50, <span class=\"keyword\">in</span> from_crawler</div><div class=\"line\">    <span class=\"built_in\">return</span> cls.from_settings(crawler.settings, crawler)</div><div class=\"line\">  File <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/middleware.py\"</span>, line 29, <span class=\"keyword\">in</span> from_settings</div><div class=\"line\">    mwcls = load_object(clspath)</div><div class=\"line\">  File <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/utils/misc.py\"</span>, line 42, <span class=\"keyword\">in</span> load_object</div><div class=\"line\">    raise ImportError(<span class=\"string\">\"Error loading object '%s': %s\"</span> % (path, e))</div><div class=\"line\">ImportError: Error loading object <span class=\"string\">'scrapy.contrib.memusage.MemoryUsage'</span>: No module named mail.smtp</div></pre></td></tr></table></figure></p>\n<p>最后的最后，我在我们万能的github上找到<a href=\"https://github.com/scrapy/scrapy/issues/958\" target=\"_blank\" rel=\"external\">答案</a>，原来是我们没有安装python-twisted，安装一下，世界都美好了<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> install <span class=\"keyword\">python</span>-twisted</div></pre></td></tr></table></figure></p>\n<h2 id=\"输出到文件\"><a href=\"#输出到文件\" class=\"headerlink\" title=\"输出到文件\"></a>输出到文件</h2><p>为了更直观的看到结果，我们将结果输出到一个json文件<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">scrapy </span>crawl stack -o items.<span class=\"keyword\">json </span>-t <span class=\"keyword\">json</span></div></pre></td></tr></table></figure></p>\n<p>噢耶，第一个爬虫成功</p>\n<h1 id=\"存储到mongodb\"><a href=\"#存储到mongodb\" class=\"headerlink\" title=\"存储到mongodb\"></a>存储到mongodb</h1><p>接下来，我们做最后一件事，我们将结果存储到mongodb的数据库中<br>在这里，我遇到一个大坑，无论是伯乐在线翻译的博客<br>还是网上搜索到的一般教程，都是使用pymongo.Connection来连接数据库，可是妈蛋，你使用<code>pip install pymongo</code>安装的版本都是最新版本3.0.1，那个Connection的写法已经不支持，被丢弃了，擦。<br>我们来看一下版本，我学到一个新命令<code>pip show pymongo</code>，用来查看某一个包的版本的。<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1erjct36jnrj20df038dgf.jpg\" alt=\"查看pymongo版本\"><br>在pymongo 3.0的版本中，已经不再支持pymongo.Connection，而是使用pymongo.MongoClient来替代。</p>\n<h2 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h2><p>创建一个用来保存我们抓取数据的数据库。打开<code>settings.py</code>,指定管道，然后加入数据库的相关设置<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">BOT_NAME = <span class=\"string\">'stack'</span></div><div class=\"line\"></div><div class=\"line\">SPIDER_MODULES = [<span class=\"string\">'stack.spiders'</span>]</div><div class=\"line\">NEWSPIDER_MODULE = <span class=\"string\">'stack.spiders'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span></div><div class=\"line\"><span class=\"comment\"># USER_AGENT = 'stack (+http://www.yourdomain.com)'</span></div><div class=\"line\"></div><div class=\"line\">ITEM_PIPELINES = [<span class=\"string\">'stack.pipelines.MongoDBPipeline'</span>, ]</div><div class=\"line\"><span class=\"comment\"># 关于mongodb的相关设置，包括服务器的ip，端口号，数据库名，表名，</span></div><div class=\"line\"><span class=\"comment\"># 我也是第一次使用mongodb竟然不需要用户验证信息，而且这表名确实奇怪，叫做MONGODB_COLLECTION</span></div><div class=\"line\">MONGODB_SERVER = <span class=\"string\">\"localhost\"</span></div><div class=\"line\">MONGODB_PORT = <span class=\"number\">27017</span></div><div class=\"line\">MONGODB_DB = <span class=\"string\">\"stackoverflow\"</span></div><div class=\"line\">MONGODB_COLLECTION = <span class=\"string\">\"questions\"</span></div><div class=\"line\"></div><div class=\"line\">DOWNLOAD_DELAY = <span class=\"number\">5</span>  <span class=\"comment\"># 抓取的延迟</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h2><p>我们已经能够爬取和解析html数据了，而且已经配置了数据库，接下来，我们通过<code>pipelines.py</code>中建立一个管道去连接这两个部分。<br>我们首先来完成数据库的连接部分<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> pymongo</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> scrapy.conf <span class=\"keyword\">import</span> settings</div><div class=\"line\"><span class=\"keyword\">from</span> scrapy.exceptions <span class=\"keyword\">import</span> DropItem</div><div class=\"line\"><span class=\"keyword\">from</span> scrapy <span class=\"keyword\">import</span> log</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MongoDBPipeline</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        connection = pymongo.MongoClient(</div><div class=\"line\">            settings[<span class=\"string\">'MONGODB_SERVER'</span>],</div><div class=\"line\">            settings[<span class=\"string\">'MONGODB_PORT'</span>]</div><div class=\"line\">        )</div><div class=\"line\">        db = connection[settings[<span class=\"string\">'MONGODB_DB'</span>]]</div><div class=\"line\">        self.collection = db[settings[<span class=\"string\">'MONGODB_COLLECTION'</span>]]</div></pre></td></tr></table></figure></p>\n<p>接下来定义一个处理函数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_item</span><span class=\"params\">(self, item, spider)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> item:</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</div><div class=\"line\">            <span class=\"keyword\">raise</span> DropItem(<span class=\"string\">\"Missing data!\"</span>)</div><div class=\"line\">    self.collection.update(&#123;<span class=\"string\">'url'</span>: item[<span class=\"string\">'url'</span>]&#125;, dict(item), upsert=<span class=\"keyword\">True</span>)</div><div class=\"line\">    log.msg(<span class=\"string\">\"Question added to MongoDB database!\"</span>,</div><div class=\"line\">            level=log.DEBUG, spider=spider)</div><div class=\"line\">    <span class=\"keyword\">return</span> item</div></pre></td></tr></table></figure></p>\n<p>ok,搞定，我们再测试一把<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">scrapy crawl stack</div></pre></td></tr></table></figure></p>\n<h2 id=\"执行效果如下\"><a href=\"#执行效果如下\" class=\"headerlink\" title=\"执行效果如下\"></a>执行效果如下</h2><p><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1erjv5to5w3j20w70g8wio.jpg\" alt=\"mongodb数据库管理\"></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"https://github.com/scrapy/scrapy/issues/958\" target=\"_blank\" rel=\"external\">ImportError: Error loading object ‘scrapy.contrib.memusage.MemoryUsage’: No module named mail.smtp</a><br>2 <a href=\"http://stackoverflow.com/questions/8671071/error-to-execute-python-scrappy-module\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/8671071/error-to-execute-python-scrappy-module</a><br>3 <a href=\"http://python.jobbole.com/81320/\" target=\"_blank\" rel=\"external\">Python下用Scrapy和MongoDB构建爬虫系统（1）</a></p>\n","excerpt":"<p>今天在伯乐在线上看到一篇翻译的博客，讲的是使用scrapy来抓取stackoverflow上的问题，刚好好久没用这个，于是一并捡起来玩一下。<br>","more":"</p>\n<h1 id=\"软件安装\"><a href=\"#软件安装\" class=\"headerlink\" title=\"软件安装\"></a>软件安装</h1><p>我的环境是：ubuntu 14.04 lts<br>需要安装相关软件</p>\n<h2 id=\"scrapy\"><a href=\"#scrapy\" class=\"headerlink\" title=\"scrapy\"></a>scrapy</h2><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip <span class=\"keyword\">install</span> Scrapy</div></pre></td></tr></table></figure>\n<h2 id=\"PyMongo\"><a href=\"#PyMongo\" class=\"headerlink\" title=\"PyMongo\"></a>PyMongo</h2><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip <span class=\"keyword\">install</span> pymongo</div></pre></td></tr></table></figure>\n<h2 id=\"Mongodb\"><a href=\"#Mongodb\" class=\"headerlink\" title=\"Mongodb\"></a>Mongodb</h2><p>上面安装的是python使用Mongodb的接口，很显然，我们要安装Mongodb才能使用<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get <span class=\"keyword\">install</span> mongodb-<span class=\"keyword\">server</span></div></pre></td></tr></table></figure></p>\n<p>至此，要使用的软件都已经安装完毕</p>\n<h1 id=\"使用scrapy新建工程\"><a href=\"#使用scrapy新建工程\" class=\"headerlink\" title=\"使用scrapy新建工程\"></a>使用scrapy新建工程</h1><p>使用scrapy新建工程很简单，如下所示，我们新建一个stack的项目，他会在你的当前目录新建一个stack文件夹<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">scrapy startproject <span class=\"built_in\">stack</span></div></pre></td></tr></table></figure></p>\n<p>并且会建成如下所示的目录树结构<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">chen@chen-P31:~$ tree stack</div><div class=\"line\">stack</div><div class=\"line\">├── stack</div><div class=\"line\">│   ├── __init__<span class=\"selector-class\">.py</span></div><div class=\"line\">│   ├── items<span class=\"selector-class\">.py</span></div><div class=\"line\">│   ├── pipelines<span class=\"selector-class\">.py</span></div><div class=\"line\">│   ├── settings<span class=\"selector-class\">.py</span></div><div class=\"line\">│   └── spiders</div><div class=\"line\">│       └── __init__<span class=\"selector-class\">.py</span></div><div class=\"line\">└── scrapy.cfg</div></pre></td></tr></table></figure></p>\n<p>接下来，我们修改items.py的内容，这个文件用于定义存储“容器”，用来存储将要抓取的数据。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> scrapy.item <span class=\"keyword\">import</span> Item,Field</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StackItem</span><span class=\"params\">(Item)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># define the fields for your item here like:</span></div><div class=\"line\">    <span class=\"comment\"># name = scrapy.Field()</span></div><div class=\"line\">    title = Field()<span class=\"comment\"># 我们添加两个字段，我们等会儿会抓取一个标题和url两个字段</span></div><div class=\"line\">    url = Field()</div></pre></td></tr></table></figure></p>\n<p>接着，还有一个很重要的东西，对，就是我们的蜘蛛，我们在spider目录下，新建一个stack_spider.py文件。顾名思义，这就是我们的蜘蛛。我们需要定义我们爬虫的起点，爬虫的规则等等<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> scrapy <span class=\"keyword\">import</span> Spider</div><div class=\"line\"><span class=\"keyword\">from</span> stack.items <span class=\"keyword\">import</span> StackItem  <span class=\"comment\"># 导入我们上面定义的容器类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StackSpider</span><span class=\"params\">(Spider)</span>:</span></div><div class=\"line\">    name = <span class=\"string\">'stack'</span>   <span class=\"comment\"># 定义我们爬虫的名字</span></div><div class=\"line\">    allowed_domains = [<span class=\"string\">\"cnblogs.com\"</span>]   <span class=\"comment\"># 规定爬虫爬取的域名</span></div><div class=\"line\">    start_urls = [<span class=\"string\">'http://www.cnblogs.com/geqianst/p/'</span>,]   <span class=\"comment\"># 爬虫工作的起点</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span><span class=\"comment\"># 爬虫用来做数据解析的</span></div><div class=\"line\">        questions = response.xpath(<span class=\"string\">'//div[@id=\"myposts\"]//a[@id]'</span>)</div><div class=\"line\">        <span class=\"comment\"># xpath选择器，这里的含义是取所有id为myposts的div，在它下面找所有带id的超链接a</span></div><div class=\"line\">        <span class=\"comment\"># 实际结果是这样的</span></div><div class=\"line\">        <span class=\"comment\"># [&lt;Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'&lt;a id=\"PostsList1_rpPosts_TitleUrl_0\" hr'&gt;,</span></div><div class=\"line\">        <span class=\"comment\"># &lt;Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'&lt;a id=\"PostsList1_rpPosts_TitleUrl_1\" hr'&gt;,</span></div><div class=\"line\">        <span class=\"comment\"># &lt;Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'&lt;a id=\"PostsList1_rpPosts_TitleUrl_2\" hr'&gt;,</span></div><div class=\"line\">        <span class=\"comment\"># &lt;Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'&lt;a id=\"PostsList1_rpPosts_TitleUrl_3\" hr'&gt;,</span></div><div class=\"line\">        <span class=\"comment\"># &lt;Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'&lt;a id=\"PostsList1_rpPosts_TitleUrl_4\" hr'&gt;,</span></div><div class=\"line\">        <span class=\"comment\"># &lt;Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'&lt;a id=\"PostsList1_rpPosts_TitleUrl_5\" hr'&gt;,</span></div><div class=\"line\">        <span class=\"comment\"># &lt;Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'&lt;a id=\"PostsList1_rpPosts_TitleUrl_6\" hr'&gt;,</span></div><div class=\"line\">        <span class=\"comment\"># &lt;Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'&lt;a id=\"PostsList1_rpPosts_TitleUrl_7\" hr'&gt;,</span></div><div class=\"line\">        <span class=\"comment\"># &lt;Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'&lt;a id=\"PostsList1_rpPosts_TitleUrl_8\" hr'&gt;,</span></div><div class=\"line\">        <span class=\"comment\"># &lt;Selector xpath='//div[@id=\"myposts\"]//a[@id]' data=u'&lt;a id=\"PostsList1_rpPosts_TitleUrl_9\" hr'&gt;]</span></div><div class=\"line\">        <span class=\"comment\">#</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> question <span class=\"keyword\">in</span> questions:</div><div class=\"line\">            item = StackItem()</div><div class=\"line\">            item[<span class=\"string\">'title'</span>] = question.xpath(</div><div class=\"line\">                <span class=\"string\">'text()'</span>).extract()[<span class=\"number\">0</span>]</div><div class=\"line\">            item[<span class=\"string\">'url'</span>] = question.xpath(</div><div class=\"line\">                <span class=\"string\">'@href'</span>).extract()[<span class=\"number\">0</span>]</div><div class=\"line\">            <span class=\"keyword\">print</span> item</div><div class=\"line\">            <span class=\"keyword\">yield</span> item</div></pre></td></tr></table></figure></p>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>ok，上述工作基本完成，我们来测试一下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">scrapy crawl stack</div></pre></td></tr></table></figure></p>\n<p>还可以这样测试一下，使用shell命令<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1erjvd7qeqdj213z0j9h2h.jpg\" alt=\"用shell测试xpath\"><br>妈蛋，我的竟然出错了，输出如下<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">chen@chen-P31:~/<span class=\"keyword\">stack</span>$ scrapy crawl <span class=\"keyword\">stack</span></div><div class=\"line\">2015-04-26 16:49:11+0800 [scrapy] INFO: Scrapy 0.24.6 started (bot: <span class=\"keyword\">stack</span>)</div><div class=\"line\">2015-04-26 16:49:11+0800 [scrapy] INFO: Optional features available: ssl, http11</div><div class=\"line\">2015-04-26 16:49:11+0800 [scrapy] INFO: Overridden settings: &#123;'NEWSPIDER_MODULE': '<span class=\"keyword\">stack</span>.spiders', 'SPIDER_MODULES': ['<span class=\"keyword\">stack</span>.spiders'], 'BOT_NAME': '<span class=\"keyword\">stack</span>'&#125;</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  <span class=\"keyword\">File</span> <span class=\"string\">\"/usr/local/bin/scrapy\"</span>, <span class=\"keyword\">line</span> 11, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    sys.<span class=\"keyword\">exit</span>(execute())</div><div class=\"line\">  <span class=\"keyword\">File</span> <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py\"</span>, <span class=\"keyword\">line</span> 143, <span class=\"keyword\">in</span> execute</div><div class=\"line\">    _run_print_help(parser, _run_command, cmd, <span class=\"keyword\">args</span>, opts)</div><div class=\"line\">  <span class=\"keyword\">File</span> <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py\"</span>, <span class=\"keyword\">line</span> 89, <span class=\"keyword\">in</span> _run_print_help</div><div class=\"line\">    func(*a, **kw)</div><div class=\"line\">  <span class=\"keyword\">File</span> <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py\"</span>, <span class=\"keyword\">line</span> 150, <span class=\"keyword\">in</span> _run_command</div><div class=\"line\">    cmd.<span class=\"keyword\">run</span>(<span class=\"keyword\">args</span>, opts)</div><div class=\"line\">  <span class=\"keyword\">File</span> <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/commands/crawl.py\"</span>, <span class=\"keyword\">line</span> 60, <span class=\"keyword\">in</span> <span class=\"keyword\">run</span></div><div class=\"line\">    self.crawler_process.start()</div><div class=\"line\">  <span class=\"keyword\">File</span> <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\"</span>, <span class=\"keyword\">line</span> 92, <span class=\"keyword\">in</span> start</div><div class=\"line\">    <span class=\"keyword\">if</span> self.start_crawling():</div><div class=\"line\">  <span class=\"keyword\">File</span> <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\"</span>, <span class=\"keyword\">line</span> 124, <span class=\"keyword\">in</span> start_crawling</div><div class=\"line\">    <span class=\"keyword\">return</span> self._start_crawler() is not None</div><div class=\"line\">  <span class=\"keyword\">File</span> <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\"</span>, <span class=\"keyword\">line</span> 139, <span class=\"keyword\">in</span> _start_crawler</div><div class=\"line\">    crawler.configure()</div><div class=\"line\">  <span class=\"keyword\">File</span> <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\"</span>, <span class=\"keyword\">line</span> 46, <span class=\"keyword\">in</span> configure</div><div class=\"line\">    self.extensions = ExtensionManager.from_crawler(self)</div><div class=\"line\">  <span class=\"keyword\">File</span> <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/middleware.py\"</span>, <span class=\"keyword\">line</span> 50, <span class=\"keyword\">in</span> from_crawler</div><div class=\"line\">    <span class=\"keyword\">return</span> cls.from_settings(crawler.settings, crawler)</div><div class=\"line\">  <span class=\"keyword\">File</span> <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/middleware.py\"</span>, <span class=\"keyword\">line</span> 29, <span class=\"keyword\">in</span> from_settings</div><div class=\"line\">    mwcls = load_object(clspath)</div><div class=\"line\">  <span class=\"keyword\">File</span> <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/utils/misc.py\"</span>, <span class=\"keyword\">line</span> 42, <span class=\"keyword\">in</span> load_object</div><div class=\"line\">    raise ImportError(<span class=\"string\">\"Error loading object '%s': %s\"</span> % (path, <span class=\"keyword\">e</span>))</div><div class=\"line\">ImportError: <span class=\"keyword\">Error</span> loading object 'scrapy.telnet.TelnetConsole': <span class=\"keyword\">No</span> module named conch</div></pre></td></tr></table></figure></p>\n<p>这是什么gui？<br>还好我有stackoverflow，google一番，找到解决办法（其实这不是最后的解决办法，请往后看）<br>网上说是twisted的问题，重新安装一下就好了，ok，走起<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\">chen@chen-P31:~/stack$ sudo apt-<span class=\"built_in\">get</span> install twisted</div><div class=\"line\">Reading package lists... Done</div><div class=\"line\">Building dependency tree       </div><div class=\"line\">Reading state information... Done</div><div class=\"line\">E: Unable <span class=\"keyword\">to</span> locate package twisted</div><div class=\"line\">chen@chen-P31:~/stack$ sudo apt-<span class=\"built_in\">get</span> install twisted.conch</div><div class=\"line\">Reading package lists... Done</div><div class=\"line\">Building dependency tree       </div><div class=\"line\">Reading state information... Done</div><div class=\"line\">Note, selecting <span class=\"string\">'python-twisted-conch'</span> <span class=\"keyword\">for</span> regex <span class=\"string\">'twisted.conch'</span></div><div class=\"line\">Note, selecting <span class=\"string\">'python2.7-twisted-conch'</span> <span class=\"keyword\">for</span> regex <span class=\"string\">'twisted.conch'</span></div><div class=\"line\">Note, selecting <span class=\"string\">'python-twisted-conch'</span> instead of <span class=\"string\">'python2.7-twisted-conch'</span></div><div class=\"line\">The following packages were automatically installed <span class=\"built_in\">and</span> are <span class=\"keyword\">no</span> longer required:</div><div class=\"line\">  cli-common dockmanager freepats gstreamer1.<span class=\"number\">0</span>-plugins-<span class=\"keyword\">bad</span>-faad</div><div class=\"line\">  gstreamer1.<span class=\"number\">0</span>-plugins-<span class=\"keyword\">bad</span>-videoparsers libbotan-<span class=\"number\">1.10</span>-<span class=\"number\">0</span>:i386 libcdaudio1</div><div class=\"line\">  libdbus-glib2.<span class=\"number\">0</span>-cil libdbus2.<span class=\"number\">0</span>-cil libdbusmenu-glib4:i386</div><div class=\"line\">  libdbusmenu-gtk4:i386 libegl1-<span class=\"keyword\">mes</span><span class=\"variable\">a:i386</span> libegl1-mesa-driver<span class=\"variable\">s:i386</span> libflite1</div><div class=\"line\">  libfluidsynth1 libgbm1:i386 libgconf2.<span class=\"number\">0</span>-cil libgdiplus libgif4</div><div class=\"line\">  libgles2-<span class=\"keyword\">mes</span><span class=\"variable\">a:i386</span> libglib2.<span class=\"number\">0</span>-cil libgme0 libgmp10:i386</div><div class=\"line\">  libgnome-desktop-<span class=\"number\">2</span>-<span class=\"number\">17</span> libgnome-keyring1.<span class=\"number\">0</span>-cil libgnomedesktop2.<span class=\"number\">20</span>-cil</div><div class=\"line\">  libgstreamer-plugins-bad0.<span class=\"number\">10</span>-<span class=\"number\">0</span> libgstreamer-plugins-bad1.<span class=\"number\">0</span>-<span class=\"number\">0</span> libgtk2.<span class=\"number\">0</span>-cil</div><div class=\"line\">  libicu52:i386 libmimic0 libmms0 libmono-addins0.<span class=\"number\">2</span>-cil libmono-cairo4.<span class=\"number\">0</span>-cil</div><div class=\"line\">  libmono-corlib4.<span class=\"number\">0</span>-cil libmono-corlib4.<span class=\"number\">5</span>-cil libmono-data-tds4.<span class=\"number\">0</span>-cil</div><div class=\"line\">  libmono-i18n-west4.<span class=\"number\">0</span>-cil libmono-i18n4.<span class=\"number\">0</span>-cil libmono-posix4.<span class=\"number\">0</span>-cil</div><div class=\"line\">  libmono-security4.<span class=\"number\">0</span>-cil libmono-sharpzip4.<span class=\"number\">84</span>-cil libmono-sqlite4.<span class=\"number\">0</span>-cil</div><div class=\"line\">  libmono-<span class=\"built_in\">system</span>-configuration4.<span class=\"number\">0</span>-cil libmono-<span class=\"built_in\">system</span>-core4.<span class=\"number\">0</span>-cil</div><div class=\"line\">  libmono-<span class=\"built_in\">system</span>-data4.<span class=\"number\">0</span>-cil libmono-<span class=\"built_in\">system</span>-drawing4.<span class=\"number\">0</span>-cil</div><div class=\"line\">  libmono-<span class=\"built_in\">system</span>-enterpriseservices4.<span class=\"number\">0</span>-cil</div><div class=\"line\">  libmono-<span class=\"built_in\">system</span>-<span class=\"keyword\">runtime</span>-serialization-formatters-soap4.<span class=\"number\">0</span>-cil</div><div class=\"line\">  libmono-<span class=\"built_in\">system</span>-security4.<span class=\"number\">0</span>-cil libmono-<span class=\"built_in\">system</span>-transactions4.<span class=\"number\">0</span>-cil</div><div class=\"line\">  libmono-<span class=\"built_in\">system</span>-web-applicationservices4.<span class=\"number\">0</span>-cil</div><div class=\"line\">  libmono-<span class=\"built_in\">system</span>-web-services4.<span class=\"number\">0</span>-cil libmono-<span class=\"built_in\">system</span>-web4.<span class=\"number\">0</span>-cil</div><div class=\"line\">  libmono-<span class=\"built_in\">system</span>-xml-linq4.<span class=\"number\">0</span>-cil libmono-<span class=\"built_in\">system</span>-xml4.<span class=\"number\">0</span>-cil</div><div class=\"line\">  libmono-system4.<span class=\"number\">0</span>-cil libmono-web4.<span class=\"number\">0</span>-cil libmpg123-<span class=\"number\">0</span> libnotify0.<span class=\"number\">4</span>-cil</div><div class=\"line\">  libofa0 libopenal-data libopenal1 libopenvg1-<span class=\"keyword\">mes</span><span class=\"variable\">a:i386</span> libqrencode3:i386</div><div class=\"line\">  libqt5core5<span class=\"variable\">a:i386</span> libqt5dbus5:i386 libqt5gui5:i386 libqt5network5:i386</div><div class=\"line\">  libqt5widgets5:i386 libqtshadowsock<span class=\"variable\">s:i386</span> librsvg2-<span class=\"number\">2.18</span>-cil libslv2-<span class=\"number\">9</span></div><div class=\"line\">  libsoundtouch0 libspandsp2 libsrtp0 libssl1.<span class=\"number\">0.0</span>:i386 libv4l-<span class=\"number\">0</span>:i386</div><div class=\"line\">  libv4lconvert0:i386 libvo-aacenc0 libvo-amrwbenc0 libwayland-client0:i386</div><div class=\"line\">  libwayland-egl1-<span class=\"keyword\">mes</span><span class=\"variable\">a:i386</span> libwayland-server0:i386 libwildmidi-config</div><div class=\"line\">  libwildmidi1 libwnck2.<span class=\"number\">20</span>-cil libxcb-icccm4:i386 libxcb-image0:i386</div><div class=\"line\">  libxcb-keysyms1:i386 libxcb-randr0:i386 libxcb-render-util0:i386</div><div class=\"line\">  libxcb-shape0:i386 libxcb-util0:i386 libxcb-xfixes0:i386 libxcb-xkb1:i386</div><div class=\"line\">  libxkbcommon-x11-<span class=\"number\">0</span>:i386 libxkbcommon0:i386 libzbar0:i386 mono-<span class=\"number\">4.0</span>-gac</div><div class=\"line\">  mono-gac mono-<span class=\"keyword\">runtime</span> mono-<span class=\"keyword\">runtime</span>-common mono-<span class=\"keyword\">runtime</span>-sgen <span class=\"keyword\">python</span>-mpd</div><div class=\"line\">  <span class=\"keyword\">python</span>-mutagen <span class=\"keyword\">python</span>-twisted-names</div><div class=\"line\">Use <span class=\"string\">'apt-get autoremove'</span> <span class=\"keyword\">to</span> <span class=\"built_in\">remove</span> them.</div><div class=\"line\">The following extra packages will <span class=\"keyword\">be</span> installed:</div><div class=\"line\">  <span class=\"keyword\">python</span>-pyasn1</div><div class=\"line\">The following NEW packages will <span class=\"keyword\">be</span> installed:</div><div class=\"line\">  <span class=\"keyword\">python</span>-pyasn1 <span class=\"keyword\">python</span>-twisted-conch</div><div class=\"line\"><span class=\"number\">0</span> upgraded, <span class=\"number\">2</span> newly installed, <span class=\"number\">0</span> <span class=\"keyword\">to</span> <span class=\"built_in\">remove</span> <span class=\"built_in\">and</span> <span class=\"number\">6</span> not upgraded.</div><div class=\"line\">Need <span class=\"keyword\">to</span> <span class=\"built_in\">get</span> <span class=\"number\">286</span> kB of archives.</div><div class=\"line\">After this operation, <span class=\"number\">1</span>,<span class=\"number\">793</span> kB of additional disk space will <span class=\"keyword\">be</span> used.</div><div class=\"line\">Do you want <span class=\"keyword\">to</span> <span class=\"keyword\">continue</span>? [Y/n] </div><div class=\"line\">Ge<span class=\"variable\">t:1</span> http://mirrors.ustc.edu.<span class=\"keyword\">cn</span>/ubuntu/ trusty/main <span class=\"keyword\">python</span>-pyasn1 <span class=\"keyword\">all</span> <span class=\"number\">0.1</span>.<span class=\"number\">7</span>-<span class=\"number\">1</span>ubuntu2 [<span class=\"number\">44.2</span> kB]</div><div class=\"line\">Ge<span class=\"variable\">t:2</span> http://mirrors.ustc.edu.<span class=\"keyword\">cn</span>/ubuntu/ trusty/main <span class=\"keyword\">python</span>-twisted-conch <span class=\"keyword\">all</span> <span class=\"number\">1</span>:<span class=\"number\">13.2</span>.<span class=\"number\">0</span>-<span class=\"number\">1</span>ubuntu1 [<span class=\"number\">242</span> kB]</div><div class=\"line\">Fetched <span class=\"number\">286</span> kB in <span class=\"number\">0</span>s (<span class=\"number\">1</span>,<span class=\"number\">595</span> kB/s)         </div><div class=\"line\">Selecting previously unselected package <span class=\"keyword\">python</span>-pyasn1.</div><div class=\"line\">(Reading database ... <span class=\"number\">359746</span> <span class=\"keyword\">files</span> <span class=\"built_in\">and</span> directories currently installed.)</div><div class=\"line\">Preparing <span class=\"keyword\">to</span> unpack .../<span class=\"keyword\">python</span>-pyasn1_0.<span class=\"number\">1.7</span>-<span class=\"number\">1</span>ubuntu2_all.<span class=\"keyword\">deb</span> ...</div><div class=\"line\">Unpacking <span class=\"keyword\">python</span>-pyasn1 (<span class=\"number\">0.1</span>.<span class=\"number\">7</span>-<span class=\"number\">1</span>ubuntu2) ...</div><div class=\"line\">Selecting previously unselected package <span class=\"keyword\">python</span>-twisted-conch.</div><div class=\"line\">Preparing <span class=\"keyword\">to</span> unpack .../<span class=\"keyword\">python</span>-twisted-conch_1%<span class=\"number\">3</span>a13.<span class=\"number\">2.0</span>-<span class=\"number\">1</span>ubuntu1_all.<span class=\"keyword\">deb</span> ...</div><div class=\"line\">Unpacking <span class=\"keyword\">python</span>-twisted-conch (<span class=\"number\">1</span>:<span class=\"number\">13.2</span>.<span class=\"number\">0</span>-<span class=\"number\">1</span>ubuntu1) ...</div><div class=\"line\">Processing triggers <span class=\"keyword\">for</span> doc-base (<span class=\"number\">0.10</span>.<span class=\"number\">5</span>) ...</div><div class=\"line\">Processing <span class=\"number\">1</span> added doc-base <span class=\"keyword\">file</span>...</div><div class=\"line\">Processing triggers <span class=\"keyword\">for</span> man-db (<span class=\"number\">2.6</span>.<span class=\"number\">7.1</span>-<span class=\"number\">1</span>ubuntu1) ...</div><div class=\"line\">Setting <span class=\"keyword\">up</span> <span class=\"keyword\">python</span>-pyasn1 (<span class=\"number\">0.1</span>.<span class=\"number\">7</span>-<span class=\"number\">1</span>ubuntu2) ...</div><div class=\"line\">Setting <span class=\"keyword\">up</span> <span class=\"keyword\">python</span>-twisted-conch (<span class=\"number\">1</span>:<span class=\"number\">13.2</span>.<span class=\"number\">0</span>-<span class=\"number\">1</span>ubuntu1) ...</div></pre></td></tr></table></figure></p>\n<p>安装总算完成，再试一次，妈蛋，又来一个新错误，这是什么gui？？？<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">chen@chen-P31:~/stack$ scrapy crawl stack</div><div class=\"line\">2015-04-26 16:50:44+0800 [scrapy] INFO: Scrapy 0.24.6 started (bot: stack)</div><div class=\"line\">2015-04-26 16:50:44+0800 [scrapy] INFO: Optional features available: ssl, http11</div><div class=\"line\">2015-04-26 16:50:44+0800 [scrapy] INFO: Overridden settings: &#123;<span class=\"string\">'NEWSPIDER_MODULE'</span>: <span class=\"string\">'stack.spiders'</span>, <span class=\"string\">'SPIDER_MODULES'</span>: [<span class=\"string\">'stack.spiders'</span>], <span class=\"string\">'BOT_NAME'</span>: <span class=\"string\">'stack'</span>&#125;</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"/usr/local/bin/scrapy\"</span>, line 11, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    sys.exit(execute())</div><div class=\"line\">  File <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py\"</span>, line 143, <span class=\"keyword\">in</span> execute</div><div class=\"line\">    _run_print_help(parser, _run_command, cmd, args, opts)</div><div class=\"line\">  File <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py\"</span>, line 89, <span class=\"keyword\">in</span> _run_print_help</div><div class=\"line\">    func(*a, **kw)</div><div class=\"line\">  File <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/cmdline.py\"</span>, line 150, <span class=\"keyword\">in</span> _run_command</div><div class=\"line\">    cmd.run(args, opts)</div><div class=\"line\">  File <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/commands/crawl.py\"</span>, line 60, <span class=\"keyword\">in</span> run</div><div class=\"line\">    self.crawler_process.start()</div><div class=\"line\">  File <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\"</span>, line 92, <span class=\"keyword\">in</span> start</div><div class=\"line\">    <span class=\"keyword\">if</span> self.start_crawling():</div><div class=\"line\">  File <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\"</span>, line 124, <span class=\"keyword\">in</span> start_crawling</div><div class=\"line\">    <span class=\"built_in\">return</span> self._start_crawler() is not None</div><div class=\"line\">  File <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\"</span>, line 139, <span class=\"keyword\">in</span> _start_crawler</div><div class=\"line\">    crawler.configure()</div><div class=\"line\">  File <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/crawler.py\"</span>, line 46, <span class=\"keyword\">in</span> configure</div><div class=\"line\">    self.extensions = ExtensionManager.from_crawler(self)</div><div class=\"line\">  File <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/middleware.py\"</span>, line 50, <span class=\"keyword\">in</span> from_crawler</div><div class=\"line\">    <span class=\"built_in\">return</span> cls.from_settings(crawler.settings, crawler)</div><div class=\"line\">  File <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/middleware.py\"</span>, line 29, <span class=\"keyword\">in</span> from_settings</div><div class=\"line\">    mwcls = load_object(clspath)</div><div class=\"line\">  File <span class=\"string\">\"/usr/local/lib/python2.7/dist-packages/scrapy/utils/misc.py\"</span>, line 42, <span class=\"keyword\">in</span> load_object</div><div class=\"line\">    raise ImportError(<span class=\"string\">\"Error loading object '%s': %s\"</span> % (path, e))</div><div class=\"line\">ImportError: Error loading object <span class=\"string\">'scrapy.contrib.memusage.MemoryUsage'</span>: No module named mail.smtp</div></pre></td></tr></table></figure></p>\n<p>最后的最后，我在我们万能的github上找到<a href=\"https://github.com/scrapy/scrapy/issues/958\">答案</a>，原来是我们没有安装python-twisted，安装一下，世界都美好了<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> install <span class=\"keyword\">python</span>-twisted</div></pre></td></tr></table></figure></p>\n<h2 id=\"输出到文件\"><a href=\"#输出到文件\" class=\"headerlink\" title=\"输出到文件\"></a>输出到文件</h2><p>为了更直观的看到结果，我们将结果输出到一个json文件<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">scrapy </span>crawl stack -o items.<span class=\"keyword\">json </span>-t <span class=\"keyword\">json</span></div></pre></td></tr></table></figure></p>\n<p>噢耶，第一个爬虫成功</p>\n<h1 id=\"存储到mongodb\"><a href=\"#存储到mongodb\" class=\"headerlink\" title=\"存储到mongodb\"></a>存储到mongodb</h1><p>接下来，我们做最后一件事，我们将结果存储到mongodb的数据库中<br>在这里，我遇到一个大坑，无论是伯乐在线翻译的博客<br>还是网上搜索到的一般教程，都是使用pymongo.Connection来连接数据库，可是妈蛋，你使用<code>pip install pymongo</code>安装的版本都是最新版本3.0.1，那个Connection的写法已经不支持，被丢弃了，擦。<br>我们来看一下版本，我学到一个新命令<code>pip show pymongo</code>，用来查看某一个包的版本的。<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1erjct36jnrj20df038dgf.jpg\" alt=\"查看pymongo版本\"><br>在pymongo 3.0的版本中，已经不再支持pymongo.Connection，而是使用pymongo.MongoClient来替代。</p>\n<h2 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h2><p>创建一个用来保存我们抓取数据的数据库。打开<code>settings.py</code>,指定管道，然后加入数据库的相关设置<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">BOT_NAME = <span class=\"string\">'stack'</span></div><div class=\"line\"></div><div class=\"line\">SPIDER_MODULES = [<span class=\"string\">'stack.spiders'</span>]</div><div class=\"line\">NEWSPIDER_MODULE = <span class=\"string\">'stack.spiders'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span></div><div class=\"line\"><span class=\"comment\"># USER_AGENT = 'stack (+http://www.yourdomain.com)'</span></div><div class=\"line\"></div><div class=\"line\">ITEM_PIPELINES = [<span class=\"string\">'stack.pipelines.MongoDBPipeline'</span>, ]</div><div class=\"line\"><span class=\"comment\"># 关于mongodb的相关设置，包括服务器的ip，端口号，数据库名，表名，</span></div><div class=\"line\"><span class=\"comment\"># 我也是第一次使用mongodb竟然不需要用户验证信息，而且这表名确实奇怪，叫做MONGODB_COLLECTION</span></div><div class=\"line\">MONGODB_SERVER = <span class=\"string\">\"localhost\"</span></div><div class=\"line\">MONGODB_PORT = <span class=\"number\">27017</span></div><div class=\"line\">MONGODB_DB = <span class=\"string\">\"stackoverflow\"</span></div><div class=\"line\">MONGODB_COLLECTION = <span class=\"string\">\"questions\"</span></div><div class=\"line\"></div><div class=\"line\">DOWNLOAD_DELAY = <span class=\"number\">5</span>  <span class=\"comment\"># 抓取的延迟</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h2><p>我们已经能够爬取和解析html数据了，而且已经配置了数据库，接下来，我们通过<code>pipelines.py</code>中建立一个管道去连接这两个部分。<br>我们首先来完成数据库的连接部分<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> pymongo</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> scrapy.conf <span class=\"keyword\">import</span> settings</div><div class=\"line\"><span class=\"keyword\">from</span> scrapy.exceptions <span class=\"keyword\">import</span> DropItem</div><div class=\"line\"><span class=\"keyword\">from</span> scrapy <span class=\"keyword\">import</span> log</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MongoDBPipeline</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        connection = pymongo.MongoClient(</div><div class=\"line\">            settings[<span class=\"string\">'MONGODB_SERVER'</span>],</div><div class=\"line\">            settings[<span class=\"string\">'MONGODB_PORT'</span>]</div><div class=\"line\">        )</div><div class=\"line\">        db = connection[settings[<span class=\"string\">'MONGODB_DB'</span>]]</div><div class=\"line\">        self.collection = db[settings[<span class=\"string\">'MONGODB_COLLECTION'</span>]]</div></pre></td></tr></table></figure></p>\n<p>接下来定义一个处理函数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_item</span><span class=\"params\">(self, item, spider)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> item:</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</div><div class=\"line\">            <span class=\"keyword\">raise</span> DropItem(<span class=\"string\">\"Missing data!\"</span>)</div><div class=\"line\">    self.collection.update(&#123;<span class=\"string\">'url'</span>: item[<span class=\"string\">'url'</span>]&#125;, dict(item), upsert=<span class=\"keyword\">True</span>)</div><div class=\"line\">    log.msg(<span class=\"string\">\"Question added to MongoDB database!\"</span>,</div><div class=\"line\">            level=log.DEBUG, spider=spider)</div><div class=\"line\">    <span class=\"keyword\">return</span> item</div></pre></td></tr></table></figure></p>\n<p>ok,搞定，我们再测试一把<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">scrapy crawl stack</div></pre></td></tr></table></figure></p>\n<h2 id=\"执行效果如下\"><a href=\"#执行效果如下\" class=\"headerlink\" title=\"执行效果如下\"></a>执行效果如下</h2><p><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1erjv5to5w3j20w70g8wio.jpg\" alt=\"mongodb数据库管理\"></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>1 <a href=\"https://github.com/scrapy/scrapy/issues/958\">ImportError: Error loading object ‘scrapy.contrib.memusage.MemoryUsage’: No module named mail.smtp</a><br>2 <a href=\"http://stackoverflow.com/questions/8671071/error-to-execute-python-scrappy-module\">http://stackoverflow.com/questions/8671071/error-to-execute-python-scrappy-module</a><br>3 <a href=\"http://python.jobbole.com/81320/\">Python下用Scrapy和MongoDB构建爬虫系统（1）</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"civ6f7ynp0001x8cd0u9t256g","category_id":"civ6f7ynx0003x8cdr6is9z27","_id":"civ6f7yod000bx8cdcfvr33aj"},{"post_id":"civ6f7ynv0002x8cdibl0yj5q","category_id":"civ6f7yo90008x8cdhldmkh85","_id":"civ6f7yok000ix8cdkbb7ub8d"},{"post_id":"civ6f7yo10005x8cdebs8ndlf","category_id":"civ6f7yo90008x8cdhldmkh85","_id":"civ6f7yon000ox8cdrz8vrehr"},{"post_id":"civ6f7yo40006x8cd7wpt0u3u","category_id":"civ6f7yok000kx8cd8cdys3ga","_id":"civ6f7yos000tx8cd1jfhxbck"},{"post_id":"civ6f7yo70007x8cdsbvuk8jb","category_id":"civ6f7yon000px8cd3jx2nqp5","_id":"civ6f7yoy000yx8cd9t1jkjpx"},{"post_id":"civ6f7yoq000sx8cd6bve6lsp","category_id":"civ6f7ynx0003x8cdr6is9z27","_id":"civ6f7yp00012x8cde8bslxos"},{"post_id":"civ6f7yoa000ax8cda98axy7j","category_id":"civ6f7yon000px8cd3jx2nqp5","_id":"civ6f7yp30015x8cduef4hlwt"},{"post_id":"civ6f7yoe000cx8cd67q5es3b","category_id":"civ6f7yon000px8cd3jx2nqp5","_id":"civ6f7yp9001cx8cd49j8xvm2"},{"post_id":"civ6f7yog000fx8cd39ly87tv","category_id":"civ6f7yon000px8cd3jx2nqp5","_id":"civ6f7ypg001ix8cddfwr9dty"},{"post_id":"civ6f7yoj000hx8cdo7hm709g","category_id":"civ6f7yp9001dx8cd9cght1of","_id":"civ6f7ypn001ox8cdb1cu47ps"},{"post_id":"civ6f7yph001jx8cdwps9ffaf","category_id":"civ6f7ynx0003x8cdr6is9z27","_id":"civ6f7ypr001sx8cdd6z5uxd1"},{"post_id":"civ6f7ypl001mx8cd5dc4shje","category_id":"civ6f7ypi001kx8cd8bphi0gr","_id":"civ6f7ypt001wx8cdljszz96m"},{"post_id":"civ6f7yol000mx8cdf186kgo8","category_id":"civ6f7ypi001kx8cd8bphi0gr","_id":"civ6f7ypu0020x8cd99yx8ghw"},{"post_id":"civ6f7ypo001px8cdhym7rv7v","category_id":"civ6f7ynx0003x8cdr6is9z27","_id":"civ6f7ypx0024x8cdwzw02gv2"},{"post_id":"civ6f7ypr001ux8cdtk0srjol","category_id":"civ6f7ynx0003x8cdr6is9z27","_id":"civ6f7yq10028x8cdx53jjguw"},{"post_id":"civ6f7yom000nx8cdqgf30lbk","category_id":"civ6f7yp9001dx8cd9cght1of","_id":"civ6f7yq2002cx8cd431cip6t"},{"post_id":"civ6f7ypv0021x8cd14r5sxdz","category_id":"civ6f7ynx0003x8cdr6is9z27","_id":"civ6f7yq5002gx8cd9ztgz97m"},{"post_id":"civ6f7yoo000rx8cdolcw2wir","category_id":"civ6f7ypu001yx8cde22gf7m0","_id":"civ6f7yq8002jx8cdi7gyueir"},{"post_id":"civ6f7yot000vx8cditp16qpo","category_id":"civ6f7ypi001kx8cd8bphi0gr","_id":"civ6f7yqb002nx8cdnzdkfsdb"},{"post_id":"civ6f7yq3002dx8cd94yvp3c7","category_id":"civ6f7yp9001dx8cd9cght1of","_id":"civ6f7yqd002qx8cdbp0a3d7o"},{"post_id":"civ6f7yox000xx8cdxqecq8nk","category_id":"civ6f7ypi001kx8cd8bphi0gr","_id":"civ6f7yqf002vx8cdonjolg53"},{"post_id":"civ6f7yoz0010x8cdynbhqhll","category_id":"civ6f7ypi001kx8cd8bphi0gr","_id":"civ6f7yqj0030x8cdtb86fu5k"},{"post_id":"civ6f7yp10013x8cd1f93zr29","category_id":"civ6f7ypi001kx8cd8bphi0gr","_id":"civ6f7yqn0034x8cd7vy98a16"},{"post_id":"civ6f7yp40017x8cdioim2gxw","category_id":"civ6f7ypi001kx8cd8bphi0gr","_id":"civ6f7yqq0039x8cdel83w48u"},{"post_id":"civ6f7yp6001ax8cdbv9kwxl6","category_id":"civ6f7yqo0036x8cdy7x3l0pq","_id":"civ6f7yqs003ex8cdsa2umti3"},{"post_id":"civ6f7ypd001hx8cd5xj2mmsb","category_id":"civ6f7ypu001yx8cde22gf7m0","_id":"civ6f7yqt003gx8cdugaknnpm"},{"post_id":"civ6f7ypt001xx8cdtyo6qtfp","category_id":"civ6f7yqs003fx8cdt3te6z9p","_id":"civ6f7yqu003jx8cdi5o5xym3"},{"post_id":"civ6f7yq10029x8cdd2mscwos","category_id":"civ6f7yqs003fx8cdt3te6z9p","_id":"civ6f7yqv003mx8cdtqe6gvh5"},{"post_id":"civ6f7yq5002hx8cdalbzbwhd","category_id":"civ6f7yqu003lx8cddu9lywt6","_id":"civ6f7yqy003sx8cdx47e1ht7"},{"post_id":"civ6f7yq9002kx8cdzddthzkl","category_id":"civ6f7yqx003ox8cd7byt9nq6","_id":"civ6f7yqz003xx8cd34s385qi"},{"post_id":"civ6f7yqb002ox8cdahhqt4xa","category_id":"civ6f7yqy003tx8cdudcsmfef","_id":"civ6f7yr00041x8cds0afd000"},{"post_id":"civ6f7yqd002sx8cdcp7yuvl6","category_id":"civ6f7yqy003tx8cdudcsmfef","_id":"civ6f7yr20046x8cdjfnio0js"},{"post_id":"civ6f7yqf002wx8cd3adeqdxv","category_id":"civ6f7yqy003tx8cdudcsmfef","_id":"civ6f7yr3004ax8cdgc6ak4oo"},{"post_id":"civ6f7yqh002yx8cdnya41v41","category_id":"civ6f7yqy003tx8cdudcsmfef","_id":"civ6f7yr3004dx8cdh2mqt0f2"},{"post_id":"civ6f7yqk0032x8cdayluvkcy","category_id":"civ6f7yqy003tx8cdudcsmfef","_id":"civ6f7yr4004gx8cd6qtoa1xs"},{"post_id":"civ6f7yqm0033x8cd2m1cf1ac","category_id":"civ6f7yqy003tx8cdudcsmfef","_id":"civ6f7yr4004ix8cdq63wl5lh"},{"post_id":"civ6f7ysd007px8cd5ulhtwc9","category_id":"civ6f7yok000kx8cd8cdys3ga","_id":"civ6f7ysj007wx8cdk0mc9380"},{"post_id":"civ6f7yse007rx8cdkfe8vtu1","category_id":"civ6f7yok000kx8cd8cdys3ga","_id":"civ6f7ysn007zx8cd5e6vl5hy"},{"post_id":"civ6f7ysh007ux8cd70zykzs5","category_id":"civ6f7yok000kx8cd8cdys3ga","_id":"civ6f7ysq0083x8cdei5pb8gw"},{"post_id":"civ6f7ysk007xx8cd7zecbvfq","category_id":"civ6f7yqx003ox8cd7byt9nq6","_id":"civ6f7yss0087x8cdvrxlitjv"},{"post_id":"civ6f7ysr0085x8cdb1gnfsm3","category_id":"civ6f7yok000kx8cd8cdys3ga","_id":"civ6f7ysx008dx8cdi0uapmmi"},{"post_id":"civ6f7yst0089x8cdlsegn70r","category_id":"civ6f7ynx0003x8cdr6is9z27","_id":"civ6f7ysy008hx8cd0cmglxpu"},{"post_id":"civ6f7ysv008bx8cdfoow771q","category_id":"civ6f7ynx0003x8cdr6is9z27","_id":"civ6f7ysz008kx8cdlrg1cdon"},{"post_id":"civ6f7ysn0080x8cdxjjokg0t","category_id":"civ6f7yss0086x8cdhrx7ljd3","_id":"civ6f7yt3008ox8cdlluxgus7"},{"post_id":"civ6f7ysx008ex8cdo8f67mjw","category_id":"civ6f7ypu001yx8cde22gf7m0","_id":"civ6f7yt4008rx8cdg0gerz4b"},{"post_id":"civ6f7ysy008ix8cdhevb2gzm","category_id":"civ6f7yqs003fx8cdt3te6z9p","_id":"civ6f7yt5008ux8cd6shehm6e"},{"post_id":"civ6f7yt0008lx8cdgdi20yb3","category_id":"civ6f7yqu003lx8cddu9lywt6","_id":"civ6f7yt7008yx8cduv2t4ttu"},{"post_id":"civ6f7yt3008px8cdjqmrf5pb","category_id":"civ6f7ypu001yx8cde22gf7m0","_id":"civ6f7yt80090x8cdlyhb63wg"},{"post_id":"civ6f7yt4008sx8cdybcnflbb","category_id":"civ6f7ynx0003x8cdr6is9z27","_id":"civ6f7yt90093x8cdrxgbz5vb"},{"post_id":"civ6f7yt6008wx8cd7u2n4h34","category_id":"civ6f7yok000kx8cd8cdys3ga","_id":"civ6f7yt90095x8cdqe66zu77"}],"PostTag":[{"post_id":"civ6f7ynp0001x8cd0u9t256g","tag_id":"civ6f7yo10004x8cd7obm9s0v","_id":"civ6f7yoi000gx8cdhg76ea01"},{"post_id":"civ6f7ynp0001x8cd0u9t256g","tag_id":"civ6f7yo90009x8cd6kmdx32u","_id":"civ6f7yok000jx8cdbuw75rdz"},{"post_id":"civ6f7ynv0002x8cdibl0yj5q","tag_id":"civ6f7yof000ex8cdn8i6ev59","_id":"civ6f7yp20014x8cdnpco2sbz"},{"post_id":"civ6f7ynv0002x8cdibl0yj5q","tag_id":"civ6f7yok000lx8cdf4gqpgxq","_id":"civ6f7yp50018x8cdc7pby3p0"},{"post_id":"civ6f7ynv0002x8cdibl0yj5q","tag_id":"civ6f7yoo000qx8cdjeusi5xq","_id":"civ6f7yp8001bx8cducp7s8ls"},{"post_id":"civ6f7ynv0002x8cdibl0yj5q","tag_id":"civ6f7yow000wx8cdn47ghc7b","_id":"civ6f7ypc001fx8cde3otxeel"},{"post_id":"civ6f7yo10005x8cdebs8ndlf","tag_id":"civ6f7yof000ex8cdn8i6ev59","_id":"civ6f7ypn001nx8cda2tlrqda"},{"post_id":"civ6f7yo10005x8cdebs8ndlf","tag_id":"civ6f7yoo000qx8cdjeusi5xq","_id":"civ6f7ypq001rx8cd2vj0g74q"},{"post_id":"civ6f7yo10005x8cdebs8ndlf","tag_id":"civ6f7ypc001gx8cdzf4dqdom","_id":"civ6f7yps001vx8cdgs9bnjkp"},{"post_id":"civ6f7yph001jx8cdwps9ffaf","tag_id":"civ6f7yo10004x8cd7obm9s0v","_id":"civ6f7ypu001zx8cdcde8a0d3"},{"post_id":"civ6f7yph001jx8cdwps9ffaf","tag_id":"civ6f7yo90009x8cd6kmdx32u","_id":"civ6f7ypx0023x8cdvrulgowu"},{"post_id":"civ6f7ypr001ux8cdtk0srjol","tag_id":"civ6f7yo90009x8cd6kmdx32u","_id":"civ6f7ypz0026x8cd1uqlabm1"},{"post_id":"civ6f7ypr001ux8cdtk0srjol","tag_id":"civ6f7ypj001lx8cde33uxpkl","_id":"civ6f7yq2002bx8cdjg7347qr"},{"post_id":"civ6f7ypx0025x8cdcja35y4p","tag_id":"civ6f7ypr001tx8cd4o5hjpga","_id":"civ6f7yq4002ex8cd3bc78ozy"},{"post_id":"civ6f7yo40006x8cd7wpt0u3u","tag_id":"civ6f7ypj001lx8cde33uxpkl","_id":"civ6f7yqa002lx8cd7u7vbfe9"},{"post_id":"civ6f7yo40006x8cd7wpt0u3u","tag_id":"civ6f7ypr001tx8cd4o5hjpga","_id":"civ6f7yqc002px8cdi7y3jl8e"},{"post_id":"civ6f7yo40006x8cd7wpt0u3u","tag_id":"civ6f7ypw0022x8cdm5miqy04","_id":"civ6f7yqe002tx8cdd5r5wwmq"},{"post_id":"civ6f7yo40006x8cd7wpt0u3u","tag_id":"civ6f7yq2002ax8cdrw9lb9cz","_id":"civ6f7yqg002xx8cdhufcma5h"},{"post_id":"civ6f7yo70007x8cdsbvuk8jb","tag_id":"civ6f7yq8002ix8cd0o43ggoy","_id":"civ6f7yqp0037x8cdknw1x80c"},{"post_id":"civ6f7yo70007x8cdsbvuk8jb","tag_id":"civ6f7yqd002rx8cd9wkln3oc","_id":"civ6f7yqq0038x8cdw9t3beqq"},{"post_id":"civ6f7yo70007x8cdsbvuk8jb","tag_id":"civ6f7yqj002zx8cdngdhwyvg","_id":"civ6f7yqr003cx8cddlpu58ny"},{"post_id":"civ6f7yoa000ax8cda98axy7j","tag_id":"civ6f7yq8002ix8cd0o43ggoy","_id":"civ6f7yqx003px8cdf4fn0l8i"},{"post_id":"civ6f7yoa000ax8cda98axy7j","tag_id":"civ6f7yqd002rx8cd9wkln3oc","_id":"civ6f7yqx003qx8cdbc9chy3j"},{"post_id":"civ6f7yoa000ax8cda98axy7j","tag_id":"civ6f7yqs003dx8cdpkjcevhb","_id":"civ6f7yqy003ux8cdo05g6stx"},{"post_id":"civ6f7yoa000ax8cda98axy7j","tag_id":"civ6f7yqt003hx8cd7a66e5k8","_id":"civ6f7yqz003vx8cd4adgluyj"},{"post_id":"civ6f7yoa000ax8cda98axy7j","tag_id":"civ6f7yqj002zx8cdngdhwyvg","_id":"civ6f7yqz003yx8cdbkj3tvmv"},{"post_id":"civ6f7yoe000cx8cd67q5es3b","tag_id":"civ6f7yq8002ix8cd0o43ggoy","_id":"civ6f7yr10043x8cd5ff8q4ju"},{"post_id":"civ6f7yoe000cx8cd67q5es3b","tag_id":"civ6f7yqd002rx8cd9wkln3oc","_id":"civ6f7yr20044x8cdty8fmex2"},{"post_id":"civ6f7yoe000cx8cd67q5es3b","tag_id":"civ6f7yqz003wx8cdzwtnvfvw","_id":"civ6f7yr30048x8cdy3zaqysl"},{"post_id":"civ6f7yog000fx8cd39ly87tv","tag_id":"civ6f7yq8002ix8cd0o43ggoy","_id":"civ6f7yr4004jx8cdgs2ouqsb"},{"post_id":"civ6f7yog000fx8cd39ly87tv","tag_id":"civ6f7yqd002rx8cd9wkln3oc","_id":"civ6f7yr4004kx8cdjkfl52gu"},{"post_id":"civ6f7yog000fx8cd39ly87tv","tag_id":"civ6f7yqj002zx8cdngdhwyvg","_id":"civ6f7yr5004mx8cdxja6osm3"},{"post_id":"civ6f7yog000fx8cd39ly87tv","tag_id":"civ6f7yqs003dx8cdpkjcevhb","_id":"civ6f7yr5004nx8cd5ypg4g3w"},{"post_id":"civ6f7yog000fx8cd39ly87tv","tag_id":"civ6f7yqt003hx8cd7a66e5k8","_id":"civ6f7yr5004px8cdals49uh6"},{"post_id":"civ6f7yoj000hx8cdo7hm709g","tag_id":"civ6f7yr4004hx8cd829k88s2","_id":"civ6f7yr5004rx8cdxia3xup3"},{"post_id":"civ6f7yoj000hx8cdo7hm709g","tag_id":"civ6f7yr4004lx8cdn7cwhjoa","_id":"civ6f7yr5004sx8cdjw7i4t8y"},{"post_id":"civ6f7yoj000hx8cdo7hm709g","tag_id":"civ6f7yq2002ax8cdrw9lb9cz","_id":"civ6f7yr5004ux8cd4tovggfm"},{"post_id":"civ6f7yol000mx8cdf186kgo8","tag_id":"civ6f7ypr001tx8cd4o5hjpga","_id":"civ6f7yr5004vx8cdylgyxgft"},{"post_id":"civ6f7yom000nx8cdqgf30lbk","tag_id":"civ6f7yr4004hx8cd829k88s2","_id":"civ6f7yr6004zx8cdweiws7vs"},{"post_id":"civ6f7yom000nx8cdqgf30lbk","tag_id":"civ6f7yr4004lx8cdn7cwhjoa","_id":"civ6f7yr60050x8cd8a107oev"},{"post_id":"civ6f7yom000nx8cdqgf30lbk","tag_id":"civ6f7yq2002ax8cdrw9lb9cz","_id":"civ6f7yr70052x8cdwietsg4u"},{"post_id":"civ6f7yoo000rx8cdolcw2wir","tag_id":"civ6f7yr6004yx8cdu96wvtqw","_id":"civ6f7yr70053x8cdyckh7vkd"},{"post_id":"civ6f7yoo000rx8cdolcw2wir","tag_id":"civ6f7yo90009x8cd6kmdx32u","_id":"civ6f7yr70055x8cd2ss77dn4"},{"post_id":"civ6f7yoq000sx8cd6bve6lsp","tag_id":"civ6f7yr60051x8cdcxg16rqv","_id":"civ6f7yr80059x8cdeozc3n1j"},{"post_id":"civ6f7yoq000sx8cd6bve6lsp","tag_id":"civ6f7yr70054x8cd5euis025","_id":"civ6f7yr8005ax8cd13sbaapg"},{"post_id":"civ6f7yoq000sx8cd6bve6lsp","tag_id":"civ6f7yr6004yx8cdu96wvtqw","_id":"civ6f7yr8005cx8cdfneo2bnd"},{"post_id":"civ6f7yoq000sx8cd6bve6lsp","tag_id":"civ6f7yr70057x8cdtykbyip0","_id":"civ6f7yr9005dx8cdl26wyp8s"},{"post_id":"civ6f7yot000vx8cditp16qpo","tag_id":"civ6f7ypr001tx8cd4o5hjpga","_id":"civ6f7yr9005fx8cd5ldspfj4"},{"post_id":"civ6f7yox000xx8cdxqecq8nk","tag_id":"civ6f7ypr001tx8cd4o5hjpga","_id":"civ6f7yr9005gx8cdt7rh8j6y"},{"post_id":"civ6f7yoz0010x8cdynbhqhll","tag_id":"civ6f7ypr001tx8cd4o5hjpga","_id":"civ6f7yr9005ix8cdhrmakoif"},{"post_id":"civ6f7yp10013x8cd1f93zr29","tag_id":"civ6f7ypr001tx8cd4o5hjpga","_id":"civ6f7yra005mx8cdhk2ki26r"},{"post_id":"civ6f7yp10013x8cd1f93zr29","tag_id":"civ6f7ypj001lx8cde33uxpkl","_id":"civ6f7yrb005nx8cdeafeq9nb"},{"post_id":"civ6f7yp10013x8cd1f93zr29","tag_id":"civ6f7yr9005kx8cdc71m0xkr","_id":"civ6f7yrb005px8cdu6yuw9vl"},{"post_id":"civ6f7yp40017x8cdioim2gxw","tag_id":"civ6f7ypr001tx8cd4o5hjpga","_id":"civ6f7yrb005rx8cd9n9k22lq"},{"post_id":"civ6f7yp40017x8cdioim2gxw","tag_id":"civ6f7ypj001lx8cde33uxpkl","_id":"civ6f7yrb005sx8cdt78swljd"},{"post_id":"civ6f7yp6001ax8cdbv9kwxl6","tag_id":"civ6f7yoo000qx8cdjeusi5xq","_id":"civ6f7yrc005xx8cd1ali9ift"},{"post_id":"civ6f7yp6001ax8cdbv9kwxl6","tag_id":"civ6f7yrb005qx8cd4adz2rsl","_id":"civ6f7yrc005yx8cdx1p11rtg"},{"post_id":"civ6f7yp6001ax8cdbv9kwxl6","tag_id":"civ6f7yrc005tx8cdfh8tgt0e","_id":"civ6f7yrd0060x8cdxe7z99tc"},{"post_id":"civ6f7yp6001ax8cdbv9kwxl6","tag_id":"civ6f7yrc005ux8cd0kz4r1rt","_id":"civ6f7yrd0061x8cd7npdgnh3"},{"post_id":"civ6f7yp6001ax8cdbv9kwxl6","tag_id":"civ6f7yrc005vx8cdzmqhlqna","_id":"civ6f7yrd0063x8cd5hx7jnpc"},{"post_id":"civ6f7ypa001ex8cddmenjput","tag_id":"civ6f7yrc005wx8cd9faibwpa","_id":"civ6f7yrd0064x8cdm7s1ny7a"},{"post_id":"civ6f7ypd001hx8cd5xj2mmsb","tag_id":"civ6f7yrc005zx8cd1v48hcpk","_id":"civ6f7yrd0066x8cd01bphng5"},{"post_id":"civ6f7ypd001hx8cd5xj2mmsb","tag_id":"civ6f7yrd0062x8cdx9feo9pg","_id":"civ6f7yrd0067x8cdaux9ml0c"},{"post_id":"civ6f7ypd001hx8cd5xj2mmsb","tag_id":"civ6f7yo90009x8cd6kmdx32u","_id":"civ6f7yrd0069x8cd8mdftqj6"},{"post_id":"civ6f7ypl001mx8cd5dc4shje","tag_id":"civ6f7ypr001tx8cd4o5hjpga","_id":"civ6f7yrf006cx8cdoi3zujpl"},{"post_id":"civ6f7ypl001mx8cd5dc4shje","tag_id":"civ6f7ypj001lx8cde33uxpkl","_id":"civ6f7yrf006dx8cddwgslct7"},{"post_id":"civ6f7ypl001mx8cd5dc4shje","tag_id":"civ6f7yr9005kx8cdc71m0xkr","_id":"civ6f7yrf006fx8cdvgqcms6y"},{"post_id":"civ6f7ypl001mx8cd5dc4shje","tag_id":"civ6f7yre006ax8cd6yxk6977","_id":"civ6f7yrf006gx8cdob17i70n"},{"post_id":"civ6f7ypo001px8cdhym7rv7v","tag_id":"civ6f7yo90009x8cd6kmdx32u","_id":"civ6f7yrg006ix8cdo5v8qu5x"},{"post_id":"civ6f7ypo001px8cdhym7rv7v","tag_id":"civ6f7yre006ax8cd6yxk6977","_id":"civ6f7yrg006jx8cd90f8hdcv"},{"post_id":"civ6f7ypo001px8cdhym7rv7v","tag_id":"civ6f7ypj001lx8cde33uxpkl","_id":"civ6f7yrg006lx8cd2nkzr20x"},{"post_id":"civ6f7ypt001xx8cdtyo6qtfp","tag_id":"civ6f7yrf006ex8cdsffiyq9i","_id":"civ6f7yrh006nx8cd9i6xhxpl"},{"post_id":"civ6f7ypt001xx8cdtyo6qtfp","tag_id":"civ6f7yq8002ix8cd0o43ggoy","_id":"civ6f7yrh006ox8cd5qau5abc"},{"post_id":"civ6f7ypt001xx8cdtyo6qtfp","tag_id":"civ6f7yrg006kx8cd276af6vx","_id":"civ6f7yri006qx8cdhf833v92"},{"post_id":"civ6f7ypv0021x8cd14r5sxdz","tag_id":"civ6f7yo90009x8cd6kmdx32u","_id":"civ6f7yri006rx8cd836vu4tk"},{"post_id":"civ6f7ypv0021x8cd14r5sxdz","tag_id":"civ6f7yre006ax8cd6yxk6977","_id":"civ6f7yri006tx8cd2vwziaq8"},{"post_id":"civ6f7ypv0021x8cd14r5sxdz","tag_id":"civ6f7ypj001lx8cde33uxpkl","_id":"civ6f7yri006ux8cd4uugfudb"},{"post_id":"civ6f7yq10029x8cdd2mscwos","tag_id":"civ6f7yrh006px8cdhg89xa2j","_id":"civ6f7yrm006yx8cdpp58pm7i"},{"post_id":"civ6f7yq10029x8cdd2mscwos","tag_id":"civ6f7yri006sx8cd3jiw6er3","_id":"civ6f7yrm006zx8cdycvulkca"},{"post_id":"civ6f7yq10029x8cdd2mscwos","tag_id":"civ6f7yr4004hx8cd829k88s2","_id":"civ6f7yrm0071x8cdh1oeezm0"},{"post_id":"civ6f7yq10029x8cdd2mscwos","tag_id":"civ6f7yrj006wx8cdyva0icc3","_id":"civ6f7yrm0072x8cd7woeepx6"},{"post_id":"civ6f7yq3002dx8cd94yvp3c7","tag_id":"civ6f7yr4004lx8cdn7cwhjoa","_id":"civ6f7ys00075x8cdxonfeghu"},{"post_id":"civ6f7yq3002dx8cd94yvp3c7","tag_id":"civ6f7yr4004hx8cd829k88s2","_id":"civ6f7ys00076x8cdb5bmbaut"},{"post_id":"civ6f7yq3002dx8cd94yvp3c7","tag_id":"civ6f7yrn0073x8cdccj363a6","_id":"civ6f7ys00078x8cd8sx1qiae"},{"post_id":"civ6f7yq5002hx8cdalbzbwhd","tag_id":"civ6f7yrn0074x8cdkvxy20nn","_id":"civ6f7ys0007ax8cdso2yfodf"},{"post_id":"civ6f7yq5002hx8cdalbzbwhd","tag_id":"civ6f7ys00077x8cd1nl80dyn","_id":"civ6f7ys1007bx8cdr4r8nbcc"},{"post_id":"civ6f7yq9002kx8cdzddthzkl","tag_id":"civ6f7ys00079x8cd2a41hfd2","_id":"civ6f7ys1007dx8cdx1i4cvlv"},{"post_id":"civ6f7yqb002ox8cdahhqt4xa","tag_id":"civ6f7yrn0074x8cdkvxy20nn","_id":"civ6f7ys1007fx8cdl2kqg4tt"},{"post_id":"civ6f7yqd002sx8cdcp7yuvl6","tag_id":"civ6f7yrn0074x8cdkvxy20nn","_id":"civ6f7ys2007hx8cdbh7ro660"},{"post_id":"civ6f7yqf002wx8cd3adeqdxv","tag_id":"civ6f7yrn0074x8cdkvxy20nn","_id":"civ6f7ys2007jx8cdrt7xul68"},{"post_id":"civ6f7yqh002yx8cdnya41v41","tag_id":"civ6f7yrn0074x8cdkvxy20nn","_id":"civ6f7ys2007lx8cdy6rxkx4j"},{"post_id":"civ6f7yqk0032x8cdayluvkcy","tag_id":"civ6f7yrn0074x8cdkvxy20nn","_id":"civ6f7ys4007nx8cdbqsy7dwd"},{"post_id":"civ6f7yqm0033x8cd2m1cf1ac","tag_id":"civ6f7yrn0074x8cdkvxy20nn","_id":"civ6f7ys5007ox8cd0v0qfs0e"},{"post_id":"civ6f7ysd007px8cd5ulhtwc9","tag_id":"civ6f7yq2002ax8cdrw9lb9cz","_id":"civ6f7ysr0084x8cd22skkohi"},{"post_id":"civ6f7ysd007px8cd5ulhtwc9","tag_id":"civ6f7ysh007tx8cd21os37wb","_id":"civ6f7yss0088x8cd9kukm6f4"},{"post_id":"civ6f7yse007rx8cdkfe8vtu1","tag_id":"civ6f7yq2002ax8cdrw9lb9cz","_id":"civ6f7ysw008cx8cdv3nrkjqu"},{"post_id":"civ6f7yse007rx8cdkfe8vtu1","tag_id":"civ6f7ysp0081x8cdspkb3bjz","_id":"civ6f7ysy008fx8cdmbqmlh32"},{"post_id":"civ6f7yse007rx8cdkfe8vtu1","tag_id":"civ6f7yo90009x8cd6kmdx32u","_id":"civ6f7ysz008jx8cd5ks49rm3"},{"post_id":"civ6f7yst0089x8cdlsegn70r","tag_id":"civ6f7yo90009x8cd6kmdx32u","_id":"civ6f7yt1008mx8cd6ceebkrq"},{"post_id":"civ6f7yst0089x8cdlsegn70r","tag_id":"civ6f7yr60051x8cdcxg16rqv","_id":"civ6f7yt4008qx8cdz4uej6uw"},{"post_id":"civ6f7ysh007ux8cd70zykzs5","tag_id":"civ6f7yq2002ax8cdrw9lb9cz","_id":"civ6f7yt5008tx8cd5jdxu6hg"},{"post_id":"civ6f7ysh007ux8cd70zykzs5","tag_id":"civ6f7ysp0081x8cdspkb3bjz","_id":"civ6f7yt7008xx8cdvnqh2fw0"},{"post_id":"civ6f7ysx008ex8cdo8f67mjw","tag_id":"civ6f7yr60051x8cdcxg16rqv","_id":"civ6f7yt7008zx8cdi6rcunh0"},{"post_id":"civ6f7ysx008ex8cdo8f67mjw","tag_id":"civ6f7yrd0062x8cdx9feo9pg","_id":"civ6f7yt90092x8cdrxgjxgc7"},{"post_id":"civ6f7ysn0080x8cdxjjokg0t","tag_id":"civ6f7ysy008gx8cda1prb63c","_id":"civ6f7yt90094x8cdxpyjt92x"},{"post_id":"civ6f7ysn0080x8cdxjjokg0t","tag_id":"civ6f7yt2008nx8cd489e7fd3","_id":"civ6f7yt90096x8cdbfm9jcr7"},{"post_id":"civ6f7yt4008sx8cdybcnflbb","tag_id":"civ6f7yo90009x8cd6kmdx32u","_id":"civ6f7yt90098x8cd83r1zkcq"},{"post_id":"civ6f7yt4008sx8cdybcnflbb","tag_id":"civ6f7yr60051x8cdcxg16rqv","_id":"civ6f7yta0099x8cd64fopptj"},{"post_id":"civ6f7yt4008sx8cdybcnflbb","tag_id":"civ6f7yr70057x8cdtykbyip0","_id":"civ6f7yta009bx8cdqaw27owd"},{"post_id":"civ6f7ysr0085x8cdb1gnfsm3","tag_id":"civ6f7yq2002ax8cdrw9lb9cz","_id":"civ6f7yta009cx8cddhpy6jx5"},{"post_id":"civ6f7ysr0085x8cdb1gnfsm3","tag_id":"civ6f7yt5008vx8cdqulzj08w","_id":"civ6f7ytb009ex8cdcztsm84m"},{"post_id":"civ6f7ysr0085x8cdb1gnfsm3","tag_id":"civ6f7yt80091x8cd6k6ir8nb","_id":"civ6f7ytb009fx8cdahkiomby"},{"post_id":"civ6f7ysr0085x8cdb1gnfsm3","tag_id":"civ6f7yt90097x8cd8xprqfup","_id":"civ6f7ytb009hx8cdmqgm8nrv"},{"post_id":"civ6f7ysv008bx8cdfoow771q","tag_id":"civ6f7yr60051x8cdcxg16rqv","_id":"civ6f7ytb009ix8cddkjfj47s"},{"post_id":"civ6f7ysv008bx8cdfoow771q","tag_id":"civ6f7yta009ax8cdvj5weilz","_id":"civ6f7ytb009jx8cdex5duge6"},{"post_id":"civ6f7ysy008ix8cdhevb2gzm","tag_id":"civ6f7yta009dx8cd8imwq17k","_id":"civ6f7ytc009lx8cdxdaxhby2"},{"post_id":"civ6f7ysy008ix8cdhevb2gzm","tag_id":"civ6f7ytb009gx8cdi3g123lf","_id":"civ6f7ytc009mx8cdfss50n6g"},{"post_id":"civ6f7yt0008lx8cdgdi20yb3","tag_id":"civ6f7ytb009kx8cd3d451jna","_id":"civ6f7ytc009px8cdrskp8rod"},{"post_id":"civ6f7yt0008lx8cdgdi20yb3","tag_id":"civ6f7ytc009nx8cdk1fjidme","_id":"civ6f7ytc009qx8cdvzlq64m2"},{"post_id":"civ6f7yt6008wx8cd7u2n4h34","tag_id":"civ6f7yq2002ax8cdrw9lb9cz","_id":"civ6f7ytc009rx8cd5vcc7loc"},{"post_id":"civ6f7yt6008wx8cd7u2n4h34","tag_id":"civ6f7ytc009ox8cdfl2iqaxt","_id":"civ6f7ytc009sx8cddhn8ctdq"},{"post_id":"civ6f7yt6008wx8cd7u2n4h34","tag_id":"civ6f7ysh007tx8cd21os37wb","_id":"civ6f7ytc009tx8cdu0i4vtu5"}],"Tag":[{"name":"kali","_id":"civ6f7yo10004x8cd7obm9s0v"},{"name":"Linux","_id":"civ6f7yo90009x8cd6kmdx32u"},{"name":"javascript","_id":"civ6f7yof000ex8cdn8i6ev59"},{"name":"正则表达式","_id":"civ6f7yok000lx8cdf4gqpgxq"},{"name":"前端","_id":"civ6f7yoo000qx8cdjeusi5xq"},{"name":"js","_id":"civ6f7yow000wx8cdn47ghc7b"},{"name":"正则","_id":"civ6f7ypc001gx8cdzf4dqdom"},{"name":"github","_id":"civ6f7ypj001lx8cde33uxpkl"},{"name":"hexo","_id":"civ6f7ypr001tx8cd4o5hjpga"},{"name":"windows","_id":"civ6f7ypw0022x8cdm5miqy04"},{"name":"python","_id":"civ6f7yq2002ax8cdrw9lb9cz"},{"name":"chrome","_id":"civ6f7yq8002ix8cd0o43ggoy"},{"name":"cmcc-edu","_id":"civ6f7yqd002rx8cd9wkln3oc"},{"name":"中国移动","_id":"civ6f7yqj002zx8cdngdhwyvg"},{"name":"扩展","_id":"civ6f7yqs003dx8cdpkjcevhb"},{"name":"脚本","_id":"civ6f7yqt003hx8cd7a66e5k8"},{"name":"表单","_id":"civ6f7yqz003wx8cdzwtnvfvw"},{"name":"opencv","_id":"civ6f7yr4004hx8cd829k88s2"},{"name":"图像处理","_id":"civ6f7yr4004lx8cdn7cwhjoa"},{"name":"digitalocean","_id":"civ6f7yr6004yx8cdu96wvtqw"},{"name":"ubuntu","_id":"civ6f7yr60051x8cdcxg16rqv"},{"name":"ipv6","_id":"civ6f7yr70054x8cd5euis025"},{"name":"shadowsocks","_id":"civ6f7yr70057x8cdtykbyip0"},{"name":"baidu","_id":"civ6f7yr9005kx8cdc71m0xkr"},{"name":"css","_id":"civ6f7yrb005qx8cd4adz2rsl"},{"name":"html5","_id":"civ6f7yrc005tx8cdfh8tgt0e"},{"name":"ie","_id":"civ6f7yrc005ux8cd0kz4r1rt"},{"name":"兼容性","_id":"civ6f7yrc005vx8cdzmqhlqna"},{"name":"智力题","_id":"civ6f7yrc005wx8cd9faibwpa"},{"name":"HTTP","_id":"civ6f7yrc005zx8cd1v48hcpk"},{"name":"apache","_id":"civ6f7yrd0062x8cdx9feo9pg"},{"name":"git","_id":"civ6f7yre006ax8cd6yxk6977"},{"name":"离线安装","_id":"civ6f7yrf006ex8cdsffiyq9i"},{"name":"flash","_id":"civ6f7yrg006kx8cd276af6vx"},{"name":"软件安装与技巧","_id":"civ6f7yrh006px8cdhg89xa2j"},{"name":"vs2010","_id":"civ6f7yri006sx8cd3jiw6er3"},{"name":"win8","_id":"civ6f7yrj006wx8cdyva0icc3"},{"name":"lbph","_id":"civ6f7yrn0073x8cdccj363a6"},{"name":"php","_id":"civ6f7yrn0074x8cdkvxy20nn"},{"name":"bool","_id":"civ6f7ys00077x8cd1nl80dyn"},{"name":"生活","_id":"civ6f7ys00079x8cd2a41hfd2"},{"name":"爬虫","_id":"civ6f7ysh007tx8cd21os37wb"},{"name":"socket","_id":"civ6f7ysp0081x8cdspkb3bjz"},{"name":"sql","_id":"civ6f7ysy008gx8cda1prb63c"},{"name":"select","_id":"civ6f7yt2008nx8cd489e7fd3"},{"name":"csdn","_id":"civ6f7yt5008vx8cdqulzj08w"},{"name":"模拟登录","_id":"civ6f7yt80091x8cd6k6ir8nb"},{"name":"requests","_id":"civ6f7yt90097x8cd8xprqfup"},{"name":"thinkphp","_id":"civ6f7yta009ax8cdvj5weilz"},{"name":"sql server","_id":"civ6f7yta009dx8cd8imwq17k"},{"name":"wamp","_id":"civ6f7ytb009gx8cdi3g123lf"},{"name":"微信支付","_id":"civ6f7ytb009kx8cd3d451jna"},{"name":"api","_id":"civ6f7ytc009nx8cdk1fjidme"},{"name":"scrapy","_id":"civ6f7ytc009ox8cdfl2iqaxt"}]}}