{"Asset":[{"_id":"themes/light/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes/light/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes/light/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes/light/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes/light/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes/light/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes/light/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes/light/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes/light/source/js/gallery.js","path":"js/gallery.js","modified":false},{"_id":"themes/light/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":false},{"_id":"themes/light/source/css/style.styl","path":"css/style.styl","modified":false},{"_id":"themes/light/source/css/font/fontawesome-webfont.eot","path":"css/font/fontawesome-webfont.eot","modified":false},{"_id":"themes/light/source/css/font/fontawesome-webfont.svg","path":"css/font/fontawesome-webfont.svg","modified":false},{"_id":"themes/light/source/css/font/fontawesome-webfont.ttf","path":"css/font/fontawesome-webfont.ttf","modified":false},{"_id":"themes/light/source/css/font/fontawesome-webfont.woff","path":"css/font/fontawesome-webfont.woff","modified":false}],"Cache":[{"_id":"scaffolds/draft.md","mtime":1420522794000},{"_id":"scaffolds/page.md","mtime":1420522794000},{"_id":"scaffolds/photo.md","mtime":1420522794000},{"_id":"scaffolds/post.md","mtime":1420522794000},{"_id":"source/_posts/[js]replace替换.md","mtime":1420518904000},{"_id":"source/_posts/[js]前端试题.md","mtime":1420518904000},{"_id":"source/_posts/after-kali.md","mtime":1425451396000},{"_id":"source/_posts/chrome扩展开发手记-chrome扩展开始第一步manfest.json.md","mtime":1427611305000},{"_id":"source/_posts/chrome扩展开发手记1-需求分析.md","mtime":1427611314000},{"_id":"source/_posts/chrome扩展开发手记2-登录原理分析.md","mtime":1427611309000},{"_id":"source/_posts/cmcc520扩展使用说明.md","mtime":1420518904000},{"_id":"source/_posts/custom-hexo.md","mtime":1420518904000},{"_id":"source/_posts/how-to-build-a-blog-with-hexo.md","mtime":1425812266000},{"_id":"source/_posts/kali-and-ubuntu.md","mtime":1425812261000},{"_id":"source/_posts/linux下使用github.md","mtime":1421654575000},{"_id":"source/_posts/new-start.md","mtime":1420518904000},{"_id":"source/_posts/python-blog-spider.md","mtime":1427723763000},{"_id":"source/_posts/python-im.md","mtime":1427378993000},{"_id":"source/_posts/python-socket-port-reuse.md","mtime":1426642594000},{"_id":"source/_posts/recent-task.md","mtime":1420518904000},{"_id":"source/_posts/sql中left_join和right_join混用.md","mtime":1420518904000},{"_id":"source/_posts/use-ss.md","mtime":1425965310000},{"_id":"source/_posts/wamp与sql_server_因为端口80冲突,无法开启wamp.md","mtime":1427611316000},{"_id":"source/_posts/阿里云windows_server_2003_搭建邮件服务器.md","mtime":1427611318000},{"_id":"themes/light/LICENSE","mtime":1421654575000},{"_id":"themes/light/README.md","mtime":1421654575000},{"_id":"themes/light/_config.yml","mtime":1421654575000},{"_id":"themes/light/package.json","mtime":1421654575000},{"_id":"themes/light/languages/de.yml","mtime":1421654575000},{"_id":"themes/light/languages/default.yml","mtime":1421654575000},{"_id":"themes/light/languages/es.yml","mtime":1421654575000},{"_id":"themes/light/languages/ru.yml","mtime":1421654575000},{"_id":"themes/light/languages/zh-CN.yml","mtime":1421654575000},{"_id":"themes/light/languages/zh-TW.yml","mtime":1421654575000},{"_id":"themes/light/layout/archive.ejs","mtime":1421654575000},{"_id":"themes/light/layout/category.ejs","mtime":1421654575000},{"_id":"themes/light/layout/index.ejs","mtime":1421654575000},{"_id":"themes/light/layout/layout.ejs","mtime":1421654575000},{"_id":"themes/light/layout/page.ejs","mtime":1421654575000},{"_id":"themes/light/layout/post.ejs","mtime":1421654575000},{"_id":"themes/light/layout/tag.ejs","mtime":1421654575000},{"_id":"themes/light/layout/_widget/blogroll.ejs","mtime":1421654575000},{"_id":"themes/light/layout/_widget/category.ejs","mtime":1421654575000},{"_id":"themes/light/layout/_widget/recent_posts.ejs","mtime":1421654575000},{"_id":"themes/light/layout/_widget/search.ejs","mtime":1421654575000},{"_id":"themes/light/layout/_widget/tag.ejs","mtime":1421654575000},{"_id":"themes/light/layout/_widget/tagcloud.ejs","mtime":1421654575000},{"_id":"themes/light/layout/_partial/after_footer.ejs","mtime":1426643387000},{"_id":"themes/light/layout/_partial/archive.ejs","mtime":1421654575000},{"_id":"themes/light/layout/_partial/article.ejs","mtime":1421654575000},{"_id":"themes/light/layout/_partial/comment.ejs","mtime":1421654575000},{"_id":"themes/light/layout/_partial/facebook_comment.ejs","mtime":1421654575000},{"_id":"themes/light/layout/_partial/footer.ejs","mtime":1421654575000},{"_id":"themes/light/layout/_partial/google_analytics.ejs","mtime":1421654575000},{"_id":"themes/light/layout/_partial/head.ejs","mtime":1421654575000},{"_id":"themes/light/layout/_partial/header.ejs","mtime":1427006604000},{"_id":"themes/light/layout/_partial/pagination.ejs","mtime":1421654575000},{"_id":"themes/light/layout/_partial/sidebar.ejs","mtime":1421654575000},{"_id":"themes/light/layout/_partial/post/category.ejs","mtime":1421654575000},{"_id":"themes/light/layout/_partial/post/gallery.ejs","mtime":1421654575000},{"_id":"themes/light/layout/_partial/post/share.ejs","mtime":1421654575000},{"_id":"themes/light/layout/_partial/post/tag.ejs","mtime":1421654575000},{"_id":"themes/light/layout/_partial/post/title.ejs","mtime":1421654575000},{"_id":"themes/light/source/fancybox/blank.gif","mtime":1421654575000},{"_id":"themes/light/source/fancybox/fancybox_loading.gif","mtime":1421654575000},{"_id":"themes/light/source/fancybox/fancybox_loading@2x.gif","mtime":1421654575000},{"_id":"themes/light/source/fancybox/fancybox_overlay.png","mtime":1421654575000},{"_id":"themes/light/source/fancybox/fancybox_sprite.png","mtime":1421654575000},{"_id":"themes/light/source/fancybox/fancybox_sprite@2x.png","mtime":1421654575000},{"_id":"themes/light/source/fancybox/jquery.fancybox.css","mtime":1421654575000},{"_id":"themes/light/source/fancybox/jquery.fancybox.pack.js","mtime":1421654575000},{"_id":"themes/light/source/js/gallery.js","mtime":1421654575000},{"_id":"themes/light/source/js/jquery.imagesloaded.min.js","mtime":1421654575000},{"_id":"themes/light/source/css/style.styl","mtime":1421654575000},{"_id":"themes/light/source/css/_base/layout.styl","mtime":1421654575000},{"_id":"themes/light/source/css/_base/utils.styl","mtime":1421654575000},{"_id":"themes/light/source/css/_base/variable.styl","mtime":1421654575000},{"_id":"themes/light/source/css/_partial/archive.styl","mtime":1421654575000},{"_id":"themes/light/source/css/_partial/article.styl","mtime":1421654575000},{"_id":"themes/light/source/css/_partial/comment.styl","mtime":1421654575000},{"_id":"themes/light/source/css/_partial/footer.styl","mtime":1421654575000},{"_id":"themes/light/source/css/_partial/header.styl","mtime":1421654575000},{"_id":"themes/light/source/css/_partial/index.styl","mtime":1421654575000},{"_id":"themes/light/source/css/_partial/sidebar.styl","mtime":1421654575000},{"_id":"themes/light/source/css/_partial/syntax.styl","mtime":1421654575000},{"_id":"themes/light/source/css/font/fontawesome-webfont.eot","mtime":1421654575000},{"_id":"themes/light/source/css/font/fontawesome-webfont.svg","mtime":1421654575000},{"_id":"themes/light/source/css/font/fontawesome-webfont.ttf","mtime":1421654575000},{"_id":"themes/light/source/css/font/fontawesome-webfont.woff","mtime":1421654575000},{"_id":"source/_posts/hexo-deploy-error.md","mtime":1427723963000},{"_id":"source/_posts/blog2markdown-csdn-windows.md","mtime":1427723225000},{"_id":"source/_posts/face-recognizer.md","mtime":1430023865000},{"_id":"source/_posts/face-detection.md","mtime":1430025681000}],"Category":[{"name":"javascript","_id":"zf9azpa34c6krm50","posts":["szxowugcdv4aycb1","3y9e53558vapq3ja"]},{"name":"Linux","_id":"uc3yyao8lxnpqvsf","posts":["b7nae45l1wnlvt69","abrdmh8ldf2zbtvi","6467xkjibdy2lzoy","9ibmf09dnwz45lhh"]},{"name":"chrome扩展","_id":"e6lrnn3hglditrpe","posts":["hgqp0jg1rcyq2ary","r6kk2mmyelzufcc4","cm6xuxbuwuakw63m","gkev3rcyuikn4npz"]},{"name":"hexo","_id":"i18zy3saw203wjf9","posts":["lzpyj9n3n0m9gm31","2tvn6qwrqeyqutss","hv2dc80kmkds79c2"]},{"name":"python学习笔记","_id":"gywlejx022p25fsy","posts":["5awy11sr0bhmn8bv","e6xjak820aagkwvt","vbqvt9nb2k7ofel4","oev0c6ii5000yq6y"]},{"name":"杂文","_id":"pfkzqowk9up452y2","posts":["m5dgm0t8ja8y1vwl"]},{"name":"数据库","_id":"wkww6t8z4663daml","posts":["pn8nqgea6xhkvgdj"]},{"name":"软件安装与技巧","_id":"xys76ak8r6wpbgjz","posts":["3vbexhhlz5lk3bsi"]},{"name":"服务器","_id":"h3nphrhyamervc94","posts":["oist4jck3qnb5won"]},{"name":"图像处理","_id":"cgvxcfdcezrmuda7","posts":["ddqy1l1vcqsynw8f","ig6koctm3vkojncq"]}],"Page":[],"Post":[{"title":"[js]replace替换","date":1416925920000,"tags":["42w8iuz77qggsdbu","w7op3yr0y6l9rcm6","yp75twrqr3dxo4q1","gncx1ktpaha8w955"],"categories":["zf9azpa34c6krm50"],"content":"<p>今天做前端试题,用到了replace函数,来记录一下.<br>(以下部分知识点来自<a href=\"http://www.w3cschool.cn/jsref_replace.html\" target=\"_blank\" rel=\"external\">http://www.w3cschool.cn/jsref_replace.html</a>)</p>\n<h2 id=\"定义和用法\">定义和用法</h2>\n<p>replace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</p>\n<h3 id=\"语法\">语法</h3>\n<table class=\"dataintable \" style=\"margin-top:10px; border-collapse:collapse; border:1px solid rgb(136,136,136); width:606px; color:rgb(0,0,0); font-size:12px; background-color:rgb(249,249,249)\"><br><tbody><br><tr><br><th style=\"vertical-align:baseline; padding:5px 15px 5px 5px; border:1px solid rgb(136,136,136); background-color:rgb(204,204,204)\"><br>参数</th><br><th style=\"vertical-align:baseline; padding:5px 15px 5px 5px; border:1px solid rgb(136,136,136); background-color:rgb(204,204,204)\"><br>描述</th><br></tr><br><tr><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>regexp/substr</td><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br><p style=\"margin-top:0px; margin-bottom:0px; line-height:18px\">必需。规定子字符串或要替换的模式的 RegExp 对象。</p><br><p style=\"margin-top:0px; margin-bottom:2px; line-height:18px\">请注意，如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换为 RegExp 对象。</p><br></td><br></tr><br><tr><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>replacement</td><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>必需。一个字符串值。规定了替换文本或生成替换文本的函数。</td><br></tr><br></tbody><br></table>\n\n<h3 id=\"返回值\">返回值</h3>\n<p>一个新的字符串，是用 <em>replacement</em> 替换了 regexp 的第一次匹配或所有匹配之后得到的。</p>\n<h3 id=\"说明\">说明</h3>\n<p>字符串 stringObject 的 replace() 方法执行的是查找并替换的操作。它将在 stringObject 中查找与 regexp 相匹配的子字符串，然后用 <em>replacement</em> 来替换这些子串。如果 regexp 具有全局标志 g，那么 replace() 方法将替换所有匹配的子串。否则，它只替换第一个匹配子串。</p>\n<p><em>replacement</em> 可以是字符串，也可以是函数。如果它是字符串，那么每个匹配都将由字符串替换。但是 replacement 中的 $ 字符具有特定的含义。如下表所示，它说明从模式匹配得到的字符串将用于替换。</p>\n<table class=\"dataintable \" style=\"margin-top:10px; border-collapse:collapse; border:1px solid rgb(136,136,136); width:606px; color:rgb(0,0,0); font-size:12px; background-color:rgb(249,249,249)\"><br><tbody><br><tr><br><th style=\"vertical-align:baseline; padding:5px 15px 5px 5px; border:1px solid rgb(136,136,136); background-color:rgb(204,204,204)\"><br>字符</th><br><th style=\"vertical-align:baseline; padding:5px 15px 5px 5px; border:1px solid rgb(136,136,136); background-color:rgb(204,204,204)\"><br>替换文本</th><br></tr><br><tr><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>$1、$2、…、$99</td><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>与 regexp 中的第 1 到第 99 个子表达式相匹配的文本。</td><br></tr><br><tr><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>$&amp;</td><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>与 regexp 相匹配的子串。</td><br></tr><br><tr><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>$`</td><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>位于匹配子串左侧的文本。</td><br></tr><br><tr><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>$’</td><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>位于匹配子串右侧的文本。</td><br></tr><br><tr><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>$$</td><br><td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\"><br>直接量符号。</td><br></tr><br></tbody><br></table>\n\n<p><strong>注意：</strong>ECMAScript v3 规定，replace() 方法的参数 replacement 可以是函数而不是字符串。在这种情况下，每个匹配都调用该函数，它返回的字符串将作为替换文本使用。该函数的第一个参数是匹配模式的字符串。接下来的参数是与模式中的子表达式匹配的字符串，可以有 0 个或多个这样的参数。接下来的参数是一个整数，声明了匹配在 stringObject 中出现的位置。最后一个参数是<br> stringObject 本身。</p>\n<p>下面给几个简单的例子来说明一下</p>\n<p>ps:介绍一下正则的小知识,\\w表示匹配一个英文字符,+表示匹配数量必须大于一个,\\b就是分节符,单词中间分隔用的,连在一起就是取出前面字符串中所有的单词</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'my name is'</span>.replace(<span class=\"regexp\">/(\\w+)\\b/g</span>,<span class=\"string\">'haha  '</span>);<span class=\"comment\">//输出结果为   \"haha   haha   haha  \"</span></div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'my name is'</span>.replace(<span class=\"regexp\">/(\\w+)\\b/g</span>,<span class=\"string\">'$1aa'</span>);<span class=\"comment\">//输出结果为\"myaa nameaa isaa\"</span></div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'my name is'</span>.replace(<span class=\"regexp\">/((\\w)(\\w+?))\\b/g</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(m,a,b,c,d,e)</span></span>{<span class=\"keyword\">return</span> b.toUpperCase()+c;});<span class=\"comment\">//输出结果为\"My Name Is\"</span></div></pre></td></tr></table></figure>\n\n<p>重点讲解一下第三个,replace返回值为函数的例子(function必须要return)</p>\n<p>当replace返回值为函数的时候</p>\n<p>如果只有一个分组的话,他的参数是funciton(match,pos,originalText),分别表示模式的匹配项,模式匹配项在字符串中的位置和原始字符串</p>\n<p>如果有多个分组的话,他的参数是funciton(match,arr1,arr2,arr3,….arrn,pos,originalText),分别表示模式的匹配项,模式匹配项,还有n个匹配的分组,最后的两个参数是在字符串中的位置和原始字符串</p>\n<p>比如下面的例子,执行的结果就是</p>\n<p>‘my name is imweba ‘.replace(/((\\w)(\\w+?))\\b/g,function(m,a,b,c,d,e){</p>\n<p>console.log(m);</p>\n<p>console.log(a);</p>\n<p>console.log(b);</p>\n<p>console.log(c);</p>\n<p>console.log(d);</p>\n<p>console.log(e);</p>\n<p>});<br>执行结果</p>\n<p>my//模式匹配的值,因为上面匹配了整个单词,虽然分了多个组</p>\n<p>my//第一个分组的值</p>\n<p>m//第二个分组的值</p>\n<p>y//第三个分组的值</p>\n<p>0//模式匹配在字符串中的起始位置</p>\n<p>my name is imweba  //原始字符串</p>\n<p>name</p>\n<p>name</p>\n<p>n</p>\n<p>ame</p>\n<p>3</p>\n<p>my name is imweba </p>\n<p>is</p>\n<p>is</p>\n<p>i</p>\n<p>s</p>\n<p>8</p>\n<p>my name is imweba </p>\n<p>imweba</p>\n<p>imweba</p>\n<p>i</p>\n<p>mweba</p>\n<p>11</p>\n<p>my name is imweba </p>\n<p>“undefined undefined undefined undefined “//这一行是因为function必须要有return,我没写return,所以就都是undefined</p>\n<p>ok  打完收工</p>\n","source":"_posts/[js]replace替换.md","raw":"title: '[js]replace替换'\ndate: 2014-11-25 22:32\ntags:\n- javascript\n- 正则表达式\n- 前端\n- js\ncategories:\n- javascript\n---\n\n今天做前端试题,用到了replace函数,来记录一下.\n(以下部分知识点来自[http://www.w3cschool.cn/jsref_replace.html](http://www.w3cschool.cn/jsref_replace.html))\n\n\n##定义和用法\n\n\n\n\r\nreplace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。\n\n###语法\n\n\n\n<table class=\"dataintable \" style=\"margin-top:10px; border-collapse:collapse; border:1px solid rgb(136,136,136); width:606px; color:rgb(0,0,0); font-size:12px; background-color:rgb(249,249,249)\">\n<tbody>\n<tr>\n<th style=\"vertical-align:baseline; padding:5px 15px 5px 5px; border:1px solid rgb(136,136,136); background-color:rgb(204,204,204)\">\r\n参数</th>\n<th style=\"vertical-align:baseline; padding:5px 15px 5px 5px; border:1px solid rgb(136,136,136); background-color:rgb(204,204,204)\">\r\n描述</th>\n</tr>\n<tr>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\r\nregexp/substr</td>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\n<p style=\"margin-top:0px; margin-bottom:0px; line-height:18px\">必需。规定子字符串或要替换的模式的 RegExp 对象。</p>\n<p style=\"margin-top:0px; margin-bottom:2px; line-height:18px\">请注意，如果该值是一个字符串，则将它作为要检索的直接量文本模式，而不是首先被转换为 RegExp 对象。</p>\n</td>\n</tr>\n<tr>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\r\nreplacement</td>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\r\n必需。一个字符串值。规定了替换文本或生成替换文本的函数。</td>\n</tr>\n</tbody>\n</table>\n\n###返回值\n\n\r\n一个新的字符串，是用 _replacement_ 替换了 regexp 的第一次匹配或所有匹配之后得到的。\n\n###说明\n\n\r\n字符串 stringObject 的 replace() 方法执行的是查找并替换的操作。它将在 stringObject 中查找与 regexp 相匹配的子字符串，然后用 _replacement_ 来替换这些子串。如果 regexp 具有全局标志 g，那么 replace() 方法将替换所有匹配的子串。否则，它只替换第一个匹配子串。\n\n_replacement_ 可以是字符串，也可以是函数。如果它是字符串，那么每个匹配都将由字符串替换。但是 replacement 中的 $ 字符具有特定的含义。如下表所示，它说明从模式匹配得到的字符串将用于替换。\n<table class=\"dataintable \" style=\"margin-top:10px; border-collapse:collapse; border:1px solid rgb(136,136,136); width:606px; color:rgb(0,0,0); font-size:12px; background-color:rgb(249,249,249)\">\n<tbody>\n<tr>\n<th style=\"vertical-align:baseline; padding:5px 15px 5px 5px; border:1px solid rgb(136,136,136); background-color:rgb(204,204,204)\">\r\n字符</th>\n<th style=\"vertical-align:baseline; padding:5px 15px 5px 5px; border:1px solid rgb(136,136,136); background-color:rgb(204,204,204)\">\r\n替换文本</th>\n</tr>\n<tr>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\r\n$1、$2、...、$99</td>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\r\n与 regexp 中的第 1 到第 99 个子表达式相匹配的文本。</td>\n</tr>\n<tr>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\r\n$&</td>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\r\n与 regexp 相匹配的子串。</td>\n</tr>\n<tr>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\r\n$`</td>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\r\n位于匹配子串左侧的文本。</td>\n</tr>\n<tr>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\r\n$'</td>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\r\n位于匹配子串右侧的文本。</td>\n</tr>\n<tr>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\r\n$$</td>\n<td style=\"vertical-align:text-top; padding:5px 15px 5px 5px; border:1px solid rgb(170,170,170); background-color:rgb(239,239,239)\">\r\n直接量符号。</td>\n</tr>\n</tbody>\n</table>\n\n__注意：__ECMAScript v3 规定，replace() 方法的参数 replacement 可以是函数而不是字符串。在这种情况下，每个匹配都调用该函数，它返回的字符串将作为替换文本使用。该函数的第一个参数是匹配模式的字符串。接下来的参数是与模式中的子表达式匹配的字符串，可以有 0 个或多个这样的参数。接下来的参数是一个整数，声明了匹配在 stringObject 中出现的位置。最后一个参数是\r\n stringObject 本身。\n\n\n\n下面给几个简单的例子来说明一下\n\nps:介绍一下正则的小知识,\\w表示匹配一个英文字符,+表示匹配数量必须大于一个,\\b就是分节符,单词中间分隔用的,连在一起就是取出前面字符串中所有的单词\n\n\n```javascript\n'my name is'.replace(/(\\w+)\\b/g,'haha  ');//输出结果为   \"haha   haha   haha  \"\n```\n\n```javascript\n'my name is'.replace(/(\\w+)\\b/g,'$1aa');//输出结果为\"myaa nameaa isaa\"\n```\n\n```javascript\n'my name is'.replace(/((\\w)(\\w+?))\\b/g,function(m,a,b,c,d,e){return b.toUpperCase()+c;});//输出结果为\"My Name Is\"\n```\n\n重点讲解一下第三个,replace返回值为函数的例子(function必须要return)\n\n当replace返回值为函数的时候\n\n如果只有一个分组的话,他的参数是funciton(match,pos,originalText),分别表示模式的匹配项,模式匹配项在字符串中的位置和原始字符串\n\n如果有多个分组的话,他的参数是funciton(match,arr1,arr2,arr3,....arrn,pos,originalText),分别表示模式的匹配项,模式匹配项,还有n个匹配的分组,最后的两个参数是在字符串中的位置和原始字符串\n\n比如下面的例子,执行的结果就是\n\n'my name is imweba '.replace(/((\\w)(\\w+?))\\b/g,function(m,a,b,c,d,e){\n\nconsole.log(m);\n\nconsole.log(a);\n\nconsole.log(b);\n\nconsole.log(c);\n\nconsole.log(d);\n\nconsole.log(e);\n\n});\n执行结果\n\n\n\r\nmy//模式匹配的值,因为上面匹配了整个单词,虽然分了多个组\n\r\nmy//第一个分组的值\n\r\nm//第二个分组的值\n\r\ny//第三个分组的值\n\r\n0//模式匹配在字符串中的起始位置\n\r\nmy name is imweba  //原始字符串\n\r\nname\n\r\nname\n\r\nn\n\r\name\n\r\n3\n\r\nmy name is imweba \n\r\nis\n\r\nis\n\r\ni\n\r\ns\n\r\n8\n\r\nmy name is imweba \n\r\nimweba\n\r\nimweba\n\r\ni\n\r\nmweba\n\r\n11\n\r\nmy name is imweba \n\r\n\"undefined undefined undefined undefined \"//这一行是因为function必须要有return,我没写return,所以就都是undefined\n\n\n\n\n\n\n\n\n\nok  打完收工\n\n\n\n\n\n\n","slug":"[js]replace替换","updated":1420518904000,"excerpt":"","_id":"szxowugcdv4aycb1","comments":true,"layout":"post","photos":[],"link":""},{"title":"[js]前端试题","date":1416925560000,"tags":["42w8iuz77qggsdbu","yp75twrqr3dxo4q1","7pbv9dl79lacq16z"],"categories":["zf9azpa34c6krm50"],"content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1、获取页面id为 hello 的节点</span></div><div class=\"line\"><span class=\"keyword\">var</span> he=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'hello'</span>);</div><div class=\"line\"><span class=\"comment\">// 2、获取页面所有 div 标签</span></div><div class=\"line\"><span class=\"keyword\">var</span> di=<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'div'</span>);</div><div class=\"line\"><span class=\"comment\">// 3、给 id 为hello的节点绑定click 事件，点击的时候弹出 \"hello\"</span></div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'hello'</span>).onclick=<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{alert(<span class=\"string\">'helo'</span>)};</div><div class=\"line\"><span class=\"comment\">// 4、将页面上 id为hello的节点隐藏</span></div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'hello'</span>).style.visibility=none;</div><div class=\"line\"><span class=\"comment\">// 5、将 \"hello world\" 用正则替换成 \"hello javascript”</span></div><div class=\"line\"><span class=\"keyword\">var</span> str=<span class=\"string\">'hello world'</span>;</div><div class=\"line\">str.replace(<span class=\"regexp\">/hello[\\s]+world/g</span>,<span class=\"string\">'hello javascript'</span>);</div><div class=\"line\"><span class=\"comment\">// 6、给节点（假设为element）绑定click事件，当被点击时候，alert 弹出事件的类型（通过jquery）</span></div><div class=\"line\">$(element).click(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(event)</span> </span>{</div><div class=\"line\">    alert(event.type);</div><div class=\"line\">});</div><div class=\"line\"><span class=\"comment\">// 7、给一个节点添加一个类 \"hello\"</span></div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'kw'</span>).className=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'kw'</span>).className+<span class=\"string\">\" hello\"</span>;</div><div class=\"line\"><span class=\"comment\">// 8、给节点（假设为element）绑定click事件，当被点击时候，alert 弹出事件的类型（要求兼容IE、标准浏览器）</span></div><div class=\"line\">element.onclick=<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(event)</span></span>{<span class=\"keyword\">var</span> e=event||<span class=\"built_in\">window</span>.event};</div><div class=\"line\"><span class=\"comment\">// 9、假设页面有这么两个节点将 id为world的节点的 内容设置成 跟 id 为 hello 的节点一样。</span></div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'world'</span>).innerHTML=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'hello'</span>).innerHTML;</div><div class=\"line\"><span class=\"comment\">// 10、通过 js 将element的margin-left 设置为 20px</span></div><div class=\"line\">element.style.marginLeft=<span class=\"string\">\"20px\"</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 1.[{a:3},{a:4},{a:1},{a:2}] sort排序</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortnum</span><span class=\"params\">(a,b)</span></span>{</div><div class=\"line\">    <span class=\"keyword\">return</span> a.a-b.a;</div><div class=\"line\">}</div><div class=\"line\"><span class=\"comment\">//   [{a:3,b:5},{a:4,b:6},{a:1},{a:2,b:8}]按a的正向排序</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortab</span><span class=\"params\">(a,b)</span></span>{</div><div class=\"line\">    <span class=\"keyword\">return</span> a.a-b.a!=<span class=\"number\">0</span>?a.a-b.a:a.b-b.b;</div><div class=\"line\">}</div><div class=\"line\"><span class=\"comment\">//   sort 排序原理  使用的算法</span></div><div class=\"line\"><span class=\"comment\">// 2.my name is imweba ... =&gt; my6 name7 is8 imweba9 ...</span></div><div class=\"line\"><span class=\"comment\">//   用正则实现</span></div><div class=\"line\"><span class=\"string\">'my name is imweba '</span>.replace(<span class=\"regexp\">/([\\w]+)\\b/g</span>,<span class=\"string\">'$1'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> attr=<span class=\"string\">'my name is imweba '</span>.match(<span class=\"regexp\">/([\\w]+)\\b/g</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; attr.length; i++) {</div><div class=\"line\">    attr[i]=attr[i]+(<span class=\"number\">6</span>+i);</div><div class=\"line\">};</div><div class=\"line\">attr.join(<span class=\"string\">' '</span>);<span class=\"comment\">//感觉不对,只能做到这个程度</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 3.实现function test(str)(){},将str的每个单词的首字母大写（str为英文字符串）</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">(str)</span></span>{</div><div class=\"line\">    <span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/((\\w)(\\w+?))\\b/g</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(m,a,b,c,d,e)</span></span>{<span class=\"keyword\">return</span> b.toUpperCase()+c;});</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 4.写一个二分查找的算法   （假设这个数组不是有序的呢）</span></div><div class=\"line\">\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*</div><div class=\"line\"><span class=\"comment\">// 5.123+”+34  直接说结果   12334</span></div><div class=\"line\"><span class=\"number\">12334</span></div><div class=\"line\"><span class=\"comment\">// 加法会将数字转化为字符串，减法和乘法等会将字符串转化为数字</span></div><div class=\"line\"><span class=\"comment\">// \"4\"\\*\"5\"=20</span></div><div class=\"line\"><span class=\"comment\">// 6.实现function find(attr,val){},找到当前页面里具备属性为attr且值为val的节点，输出其父元素名称</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">find</span><span class=\"params\">(attr,val)</span></span>{</div><div class=\"line\">    <span class=\"keyword\">var</span> dom=<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'\\*'</span>);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i&lt;dom.length; i++) {</div><div class=\"line\">        <span class=\"keyword\">if</span>(dom[i].getAttribute(attr)==val){</div><div class=\"line\">            <span class=\"keyword\">return</span> dom[i].parentNode.tagName;</div><div class=\"line\">        }</div><div class=\"line\">   }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n","source":"_posts/[js]前端试题.md","raw":"title: '[js]前端试题'\ndate: 2014-11-25 22:26\ntags:\n- javascript\n- 前端\n- 正则\ncategories:\n- javascript\n---\n\n```javascript\n// 1、获取页面id为 hello 的节点\nvar he=document.getElementById('hello');\n// 2、获取页面所有 div 标签\nvar di=document.getElementsByTagName('div');\n// 3、给 id 为hello的节点绑定click 事件，点击的时候弹出 \"hello\"\ndocument.getElementById('hello').onclick=function(){alert('helo')};\n// 4、将页面上 id为hello的节点隐藏\ndocument.getElementById('hello').style.visibility=none;\n// 5、将 \"hello world\" 用正则替换成 \"hello javascript”\nvar str='hello world';\nstr.replace(/hello[\\s]+world/g,'hello javascript');\n// 6、给节点（假设为element）绑定click事件，当被点击时候，alert 弹出事件的类型（通过jquery）\n$(element).click(function(event) {\n    alert(event.type);\n});\n// 7、给一个节点添加一个类 \"hello\"\ndocument.getElementById('kw').className=document.getElementById('kw').className+\" hello\";\n// 8、给节点（假设为element）绑定click事件，当被点击时候，alert 弹出事件的类型（要求兼容IE、标准浏览器）\nelement.onclick=function(event){var e=event||window.event};\n// 9、假设页面有这么两个节点将 id为world的节点的 内容设置成 跟 id 为 hello 的节点一样。\ndocument.getElementById('world').innerHTML=document.getElementById('hello').innerHTML;\n// 10、通过 js 将element的margin-left 设置为 20px\nelement.style.marginLeft=\"20px\";\n\n\n\n// 1.[{a:3},{a:4},{a:1},{a:2}] sort排序\nfunction sortnum(a,b){\n    return a.a-b.a;\n}\n//   [{a:3,b:5},{a:4,b:6},{a:1},{a:2,b:8}]按a的正向排序\nfunction sortab(a,b){\n    return a.a-b.a!=0?a.a-b.a:a.b-b.b;\n}\n//   sort 排序原理  使用的算法\n// 2.my name is imweba ... => my6 name7 is8 imweba9 ...\n//   用正则实现\n'my name is imweba '.replace(/([\\w]+)\\b/g,'$1')\nvar attr='my name is imweba '.match(/([\\w]+)\\b/g);\nfor (var i = 0;i < attr.length; i++) {\n    attr[i]=attr[i]+(6+i);\n};\nattr.join(' ');//感觉不对,只能做到这个程度\n\n// 3.实现function test(str)(){},将str的每个单词的首字母大写（str为英文字符串）\nfunction test(str){\n    return str.replace(/((\\w)(\\w+?))\\b/g,function(m,a,b,c,d,e){return b.toUpperCase()+c;});\n}\n\n// 4.写一个二分查找的算法   （假设这个数组不是有序的呢）\n\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\n// 5.123+”+34  直接说结果   12334\n12334\n// 加法会将数字转化为字符串，减法和乘法等会将字符串转化为数字\n// \"4\"\\*\"5\"=20\n// 6.实现function find(attr,val){},找到当前页面里具备属性为attr且值为val的节点，输出其父元素名称\nfunction find(attr,val){\n    var dom=document.getElementsByTagName('\\*');\n    for (var i = 0; i<dom.length; i++) {\n        if(dom[i].getAttribute(attr)==val){\n            return dom[i].parentNode.tagName;\n        }\n   }\n}\n\n```\n\n\n","slug":"[js]前端试题","updated":1420518904000,"excerpt":"","_id":"3y9e53558vapq3ja","comments":true,"layout":"post","photos":[],"link":""},{"title":"kali安装后设置","date":1425449697000,"tags":["7f1p5ltbw4tu889p","r7ch11y1aiwsbufi"],"categories":["uc3yyao8lxnpqvsf"],"content":"<p>kali安装好了，还有几件事要做<br>我们用root的身份登进去系统<br><a id=\"more\"></a></p>\n<h1 id=\"1_更新软件源\">1 更新软件源</h1>\n<p>官方自带的软件源速度相对比较慢，资源也少一些，我们添加一些国内的源进去<br>vi /etc/apt/sources.list<br>（可自由选择，不一定要全部）： </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#官方源</span></div><div class=\"line\">deb http:<span class=\"comment\">//http.kali.org/kali kali main non-free contrib</span></div><div class=\"line\">deb-src http:<span class=\"comment\">//http.kali.org/kali kali main non-free contrib</span></div><div class=\"line\">deb http:<span class=\"comment\">//security.kali.org/kali-security kali/updates main contrib non-free</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\">#激进源，新手不推荐使用这个软件源</span></div><div class=\"line\">deb http:<span class=\"comment\">//repo.kali.org/kali kali-bleeding-edge main</span></div><div class=\"line\">deb-src http:<span class=\"comment\">//repo.kali.org/kali kali-bleeding-edge main</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\">#中科大kali源</span></div><div class=\"line\">deb http:<span class=\"comment\">//mirrors.ustc.edu.cn/kali kali main non-free contrib</span></div><div class=\"line\">deb-src http:<span class=\"comment\">//mirrors.ustc.edu.cn/kali kali main non-free contrib</span></div><div class=\"line\">deb http:<span class=\"comment\">//mirrors.ustc.edu.cn/kali-security kali/updates main contrib non-free</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\">#阿里云kali源</span></div><div class=\"line\">deb http:<span class=\"comment\">//mirrors.aliyun.com/kali kali main non-free contrib</span></div><div class=\"line\">deb-src http:<span class=\"comment\">//mirrors.aliyun.com/kali kali main non-free contrib</span></div><div class=\"line\">deb http:<span class=\"comment\">//mirrors.aliyun.com/kali-security kali/updates main contrib non-free</span></div></pre></td></tr></table></figure>\n\n<p>保存之后运行：<br><code>apt-get update</code>     #刷新系统<br><code>apt-get dist-upgrade</code>        #安装更新</p>\n<h1 id=\"2_安装中文输入法和字体\">2 安装中文输入法和字体</h1>\n<p>安装字体<br><code>apt-get install ttf-wqy-microhei ttf-wqy-zenhei</code><br> 执行以下命令<br> <code>apt-get install fcitx fcitx-googlepinyin</code></p>\n<h1 id=\"3_安装vpn\">3 安装vpn</h1>\n<p>kali默认情况下vpn是无法使用的，需要安装相关组件</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get <span class=\"operator\"><span class=\"keyword\">install</span> network-manager-openvpn</span></div><div class=\"line\">apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> network-manager-openvpn-gnome</div><div class=\"line\">apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> network-manager-pptp</div><div class=\"line\">apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> network-manager-pptp-gnome</div><div class=\"line\">apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> network-manager-strongswan</div><div class=\"line\">apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> network-manager-vpnc</div><div class=\"line\">apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> network-manager-vpnc-gnome</div><div class=\"line\">/etc/init.d/network-manager restart</div></pre></td></tr></table></figure>\n\n<h1 id=\"4_网卡管理显示“device_not_managed”\">4 网卡管理显示“device not managed”</h1>\n<p><code>vi  /etc/NetworkManager/NetworkManager.conf</code><br>修改<code>managed=false</code>为<code>managed=true</code><br>然后重启网络管理<br><code>service network-manager restart</code></p>\n<h1 id=\"5_安装chrome浏览器\">5 安装chrome浏览器</h1>\n<p><code>apt-get install google-chrome-unstable</code></p>\n","source":"_posts/after-kali.md","raw":"title: kali安装后设置\ndate: 2015-03-04 14:14:57\ntags:\n- kali\n- Linux\ncategories: Linux\n---\nkali安装好了，还有几件事要做\n我们用root的身份登进去系统\n<!-- more -->\n#1 更新软件源\n官方自带的软件源速度相对比较慢，资源也少一些，我们添加一些国内的源进去\nvi /etc/apt/sources.list\n（可自由选择，不一定要全部）： \n```\n#官方源\ndeb http://http.kali.org/kali kali main non-free contrib\ndeb-src http://http.kali.org/kali kali main non-free contrib\ndeb http://security.kali.org/kali-security kali/updates main contrib non-free\n\n#激进源，新手不推荐使用这个软件源\ndeb http://repo.kali.org/kali kali-bleeding-edge main\ndeb-src http://repo.kali.org/kali kali-bleeding-edge main\n\n#中科大kali源\ndeb http://mirrors.ustc.edu.cn/kali kali main non-free contrib\ndeb-src http://mirrors.ustc.edu.cn/kali kali main non-free contrib\ndeb http://mirrors.ustc.edu.cn/kali-security kali/updates main contrib non-free\n\n#阿里云kali源\ndeb http://mirrors.aliyun.com/kali kali main non-free contrib\ndeb-src http://mirrors.aliyun.com/kali kali main non-free contrib\ndeb http://mirrors.aliyun.com/kali-security kali/updates main contrib non-free\n```\n保存之后运行：\n`apt-get update `     #刷新系统\n`apt-get dist-upgrade `        #安装更新\n\n#2 安装中文输入法和字体\n安装字体\n`apt-get install ttf-wqy-microhei ttf-wqy-zenhei`\n 执行以下命令\n `apt-get install fcitx fcitx-googlepinyin`\n\n#3 安装vpn\nkali默认情况下vpn是无法使用的，需要安装相关组件\n```\napt-get install network-manager-openvpn\napt-get install network-manager-openvpn-gnome\napt-get install network-manager-pptp\napt-get install network-manager-pptp-gnome\napt-get install network-manager-strongswan\napt-get install network-manager-vpnc\napt-get install network-manager-vpnc-gnome\n/etc/init.d/network-manager restart\n```\n\n#4 网卡管理显示“device not managed”\n`vi  /etc/NetworkManager/NetworkManager.conf`\n修改`managed=false`为`managed=true`\n然后重启网络管理\n`service network-manager restart`\n#5 安装chrome浏览器\n`apt-get install google-chrome-unstable`\n","slug":"after-kali","updated":1425451396000,"excerpt":"<p>kali安装好了，还有几件事要做<br>我们用root的身份登进去系统<br>","_id":"b7nae45l1wnlvt69","comments":true,"layout":"post","photos":[],"link":""},{"title":"chrome扩展开发手记-chrome扩展开始第一步manfest.json","date":1416813360000,"tags":["ekre7h4p56ix5fuu","13k6c1fzcojug313","l3ngbta6shcjqbc0","avfmmjml8fh3tdna","16tkm9tteziz9a17"],"categories":["e6lrnn3hglditrpe"],"content":"<p>参考文档   <a href=\"https://lmk123.duapp.com/\" target=\"_blank\" rel=\"external\">https://lmk123.duapp.com/</a></p>\n<p>下面开始写chrome扩展了,第一步就是看文档,官方文档有入门指导,先要过一遍</p>\n<p>我们首先来编写第一个文件manfest.json,这是一个清单文件,告诉系统,我有哪些文件,需要申请哪些权限都在里面,下卖弄给出我的manfest.json</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">{</div><div class=\"line\">    <span class=\"string\">\"name\"</span>:<span class=\"string\">\"cmcc520\"</span>,<span class=\"comment\">//扩展的名称</span></div><div class=\"line\">    <span class=\"string\">\"version\"</span>:<span class=\"string\">\"2.0\"</span>,<span class=\"comment\">//扩展的版本号,随便写</span></div><div class=\"line\">    <span class=\"string\">\"description\"</span>:<span class=\"string\">\"powered by 搁浅St\"</span>,<span class=\"comment\">//扩展的描述,就是在chrome://extension页面中,扩展名称下面的几个字</span></div><div class=\"line\">    <span class=\"string\">\"background\"</span>: {<span class=\"comment\">//background.js,整个扩展的运行,有个页面在后台运行</span></div><div class=\"line\">        <span class=\"string\">\"scripts\"</span>: [<span class=\"string\">\"js/function.js\"</span>,<span class=\"string\">\"bg.js\"</span>],</div><div class=\"line\">        <span class=\"string\">\"persistent\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">    },</div><div class=\"line\">    <span class=\"string\">\"page_action\"</span>:{<span class=\"comment\">//比较常见有page_action和browser_action有,page会出现在地址栏末端,browser会在浏览器上显示一个图标</span></div><div class=\"line\">        <span class=\"string\">\"default_icon\"</span>:<span class=\"string\">\"icon-48.png\"</span>,</div><div class=\"line\">        <span class=\"string\">\"default_popup\"</span>: <span class=\"string\">\"popup.html\"</span>,<span class=\"comment\">//popup.html点击弹出的页面</span></div><div class=\"line\">        <span class=\"string\">\"default_title\"</span>:<span class=\"string\">\"cmcc520\"</span></div><div class=\"line\">    },</div><div class=\"line\">    <span class=\"string\">\"permissions\"</span> : [<span class=\"comment\">//申请内容脚本的权限,在插入内容到页面时,需要用哪些权限,此处必须声明</span></div><div class=\"line\">        <span class=\"string\">\"tabs\"</span>, <span class=\"string\">\"http://\\*/\\*\"</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"string\">\"icons\"</span> : {<span class=\"comment\">//图标设置</span></div><div class=\"line\">        <span class=\"string\">\"48\"</span> : <span class=\"string\">\"icon-48.png\"</span>,</div><div class=\"line\">        <span class=\"string\">\"128\"</span> : <span class=\"string\">\"icon-128.png\"</span></div><div class=\"line\">    },</div><div class=\"line\">    <span class=\"string\">\"commands\"</span>: {<span class=\"comment\">//快捷键设置</span></div><div class=\"line\">        <span class=\"string\">\"logout_cmcc\"</span>: {</div><div class=\"line\">            <span class=\"string\">\"description\"</span>: <span class=\"string\">\"退出CMCC登录\"</span>,</div><div class=\"line\">            <span class=\"string\">\"suggested_key\"</span>: {</div><div class=\"line\">                <span class=\"string\">\"default\"</span>: <span class=\"string\">\"Alt+X\"</span></div><div class=\"line\">            }</div><div class=\"line\">        }</div><div class=\"line\">    },</div><div class=\"line\">    <span class=\"string\">\"manifest_version\"</span>:<span class=\"number\">2</span><span class=\"comment\">//manifest_version,现在版本1已经不支持,统一都写成2</span></div><div class=\"line\"></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>简单的属性,这里不再赘述,我重点说一下background,page_action,permissions和commands.</p>\n<p>background  它是一个包含扩展程序主要逻辑的不可见页面。扩展程序也可以包含其他页面，展现扩展程序的用户界面。如果扩展程序需要与用户加载的网页交互（相对于包含在扩展程序中的页面），扩展程序必须使用内容脚本。后台网页分两种：持续运行的后台网页与事件页面(设置persistent属性)。正如它们的名称所述，持续运行的后台网页保持打开状态，事件页面根据需要打开与关闭。除非您绝对需要您的后台网页一直运行，请首选事件页面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"background\"</span>: {<span class=\"comment\">//background.js,整个扩展的运行,有个页面在后台运行</span></div><div class=\"line\">    <span class=\"string\">\"scripts\"</span>: [<span class=\"string\">\"js/function.js\"</span>,<span class=\"string\">\"bg.js\"</span>],</div><div class=\"line\">    <span class=\"string\">\"persistent\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">},</div></pre></td></tr></table></figure>\n\n<p>比如我的这个 后台执行就是这样的</p>\n<p><img src=\"http://img.blog.csdn.net/20141124194616706?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>采用pageaction还是browseraction取决于你是否想让图标一直可见.`<img src=\"http://img.blog.csdn.net/20141124193151343?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>如图,绿色的是广告终结者,他的图标是pageAction,后面的印象笔记还有switchproxy是browserAction.一般来说,适用于少数页面的扩展建议使用pageaction,适用于大多数页面的建议使用browseraction</p>\n<p>permissions属性,用来设置和conten_script相关的选项,举个例子,如果你想插入一段代码到页面中去执行,操作页面上的dom,那就写个content_script就行了,使用 content_scripts 字段，扩展程序可以向一个页面中插入多个内容脚本，每个内容脚本可以有多个<br> JavaScript 和 CSS 文件,详细情况请看这里<a href=\"https://lmk123.duapp.com/extensions/content_scripts\" target=\"_blank\" rel=\"external\">https://lmk123.duapp.com/extensions/content_scripts</a></p>\n<p>我现在在做的一个扩展就是做这样的事,百度的搜索结果会先跳到一个百度的网址,然后才是目标网址,我可以使用cotent_scripts来插入脚本,修改百度搜索结果的链接,让他直接跳转到目标页面,而不是百度的搜索结果页面.</p>\n<p>commands选项是设置快捷键,然后给快捷键设置事件 监听,这样我们按快捷键就会执行相应操作.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"logout_cmcc\"</span>: {<span class=\"comment\">//某个快捷操作的名称</span></div><div class=\"line\">    <span class=\"string\">\"description\"</span>: <span class=\"string\">\"退出CMCC登录\"</span>,<span class=\"comment\">//快捷操作的描述</span></div><div class=\"line\">    <span class=\"string\">\"suggested_key\"</span>: {<span class=\"comment\">//默认推荐的快捷键,不能与系统默认的快捷键冲突,否则就会失灵,需要用户手动去设置</span></div><div class=\"line\">        <span class=\"string\">\"default\"</span>: <span class=\"string\">\"Alt+X\"</span></div><div class=\"line\">    }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n","source":"_posts/chrome扩展开发手记-chrome扩展开始第一步manfest.json.md","raw":"title: 'chrome扩展开发手记-chrome扩展开始第一步manfest.json'\ndate: 2014-11-24 15:16\ntags:\n- chrome\n- cmcc-edu\n- 扩展\n- 脚本\n- 中国移动\ncategories:\n- chrome扩展\n---\n参考文档   [https://lmk123.duapp.com/](https://lmk123.duapp.com/)\n\n下面开始写chrome扩展了,第一步就是看文档,官方文档有入门指导,先要过一遍\n\n我们首先来编写第一个文件manfest.json,这是一个清单文件,告诉系统,我有哪些文件,需要申请哪些权限都在里面,下卖弄给出我的manfest.json\n\n\n\n\n\n```javascript\n{\r\n    \"name\":\"cmcc520\",//扩展的名称\r\n    \"version\":\"2.0\",//扩展的版本号,随便写\r\n    \"description\":\"powered by 搁浅St\",//扩展的描述,就是在chrome://extension页面中,扩展名称下面的几个字\r\n    \"background\": {//background.js,整个扩展的运行,有个页面在后台运行\r\n        \"scripts\": [\"js/function.js\",\"bg.js\"],\r\n        \"persistent\": false\r\n    },\r\n    \"page_action\":{//比较常见有page_action和browser_action有,page会出现在地址栏末端,browser会在浏览器上显示一个图标\r\n        \"default_icon\":\"icon-48.png\",\r\n        \"default_popup\": \"popup.html\",//popup.html点击弹出的页面\r\n        \"default_title\":\"cmcc520\"\r\n    },\r\n    \"permissions\" : [//申请内容脚本的权限,在插入内容到页面时,需要用哪些权限,此处必须声明\r\n        \"tabs\", \"http://\\*/\\*\"\r\n    ],\r\n    \"icons\" : {//图标设置\r\n        \"48\" : \"icon-48.png\",\r\n        \"128\" : \"icon-128.png\"\r\n    },\r\n    \"commands\": {//快捷键设置\r\n        \"logout_cmcc\": {\r\n            \"description\": \"退出CMCC登录\",\r\n            \"suggested_key\": {\r\n                \"default\": \"Alt+X\"\r\n            }\r\n        }\r\n    },\r\n    \"manifest_version\":2//manifest_version,现在版本1已经不支持,统一都写成2\r\n\r\n}\r\n\n```\n\n\r\n简单的属性,这里不再赘述,我重点说一下background,page_action,permissions和commands.\r\n\nbackground  它是一个包含扩展程序主要逻辑的不可见页面。扩展程序也可以包含其他页面，展现扩展程序的用户界面。如果扩展程序需要与用户加载的网页交互（相对于包含在扩展程序中的页面），扩展程序必须使用内容脚本。后台网页分两种：持续运行的后台网页与事件页面(设置persistent属性)。正如它们的名称所述，持续运行的后台网页保持打开状态，事件页面根据需要打开与关闭。除非您绝对需要您的后台网页一直运行，请首选事件页面。\n\n\n```javascript\n    \"background\": {//background.js,整个扩展的运行,有个页面在后台运行\r\n        \"scripts\": [\"js/function.js\",\"bg.js\"],\r\n        \"persistent\": false\r\n    },\n```\n比如我的这个 后台执行就是这样的\r\n\n![](http://img.blog.csdn.net/20141124194616706?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n采用pageaction还是browseraction取决于你是否想让图标一直可见.`![](http://img.blog.csdn.net/20141124193151343?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n如图,绿色的是广告终结者,他的图标是pageAction,后面的印象笔记还有switchproxy是browserAction.一般来说,适用于少数页面的扩展建议使用pageaction,适用于大多数页面的建议使用browseraction\n\n\n\n\n\n\npermissions属性,用来设置和conten_script相关的选项,举个例子,如果你想插入一段代码到页面中去执行,操作页面上的dom,那就写个content_script就行了,使用 content_scripts 字段，扩展程序可以向一个页面中插入多个内容脚本，每个内容脚本可以有多个\r\n JavaScript 和 CSS 文件,详细情况请看这里[https://lmk123.duapp.com/extensions/content_scripts](https://lmk123.duapp.com/extensions/content_scripts)\n\n我现在在做的一个扩展就是做这样的事,百度的搜索结果会先跳到一个百度的网址,然后才是目标网址,我可以使用cotent_scripts来插入脚本,修改百度搜索结果的链接,让他直接跳转到目标页面,而不是百度的搜索结果页面.\n\n\n\n\n\n\n\ncommands选项是设置快捷键,然后给快捷键设置事件 监听,这样我们按快捷键就会执行相应操作.\n\n\n```javascript\n        \"logout_cmcc\": {//某个快捷操作的名称\r\n            \"description\": \"退出CMCC登录\",//快捷操作的描述\r\n            \"suggested_key\": {//默认推荐的快捷键,不能与系统默认的快捷键冲突,否则就会失灵,需要用户手动去设置\r\n                \"default\": \"Alt+X\"\r\n            }\r\n        }\n```\n\n\n\n","slug":"chrome扩展开发手记-chrome扩展开始第一步manfest.json","updated":1427611305000,"excerpt":"","_id":"hgqp0jg1rcyq2ary","comments":true,"layout":"post","photos":[],"link":""},{"title":"chrome扩展开发手记<1>-需求分析","date":1416565020000,"tags":["ekre7h4p56ix5fuu","13k6c1fzcojug313","16tkm9tteziz9a17"],"categories":["e6lrnn3hglditrpe"],"content":"<p>本人的学校在武汉,有CMCC-EDU的网络覆盖,中国移动和武汉市政府搞了一个活动,可以免费公益上网,说白了,就是可以免费使用EDU的网络,如图.<br><img src=\"http://img.blog.csdn.net/20141121181910580?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>以上是前提.</p>\n<p>这个网络的使用流程是这样子的.</p>\n<ol>\n<li>你打开任何一个网址,比如<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"external\">http://www.baidu.com</a>  <br><br>都会跳转到 <a href=\"http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC-EDU\" target=\"_blank\" rel=\"external\"></a><a href=\"http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC-EDU\" target=\"_blank\" rel=\"external\">http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC-EDU</a>  界面如图所示<br><br><img src=\"http://img.blog.csdn.net/20141124103645611?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></li>\n<li>接下来我们手动更改最上面的网址栏,把ssid改为iWuhan-Free,(注意大小写)<br><br>修改后的网址如下<a href=\"http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC-EDU\" target=\"_blank\" rel=\"external\">http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=iWuhan-Free</a>界面如下<br><br><img src=\"http://img.blog.csdn.net/20141124104120281?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></li>\n<li>接下来我们点击,请点击登录按钮,系统反馈如下<br><br><img src=\"http://img.blog.csdn.net/20141124104623968?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br><br>我们忽略这个警告,可以注意到,上面的地址栏已经变掉了,多了个loginFree.jsp完整的地址<a href=\"http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=iWuhan-Free\" target=\"_blank\" rel=\"external\">http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=iWuhan-Free</a></li>\n<li>接下来,我们再改一次ssid,改为CMCC520,完整地址如下<a href=\"http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=iWuhan-Free\" target=\"_blank\" rel=\"external\">http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC520</a> 界面还是和上图一样,就不贴图了,我们再点击一次,请点击登录,然后就会跳到一个计时页面,这样就表示你登录成功,可以上网了</li>\n</ol>\n<p>登录的流程走完了,下一篇,接下来我们分析一下登录的原理,简化一下登录的流程</p>\n","source":"_posts/chrome扩展开发手记1-需求分析.md","raw":"title: 'chrome扩展开发手记<1>-需求分析'\ndate: 2014-11-21 18:17\ntags:\n- chrome\n- cmcc-edu\n- 中国移动\ncategories:\n- chrome扩展\n---\n\n本人的学校在武汉,有CMCC-EDU的网络覆盖,中国移动和武汉市政府搞了一个活动,可以免费公益上网,说白了,就是可以免费使用EDU的网络,如图.\n![](http://img.blog.csdn.net/20141121181910580?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n\n以上是前提.\n\n这个网络的使用流程是这样子的.\n\n\n\n\n\n\n1. 你打开任何一个网址,比如http://www.baidu.com  <br/>\r\n都会跳转到 [](http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC-EDU)[http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC-EDU](http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC-EDU)  界面如图所示<br/>\n![](http://img.blog.csdn.net/20141124103645611?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n1. 接下来我们手动更改最上面的网址栏,把ssid改为iWuhan-Free,(注意大小写)<br/>\r\n修改后的网址如下[http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=iWuhan-Free](http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC-EDU)界面如下<br/>\n![](http://img.blog.csdn.net/20141124104120281?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n1. 接下来我们点击,请点击登录按钮,系统反馈如下<br/>\n![](http://img.blog.csdn.net/20141124104623968?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)<br/>\r\n我们忽略这个警告,可以注意到,上面的地址栏已经变掉了,多了个loginFree.jsp完整的地址[http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=iWuhan-Free](http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=iWuhan-Free)\n1. 接下来,我们再改一次ssid,改为CMCC520,完整地址如下[http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC520](http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=iWuhan-Free) 界面还是和上图一样,就不贴图了,我们再点击一次,请点击登录,然后就会跳到一个计时页面,这样就表示你登录成功,可以上网了\n\n\n\n\n\n\n登录的流程走完了,下一篇,接下来我们分析一下登录的原理,简化一下登录的流程\n\n","slug":"chrome扩展开发手记1-需求分析","updated":1427611314000,"excerpt":"","_id":"r6kk2mmyelzufcc4","comments":true,"layout":"post","photos":[],"link":""},{"title":"chrome扩展开发手记<2>-登录原理分析","date":1416799080000,"tags":["ekre7h4p56ix5fuu","13k6c1fzcojug313","ntzbis1t7cmnwpd0"],"categories":["e6lrnn3hglditrpe"],"content":"<p>上一篇,我们 介绍了一下登录的流程,但是用程序进行登录的话,我们肯定不能那样一步一步,太过复杂,所以我们接下来分下一下登录的具体过程,看看能不能作一些简化</p>\n<p>我们接下来,给几个页面编个号,下面好分析一点<br>A   最原始的跳转 <a href=\"http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC-EDU\" target=\"_blank\" rel=\"external\">http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC-EDU</a><br>B  第一次改ssid  <a href=\"http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC-EDU\" target=\"_blank\" rel=\"external\">http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=iWuhan-Free</a></p>\n<p>C 第一次点击 请点击登录  以后的地址<br><a href=\"http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=iWuhan-Free\" target=\"_blank\" rel=\"external\">http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=iWuhan-Free</a></p>\n<p>D 第二次改ssid<br><a href=\"http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=iWuhan-Free\" target=\"_blank\" rel=\"external\">http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC520</a></p>\n<ol>\n<li>从www.baidu.com跳转到A地址,这个步骤没什么特别的,服务器那边做了一个302跳转,然后我们这边就自动跳转到A地址了</li>\n<li><p>第一次改ssid,也就是从A到B,这个过程也没什么,只是一个单纯的地址跳转,B地址中有一个表单<br><br><img src=\"http://img.blog.csdn.net/20141124134725891?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br><br>这个表单里面 主要包含四个字段,<br><br>wlanacname:1022.0027.270.00<br><br>wlanuserip:10.80.97.209<br>ssid:iWuhan-Free<br><br>userAgent_1:Mozilla/5.0 (Windows NT 6.2)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36</p>\n</li>\n<li><p>我们第一次点击 请提交登录,所做的操作就是把上面的表单提交到  <a href=\"http://120.202.164.10:8080/portal/servlets/SingleLoginServlet\" target=\"_blank\" rel=\"external\">http://120.202.164.10:8080/portal/servlets/SingleLoginServlet</a><br><br>服务器返回的地址是C,这一步的表单提交主要是为了获取C的地址,就是因为多了的那个loginFree.jsp,这样下一步才能改ssid为CMCC520,否则,如果你越过这一步直接改ssid为CMCC520,就会跳转到其他的页面,比如下面这个<img src=\"http://img.blog.csdn.net/20141124133708801?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"><br><br>这个地址如果点击提交,是没有办法正常登陆的,我们必须要到武汉的那个页面才行.</p>\n</li>\n<li>在我们到达C那个页面以后,我们再次修改ssid,就到了D页面,然后在D页面点击  请点击登录,流程和上面的一样,页面效果也是一样,不过表单的值变了一个,具体表单post内容如下<br><br>wlanacname:1022.0027.270.00<br><br>wlanuserip:10.80.97.209<br>ssid:CMCC520<br>userAgent_1:Mozilla/5.0 (Windows NT 6.2)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36<br><br>提交以后,我们就可以登录成功了,成功以后服务器会做一个302跳转,页面跳转到一个登录计时的页面.</li>\n</ol>\n<p>************************************************************************************************************************************************************<br><em><br>\n</em><br>从整体来看,最核心的一个操作就是向<a href=\"http://120.202.164.10:8080/portal/servlets/SingleLoginServlet\" target=\"_blank\" rel=\"external\">http://120.202.164.10:8080/portal/servlets/SingleLoginServlet</a>提交一个表单,表单内容是<br>wlanacname:1022.0027.270.00<br>wlanuserip:10.80.97.209<br>ssid:CMCC520<br>userAgent<em>1:Mozilla/5.0 (Windows NT 6.2)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36<br>然后,然后就没有然后了,那个最后计时页面的跳转没有多大的实际作用,我们只需要post这一个请求就好了<br>下一步我们开始制作chrome扩展,核心也是要实现这个post的请求\n</em>************************************************************************************************************************************************************<em>\n</em>退出登录也是如此,发一个get请求过去,然后从获得的内容中进行判断,判断成功与否<em><br>_</em></p>\n<p>下线请求<br><a href=\"http://120.202.164.10:8080/portal/servlets/LogoutServlet?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC520&amp;ATTRIBUTE_USERNAME=iWuhanFree4300&amp;ATTRIBUTE_UUID=26FBE9A694B6221958CF6DE2704F0ECA&amp;ATTRIBUTE_IPADDRESS=10.80.97.209&amp;cancelAutomatismLogin=false\" target=\"_blank\" rel=\"external\">http://120.202.164.10:8080/portal/servlets/LogoutServlet?wlanacname=1022.0027.270.00&amp;wlanuserip=10.80.97.209&amp;ssid=CMCC520&amp;ATTRIBUTE_USERNAME=iWuhanFree4300&amp;ATTRIBUTE_UUID=26FBE9A694B6221958CF6DE2704F0ECA&amp;ATTRIBUTE_IPADDRESS=10.80.97.209&amp;cancelAutomatismLogin=false</a></p>\n<p>表单实际内容</p>\n<p>wlanacname:1022.0027.270.00</p>\n<p>wlanuserip:10.80.97.209</p>\n<p>ssid:CMCC520</p>\n<p>ATTRIBUTE_USERNAME:iWuhanFree4300</p>\n<p>ATTRIBUTE_UUID:26FBE9A694B6221958CF6DE2704F0ECA</p>\n<p>ATTRIBUTE_IPADDRESS:10.80.97.209</p>\n<p>cancelAutomatismLogin:false</p>\n","source":"_posts/chrome扩展开发手记2-登录原理分析.md","raw":"title: 'chrome扩展开发手记<2>-登录原理分析'\ndate: 2014-11-24 11:18\ntags:\n- chrome\n- cmcc-edu\n- 表单\ncategories:\n- chrome扩展\n---\n\n上一篇,我们 介绍了一下登录的流程,但是用程序进行登录的话,我们肯定不能那样一步一步,太过复杂,所以我们接下来分下一下登录的具体过程,看看能不能作一些简化\n\n我们接下来,给几个页面编个号,下面好分析一点\nA   最原始的跳转 [http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC-EDU](http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC-EDU)\nB  第一次改ssid  [http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=iWuhan-Free](http://120.202.164.10:8080/portal/?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC-EDU)\n\nC 第一次点击 请点击登录  以后的地址\n[http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=iWuhan-Free](http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=iWuhan-Free)\n\nD 第二次改ssid  \n[http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC520](http://120.202.164.10:8080/portal/loginFree.jsp?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=iWuhan-Free)\n\n\n\n\n\n1. 从www.baidu.com跳转到A地址,这个步骤没什么特别的,服务器那边做了一个302跳转,然后我们这边就自动跳转到A地址了\n1. 第一次改ssid,也就是从A到B,这个过程也没什么,只是一个单纯的地址跳转,B地址中有一个表单<br/>\n![](http://img.blog.csdn.net/20141124134725891?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)<br/>\r\n这个表单里面 主要包含四个字段,\r\n<br/>wlanacname:1022.0027.270.00\n<br/>wlanuserip:10.80.97.209\nssid:iWuhan-Free\n<br/>userAgent_1:Mozilla/5.0 (Windows NT 6.2)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36\n\n1. 我们第一次点击 请提交登录,所做的操作就是把上面的表单提交到  [http://120.202.164.10:8080/portal/servlets/SingleLoginServlet](http://120.202.164.10:8080/portal/servlets/SingleLoginServlet)<br/>\r\n服务器返回的地址是C,这一步的表单提交主要是为了获取C的地址,就是因为多了的那个loginFree.jsp,这样下一步才能改ssid为CMCC520,否则,如果你越过这一步直接改ssid为CMCC520,就会跳转到其他的页面,比如下面这个![](http://img.blog.csdn.net/20141124133708801?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)<br/>\r\n这个地址如果点击提交,是没有办法正常登陆的,我们必须要到武汉的那个页面才行.\n1. 在我们到达C那个页面以后,我们再次修改ssid,就到了D页面,然后在D页面点击  请点击登录,流程和上面的一样,页面效果也是一样,不过表单的值变了一个,具体表单post内容如下\r\n<br/>wlanacname:1022.0027.270.00\n<br/>wlanuserip:10.80.97.209\nssid:CMCC520\nuserAgent_1:Mozilla/5.0 (Windows NT 6.2)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36<br/>\r\n提交以后,我们就可以登录成功了,成功以后服务器会做一个302跳转,页面跳转到一个登录计时的页面.\n\n\n\n\n\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\n_<br/>\n_\n从整体来看,最核心的一个操作就是向[http://120.202.164.10:8080/portal/servlets/SingleLoginServlet](http://120.202.164.10:8080/portal/servlets/SingleLoginServlet)提交一个表单,表单内容是\nwlanacname:1022.0027.270.00\nwlanuserip:10.80.97.209\nssid:CMCC520\nuserAgent_1:Mozilla/5.0 (Windows NT 6.2)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36\n然后,然后就没有然后了,那个最后计时页面的跳转没有多大的实际作用,我们只需要post这一个请求就好了\n下一步我们开始制作chrome扩展,核心也是要实现这个post的请求\n_\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*_\n_退出登录也是如此,发一个get请求过去,然后从获得的内容中进行判断,判断成功与否_\n__\n\n下线请求\n[http://120.202.164.10:8080/portal/servlets/LogoutServlet?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC520&ATTRIBUTE_USERNAME=iWuhanFree4300&ATTRIBUTE_UUID=26FBE9A694B6221958CF6DE2704F0ECA&ATTRIBUTE_IPADDRESS=10.80.97.209&cancelAutomatismLogin=false](http://120.202.164.10:8080/portal/servlets/LogoutServlet?wlanacname=1022.0027.270.00&wlanuserip=10.80.97.209&ssid=CMCC520&ATTRIBUTE_USERNAME=iWuhanFree4300&ATTRIBUTE_UUID=26FBE9A694B6221958CF6DE2704F0ECA&ATTRIBUTE_IPADDRESS=10.80.97.209&cancelAutomatismLogin=false)\n\n表单实际内容\n\nwlanacname:1022.0027.270.00\n\nwlanuserip:10.80.97.209\n\nssid:CMCC520\n\nATTRIBUTE_USERNAME:iWuhanFree4300\n\nATTRIBUTE_UUID:26FBE9A694B6221958CF6DE2704F0ECA\n\nATTRIBUTE_IPADDRESS:10.80.97.209\n\ncancelAutomatismLogin:false\n\n\n\n\n\n\n\n\n","slug":"chrome扩展开发手记2-登录原理分析","updated":1427611309000,"excerpt":"","_id":"cm6xuxbuwuakw63m","comments":true,"layout":"post","photos":[],"link":""},{"title":"配置hexo","date":1417180047000,"tags":["9cs3dsl39baopq36"],"categories":["i18zy3saw203wjf9"],"content":"<p>经过<a href=\"/how-to-build-a-blog-with-hexo.html\">上篇博客</a>,我们搭建起了自己的博客,接下来我们对它做些个性化的定制.<br>在hexo中,配置文件一共两个(我的hexo安装在F:/blog/),分别是<code>F:/blog/_config.yml</code>和<code>F:/blog/themes/light/_config.yml</code>.第一个是全局的配置文件,第二个是主题的配置文件,在继续说之前,我们先来说一下主题安装.<a id=\"more\"></a></p>\n<h1 id=\"主题安装\">主题安装</h1>\n<p>这个很简单,在hexo的Github的主页上有个主题栏目,<a href=\"https://github.com/hexojs/hexo/wiki/Themes\" target=\"_blank\" rel=\"external\">https://github.com/hexojs/hexo/wiki/Themes</a>,里面列出了很多主题.<br>安装方法很简单</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"input\"><span class=\"prompt\">$ git clone &lt;repository&gt;</span> themes/&lt;theme-name&gt;</span></div></pre></td></tr></table></figure>\n\n<p>举个简单例子,我安装的主题名为<code>light</code>,请在<code>F:/blog/</code>目录下执行以下代码</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$ </span>git clone <span class=\"symbol\">https:</span>/<span class=\"regexp\">/github.com/hexojs</span><span class=\"regexp\">/hexo-theme-light themes/light</span></div></pre></td></tr></table></figure>\n\n<p>如果你不是在<code>F:/blog/</code>中执行,请修改后面的路径themes/light为你的路径.基本原理就是把主题下下来,放在themes目录下就OK了,主题安装完毕.</p>\n<h1 id=\"修改全局配置文件_F:/blog/_config-yml\">修改全局配置文件 <code>F:/blog/_config.yml</code></h1>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\"># Hexo Configuration</span></div><div class=\"line\"><span class=\"preprocessor\">## Docs: http://hexo.io/docs/configuration.html</span></div><div class=\"line\"><span class=\"preprocessor\">## Source: https://github.com/hexojs/hexo/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\"># Site</span></div><div class=\"line\"><span class=\"label\">title:</span> 搁浅<span class=\"keyword\">St</span>的blog  <span class=\"preprocessor\">#站点的名称</span></div><div class=\"line\"><span class=\"label\">subtitle:</span> 我最喜欢笨笨   <span class=\"preprocessor\">#站点的副标题</span></div><div class=\"line\"><span class=\"label\">description:</span>             <span class=\"preprocessor\">#站点的描述,有利于搜索引擎的抓取</span></div><div class=\"line\"><span class=\"label\">author:</span> 搁浅<span class=\"keyword\">St</span>       <span class=\"preprocessor\">#作者</span></div><div class=\"line\"><span class=\"label\">email:</span> geqianst@qq.com          <span class=\"preprocessor\">#你的邮箱</span></div><div class=\"line\"><span class=\"label\">language:</span> <span class=\"built_in\">zh</span>-CN           <span class=\"preprocessor\">#语言,一般应该都是这个吧</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\"># URL</span></div><div class=\"line\"><span class=\"preprocessor\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class=\"line\"><span class=\"label\">url:</span> http://jackroyal.github.io       <span class=\"preprocessor\">#网站的url,在页面上,可以调用配置中的url参数,就是这个,比如google自定义搜索,需要制定搜索范围,就是通过这个设置的</span></div><div class=\"line\"><span class=\"label\">root:</span> /</div><div class=\"line\"><span class=\"label\">permalink:</span> :year/:month/:day/:title/</div><div class=\"line\"><span class=\"label\">tag_dir:</span> tags</div><div class=\"line\"><span class=\"label\">archive_dir:</span> archives</div><div class=\"line\"><span class=\"label\">category_dir:</span> categories</div><div class=\"line\"><span class=\"label\">code_dir:</span> downloads/code</div><div class=\"line\"><span class=\"label\">permalink_defaults:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\"># Directory</span></div><div class=\"line\"><span class=\"label\">source_dir:</span> source</div><div class=\"line\"><span class=\"label\">public_dir:</span> public</div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\"># Writing</span></div><div class=\"line\"><span class=\"label\">new_post_name:</span> :title.md <span class=\"preprocessor\"># File name of new posts</span></div><div class=\"line\"><span class=\"label\">default_layout:</span> post  </div><div class=\"line\"><span class=\"label\">titlecase:</span> false <span class=\"preprocessor\"># Transform title into titlecase</span></div><div class=\"line\"><span class=\"label\">external_link:</span> true <span class=\"preprocessor\"># Open external links in new tab</span></div><div class=\"line\"><span class=\"label\">filename_case:</span> <span class=\"number\">0</span></div><div class=\"line\"><span class=\"label\">render_drafts:</span> false</div><div class=\"line\"><span class=\"label\">post_asset_folder:</span> false</div><div class=\"line\"><span class=\"label\">relative_link:</span> false</div><div class=\"line\"><span class=\"label\">highlight:</span></div><div class=\"line\">  enable: true</div><div class=\"line\">  line_number: true</div><div class=\"line\">  tab_replace:</div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\"># Category & Tag</span></div><div class=\"line\"><span class=\"label\">default_category:</span> uncategorized  </div><div class=\"line\"><span class=\"label\">category_map:</span></div><div class=\"line\"><span class=\"label\">tag_map:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\"># Archives 默认值为2，这里都修改为1，相应页面就只会列出标题，而非全文</span></div><div class=\"line\"><span class=\"preprocessor\">## 2: Enable pagination</span></div><div class=\"line\"><span class=\"preprocessor\">## 1: Disable pagination</span></div><div class=\"line\"><span class=\"preprocessor\">## 0: Fully Disable</span></div><div class=\"line\"><span class=\"label\">archive:</span> <span class=\"number\">1</span></div><div class=\"line\"><span class=\"label\">category:</span> <span class=\"number\">1</span></div><div class=\"line\"><span class=\"label\">tag:</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\"># Server</span></div><div class=\"line\"><span class=\"preprocessor\">## Hexo uses Connect as a server</span></div><div class=\"line\"><span class=\"preprocessor\">## You can customize the logger format as defined in</span></div><div class=\"line\"><span class=\"preprocessor\">## http://www.senchalabs.org/connect/logger.html</span></div><div class=\"line\"><span class=\"label\">port:</span> <span class=\"number\">4000</span></div><div class=\"line\"><span class=\"label\">server_ip:</span> localhost</div><div class=\"line\"><span class=\"label\">logger:</span> false</div><div class=\"line\"><span class=\"label\">logger_format:</span> dev</div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\"># Date / Time format</span></div><div class=\"line\"><span class=\"preprocessor\">## Hexo uses Moment.js to parse and display date</span></div><div class=\"line\"><span class=\"preprocessor\">## You can customize the date format as defined in</span></div><div class=\"line\"><span class=\"preprocessor\">## http://momentjs.com/docs/#/displaying/format/</span></div><div class=\"line\"><span class=\"label\">date_format:</span> MMM D YYYY</div><div class=\"line\"><span class=\"label\">time_format:</span> H:mm:ss</div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\"># Pagination</span></div><div class=\"line\"><span class=\"preprocessor\">## Set per_page to 0 to disable pagination</span></div><div class=\"line\"><span class=\"label\">per_page:</span> <span class=\"number\">5</span></div><div class=\"line\"><span class=\"label\">pagination_dir:</span> page</div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\"># Disqus</span></div><div class=\"line\"><span class=\"label\">disqus_shortname:</span></div><div class=\"line\"><span class=\"preprocessor\">#这一行是我添加的duoshuo_shortname,因为天朝disqus不好用,用多说</span></div><div class=\"line\"><span class=\"label\">duoshuo_shortname:</span> jackroyal</div><div class=\"line\"><span class=\"preprocessor\"># Extensions</span></div><div class=\"line\"><span class=\"preprocessor\">## Plugins: https://github.com/hexojs/hexo/wiki/Plugins</span></div><div class=\"line\"><span class=\"preprocessor\">## Themes: https://github.com/hexojs/hexo/wiki/Themes</span></div><div class=\"line\"><span class=\"label\">theme:</span> light</div><div class=\"line\"><span class=\"label\">exclude_generator:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\"># Deployment  发布相关设置</span></div><div class=\"line\"><span class=\"preprocessor\">## Docs: http://hexo.io/docs/deployment.html</span></div><div class=\"line\"><span class=\"label\">deploy:</span></div><div class=\"line\">  type: github</div><div class=\"line\">  repo: https://github.com/Jackroyal/Jackroyal.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n\n<p>至此,全局配置文件修改完毕,你可以<code>hexo g</code>和<code>hexo s</code>进行查看.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"label\">menu:</span><span class=\"preprocessor\">#导航栏的设置默认只有这两个,还可以添加更多的导航</span></div><div class=\"line\">  Home: /</div><div class=\"line\">  Archives: /archives</div><div class=\"line\"><span class=\"preprocessor\">#它就是你页面右边的侧边项目,比如搜索之类,你可以根据自己的需求进行修改,你能用几个widgets可以在F:\\blog\\themes\\light\\layout\\_widget中进行查看</span></div><div class=\"line\"><span class=\"label\">widgets:</span><span class=\"preprocessor\">#我这里使用了所有的widgets</span></div><div class=\"line\">- search</div><div class=\"line\">- category</div><div class=\"line\">- tag</div><div class=\"line\">- recent_posts</div><div class=\"line\">- tagcloud</div><div class=\"line\"></div><div class=\"line\"><span class=\"label\">excerpt_link:</span> Read More  <span class=\"preprocessor\">#可以换成中文的  阅读全文</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"label\">twitter:</span></div><div class=\"line\">  username:</div><div class=\"line\">  show_replies: false</div><div class=\"line\">  tweet_count: <span class=\"number\">5</span></div><div class=\"line\">//默认的一个分享组件,因为主要针对国外,不适合国内我们不使用它</div><div class=\"line\"><span class=\"label\">addthis:</span></div><div class=\"line\">  enable: false  <span class=\"preprocessor\">#把true改为false</span></div><div class=\"line\">  pubid:</div><div class=\"line\">  facebook: true</div><div class=\"line\">  twitter: true</div><div class=\"line\">  google: true</div><div class=\"line\">  pinterest: true</div><div class=\"line\"></div><div class=\"line\"><span class=\"label\">fancybox:</span> true</div><div class=\"line\"></div><div class=\"line\"><span class=\"label\">google_analytics:</span></div><div class=\"line\"><span class=\"label\">rss:</span></div><div class=\"line\"><span class=\"label\">duoshuo_shortname:</span> jackroyal  <span class=\"preprocessor\">#多说的用户名</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"label\">comment_provider:</span></div><div class=\"line\"><span class=\"preprocessor\"># Facebook comment</span></div><div class=\"line\"><span class=\"label\">facebook:</span></div><div class=\"line\">  appid: <span class=\"number\">123456789012345</span></div><div class=\"line\">  comment_count: <span class=\"number\">5</span></div><div class=\"line\">  comment_width: <span class=\"number\">840</span></div><div class=\"line\">  comment_colorscheme: light</div></pre></td></tr></table></figure>\n\n<p>至此,配置文件修改完毕,上面提到了我们不适用disqus的评论组件,使用多说,下面教大家来配置多说</p>\n<h1 id=\"创建多说\">创建多说</h1>\n<p>首先我们去多说注册一个账号,<a href=\"http://duoshuo.com/\" title=\"多说官网\" target=\"_blank\" rel=\"external\">点击这里</a><br>我们点击<a href=\"http://duoshuo.com/create-site/\" title=\"我要安装\" target=\"_blank\" rel=\"external\">我要安装</a>,界面如下<img src=\"http://ww4.sinaimg.cn/large/692869a3gw1emtdlnpsqaj20wo0lp783.jpg\" alt=\"duoshuo 创建界面\" title=\"创建多说账号\"><br>shortname就是jackroyal,创建完成后,跳转到如下界面<br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1emtdp96x54j20us0jxn18.jpg\" alt=\"获取多说代码\" title=\"获取多说代码\"><br>我们选择<code>通用代码</code>,点击复制,就行了</p>\n<h1 id=\"配置多说\">配置多说</h1>\n<p>这里说一个前提,我使用的是light主题,如果你用的是其他主题,接下来的设置可能给我有点区别,但是原理差不多,参考看看</p>\n<ol>\n<li>我们打开<code>F:\\blog\\themes\\light\\layout\\_partial\\comment.ejs</code>这个文件,然后修改后代码如下(如果你不是light主题,可能跟这个不一样,你去找下包含comment的section在哪里,改法还是这样.例如系统默认的landscape主题,下面这段代码就是在article.ejs,它没有comment.ejs)</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"vbscript\">&lt;% <span class=\"keyword\">if</span> (page.comments){ %&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 这里添加了一个导航,页面的下面会有一个上一篇,下一篇 --&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"title\">nav</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"pagination\"</span> &gt;</span></div><div class=\"line\">    <span class=\"vbscript\">&lt;% <span class=\"keyword\">if</span> (page.prev) { %&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"&lt;%- config.root %&gt;&lt;%- page.prev.path %&gt;\"</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"alignleft prev\"</span> &gt;</span> <span class=\"vbscript\">&lt;%=page.prev.title %&gt;</span> <span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"vbscript\">&lt;% } %&gt;</span></div><div class=\"line\">    <span class=\"vbscript\">&lt;% <span class=\"keyword\">if</span> (page.<span class=\"keyword\">next</span>) { %&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"&lt;%- config.root %&gt;&lt;%- page.next.path %&gt;\"</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"alignright next\"</span> &gt;</span> <span class=\"vbscript\">&lt;%=page.<span class=\"keyword\">next</span>.title %&gt;</span> <span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"vbscript\">&lt;% } %&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"clearfix\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">nav</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 导航结束 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">section</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"comments\"</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 这里是多说的代码,直接把你的代码粘贴到这里就行 --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 多说评论框 start --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"ds-thread\"</span> <span class=\"attribute\">data-thread-key</span>=<span class=\"value\">\"&lt;%= page.layout %&gt;-&lt;%= page.slug %&gt;\"</span> <span class=\"attribute\">data-title</span>=<span class=\"value\">\"&lt;%= page.title %&gt;\"</span> <span class=\"attribute\">data-url</span>=<span class=\"value\">\"&lt;%= page.permalink %&gt;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 多说评论框 end --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"keyword\">var</span> duoshuoQuery = {short_name:<span class=\"string\">'&lt;%= config.duoshuo_shortname %&gt;'</span>};</div><div class=\"line\">      (<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">        <span class=\"keyword\">var</span> ds = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</div><div class=\"line\">        ds.type = <span class=\"string\">'text/javascript'</span>;ds.async = <span class=\"literal\">true</span>;</div><div class=\"line\">        ds.src = (<span class=\"built_in\">document</span>.location.protocol == <span class=\"string\">'https:'</span> ? <span class=\"string\">'https:'</span> : <span class=\"string\">'http:'</span>) + <span class=\"string\">'//static.duoshuo.com/embed.js'</span>;</div><div class=\"line\">        ds.charset = <span class=\"string\">'UTF-8'</span>;</div><div class=\"line\">        (<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>]</div><div class=\"line\">         || <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>]).appendChild(ds);</div><div class=\"line\">      })();</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 多说公共JS代码 end --&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 多说结束 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"title\">section</span>&gt;</span></div><div class=\"line\"><span class=\"vbscript\">&lt;% } %&gt;</span></div></pre></td></tr></table></figure>\n\n<p>眼尖的同学可能已经看到我的上面第16行代码与你们的不同,这行代码包括了页面的标题和url,它会根据hexo的配置,由hexo动态生成,所以你把你的代码替换成我的这行代码.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div <span class=\"variable\">class=</span><span class=\"string\">\"ds-thread\"</span> <span class=\"variable\">data-thread-key=</span><span class=\"string\">\"&lt;%= page.layout %&gt;-&lt;%= page.slug %&gt;\"</span> <span class=\"variable\">data-title=</span><span class=\"string\">\"&lt;%= page.title %&gt;\"</span> <span class=\"variable\">data-url=</span><span class=\"string\">\"&lt;%= page.permalink %&gt;\"</span>&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>\n\n<p>至此,多说添加完毕</p>\n<h1 id=\"修复bug\">修复bug</h1>\n<p>我发现light的主题貌似有个小bug,在<code>F:\\blog\\themes\\light\\layout\\_partial\\article.ejs</code>中间第27行有这样一行代码</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"vbscript\">&lt;% <span class=\"keyword\">if</span> (item.comment && config.disqus_shortname){ %&gt;</span></div></pre></td></tr></table></figure>\n\n<p>首先我们,替换config.disqus_shortname为config.duoshuo_shortname.<br>然后修改<code>item.comment</code>为<code>item.comments</code>,因为系统中没有comment这个变量,只有comments这个变量,如果不修改comments,那么<code>item.comment</code>一直为假,所以一直不成立,就不会显示comments字段了.修改后代码如下</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"vbscript\">&lt;% <span class=\"keyword\">if</span> (item.comments && config.duoshuo_shortname){ %&gt;</span></div></pre></td></tr></table></figure>\n\n<p>产生的效果如图<img src=\"http://ww3.sinaimg.cn/large/692869a3gw1emteitia5uj20tl0fn412.jpg\" alt=\"开启和关闭comment的区别\" title=\"开启和关闭comment的区别\">.<br>至此,配置hexo,打完收工<br>enjoy it</p>\n<hr>\n<h1 id=\"参考文献\">参考文献</h1>\n<p>1 <a href=\"http://zipperary.com/2013/05/29/hexo-guide-3/\" target=\"_blank\" rel=\"external\">http://zipperary.com/2013/05/29/hexo-guide-3/</a><br>2 <a href=\"http://dev.duoshuo.com/threads/541d3b2b40b5abcd2e4df0e9\" target=\"_blank\" rel=\"external\">duoshuo官方Hexo使用教程</a></p>\n","source":"_posts/custom-hexo.md","raw":"title: 配置hexo\ndate: 2014-11-28 21:07:27\ntags:\n- hexo\ncategories: hexo\n---\n经过[上篇博客](/how-to-build-a-blog-with-hexo.html),我们搭建起了自己的博客,接下来我们对它做些个性化的定制.\n在hexo中,配置文件一共两个(我的hexo安装在F:/blog/),分别是`F:/blog/_config.yml`和`F:/blog/themes/light/_config.yml`.第一个是全局的配置文件,第二个是主题的配置文件,在继续说之前,我们先来说一下主题安装.<!-- more -->\n#主题安装\n这个很简单,在hexo的Github的主页上有个主题栏目,<https://github.com/hexojs/hexo/wiki/Themes>,里面列出了很多主题.\n安装方法很简单\n```\n$ git clone <repository> themes/<theme-name>\n```\n举个简单例子,我安装的主题名为`light`,请在`F:/blog/`目录下执行以下代码\n```\n$ git clone https://github.com/hexojs/hexo-theme-light themes/light\n```\n如果你不是在`F:/blog/`中执行,请修改后面的路径themes/light为你的路径.基本原理就是把主题下下来,放在themes目录下就OK了,主题安装完毕.\n#修改全局配置文件 `F:/blog/_config.yml`\n```\n# Hexo Configuration\n## Docs: http://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: 搁浅St的blog  #站点的名称\nsubtitle: 我最喜欢笨笨   #站点的副标题\ndescription:             #站点的描述,有利于搜索引擎的抓取\nauthor: 搁浅St       #作者\nemail: geqianst@qq.com          #你的邮箱\nlanguage: zh-CN           #语言,一般应该都是这个吧\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://jackroyal.github.io       #网站的url,在页面上,可以调用配置中的url参数,就是这个,比如google自定义搜索,需要制定搜索范围,就是通过这个设置的\nroot: /\npermalink: :year/:month/:day/:title/\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post  \ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nhighlight:\n  enable: true\n  line_number: true\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized  \ncategory_map:\ntag_map:\n\n# Archives 默认值为2，这里都修改为1，相应页面就只会列出标题，而非全文\n## 2: Enable pagination\n## 1: Disable pagination\n## 0: Fully Disable\narchive: 1\ncategory: 1\ntag: 1\n\n# Server\n## Hexo uses Connect as a server\n## You can customize the logger format as defined in\n## http://www.senchalabs.org/connect/logger.html\nport: 4000\nserver_ip: localhost\nlogger: false\nlogger_format: dev\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: MMM D YYYY\ntime_format: H:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 5\npagination_dir: page\n\n# Disqus\ndisqus_shortname:\n#这一行是我添加的duoshuo_shortname,因为天朝disqus不好用,用多说\nduoshuo_shortname: jackroyal\n# Extensions\n## Plugins: https://github.com/hexojs/hexo/wiki/Plugins\n## Themes: https://github.com/hexojs/hexo/wiki/Themes\ntheme: light\nexclude_generator:\n\n# Deployment  发布相关设置\n## Docs: http://hexo.io/docs/deployment.html\ndeploy:\n  type: github\n  repo: https://github.com/Jackroyal/Jackroyal.github.io.git\n  branch: master\n```\n至此,全局配置文件修改完毕,你可以`hexo g`和`hexo s`进行查看.\n```\nmenu:#导航栏的设置默认只有这两个,还可以添加更多的导航\n  Home: /\n  Archives: /archives\n#它就是你页面右边的侧边项目,比如搜索之类,你可以根据自己的需求进行修改,你能用几个widgets可以在F:\\blog\\themes\\light\\layout\\_widget中进行查看\nwidgets:#我这里使用了所有的widgets\n- search\n- category\n- tag\n- recent_posts\n- tagcloud\n\nexcerpt_link: Read More  #可以换成中文的  阅读全文\n\ntwitter:\n  username:\n  show_replies: false\n  tweet_count: 5\n//默认的一个分享组件,因为主要针对国外,不适合国内我们不使用它\naddthis:\n  enable: false  #把true改为false\n  pubid:\n  facebook: true\n  twitter: true\n  google: true\n  pinterest: true\n\nfancybox: true\n\ngoogle_analytics:\nrss:\nduoshuo_shortname: jackroyal  #多说的用户名\n\ncomment_provider:\n# Facebook comment\nfacebook:\n  appid: 123456789012345\n  comment_count: 5\n  comment_width: 840\n  comment_colorscheme: light\n```\n至此,配置文件修改完毕,上面提到了我们不适用disqus的评论组件,使用多说,下面教大家来配置多说\n\n#创建多说\n首先我们去多说注册一个账号,[点击这里](http://duoshuo.com/ \"多说官网\")\n我们点击[我要安装](http://duoshuo.com/create-site/ \"我要安装\"),界面如下![duoshuo 创建界面](http://ww4.sinaimg.cn/large/692869a3gw1emtdlnpsqaj20wo0lp783.jpg \"创建多说账号\")\nshortname就是jackroyal,创建完成后,跳转到如下界面\n![获取多说代码](http://ww1.sinaimg.cn/large/692869a3gw1emtdp96x54j20us0jxn18.jpg \"获取多说代码\")\n我们选择`通用代码`,点击复制,就行了\n#配置多说\n这里说一个前提,我使用的是light主题,如果你用的是其他主题,接下来的设置可能给我有点区别,但是原理差不多,参考看看\n1. 我们打开`F:\\blog\\themes\\light\\layout\\_partial\\comment.ejs`这个文件,然后修改后代码如下(如果你不是light主题,可能跟这个不一样,你去找下包含comment的section在哪里,改法还是这样.例如系统默认的landscape主题,下面这段代码就是在article.ejs,它没有comment.ejs)\n```\n<% if (page.comments){ %>\n<!-- 这里添加了一个导航,页面的下面会有一个上一篇,下一篇 -->\n <nav id=\"pagination\" >\n    <% if (page.prev) { %>\n    <a href=\"<%- config.root %><%- page.prev.path %>\" class=\"alignleft prev\" > <%=page.prev.title %> </a>\n    <% } %>\n    <% if (page.next) { %>\n    <a href=\"<%- config.root %><%- page.next.path %>\" class=\"alignright next\" > <%=page.next.title %> </a>\n    <% } %>\n    <div class=\"clearfix\"></div>\n</nav>\n<!-- 导航结束 -->\n<section id=\"comments\">\n<!-- 这里是多说的代码,直接把你的代码粘贴到这里就行 -->\n    <!-- 多说评论框 start -->\n    <div class=\"ds-thread\" data-thread-key=\"<%= page.layout %>-<%= page.slug %>\" data-title=\"<%= page.title %>\" data-url=\"<%= page.permalink %>\"></div>\n    <!-- 多说评论框 end -->\n    <!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n    <script type=\"text/javascript\">\n    var duoshuoQuery = {short_name:'<%= config.duoshuo_shortname %>'};\n      (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0]\n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n      })();\n      </script>\n    <!-- 多说公共JS代码 end -->\n  <!-- 多说结束 -->\n  </section>\n<% } %>\n```\n眼尖的同学可能已经看到我的上面第16行代码与你们的不同,这行代码包括了页面的标题和url,它会根据hexo的配置,由hexo动态生成,所以你把你的代码替换成我的这行代码.\n```\n<div class=\"ds-thread\" data-thread-key=\"<%= page.layout %>-<%= page.slug %>\" data-title=\"<%= page.title %>\" data-url=\"<%= page.permalink %>\"></div>\n```\n至此,多说添加完毕\n#修复bug\n我发现light的主题貌似有个小bug,在`F:\\blog\\themes\\light\\layout\\_partial\\article.ejs`中间第27行有这样一行代码\n```\n        <% if (item.comment && config.disqus_shortname){ %>\n```\n首先我们,替换config.disqus_shortname为config.duoshuo_shortname.\n然后修改`item.comment`为`item.comments`,因为系统中没有comment这个变量,只有comments这个变量,如果不修改comments,那么`item.comment`一直为假,所以一直不成立,就不会显示comments字段了.修改后代码如下\n```\n <% if (item.comments && config.duoshuo_shortname){ %>\n```\n\n产生的效果如图![开启和关闭comment的区别](http://ww3.sinaimg.cn/large/692869a3gw1emteitia5uj20tl0fn412.jpg \"开启和关闭comment的区别\").\n至此,配置hexo,打完收工\nenjoy it\n\n---\n#参考文献\n1 <http://zipperary.com/2013/05/29/hexo-guide-3/>\n2 [duoshuo官方Hexo使用教程](http://dev.duoshuo.com/threads/541d3b2b40b5abcd2e4df0e9)\n\n","slug":"custom-hexo","updated":1420518904000,"excerpt":"<p>经过<a href=\"/how-to-build-a-blog-with-hexo.html\">上篇博客</a>,我们搭建起了自己的博客,接下来我们对它做些个性化的定制.<br>在hexo中,配置文件一共两个(我的hexo安装在F:/blog/),分别是<code>F:/blog/_config.yml</code>和<code>F:/blog/themes/light/_config.yml</code>.第一个是全局的配置文件,第二个是主题的配置文件,在继续说之前,我们先来说一下主题安装.","_id":"lzpyj9n3n0m9gm31","comments":true,"layout":"post","photos":[],"link":""},{"title":"cmcc520扩展使用说明","date":1416837360000,"tags":["ekre7h4p56ix5fuu","13k6c1fzcojug313","16tkm9tteziz9a17","l3ngbta6shcjqbc0","avfmmjml8fh3tdna"],"categories":["e6lrnn3hglditrpe"],"content":"<p>我的cmcc520 2.0版本终于完成了,写个使用说明</p>\n<p>学校部分范围有CMCC-EDU可用,通过手动修改ssid,可以免费使用.</p>\n<p>写了个扩展来简化这个过程.</p>\n<p>1 安装扩展<br>将保存下来的 *.crx 文件或*.js 文件直接拖拽到浏览器的“扩展程序”（<a href=\"&quot;Chrome 扩展程序页面&quot;\">chrome://chrome/extensions</a>/）页面。<br><img src=\"http://img.blog.csdn.net/20141124215558921?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>( 注：只有拖动到此页面才能安装，其它页面无效)</p>\n<p>　　2. 按照提示安装<br><img src=\"http://img.blog.csdn.net/20141124215611765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>详细安装过程见<a href=\"http://www.williamlong.info/archives/3160.html\" target=\"_blank\" rel=\"external\">http://www.williamlong.info/archives/3160.html</a></p>\n<p>3,配置软件功能</p>\n<p>左键点击图标,可以选择开关扩展功能(默认为开启)<br> <img src=\"http://img.blog.csdn.net/20141124215702865?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>4.使用软件</p>\n<p>如果软件的功能打开,那么如果当你使用cmcc-edu的时候会自动跳转完成登录,不再需要手动操作,登录成功页面如下,你可以关闭这个页面了<br><img src=\"http://img.blog.csdn.net/20141124215651437?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>5.下线</p>\n<p>在任何页面按ALT+X   可以下线</p>\n<p>Ps,如果按Alt+x无任何提示,可能是快捷键设置有问题<br> <img src=\"http://img.blog.csdn.net/20141124215717575?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p><img src=\"http://img.blog.csdn.net/20141124215740968?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>那就需要你按照上图手动设置快捷键</p>\n<p>6 反馈<br>如果发现任何bug,可以和我联系</p>\n<p>新浪微博<a href=\"http://weibo.com/517123263\" target=\"_blank\" rel=\"external\">http://weibo.com/517123263</a><br>Github项目地址 <a href=\"https://github.com/Jackroyal/cmcc520\" target=\"_blank\" rel=\"external\">https://github.com/Jackroyal/cmcc520</a><br>我的csdn博客<a href=\"file:///C:/Users/chenhao/Desktop/%20http:/blog.csdn.net/jackroyal\" target=\"_blank\" rel=\"external\"> http://blog.csdn.net/jackroyal</a></p>\n<p>2014/11/24</p>\n","source":"_posts/cmcc520扩展使用说明.md","raw":"title: 'cmcc520扩展使用说明'\ndate: 2014-11-24 21:56\ntags:\n- chrome\n- cmcc-edu\n- 中国移动\n- 扩展\n- 脚本\ncategories:\n- chrome扩展\n---\n\n我的cmcc520 2.0版本终于完成了,写个使用说明\n\n\n\n\n学校部分范围有CMCC-EDU可用,通过手动修改ssid,可以免费使用.\n\n写了个扩展来简化这个过程.\n\n1 安装扩展\n将保存下来的 \\*.crx 文件或\\*.js 文件直接拖拽到浏览器的“扩展程序”（[chrome://chrome/extensions](\"Chrome 扩展程序页面\")/）页面。\n![](http://img.blog.csdn.net/20141124215558921?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n\n( 注：只有拖动到此页面才能安装，其它页面无效)\n\n　　2. 按照提示安装\n![](http://img.blog.csdn.net/20141124215611765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n\n\n \n详细安装过程见[http://www.williamlong.info/archives/3160.html](http://www.williamlong.info/archives/3160.html)\n\n \n\n \n\n3,配置软件功能\n\n左键点击图标,可以选择开关扩展功能(默认为开启)\n ![](http://img.blog.csdn.net/20141124215702865?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n \n\n4.使用软件\n\n如果软件的功能打开,那么如果当你使用cmcc-edu的时候会自动跳转完成登录,不再需要手动操作,登录成功页面如下,你可以关闭这个页面了\n![](http://img.blog.csdn.net/20141124215651437?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n\n\n5.下线\n\n在任何页面按ALT+X   可以下线\n\nPs,如果按Alt+x无任何提示,可能是快捷键设置有问题\n ![](http://img.blog.csdn.net/20141124215717575?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n![](http://img.blog.csdn.net/20141124215740968?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n\n那就需要你按照上图手动设置快捷键\n\n \n\n \n\n6 反馈\n如果发现任何bug,可以和我联系\n\n\n\n新浪微博[http://weibo.com/517123263](http://weibo.com/517123263)\nGithub项目地址 [https://github.com/Jackroyal/cmcc520](https://github.com/Jackroyal/cmcc520)\n我的csdn博客[ http://blog.csdn.net/jackroyal](file:///C:/Users/chenhao/Desktop/%20http:/blog.csdn.net/jackroyal)\n\n \n\n \n\n \n\n2014/11/24\n","slug":"cmcc520扩展使用说明","updated":1420518904000,"excerpt":"","_id":"gkev3rcyuikn4npz","comments":true,"layout":"post","photos":[],"link":""},{"title":"使用hexo建立自己的Github pages","date":1417070909000,"tags":["9cs3dsl39baopq36","lfcfrewzielh5f3l"],"categories":["i18zy3saw203wjf9"],"content":"<p>昨天经过一天的<a href=\"http://jackroyal.github.io/2014/11/26/new-start/\" title=\"生命在于折腾\" target=\"_blank\" rel=\"external\">折腾</a>,总算把博客搭建起来了,今天就来写个博客总结一下.<br>网上的资料很多,我主要参考的是这篇博客,一路很顺利.</p>\n<blockquote>\n<p><a href=\"http://zipperary.com/2013/05/28/hexo-guide-2/\" target=\"_blank\" rel=\"external\">http://zipperary.com/2013/05/28/hexo-guide-2/</a></p>\n</blockquote>\n<p>一个很重要的原因就是他是针对windows的,刚好我也在用windows.</p>\n<h1 id=\"安装过程\">安装过程</h1>\n<h2 id=\"1-_安装Github_for_windows\">1. 安装Github for windows</h2>\n<p>因为我之前就在用Github,所以早就安装了这个.已经装过的同学请忽略这一段.<br>下载 <a href=\"https://windows.github.com/\" title=\"Github for windows\" target=\"_blank\" rel=\"external\">Github for windows</a> 并执行即可完成安装(<em>在线安装,会有点慢</em>)。这个软件的的好处是有一个带GUI的界面,还有一个终端界面.如图所示<a id=\"more\"></a><br><img src=\"http://ww2.sinaimg.cn/large/692869a3jw1emplp1lz31j204w033mx0.jpg\" alt=\"Github for windows\"><br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1empluh6hvej210b0j741r.jpg\" alt=\"GUI and Bash\"><br>如果你不喜欢用这个,也可以用上面的博客推荐的<a href=\"http://code.google.com/p/msysgit/\" target=\"_blank\" rel=\"external\">msysgit</a>.</p>\n<h2 id=\"2-_安装Node-js\">2. 安装Node.js</h2>\n<p>在 Windows 环境下安装 <a href=\"http://nodejs.org/\" title=\"Node.js 官网\" target=\"_blank\" rel=\"external\">Node.js</a> 非常简单，仅须下载安装文件并执行即可完成安装。（win下建议下载msi格式的，因为这样可以不用配置环境变量之类的）</p>\n<h2 id=\"3-_测试node-js是否安装\">3. 测试node.js是否安装</h2>\n<p>在任何控制台输入(可以按windows键+R,输入cmd,然后输入npm,一般来说不会有问题)</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">npm</span></div></pre></td></tr></table></figure>\n\n<p>返回值如下</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">Usage</span>: <span class=\"string\">npm &lt;command&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"applescript\"><span class=\"keyword\">where</span> &lt;command&gt; <span class=\"keyword\">is</span> one <span class=\"keyword\">of</span>:</span></div><div class=\"line\">    add-user, adduser, apihelp, author, bin, bugs, c, cache,</div><div class=\"line\">    completion, config, ddp, dedupe, deprecate, docs, edit,</div><div class=\"line\">    explore, faq, find, find-dupes, <span class=\"keyword\">get</span>, help, help-search,</div><div class=\"line\">    home, i, info, init, install, isntall, issues, la, link,</div><div class=\"line\">    <span class=\"type\">list</span>, ll, ln, login, ls, outdated, owner, pack, prefix,</div><div class=\"line\">    prune, publish, r, rb, rebuild, remove, repo, restart, rm,</div><div class=\"line\">    root, <span class=\"command\">run</span>-<span class=\"keyword\">script</span>, s, se, search, <span class=\"keyword\">set</span>, show, shrinkwrap,</div><div class=\"line\">    star, stars, start, stop, submodule, t, tag, test, tst, un,</div><div class=\"line\">    uninstall, unlink, unpublish, unstar, up, update, v,</div><div class=\"line\">    <span class=\"property\">version</span>, view, whoami</div><div class=\"line\"></div><div class=\"line\">npm &lt;cmd&gt; -h     quick help <span class=\"function_start\"><span class=\"keyword\">on</span></span> &lt;cmd&gt;</div><div class=\"line\">npm -l           display full usage info</div><div class=\"line\">npm faq          commonly asked questions</div><div class=\"line\">npm help &lt;term&gt;  search <span class=\"keyword\">for</span> help <span class=\"function_start\"><span class=\"keyword\">on</span></span> &lt;term&gt;</div><div class=\"line\">npm help npm     involved overview</div><div class=\"line\"></div><div class=\"line\">Specify configs <span class=\"keyword\">in</span> <span class=\"keyword\">the</span> ini-formatted <span class=\"type\">file</span>:</div><div class=\"line\">    C:\\Users\\chenhao\\.npmrc</div><div class=\"line\"><span class=\"keyword\">or</span> <span class=\"function_start\"><span class=\"keyword\">on</span></span> <span class=\"keyword\">the</span> command line via: npm &lt;command&gt; <span class=\"comment\">--key value</span></div><div class=\"line\">Config info can be viewed via: npm help config</div><div class=\"line\"></div><div class=\"line\">npm@<span class=\"number\">1.4</span><span class=\"number\">.28</span> D:\\Program Files (x86)\\nodejs\\node_modules\\npm</div></pre></td></tr></table></figure>\n\n<p>看到这个结果,就表示你的node.js已经安装上去了<br><em>感谢我们家笨笨的反馈：</em>此处如果npm无效，首先确定win下你采用的是msi格式的安装文件，然后重启下电脑，应该就正常了。</p>\n<h2 id=\"4-_安装hexo\">4. 安装hexo</h2>\n<p>接下来的操作我都是用<strong>Github for windows</strong>自带的Bash来完成的,因为后面会涉及到SSH,用<strong>Github for windows</strong>,就可以避免这个问题.</p>\n<ul>\n<li>在Bash中输入以下命令</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"operator\"><span class=\"keyword\">install</span> -g hexo</span></div></pre></td></tr></table></figure>\n\n<ul>\n<li>创建hexo文件夹<br>创建你hexo放置的文件夹,先用Bash进入到目标文件夹,比如我的是F:/blog/,接下来初始化hexo,自动生成相关的文件,在F:/blog/环境下,输入</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /f/blog  <span class=\"comment\">#这个命令表示当前进入目录为f：/blog/</span></div><div class=\"line\">hexo init</div></pre></td></tr></table></figure>\n\n<ul>\n<li>安装依赖包</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"operator\"><span class=\"keyword\">install</span></span></div></pre></td></tr></table></figure>\n\n<ul>\n<li>本地预览,做完以上操作,可以本地预览一下</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">hexo</span> g</div><div class=\"line\">hexo s</div></pre></td></tr></table></figure>\n\n<p>以上两条命令的意思是:<br>生成相关文件(就是生成目标html,静态博客嘛,就是很多html组成)<br>打开本地服务器预览(node.js就是干这事的,点击访问<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a>,就可以看到了)</p>\n<h2 id=\"ok,到这里,博客搭建基本完成,现在要做的就是把它发布到你的Github上去\"><strong>ok</strong>,到这里,博客搭建基本完成,现在要做的就是把它发布到你的Github上去</h2>\n<p>接下来,教你怎么发布到Github上去</p>\n<h1 id=\"注册Github\">注册Github</h1>\n<p>这一步没什么说的,如果你连简单的注册都不会,我也不会教你╮(╯▽╰)╭</p>\n<h1 id=\"创建公共库\">创建公共库</h1>\n<p>在自己Github主页右下角，创建一个新的repository(<a href=\"https://github.com/new\" title=\"点我新建\" target=\"_blank\" rel=\"external\">点这里</a>)。比如我的Github账号是Jackroyal，那么我应该创建的repository名字应该是Jackroyal.github.io(注意你的repository名字就是Jackroyal.github.io,我之前用的是Jackroyal怎么尝试都不行)。</p>\n<blockquote>\n<p>PS:有个大小写的问题其实我注册的是Jackroyal,大写的J,但是我访问的时候特别是带https的链接,他会自动转为小写访问.怎么说呢?简单点,你就按照你的用户名来,该大写大写,该小写小写</p>\n</blockquote>\n<h1 id=\"部署\">部署</h1>\n<p>现在万事俱备,只差部署了,我们来配置下<code>_config.yml</code>.<br>这个文件在路径是F:/blog/_config.yml.<br>用编辑器把它打开,修改最后一段</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">type</span>: <span class=\"title\">github</span></span></div><div class=\"line\">  repo: https:<span class=\"comment\">//github.com/Jackroyal/Jackroyal.github.io.git</span></div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n\n<p>照着我的这个格式修改就好了,把我里面的用户名替换成你的.<br>至此基本完成所有搭建步骤.</p>\n<h1 id=\"上传\">上传</h1>\n<p>我们开始上传项目的代码,再重复一次,我一直以来用的工具都是<em>Github for windows</em>自带的Bash,所以我没有配置SSH,如果你用的windows自带的终端或者其他比如msysgit,可能需要配置SSH,不然无法使用Github(点击<a href=\"https://help.github.com/articles/generating-ssh-keys/\" title=\"https://help.github.com/articles/generating-ssh-keys/\" target=\"_blank\" rel=\"external\"><code>这里</code></a>查看官方教程).<br>我们输入以下命令</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">hexo</span> g</div><div class=\"line\">hexo d</div></pre></td></tr></table></figure>\n\n<p>或者偷个懒</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">hexo</span> d -g</div></pre></td></tr></table></figure>\n\n<p>ok,现在就可以去看看你的个人主页了,逼格满满有木有.</p>\n<h1 id=\"问题\">问题</h1>\n<p>我的中间出过一些问题:</p>\n<ol>\n<li>我的<code>hexo d</code>的时候出错,可以尝试手动删除<code>.deploy</code>文件夹,然后执行<code>hexo clean</code>还有可能出现的情况是,<code>deploy</code>没错但是一直没有提示<code>deploy done</code>,那就是骚年,你访问Github网速太慢</li>\n<li>我<code>deploy d</code>成功以后,在Github里面已经看到生成的页面了,访问<a href=\"http://jackroyal.github.io\" target=\"_blank\" rel=\"external\">http://jackroyal.github.io</a>或者<a href=\"https://jackroyal.github.io\" target=\"_blank\" rel=\"external\">https://jackroyal.github.io</a>一直报404的错误,这种时候等一等就好了,一般等几分钟.如果一直不好那就给官方发个邮件,他们很快会回复你的,有什么问题说清楚就行.<h1 id=\"致谢\">致谢</h1>\n这里，要感谢我最亲爱的笨笨，是她给我测试和反馈的<a href=\"http://huirong.github.io\" target=\"_blank\" rel=\"external\">http://huirong.github.io</a></li>\n</ol>\n","source":"_posts/how-to-build-a-blog-with-hexo.md","raw":"title: 使用hexo建立自己的Github pages \ndate: 2014-11-27 14:48:29\ntags:\n- hexo\n- github\ncategories: hexo\n---\n昨天经过一天的[折腾](http://jackroyal.github.io/2014/11/26/new-start/ '生命在于折腾'),总算把博客搭建起来了,今天就来写个博客总结一下.\n网上的资料很多,我主要参考的是这篇博客,一路很顺利.\n>http://zipperary.com/2013/05/28/hexo-guide-2/\n\n一个很重要的原因就是他是针对windows的,刚好我也在用windows.\n#安装过程\n## 1. 安装Github for windows\n因为我之前就在用Github,所以早就安装了这个.已经装过的同学请忽略这一段.\n下载 [Github for windows](https://windows.github.com/ \"Github for windows\") 并执行即可完成安装(*在线安装,会有点慢*)。这个软件的的好处是有一个带GUI的界面,还有一个终端界面.如图所示<!-- more -->\n![Github for windows](http://ww2.sinaimg.cn/large/692869a3jw1emplp1lz31j204w033mx0.jpg)\n![GUI and Bash](http://ww2.sinaimg.cn/large/692869a3gw1empluh6hvej210b0j741r.jpg)\n如果你不喜欢用这个,也可以用上面的博客推荐的[msysgit](http://code.google.com/p/msysgit/).\n\n## 2. 安装Node.js\n在 Windows 环境下安装 [Node.js](http://nodejs.org/ \"Node.js 官网\") 非常简单，仅须下载安装文件并执行即可完成安装。（win下建议下载msi格式的，因为这样可以不用配置环境变量之类的）\n\n## 3. 测试node.js是否安装\n在任何控制台输入(可以按windows键+R,输入cmd,然后输入npm,一般来说不会有问题)\n```\nnpm\n```\n返回值如下\n```\nUsage: npm <command>\n\nwhere <command> is one of:\n    add-user, adduser, apihelp, author, bin, bugs, c, cache,\n    completion, config, ddp, dedupe, deprecate, docs, edit,\n    explore, faq, find, find-dupes, get, help, help-search,\n    home, i, info, init, install, isntall, issues, la, link,\n    list, ll, ln, login, ls, outdated, owner, pack, prefix,\n    prune, publish, r, rb, rebuild, remove, repo, restart, rm,\n    root, run-script, s, se, search, set, show, shrinkwrap,\n    star, stars, start, stop, submodule, t, tag, test, tst, un,\n    uninstall, unlink, unpublish, unstar, up, update, v,\n    version, view, whoami\n\nnpm <cmd> -h     quick help on <cmd>\nnpm -l           display full usage info\nnpm faq          commonly asked questions\nnpm help <term>  search for help on <term>\nnpm help npm     involved overview\n\nSpecify configs in the ini-formatted file:\n    C:\\Users\\chenhao\\.npmrc\nor on the command line via: npm <command> --key value\nConfig info can be viewed via: npm help config\n\nnpm@1.4.28 D:\\Program Files (x86)\\nodejs\\node_modules\\npm\n```\n看到这个结果,就表示你的node.js已经安装上去了\n*感谢我们家笨笨的反馈：*此处如果npm无效，首先确定win下你采用的是msi格式的安装文件，然后重启下电脑，应该就正常了。\n## 4. 安装hexo\n接下来的操作我都是用**Github for windows**自带的Bash来完成的,因为后面会涉及到SSH,用**Github for windows**,就可以避免这个问题.\n- 在Bash中输入以下命令\n```\nnpm install -g hexo\n```\n- 创建hexo文件夹\n创建你hexo放置的文件夹,先用Bash进入到目标文件夹,比如我的是F:/blog/,接下来初始化hexo,自动生成相关的文件,在F:/blog/环境下,输入\n```\ncd /f/blog  #这个命令表示当前进入目录为f：/blog/\nhexo init\n```\n- 安装依赖包\n```\nnpm install\n```\n- 本地预览,做完以上操作,可以本地预览一下\n```\nhexo g\nhexo s\n```\n以上两条命令的意思是:\n生成相关文件(就是生成目标html,静态博客嘛,就是很多html组成)\n打开本地服务器预览(node.js就是干这事的,点击访问<http://localhost:4000>,就可以看到了)\n**ok**,到这里,博客搭建基本完成,现在要做的就是把它发布到你的Github上去\n---\n接下来,教你怎么发布到Github上去\n#注册Github\n这一步没什么说的,如果你连简单的注册都不会,我也不会教你╮(╯▽╰)╭\n#创建公共库\n在自己Github主页右下角，创建一个新的repository([点这里](https://github.com/new '点我新建'))。比如我的Github账号是Jackroyal，那么我应该创建的repository名字应该是Jackroyal.github.io(注意你的repository名字就是Jackroyal.github.io,我之前用的是Jackroyal怎么尝试都不行)。\n> PS:有个大小写的问题其实我注册的是Jackroyal,大写的J,但是我访问的时候特别是带https的链接,他会自动转为小写访问.怎么说呢?简单点,你就按照你的用户名来,该大写大写,该小写小写\n\n#部署\n现在万事俱备,只差部署了,我们来配置下`_config.yml`.\n这个文件在路径是F:/blog/_config.yml.\n用编辑器把它打开,修改最后一段\n```\ndeploy:\n  type: github\n  repo: https://github.com/Jackroyal/Jackroyal.github.io.git\n  branch: master\n```\n照着我的这个格式修改就好了,把我里面的用户名替换成你的.\n至此基本完成所有搭建步骤.\n#上传\n我们开始上传项目的代码,再重复一次,我一直以来用的工具都是_Github for windows_自带的Bash,所以我没有配置SSH,如果你用的windows自带的终端或者其他比如msysgit,可能需要配置SSH,不然无法使用Github(点击[`这里`](https://help.github.com/articles/generating-ssh-keys/ \"https://help.github.com/articles/generating-ssh-keys/\")查看官方教程).\n我们输入以下命令\n```\nhexo g\nhexo d\n```\n或者偷个懒\n```\nhexo d -g\n```\nok,现在就可以去看看你的个人主页了,逼格满满有木有.\n#问题\n我的中间出过一些问题:\n1. 我的`hexo d`的时候出错,可以尝试手动删除`.deploy`文件夹,然后执行`hexo clean`还有可能出现的情况是,`deploy`没错但是一直没有提示`deploy done`,那就是骚年,你访问Github网速太慢\n1. 我`deploy d`成功以后,在Github里面已经看到生成的页面了,访问<http://jackroyal.github.io>或者<https://jackroyal.github.io>一直报404的错误,这种时候等一等就好了,一般等几分钟.如果一直不好那就给官方发个邮件,他们很快会回复你的,有什么问题说清楚就行.\n#致谢\n这里，要感谢我最亲爱的笨笨，是她给我测试和反馈的<http://huirong.github.io>\n\n","slug":"how-to-build-a-blog-with-hexo","updated":1425812266000,"excerpt":"<p>昨天经过一天的<a href=\"http://jackroyal.github.io/2014/11/26/new-start/\" title=\"生命在于折腾\" target=\"_blank\" rel=\"external\">折腾</a>,总算把博客搭建起来了,今天就来写个博客总结一下.<br>网上的资料很多,我主要参考的是这篇博客,一路很顺利.</p>\n<blockquote>\n<p><a href=\"http://zipperary.com/2013/05/28/hexo-guide-2/\" target=\"_blank\" rel=\"external\">http://zipperary.com/2013/05/28/hexo-guide-2/</a></p>\n</blockquote>\n<p>一个很重要的原因就是他是针对windows的,刚好我也在用windows.</p>\n<h1 id=\"安装过程\">安装过程</h1>\n<h2 id=\"1-_安装Github_for_windows\">1. 安装Github for windows</h2>\n<p>因为我之前就在用Github,所以早就安装了这个.已经装过的同学请忽略这一段.<br>下载 <a href=\"https://windows.github.com/\" title=\"Github for windows\" target=\"_blank\" rel=\"external\">Github for windows</a> 并执行即可完成安装(<em>在线安装,会有点慢</em>)。这个软件的的好处是有一个带GUI的界面,还有一个终端界面.如图所示","_id":"2tvn6qwrqeyqutss","comments":true,"layout":"post","photos":[],"link":""},{"title":"kali和ubuntu双系统安装","date":1425388661000,"tags":["7f1p5ltbw4tu889p","r7ch11y1aiwsbufi"],"categories":["uc3yyao8lxnpqvsf"],"content":"<p>时间忽快忽慢，一转眼，年过完了，又回来学校了，又一个多月没有push了，重新回到github。今天我们家笨笨给我找了点kali的资料，索性就把kali捡起来，第一步安装kali的系统。<br>此处背景不再介绍，直奔主题。kali的安装过程和ubuntu的安装过程类似，应该说原理上是一模一样的，只是界面有些不同。我的电脑当前已经安装了win8和ubuntu，现在需要再加一个kali的系统，三系统共存。<br>大体分为如下几个步骤：</p>\n<h3 id=\"1_下载kali镜像\">1 下载kali镜像</h3>\n<h3 id=\"2_刻录u盘\">2 刻录u盘</h3>\n<h3 id=\"3_安装kali\">3 安装kali</h3>\n<h2><a id=\"more\"></a></h2>\n<h1 id=\"1_下载kali镜像-1\">1 下载kali镜像</h1>\n<p>这步很简单，我们去kali的官网下载<a href=\"https://www.kali.org/downloads/\" target=\"_blank\" rel=\"external\">https://www.kali.org/downloads/</a>,下载对应的版本。我这里下载的是第一个64位版本（<a href=\"http://cdimage.kali.org/kali-1.1.0/kali-linux-1.1.0-amd64.iso\" target=\"_blank\" rel=\"external\">http://cdimage.kali.org/kali-1.1.0/kali-linux-1.1.0-amd64.iso</a>）,因为是在ubuntu下，我们可以顺手校验一下文件的hash值，防止文件损坏。<br>在终端中输入<code>sha1sum /home/chen/kali-linux-1.1.0-amd64.iso</code><br>查看输出是否是<code>40a1fd1d4864e7fac70438a1bf2095c8c1a4e764</code>，若正确，则第一步完成。</p>\n<h1 id=\"2_刻录u盘-1\">2 刻录u盘</h1>\n<p>如果采用硬盘安装的话，我们需要在win下面操作，使用easybcd来编辑grub引导，还需要解压文件，相对比较麻烦，我这里采用u盘安装，相对比较简单。<br>和安装ubuntu不同，我之前在win下用UltraISO来刻录,<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1epsvwgs1rqj20fa0c676e.jpg\" alt=\"刻录ubuntu\">如图所示，便捷启动是可以不修改的，直接默认，点击写入就行。我今天在刻录kali的时候，发现这样写的u盘无法启动，开机的时候会提示<code>failed to boot from USB disk with error: gfxboot.c32: not a COM32R Image boot:</code>的错误。<br>解决方法有两个<br>1 linux的用mkusb，windows的用Win32DiskImager 来制作U盘启动<br>具体用法：<br><a href=\"https://wiki.ubuntu.com/Win32DiskImager/iso2usb\" target=\"_blank\" rel=\"external\">https://wiki.ubuntu.com/Win32DiskImager/iso2usb</a><br><a href=\"https://help.ubuntu.com/community/mkusb\" target=\"_blank\" rel=\"external\">https://help.ubuntu.com/community/mkusb</a><br>2 在win下用UltraISO来刻录，记得更改便捷启动的设置，如图所示<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1epsw409qr3j20go09rjtp.jpg\" alt=\"更改便捷启动\">，点击便捷启动-&gt;选择写入新的启动器引导扇区——&gt;syslinus——&gt;写入</p>\n<p><em>我采用的是法一，我在ubuntu中用mkusb来刻录</em></p>\n<h1 id=\"3_安装kali-1\">3 安装kali</h1>\n<p>下面开始安装kali（以下图片是我用virtualbox虚拟机中安装拍摄的）</p>\n<h2 id=\"1_引导成功以后，开机画面如图所示\">1 引导成功以后，开机画面如图所示</h2>\n<p><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1eptme5jxk5j20ne0hcjwf.jpg\" alt=\"开机画面\"><br>我们选择<code>Graphical install</code>,图形化安装，也可以选择<code>install</code>那是文字界面安装</p>\n<h2 id=\"2_选择语言，地区\">2 选择语言，地区</h2>\n<p>语言： 选择 <code>chinese（simplified）简体中文</code><br>地区： 选择 <code>中国</code></p>\n<h2 id=\"3_配置网络名称和domain\">3 配置网络名称和domain</h2>\n<p>这个代表你的电脑在网络上的名称，比如win默认的就是pc-2000123131，也就是别人在网上邻居中看到你的电脑的名称。我们就用默认的<code>localhost</code><br>domain我们留空不管他，下一步</p>\n<h2 id=\"4_设置root密码\">4 设置root密码</h2>\n<p>我们设置两次一样的密码就行，不要忘记了<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1eptmmnvzlnj20ne0hcdih.jpg\" alt=\"设置root密码\"></p>\n<h2 id=\"5_磁盘分区\">5 磁盘分区</h2>\n<p>我们选择第三项<code>手动</code><br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1eptmp2uw4ij20ne0hc42t.jpg\" alt=\"磁盘分区选项\"><br><strong>分区</strong>，这里我们一共分<code>三个区</code>，一个300M的<code>/boot</code>分区，一个2048M的<code>swap</code>分区，其他的分为一个<code>/</code>（你也可以把/home单独分区出来），因为分区方法类似，所以我只讲一个<code>/boot</code>和<code>swap</code>分区的步骤<br><strong>boot分区</strong><br><strong>注意:</strong>选择<strong>可启动标志</strong>，我们只有/boot设置为<code>开</code>，其他分区的这个选项都是<code>关</code><br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1eptmu4nonsj20ne0hctbb.jpg\" alt=\"boot分区设置\"><br>设置完成后，选择<code>分区设定结束</code>，点击继续</p>\n<p><strong>交换空间</strong><br><strong>注意:</strong>交换空间是一种<strong>文件类型</strong>，其他的分区是<strong>属于载点</strong><br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1eptn2gehkdj20ne0hc77a.jpg\" alt=\"交换空间swap分区设置\"><br>设置完成后，选择<code>分区设定结束</code>，点击继续</p>\n<p>等分区完成，就选择<code>分区设定结束并将修改写入磁盘</code>，点击继续，就开始安装kali</p>\n<h2 id=\"6_启动引导\">6 启动引导</h2>\n<p>当系统快安装完成的时候，会出现grub安装的选择,如图所示<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1eptnhakprmj20ns0j7dij.jpg\" alt=\"交换空间swap分区设置\"></p>\n<p>因为我的系统是<code>win8</code>和<code>ubuntu</code>和<code>kali</code>多系统共存，当前是由<code>win</code>来引导（当前系统由谁引导就看开机看到的第一个<code>系统选择</code>是谁的，如果是红色的ubuntu选项，那就说明由ubuntu引导）。<br>我这里选择否的话，那么我就需要去<code>win</code>里面手动添加<code>kali</code>的引导（使用easybcd来操作）。<br>如果你是<code>ubuntu</code>来引导系统的话，一样需要手动去添加<code>kali</code>的引导（这里我还不会）。<br>所以我选择<code>是</code>，这样装完三个系统都可以正常开机了。</p>\n<p>到此所有的安装结束。</p>\n<hr>\n<h1 id=\"参考文献\">参考文献</h1>\n<p>1 安装kali 系统 <a href=\"http://blog.sina.com.cn/s/blog_779dcd090102va9c.html\" target=\"_blank\" rel=\"external\">http://blog.sina.com.cn/s/blog_779dcd090102va9c.html</a><br>2 <a href=\"http://www.bkjia.com/Linuxjc/844530.html\" target=\"_blank\" rel=\"external\">kali系统安装图文教程，kali系统安装图文</a></p>\n<h1 id=\"致谢\">致谢</h1>\n<p>这里，要感谢我最亲爱的笨笨<a href=\"http://huirong.github.io\" target=\"_blank\" rel=\"external\">http://huirong.github.io</a></p>\n","source":"_posts/kali-and-ubuntu.md","raw":"title: kali和ubuntu双系统安装\ndate: 2015-03-03 21:17:41\ntags:\n- kali\n- Linux\ncategories: Linux\n---\n\n时间忽快忽慢，一转眼，年过完了，又回来学校了，又一个多月没有push了，重新回到github。今天我们家笨笨给我找了点kali的资料，索性就把kali捡起来，第一步安装kali的系统。\n此处背景不再介绍，直奔主题。kali的安装过程和ubuntu的安装过程类似，应该说原理上是一模一样的，只是界面有些不同。我的电脑当前已经安装了win8和ubuntu，现在需要再加一个kali的系统，三系统共存。\n大体分为如下几个步骤：\n###1 下载kali镜像\n###2 刻录u盘\n###3 安装kali\n<!-- more -->\n---\n#1 下载kali镜像\n这步很简单，我们去kali的官网下载<https://www.kali.org/downloads/>,下载对应的版本。我这里下载的是第一个64位版本（<http://cdimage.kali.org/kali-1.1.0/kali-linux-1.1.0-amd64.iso>）,因为是在ubuntu下，我们可以顺手校验一下文件的hash值，防止文件损坏。\n在终端中输入``` sha1sum /home/chen/kali-linux-1.1.0-amd64.iso```\n查看输出是否是`40a1fd1d4864e7fac70438a1bf2095c8c1a4e764`，若正确，则第一步完成。\n#2 刻录u盘\n如果采用硬盘安装的话，我们需要在win下面操作，使用easybcd来编辑grub引导，还需要解压文件，相对比较麻烦，我这里采用u盘安装，相对比较简单。\n和安装ubuntu不同，我之前在win下用UltraISO来刻录,\n![刻录ubuntu](http://ww3.sinaimg.cn/large/692869a3gw1epsvwgs1rqj20fa0c676e.jpg)如图所示，便捷启动是可以不修改的，直接默认，点击写入就行。我今天在刻录kali的时候，发现这样写的u盘无法启动，开机的时候会提示`failed to boot from USB disk with error: gfxboot.c32: not a COM32R Image boot:`的错误。\n解决方法有两个\n1 linux的用mkusb，windows的用Win32DiskImager 来制作U盘启动\n具体用法：\nhttps://wiki.ubuntu.com/Win32DiskImager/iso2usb\nhttps://help.ubuntu.com/community/mkusb\n2 在win下用UltraISO来刻录，记得更改便捷启动的设置，如图所示\n![更改便捷启动](http://ww4.sinaimg.cn/large/692869a3gw1epsw409qr3j20go09rjtp.jpg)，点击便捷启动->选择写入新的启动器引导扇区——>syslinus——>写入\n\n*我采用的是法一，我在ubuntu中用mkusb来刻录*\n#3 安装kali\n下面开始安装kali（以下图片是我用virtualbox虚拟机中安装拍摄的）\n##1 引导成功以后，开机画面如图所示\n![开机画面](http://ww1.sinaimg.cn/large/692869a3gw1eptme5jxk5j20ne0hcjwf.jpg)\n我们选择`Graphical install`,图形化安装，也可以选择`install`那是文字界面安装\n##2 选择语言，地区\n语言： 选择 `chinese（simplified）简体中文`\n地区： 选择 `中国`\n##3 配置网络名称和domain\n这个代表你的电脑在网络上的名称，比如win默认的就是pc-2000123131，也就是别人在网上邻居中看到你的电脑的名称。我们就用默认的`localhost`\ndomain我们留空不管他，下一步\n##4 设置root密码\n我们设置两次一样的密码就行，不要忘记了\n![设置root密码](http://ww2.sinaimg.cn/large/692869a3gw1eptmmnvzlnj20ne0hcdih.jpg)\n##5 磁盘分区\n我们选择第三项`手动`\n![磁盘分区选项](http://ww4.sinaimg.cn/large/692869a3gw1eptmp2uw4ij20ne0hc42t.jpg)\n**分区**，这里我们一共分`三个区`，一个300M的`/boot`分区，一个2048M的`swap`分区，其他的分为一个`/`（你也可以把/home单独分区出来），因为分区方法类似，所以我只讲一个`/boot`和`swap`分区的步骤\n**boot分区**\n**注意:**选择**可启动标志**，我们只有/boot设置为`开`，其他分区的这个选项都是`关`\n![boot分区设置](http://ww1.sinaimg.cn/large/692869a3gw1eptmu4nonsj20ne0hctbb.jpg)\n设置完成后，选择`分区设定结束`，点击继续\n\n**交换空间**\n**注意:**交换空间是一种**文件类型**，其他的分区是**属于载点**\n![交换空间swap分区设置](http://ww1.sinaimg.cn/large/692869a3gw1eptn2gehkdj20ne0hc77a.jpg)\n设置完成后，选择`分区设定结束`，点击继续\n\n\n等分区完成，就选择`分区设定结束并将修改写入磁盘`，点击继续，就开始安装kali\n\n##6 启动引导\n当系统快安装完成的时候，会出现grub安装的选择,如图所示\n![交换空间swap分区设置](http://ww3.sinaimg.cn/large/692869a3gw1eptnhakprmj20ns0j7dij.jpg)\n\n因为我的系统是`win8`和`ubuntu`和`kali`多系统共存，当前是由`win`来引导（当前系统由谁引导就看开机看到的第一个`系统选择`是谁的，如果是红色的ubuntu选项，那就说明由ubuntu引导）。\n我这里选择否的话，那么我就需要去`win`里面手动添加`kali`的引导（使用easybcd来操作）。\n如果你是`ubuntu`来引导系统的话，一样需要手动去添加`kali`的引导（这里我还不会）。\n所以我选择`是`，这样装完三个系统都可以正常开机了。\n\n\n到此所有的安装结束。\n\n---\n#参考文献\n1 安装kali 系统 <http://blog.sina.com.cn/s/blog_779dcd090102va9c.html>\n2 [kali系统安装图文教程，kali系统安装图文](http://www.bkjia.com/Linuxjc/844530.html)\n\n#致谢\n这里，要感谢我最亲爱的笨笨<http://huirong.github.io>\n\n\n\n\n\n\n\n","slug":"kali-and-ubuntu","updated":1425812261000,"excerpt":"<p>时间忽快忽慢，一转眼，年过完了，又回来学校了，又一个多月没有push了，重新回到github。今天我们家笨笨给我找了点kali的资料，索性就把kali捡起来，第一步安装kali的系统。<br>此处背景不再介绍，直奔主题。kali的安装过程和ubuntu的安装过程类似，应该说原理上是一模一样的，只是界面有些不同。我的电脑当前已经安装了win8和ubuntu，现在需要再加一个kali的系统，三系统共存。<br>大体分为如下几个步骤：</p>\n<h3 id=\"1_下载kali镜像\">1 下载kali镜像</h3>\n<h3 id=\"2_刻录u盘\">2 刻录u盘</h3>\n<h3 id=\"3_安装kali\">3 安装kali</h3>\n<h2>","_id":"abrdmh8ldf2zbtvi","comments":true,"layout":"post","photos":[],"link":""},{"title":"Linux下使用github","date":1421600028000,"tags":["r7ch11y1aiwsbufi","lfcfrewzielh5f3l"],"categories":["uc3yyao8lxnpqvsf"],"content":"<blockquote>\n<p>我的惰性真是病入膏肓了，已经整整3周没有在github上提交东西了，今天看了《模拟游戏》，索性又捡起来了。下面来总结一下linux下github的使用，也算是给自己一个备份，因为我自己也是老忘记。</p>\n</blockquote>\n<p>使用环境：Ubuntu 14.04</p>\n<h2 id=\"1_安装git相关软件\">1 安装git相关软件</h2>\n<p>我的Ubuntu里面没有自带git相关软件，所以我们首先需要安装它，很简单。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">sudo</span> apt-get install git</div></pre></td></tr></table></figure>\n\n<h2 id=\"2_初始化git的设置\">2 初始化git的设置</h2>\n<p>接下来，进行初始化设置，也就是设置你的github账号和密码</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global <span class=\"literal\">user</span>.name <span class=\"string\">\"zhangsan\"</span><span class=\"comment\">#其中的“zhangsan”输入的就是你注册时候的用户名，这步是设置你提交时候默认的用户名</span></div><div class=\"line\"><span class=\"comment\">#之后设置提交时候默认的邮箱，在命令行输入：</span></div><div class=\"line\">git config --global <span class=\"literal\">user</span>.email <span class=\"string\">\"haha@qq.com\"</span></div><div class=\"line\"><span class=\"comment\">#其中的“haha@qq.com”就是你注册时候用的邮箱，当然也可以用别的邮箱，用别的邮箱的时候你必须在github的主页上设置里面把用的邮箱添加进去</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"3_开始使用github\">3 开始使用github</h2>\n<p>1 首先你的github上应该有一个库，如果没有的话，就去github网站上新建一个库，或者fork一个别人的项目，以下的操作都是建立在这个基础上，<code>假设存在一个库https://github.com/Jackroyal/test.git</code>.<br>如果你的github上已经有库了，可以忽略第1步直接进入第2步<br>2 我们在本地新建一个文件夹(命名随你便，我取名叫做test_git)</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">mkdir</span> test_git</div></pre></td></tr></table></figure>\n\n<p>3 将远程的库复制下来，我们使用git clone命令来完成</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#如果你的环境不在test_git目录</span></div><div class=\"line\"><span class=\"preprocessor\">#cd test_git</span></div><div class=\"line\"><span class=\"preprocessor\">#如果在test_git中</span></div><div class=\"line\">git clone https:<span class=\"comment\">//github.com/Jackroyal/test.git#他会在你的本地新建一个test文件夹</span></div><div class=\"line\">cd test</div><div class=\"line\"><span class=\"preprocessor\">#接下来新建一个测试文件</span></div><div class=\"line\">touch test.md</div><div class=\"line\"><span class=\"preprocessor\">#修改测试文件的内容</span></div><div class=\"line\">vi test.md</div><div class=\"line\"><span class=\"preprocessor\">#提交刚才所做的更改</span></div><div class=\"line\">git add .</div><div class=\"line\">git commit -m <span class=\"string\">\"首次提交\"</span></div></pre></td></tr></table></figure>\n\n<p>3 push提交到github</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote <span class=\"built_in\">add</span> origin http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/Jackroyal/test.git</div><div class=\"line\">git push</div></pre></td></tr></table></figure>\n\n<p>之后会提示你输入用户名密码，你输入你github账号和密码就行了<br>打完收工，睡觉<br>后面会陆续介绍hexo在Linux下的使用</p>\n<h1 id=\"参考文献\">参考文献</h1>\n<p>1 <a href=\"http://blog.chinaunix.net/uid-29040159-id-3799719.html\" target=\"_blank\" rel=\"external\">ubuntu 下 github 简单的使用教程</a><br>2 <a href=\"http://blog.csdn.net/pony_maggie/article/details/23207847\" target=\"_blank\" rel=\"external\">Github入门级使用攻略</a></p>\n","source":"_posts/linux下使用github.md","raw":"title: Linux下使用github\ndate: 2015-01-19 00:53:48\ntags:\n- Linux\n- github\ncategories:\n- Linux\n---\n>我的惰性真是病入膏肓了，已经整整3周没有在github上提交东西了，今天看了《模拟游戏》，索性又捡起来了。下面来总结一下linux下github的使用，也算是给自己一个备份，因为我自己也是老忘记。\n\n使用环境：Ubuntu 14.04\n##1 安装git相关软件\n我的Ubuntu里面没有自带git相关软件，所以我们首先需要安装它，很简单。\n```\nsudo apt-get install git \n```\n##2 初始化git的设置\n接下来，进行初始化设置，也就是设置你的github账号和密码\n```\ngit config --global user.name \"zhangsan\"#其中的“zhangsan”输入的就是你注册时候的用户名，这步是设置你提交时候默认的用户名\n#之后设置提交时候默认的邮箱，在命令行输入：\ngit config --global user.email \"haha@qq.com\"\n#其中的“haha@qq.com”就是你注册时候用的邮箱，当然也可以用别的邮箱，用别的邮箱的时候你必须在github的主页上设置里面把用的邮箱添加进去\n```\n##3 开始使用github\n1 首先你的github上应该有一个库，如果没有的话，就去github网站上新建一个库，或者fork一个别人的项目，以下的操作都是建立在这个基础上，`假设存在一个库https://github.com/Jackroyal/test.git`.\n如果你的github上已经有库了，可以忽略第1步直接进入第2步\n2 我们在本地新建一个文件夹(命名随你便，我取名叫做test_git)\n```\nmkdir test_git\n```\n3 将远程的库复制下来，我们使用git clone命令来完成\n```\n#如果你的环境不在test_git目录\n#cd test_git\n#如果在test_git中\ngit clone https://github.com/Jackroyal/test.git#他会在你的本地新建一个test文件夹\ncd test\n#接下来新建一个测试文件\ntouch test.md\n#修改测试文件的内容\nvi test.md\n#提交刚才所做的更改\ngit add .\ngit commit -m \"首次提交\"\n```\n3 push提交到github\n```\ngit remote add origin https://github.com/Jackroyal/test.git\ngit push\n```\n之后会提示你输入用户名密码，你输入你github账号和密码就行了\n打完收工，睡觉\n后面会陆续介绍hexo在Linux下的使用\n#参考文献\n1 [ubuntu 下 github 简单的使用教程](http://blog.chinaunix.net/uid-29040159-id-3799719.html)\n2 [Github入门级使用攻略](http://blog.csdn.net/pony_maggie/article/details/23207847)\n","slug":"linux下使用github","updated":1421654575000,"excerpt":"","_id":"6467xkjibdy2lzoy","comments":true,"layout":"post","photos":[],"link":""},{"title":"新的开始","date":1417008555000,"tags":["9cs3dsl39baopq36"],"content":"<p>今天<strong>折腾</strong>了一天,终于弄好了,<a href=\"http://jackroyal.github.io\" title=\"搁浅St的博客\" target=\"_blank\" rel=\"external\">我的博客</a>,正式落户Github.<a id=\"more\"></a><br><img src=\"http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png\" alt=\"GitHub Mark\" title=\"GitHub Mark\"></p>\n","source":"_posts/new-start.md","raw":"title: 新的开始\ndate: 2014-11-26 21:29:15\ntags:\n- hexo\n---\n\n今天**折腾**了一天,终于弄好了,[我的博客](http://jackroyal.github.io \"搁浅St的博客\"),正式落户Github.<!-- more -->\n![GitHub Mark](http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png \"GitHub Mark\")\n","slug":"new-start","updated":1420518904000,"excerpt":"<p>今天<strong>折腾</strong>了一天,终于弄好了,<a href=\"http://jackroyal.github.io\" title=\"搁浅St的博客\" target=\"_blank\" rel=\"external\">我的博客</a>,正式落户Github.","_id":"pv4ho70ahwdlimrk","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"python学习笔记--一个简单聊天室的实现","date":1427376815000,"tags":["d45ffwv1j6t2w7au","h6yuwlyxlutzu0ne"],"categories":["gywlejx022p25fsy"],"content":"<p>最近项目真多,一个接一个的失之交臂,全部都错过了.最近状态有些不好,容易胡思乱想.<br>这是来自书上的一个python聊天程序,我照着敲了一遍,然后给扩展了一下,加了多个房间和创建选择房间的功能,写了好久好久,感觉都拖了一个星期了.<br>下一步是做一个gui,恩,那将是我的第一个gui程序.<br><a id=\"more\"></a></p>\n<h1 id=\"先贴一下代码_server5-py\">先贴一下代码 server5.py</h1>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8-*-</span></div><div class=\"line\">__author__ = <span class=\"string\">'chen'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> asyncore <span class=\"keyword\">import</span>  dispatcher</div><div class=\"line\"><span class=\"keyword\">from</span>  asynchat <span class=\"keyword\">import</span> async_chat</div><div class=\"line\"><span class=\"keyword\">import</span> socket,asyncore</div><div class=\"line\"></div><div class=\"line\">PORT = <span class=\"number\">5005</span>  <span class=\"comment\">#设定程序的端口号</span></div><div class=\"line\">NAME = <span class=\"string\">'testchat'</span>  <span class=\"comment\">#给服务器一个名称</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EndSession</span><span class=\"params\">(Exception)</span>:</span><span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandHandler</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    类似标准库中cmd.Cmd的简单命令处理程序</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    <span class=\"comment\">#如果输入的命令,那么就返回unknown命令</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unknown</span><span class=\"params\">(self, session, cmd)</span>:</span></div><div class=\"line\">        session.push(<span class=\"string\">'Unknown command: %s \\r\\n'</span> % cmd)</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle</span><span class=\"params\">(self, session, line)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> line.strip():</div><div class=\"line\">            <span class=\"keyword\">return</span></div><div class=\"line\">        parts = line.split(<span class=\"string\">' '</span>, <span class=\"number\">1</span>)</div><div class=\"line\">        cmd = parts[<span class=\"number\">0</span>]</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            line = parts[<span class=\"number\">1</span>].strip()</div><div class=\"line\">        <span class=\"keyword\">except</span> IndexError:line = <span class=\"string\">''</span></div><div class=\"line\">        meth = getattr(self, <span class=\"string\">'do_'</span> + cmd, <span class=\"keyword\">None</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            meth(session, line)</div><div class=\"line\">        <span class=\"keyword\">except</span> TypeError:</div><div class=\"line\">            self.unknown(session, cmd)</div><div class=\"line\"><span class=\"comment\">#这个类是聊天房间的类,继承上面的类是为了继承执行命令的功能</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChatRoom</span><span class=\"params\">(CommandHandler)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, server)</span>:</span></div><div class=\"line\">        self.server = server</div><div class=\"line\">        self.name = name</div><div class=\"line\">        self.sessions = []</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(self, session)</span>:</span></div><div class=\"line\">        self.broadcast(session.name + <span class=\"string\">' has entered the room %s\\r\\n'</span> % self.name)</div><div class=\"line\">        session.push(<span class=\"string\">'you can type \"h\" for help\\r\\n'</span>)</div><div class=\"line\">        <span class=\"comment\">##因为后面要将用户挪动房间,所以必须保存每个用户的session,这样才能挪动和删除</span></div><div class=\"line\">        self.server.users[session.name] = session</div><div class=\"line\">        self.sessions.append(session)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">remove</span><span class=\"params\">(self, session)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            self.sessions.remove(session)</div><div class=\"line\">        <span class=\"keyword\">except</span>: <span class=\"keyword\">pass</span> <span class=\"comment\">#如果此处的sessions为空或者已经不存在,会出错,此处不上报</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">broadcast</span><span class=\"params\">(self, line)</span>:</span></div><div class=\"line\">        <span class=\"comment\">#广播,只广播到当前房间</span></div><div class=\"line\">        <span class=\"keyword\">for</span> session <span class=\"keyword\">in</span> self.sessions:</div><div class=\"line\">            session.push(line)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_say</span><span class=\"params\">(self, session, line)</span>:</span></div><div class=\"line\">        <span class=\"comment\">#说话</span></div><div class=\"line\">        self.broadcast(session.name + <span class=\"string\">\":\"</span> + line + <span class=\"string\">'\\r\\n'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_login</span><span class=\"params\">(self, session, line)</span>:</span></div><div class=\"line\">        <span class=\"comment\">#login,其实是实现改名字的功能,懒得去改函数名了</span></div><div class=\"line\">        name = line.strip()</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name:</div><div class=\"line\">            session.push(<span class=\"string\">'please enter a name\\r\\n'</span>)</div><div class=\"line\">        <span class=\"keyword\">elif</span> name <span class=\"keyword\">in</span> self.server.users.keys():</div><div class=\"line\">            session.push(<span class=\"string\">'The name %s is taken\\r\\n'</span> % name)</div><div class=\"line\">            session.push(<span class=\"string\">'please try again\\r\\n'</span>)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            session.server.users[name] = session.server.users.pop(session.name)</div><div class=\"line\">            session.name = name</div><div class=\"line\">            session.enter(self)</div><div class=\"line\">            self.do_list(session, <span class=\"string\">''</span>)</div><div class=\"line\">            session.push(<span class=\"string\">'type \"select name\" to choose one room\\r\\n'</span>)</div><div class=\"line\">    <span class=\"comment\">#查看当前房间有哪些人</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_look</span><span class=\"params\">(self, session, line)</span>:</span></div><div class=\"line\">        session.push(<span class=\"string\">'the following are in this room:\\r\\n'</span>)</div><div class=\"line\">        <span class=\"keyword\">for</span> other <span class=\"keyword\">in</span> self.sessions:</div><div class=\"line\">            session.push(other.name + <span class=\"string\">\"\\r\\n\"</span>)</div><div class=\"line\">    <span class=\"comment\">#查看当前在线的用户,所有房间的用户</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_who</span><span class=\"params\">(self, session, line)</span>:</span></div><div class=\"line\">        session.push(<span class=\"string\">'the following are logged in:\\r\\n'</span>)</div><div class=\"line\">        <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> self.server.users:</div><div class=\"line\">            session.push(name + <span class=\"string\">'\\r\\n'</span>)</div><div class=\"line\">    <span class=\"comment\">#查看当前所有的房间</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_list</span><span class=\"params\">(self, session, line)</span>:</span></div><div class=\"line\">        session.push(<span class=\"string\">'the room list is below\\r\\n'</span>)</div><div class=\"line\">        session.push(<span class=\"string\">'   '</span>.join(self.server.rooms) + <span class=\"string\">'\\r\\n'</span>)</div><div class=\"line\">    <span class=\"comment\">#选择房间</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_select</span><span class=\"params\">(self, session, line)</span>:</span></div><div class=\"line\">        name = line.strip()</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name:</div><div class=\"line\">            session.push(<span class=\"string\">'please enter a room name\\r\\n'</span>)</div><div class=\"line\">        <span class=\"keyword\">elif</span> name <span class=\"keyword\">in</span> self.server.rooms.keys():</div><div class=\"line\">            session.enter(self.server.rooms[name])</div><div class=\"line\">            self.broadcast(<span class=\"string\">' %s ,welcome to join %s\\r\\n'</span>% (session.name, name))</div><div class=\"line\">    <span class=\"comment\">#输出帮助</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_h</span><span class=\"params\">(self, session, line)</span>:</span></div><div class=\"line\">        session.push(<span class=\"string\">'you can use this commands:\\r\\n1,who to see who is on this server(online and offline)\\r\\n2,'</span></div><div class=\"line\">        <span class=\"string\">'list to see how many room are avaliable\\r\\n3,look to see who are in this room\\r\\n4,login to login online and '</span></div><div class=\"line\">        <span class=\"string\">'change a name\\r\\n5,create to create a new room'</span>)</div><div class=\"line\">    <span class=\"comment\">#创建新房间</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_create</span><span class=\"params\">(self, session, line)</span>:</span></div><div class=\"line\">        name = line.strip()</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name:</div><div class=\"line\">            session.push(<span class=\"string\">'please enter a name\\r\\n'</span>)</div><div class=\"line\">        <span class=\"keyword\">elif</span> name <span class=\"keyword\">in</span> self.server.rooms.keys():</div><div class=\"line\">            session.push(<span class=\"string\">'The room name %s is taken\\r\\n'</span> % name)</div><div class=\"line\">            session.push(<span class=\"string\">'please try again\\r\\n'</span>)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            ChatRoom(name, self.server)</div><div class=\"line\">            session.server.rooms[name] = ChatRoom(name, self.server)</div><div class=\"line\">            session.push(<span class=\"string\">\"the room %s create successful\\r\\n\"</span> % name)</div><div class=\"line\">            session.enter(session.server.rooms[name])</div><div class=\"line\"><span class=\"comment\">#每个用户回话,这个是重点类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChatSession</span><span class=\"params\">(async_chat)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, server, sock)</span>:</span></div><div class=\"line\">        async_chat.__init__(self, sock)</div><div class=\"line\">        self.server = server</div><div class=\"line\">        self.set_terminator(<span class=\"string\">'\\r\\n'</span>)</div><div class=\"line\">        self.data = []</div><div class=\"line\">        self.name = <span class=\"string\">'visitor'</span> + str(len(server.users))<span class=\"comment\">#初始化用户名,用visitor1之类来表示</span></div><div class=\"line\">        self.room = self.server.main_room</div><div class=\"line\">        self.enter(self.server.main_room)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">enter</span><span class=\"params\">(self, room)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            cur = self.room</div><div class=\"line\">        <span class=\"keyword\">except</span> AttributeError: <span class=\"keyword\">pass</span></div><div class=\"line\">        <span class=\"keyword\">else</span>: cur.remove(self)</div><div class=\"line\">        self.room = room</div><div class=\"line\">        room.add(self)</div><div class=\"line\">    <span class=\"comment\">#当用户有输入的时候</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">collect_incoming_data</span><span class=\"params\">(self, data)</span>:</span></div><div class=\"line\">        self.data.append(data)</div><div class=\"line\">    <span class=\"comment\">#当用户输入终止符的时候</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">found_terminator</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        line = <span class=\"string\">''</span>.join(self.data)</div><div class=\"line\">        self.data = []</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            self.room.handle(self, line)</div><div class=\"line\">        <span class=\"keyword\">except</span> EndSession:</div><div class=\"line\">            self.handle_close()</div><div class=\"line\">    <span class=\"comment\">#关闭用户回话</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle_close</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        async_chat.handle_close(self)</div><div class=\"line\">        <span class=\"comment\">#self.enter()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#服务器类,这个也是重点类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChatServer</span><span class=\"params\">(dispatcher)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, port, name)</span>:</span></div><div class=\"line\">        dispatcher.__init__(self)</div><div class=\"line\">        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class=\"line\">        <span class=\"comment\">#端口复用</span></div><div class=\"line\">        self.set_reuse_addr()</div><div class=\"line\">        self.bind((<span class=\"string\">''</span>, port))</div><div class=\"line\">        self.listen(<span class=\"number\">5</span>)</div><div class=\"line\">        self.sessions = {}</div><div class=\"line\">        self.name = name</div><div class=\"line\">        self.users = {}</div><div class=\"line\">        self.rooms = {}</div><div class=\"line\">        <span class=\"comment\">#新建一个房间hall,因为每个初始登陆的用户没有房间,但是操作是依赖与ChatRoom类的,所以给一个初始默认的房间</span></div><div class=\"line\">        self.main_room = ChatRoom(<span class=\"string\">'hall'</span>, self)</div><div class=\"line\">        self.rooms[self.main_room.name] = self.main_room</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle_accept</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        conn,addr = self.accept()</div><div class=\"line\">        ChatSession(self, conn)</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'connection attempt from '</span>, addr[<span class=\"number\">0</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'server start'</span></div><div class=\"line\">    s = ChatServer(PORT, NAME)</div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        asyncore.loop()</div><div class=\"line\">    <span class=\"keyword\">except</span> KeyboardInterrupt: <span class=\"keyword\">print</span></div></pre></td></tr></table></figure>\n\n<p>效果如图所示<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1eqjhaekoz0j20ii0h5q62.jpg\" alt=\"运行效果\"></p>\n","source":"_posts/python-im.md","raw":"title: python学习笔记--一个简单聊天室的实现\ndate: 2015-03-26 21:33:35\ntags:\n- python\n- socket\ncategories:\n- python学习笔记\n---\n最近项目真多,一个接一个的失之交臂,全部都错过了.最近状态有些不好,容易胡思乱想.\n这是来自书上的一个python聊天程序,我照着敲了一遍,然后给扩展了一下,加了多个房间和创建选择房间的功能,写了好久好久,感觉都拖了一个星期了.\n下一步是做一个gui,恩,那将是我的第一个gui程序.\n<!-- more -->\n#先贴一下代码 server5.py\n```\n#!/usr/bin/env python\n# -*- coding:utf-8-*-\n__author__ = 'chen'\n\nfrom asyncore import  dispatcher\nfrom  asynchat import async_chat\nimport socket,asyncore\n\nPORT = 5005  #设定程序的端口号\nNAME = 'testchat'  #给服务器一个名称\n\nclass EndSession(Exception):pass\n\nclass CommandHandler:\n    \"\"\"\n    类似标准库中cmd.Cmd的简单命令处理程序\n    \"\"\"\n    #如果输入的命令,那么就返回unknown命令\n    def unknown(self, session, cmd):\n        session.push('Unknown command: %s \\r\\n' % cmd)\n    \n    def handle(self, session, line):\n        if not line.strip():\n            return\n        parts = line.split(' ', 1)\n        cmd = parts[0]\n        try:\n            line = parts[1].strip()\n        except IndexError:line = ''\n        meth = getattr(self, 'do_' + cmd, None)\n        try:\n            meth(session, line)\n        except TypeError:\n            self.unknown(session, cmd)\n#这个类是聊天房间的类,继承上面的类是为了继承执行命令的功能\nclass ChatRoom(CommandHandler):\n    def __init__(self, name, server):\n        self.server = server\n        self.name = name\n        self.sessions = []\n\n    def add(self, session):\n        self.broadcast(session.name + ' has entered the room %s\\r\\n' % self.name)\n        session.push('you can type \"h\" for help\\r\\n')\n        ##因为后面要将用户挪动房间,所以必须保存每个用户的session,这样才能挪动和删除\n        self.server.users[session.name] = session\n        self.sessions.append(session)\n\n    def remove(self, session):\n        try:\n            self.sessions.remove(session)\n        except: pass #如果此处的sessions为空或者已经不存在,会出错,此处不上报\n\n    def broadcast(self, line):\n        #广播,只广播到当前房间\n        for session in self.sessions:\n            session.push(line)\n\n    def do_say(self, session, line):\n        #说话\n        self.broadcast(session.name + \":\" + line + '\\r\\n')\n\n    def do_login(self, session, line):\n        #login,其实是实现改名字的功能,懒得去改函数名了\n        name = line.strip()\n        if not name:\n            session.push('please enter a name\\r\\n')\n        elif name in self.server.users.keys():\n            session.push('The name %s is taken\\r\\n' % name)\n            session.push('please try again\\r\\n')\n        else:\n            session.server.users[name] = session.server.users.pop(session.name)\n            session.name = name\n            session.enter(self)\n            self.do_list(session, '')\n            session.push('type \"select name\" to choose one room\\r\\n')\n    #查看当前房间有哪些人\n    def do_look(self, session, line):\n        session.push('the following are in this room:\\r\\n')\n        for other in self.sessions:\n            session.push(other.name + \"\\r\\n\")\n    #查看当前在线的用户,所有房间的用户\n    def do_who(self, session, line):\n        session.push('the following are logged in:\\r\\n')\n        for name in self.server.users:\n            session.push(name + '\\r\\n')\n    #查看当前所有的房间\n    def do_list(self, session, line):\n        session.push('the room list is below\\r\\n')\n        session.push('   '.join(self.server.rooms) + '\\r\\n')\n    #选择房间\n    def do_select(self, session, line):\n        name = line.strip()\n        if not name:\n            session.push('please enter a room name\\r\\n')\n        elif name in self.server.rooms.keys():\n            session.enter(self.server.rooms[name])\n            self.broadcast(' %s ,welcome to join %s\\r\\n'% (session.name, name))\n    #输出帮助\n    def do_h(self, session, line):\n        session.push('you can use this commands:\\r\\n1,who to see who is on this server(online and offline)\\r\\n2,'\n        'list to see how many room are avaliable\\r\\n3,look to see who are in this room\\r\\n4,login to login online and '\n        'change a name\\r\\n5,create to create a new room')\n    #创建新房间\n    def do_create(self, session, line):\n        name = line.strip()\n        if not name:\n            session.push('please enter a name\\r\\n')\n        elif name in self.server.rooms.keys():\n            session.push('The room name %s is taken\\r\\n' % name)\n            session.push('please try again\\r\\n')\n        else:\n            ChatRoom(name, self.server)\n            session.server.rooms[name] = ChatRoom(name, self.server)\n            session.push(\"the room %s create successful\\r\\n\" % name)\n            session.enter(session.server.rooms[name])\n#每个用户回话,这个是重点类\nclass ChatSession(async_chat):\n    def __init__(self, server, sock):\n        async_chat.__init__(self, sock)\n        self.server = server\n        self.set_terminator('\\r\\n')\n        self.data = []\n        self.name = 'visitor' + str(len(server.users))#初始化用户名,用visitor1之类来表示\n        self.room = self.server.main_room\n        self.enter(self.server.main_room)\n\n    def enter(self, room):\n        try:\n            cur = self.room\n        except AttributeError: pass\n        else: cur.remove(self)\n        self.room = room\n        room.add(self)\n    #当用户有输入的时候\n    def collect_incoming_data(self, data):\n        self.data.append(data)\n    #当用户输入终止符的时候\n    def found_terminator(self):\n        line = ''.join(self.data)\n        self.data = []\n        try:\n            self.room.handle(self, line)\n        except EndSession:\n            self.handle_close()\n    #关闭用户回话\n    def handle_close(self):\n        async_chat.handle_close(self)\n        #self.enter()\n\n#服务器类,这个也是重点类\nclass ChatServer(dispatcher):\n    def __init__(self, port, name):\n        dispatcher.__init__(self)\n        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)\n        #端口复用\n        self.set_reuse_addr()\n        self.bind(('', port))\n        self.listen(5)\n        self.sessions = {}\n        self.name = name\n        self.users = {}\n        self.rooms = {}\n        #新建一个房间hall,因为每个初始登陆的用户没有房间,但是操作是依赖与ChatRoom类的,所以给一个初始默认的房间\n        self.main_room = ChatRoom('hall', self)\n        self.rooms[self.main_room.name] = self.main_room\n\n    def handle_accept(self):\n        conn,addr = self.accept()\n        ChatSession(self, conn)\n        print 'connection attempt from ', addr[0]\n\nif __name__ == \"__main__\":\n    print 'server start'\n    s = ChatServer(PORT, NAME)\n    try:\n        asyncore.loop()\n    except KeyboardInterrupt: print\n```\n效果如图所示\n![运行效果](http://ww3.sinaimg.cn/large/692869a3gw1eqjhaekoz0j20ii0h5q62.jpg)\n","slug":"python-im","updated":1427378993000,"excerpt":"<p>最近项目真多,一个接一个的失之交臂,全部都错过了.最近状态有些不好,容易胡思乱想.<br>这是来自书上的一个python聊天程序,我照着敲了一遍,然后给扩展了一下,加了多个房间和创建选择房间的功能,写了好久好久,感觉都拖了一个星期了.<br>下一步是做一个gui,恩,那将是我的第一个gui程序.<br>","_id":"5awy11sr0bhmn8bv","comments":true,"layout":"post","photos":[],"link":""},{"title":"python学习笔记--python和beautifulsoup遇到的编码问题","date":1427611425000,"tags":["d45ffwv1j6t2w7au","1ucrpr0eo0039iam"],"categories":["gywlejx022p25fsy"],"content":"<p>在刚开始使用github pages的时候,我用python写了一个爬虫,计划是从csdn和cnblogs等博客网站上,把自己之前写的博客爬取下来,然后再转换成hexo用的markdown格式,样就可以直接添加到我的github pages.</p>\n<blockquote>\n<p>项目主页: <a href=\"https://github.com/Jackroyal/blog2markdown\" target=\"_blank\" rel=\"external\">https://github.com/Jackroyal/blog2markdown</a></p>\n</blockquote>\n<p>最近刚好在学习python,刚好就把它给优化了一下,顺便做了个跨平台(哈哈,win和ubuntu都可以跑哈),昨天遇到很蛋疼的问题,一它给了我很多思路帮助我定位问题,.直搞到凌晨两点才弄好.<br>非常非常感谢<a href=\"http://www.crifan.com/summary_python_2_x_common_string_encode_decode_error_reason_and_solution/\" target=\"_blank\" rel=\"external\">【总结】Python 2.x中常见字符编码和解码方面的错误及其解决办法</a><br>作者做了一个很好的总结,帮助我们定位问题.<br><a id=\"more\"></a></p>\n<h1 id=\"1_编码类型\">1 编码类型</h1>\n<p>首先确定好你的编码类型,比如一般推荐用utf-8.当确定编码类型后,就要保持统一,不要又弄些GBK的编码在里面.</p>\n<ul>\n<li>1.1  编辑器编码<ul>\n<li>我们有时候会犯一个错误,我在py文件的头部声明当前文件是按照utf-8来编码.但是文件实际保存的编却不是utf-8,这样也会导致乱码.建议使用可以查看当前文件编码的编辑器,比如sublime text或者notepad++ 或者pycharm.<br>在sublime下如图所示<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1eqmn535qb7j208u028t8k.jpg\" alt=\"sublime显示当前文件编码\"></li>\n<li>文件编码声明,我们要在py文件的头部添加一行<code># -*- coding: utf-8 -*-</code>,表明我接下来要使用utf-8编码</li>\n</ul>\n</li>\n<li>1.2  python解释器<ul>\n<li>如果是Python的IDLE，如果你没修改defaultencoding，那么就使用默认的字符编码可以通过sys.getdefaultencoding()而获得，比如此处获得是：ascii<br><img src=\"http://ww4.sinaimg.cn/large/692869a3gw1eqmnd8fgrjj20b205kabi.jpg\" alt=\"win中python解释器编码\"><br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1eqmnfd29u7j20k5047wfv.jpg\" alt=\"ubuntu终端解释器的编码\"></li>\n</ul>\n</li>\n<li>1.3  执行python代码<ul>\n<li>其中，很常见的几种动作是：<ul>\n<li>打印print对应的所获得的字符<ul>\n<li>对于字符串打印,Python的逻辑:<ul>\n<li>如果是Unicode字符串,则可以,自动地,编码为对应的终端所用编码,然后正确的显示出来</li>\n<li>比如unicode的字符串,输出到windows的默认编码为GBK的cmd中,则Python可以自动将Unicode编码为GBK,然后输出到cmd中</li>\n<li>个别特殊情况,也会出错:<ul>\n<li>当此unicode字符串中包含某特殊字符,而目标终端的编码集合中,没有此字符,则很明显也是无法实现将Unicode编码为对应的特定编码的字符串,无法正确显示的</li>\n</ul>\n</li>\n<li>如果是某种编码类型的str,则需要该str的编码类型,和目标终端编码匹配<ul>\n<li>比如GBK的字符串,输出到windows的默认编码为GBK的cmd,则是可以正常输出的</li>\n<li>此处后来经过代码测试，就发现一个有趣或者说诡异的问题，虽然我们python文件声明的UTF-8编码，但是实际上实际上是用GBK编码，而此时，文件中的字符串，很明显是用GBK存储的，所以，将此GBK字符，输出到GBK的cmd中，是可以正常输出的。即，此处字符串的类型，很明显只和文件所用的实际编码有关，而和文件所声明的代码无关。</li>\n</ul>\n</li>\n<li>如果是UTF-8的字符串,输出到windows的默认编码为GBK的cmd,就会出错<ul>\n<li>对相应的字符，进行编码（为某种特定类型的字符str），或解码（为对应的unicode类型的字符）</li>\n<li>比如将当前的某种编码的字符串，解码为Unicode字符串<ul>\n<li>很明显，也是要保证，你字符串本身的编码和所指定的编码，两者之间要一致的</li>\n<li>比如：decodedUnicode = someUtf8Str.decode(“UTF-8”)</li>\n<li>而如果用这样的：decodedUnicode = someGbkStr.decode(“UTF-8”)，那就会出现错误</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"2_常用方法\">2 常用方法</h1>\n<h3 id=\"2-1_encode和decode\">2.1 encode和decode</h3>\n<p>encode()  unicode编码-&gt;其他编码</p>\n<p>decode()  其他编码-&gt;unicode编码</p>\n<p>使用这两个方法的前提是,你要知道当前是什么编码.然后用对应的编码去进行解码<br>比如对于s字符串可以用</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">s.encode(<span class=\"string\">'utf-8'</span>) <span class=\"comment\">#将s由unicode转码成utf-8</span></div><div class=\"line\">s.decode(<span class=\"string\">'GBK'</span>) <span class=\"comment\">#s是GBK编码,将s转换成unicode</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"2-2_isinstance()\">2.2 isinstance()</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">isinstance(s , <span class=\"keyword\">unicode</span>) <span class=\"preprocessor\">#检测s是否是unicode编码</span></div><div class=\"line\"></div><div class=\"line\">isinstance(s , str) <span class=\"preprocessor\">#检测s是否是str格式</span></div></pre></td></tr></table></figure>\n\n<h1 id=\"3_beautifulsoup编码问题\">3 beautifulsoup编码问题</h1>\n<h3 id=\"Beautiful_Soup_会按顺序尝试不同的编码将你的文档转换为Unicode：\">Beautiful Soup 会按顺序尝试不同的编码将你的文档转换为Unicode：</h3>\n<ul>\n<li>可以通过from_encoding参数传递编码类型给soup的构造器</li>\n<li>通过文档本身找到编码类型：例如XML的声明或者HTML文档http-equiv的META标签。 </li>\n<li>如果Beautiful Soup在文档中发现编码类型，它试着使用找到的类型转换文档。 +</li>\n<li>但是，如果你明显的指定一个编码类型， </li>\n<li>并且成功使用了编码：这时它会忽略任何它在文档中发现的编码类型。</li>\n<li>通过嗅探文件开头的一下数据，判断编码。如果编码类型可以被检测到，</li>\n<li>它将是这些中的一个：UTF-*编码，EBCDIC或者ASCII。</li>\n<li>通过chardet库,嗅探编码，如果你安装了这个库。</li>\n<li>UTF-8</li>\n<li>Windows-1252</li>\n</ul>\n<p>一般来说,bs的自动识别,是不会有问题的,但是在我这里除了问题,具体原因不太清楚<br>我的网页上已经声明了是<code>utf-8</code>编码<br>原来代码如下</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#这是原来的编码,在win下面乱码</span></div><div class=\"line\"><span class=\"keyword\">self</span>.soup = bs((response.read()))</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"keyword\">self</span>.soup.originalEncoding   <span class=\"comment\">#此处结果竟然返回Windows-1252</span></div></pre></td></tr></table></figure>\n\n<p>修改后代码如下</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#win下乱码的关键在这里,beautifulsoup解析的编码不对,我们这里直接指定编码</span></div><div class=\"line\"><span class=\"keyword\">self</span>.soup = bs((response.read()), from_encoding=<span class=\"string\">'utf-8'</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"keyword\">self</span>.soup.originalEncoding   <span class=\"comment\">#修正后代码正确返回'utf-8'</span></div></pre></td></tr></table></figure>\n\n<p>看来beautifulsoup的自动识别编码不能全部依赖.<br>好不容易才定位到这里的问题,折腾了一天啊<br>这里用了一个方法来检测编码.就是soup.iriginalEncoding属性</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"keyword\">self</span>.soup.originalEncoding   <span class=\"comment\">#修正后代码正确返回'utf-8'</span></div></pre></td></tr></table></figure>\n\n<p>这篇博客好水,毕竟不是很懂,所以说不出来</p>\n<p>update:2015-03-30</p>\n<h1 id=\"4_新技能get\">4 新技能get</h1>\n<p>之前都没好好理解原作者的博客,觉得没办法一个程序在win和ubuntu中不更改正常运行,现在发现,如果把编码改为unicode格式输出,那么系统会自动转换,这样就不存在utf-8编码在windows下cmd乱码了.</p>\n<h1 id=\"参考文献\">参考文献</h1>\n<p>1 <a href=\"http://www.crifan.com/summary_python_2_x_common_string_encode_decode_error_reason_and_solution/\" target=\"_blank\" rel=\"external\">【总结】Python 2.x中常见字符编码和解码方面的错误及其解决办法</a><br>2 <a href=\"http://www.crifan.com/resolved_python_garbled_chinese_characters_gb2312_gbk_gb18030-related_issues/\" target=\"_blank\" rel=\"external\">【已解决】python中文字符乱码（GB2312，GBK，GB18030相关的问题）</a><br>参考资料太多,贴不过来啊,主要都是cifan的博客,里面资料很多,一步一步都有过程,非常好用,谢谢cifan作者</p>\n","source":"_posts/python-blog-spider.md","raw":"title: python学习笔记--python和beautifulsoup遇到的编码问题\ndate: 2015-03-29 14:43:45\ntags:\n- python\n- 爬虫\ncategories:\n- python学习笔记\n---\n在刚开始使用github pages的时候,我用python写了一个爬虫,计划是从csdn和cnblogs等博客网站上,把自己之前写的博客爬取下来,然后再转换成hexo用的markdown格式,样就可以直接添加到我的github pages.\n>项目主页: https://github.com/Jackroyal/blog2markdown\n\n最近刚好在学习python,刚好就把它给优化了一下,顺便做了个跨平台(哈哈,win和ubuntu都可以跑哈),昨天遇到很蛋疼的问题,一它给了我很多思路帮助我定位问题,.直搞到凌晨两点才弄好.\n非常非常感谢[【总结】Python 2.x中常见字符编码和解码方面的错误及其解决办法](http://www.crifan.com/summary_python_2_x_common_string_encode_decode_error_reason_and_solution/)\n作者做了一个很好的总结,帮助我们定位问题.\n<!-- more -->\n\n#1 编码类型\n首先确定好你的编码类型,比如一般推荐用utf-8.当确定编码类型后,就要保持统一,不要又弄些GBK的编码在里面.\n+ 1.1  编辑器编码\n    * 我们有时候会犯一个错误,我在py文件的头部声明当前文件是按照utf-8来编码.但是文件实际保存的编却不是utf-8,这样也会导致乱码.建议使用可以查看当前文件编码的编辑器,比如sublime text或者notepad++ 或者pycharm.<br>在sublime下如图所示<br>![sublime显示当前文件编码](http://ww2.sinaimg.cn/large/692869a3gw1eqmn535qb7j208u028t8k.jpg)\n    * 文件编码声明,我们要在py文件的头部添加一行`# -*- coding: utf-8 -*-`,表明我接下来要使用utf-8编码\n+ 1.2  python解释器\n    * 如果是Python的IDLE，如果你没修改defaultencoding，那么就使用默认的字符编码可以通过sys.getdefaultencoding()而获得，比如此处获得是：ascii<br>![win中python解释器编码](http://ww4.sinaimg.cn/large/692869a3gw1eqmnd8fgrjj20b205kabi.jpg)<br>![ubuntu终端解释器的编码](http://ww3.sinaimg.cn/large/692869a3gw1eqmnfd29u7j20k5047wfv.jpg)\n+ 1.3  执行python代码\n    * 其中，很常见的几种动作是：\n        * 打印print对应的所获得的字符\n            * 对于字符串打印,Python的逻辑:\n                * 如果是Unicode字符串,则可以,自动地,编码为对应的终端所用编码,然后正确的显示出来\n                * 比如unicode的字符串,输出到windows的默认编码为GBK的cmd中,则Python可以自动将Unicode编码为GBK,然后输出到cmd中\n                * 个别特殊情况,也会出错:\n                    * 当此unicode字符串中包含某特殊字符,而目标终端的编码集合中,没有此字符,则很明显也是无法实现将Unicode编码为对应的特定编码的字符串,无法正确显示的\n                * 如果是某种编码类型的str,则需要该str的编码类型,和目标终端编码匹配\n                    * 比如GBK的字符串,输出到windows的默认编码为GBK的cmd,则是可以正常输出的\n                    * 此处后来经过代码测试，就发现一个有趣或者说诡异的问题，虽然我们python文件声明的UTF-8编码，但是实际上实际上是用GBK编码，而此时，文件中的字符串，很明显是用GBK存储的，所以，将此GBK字符，输出到GBK的cmd中，是可以正常输出的。即，此处字符串的类型，很明显只和文件所用的实际编码有关，而和文件所声明的代码无关。\n                * 如果是UTF-8的字符串,输出到windows的默认编码为GBK的cmd,就会出错\n                    * 对相应的字符，进行编码（为某种特定类型的字符str），或解码（为对应的unicode类型的字符）\n                    * 比如将当前的某种编码的字符串，解码为Unicode字符串\n                        * 很明显，也是要保证，你字符串本身的编码和所指定的编码，两者之间要一致的\n                        * 比如：decodedUnicode = someUtf8Str.decode(\"UTF-8\")\n                        * 而如果用这样的：decodedUnicode = someGbkStr.decode(\"UTF-8\")，那就会出现错误\n\n#2 常用方法\n###2.1 encode和decode\nencode()  unicode编码->其他编码\n\ndecode()  其他编码->unicode编码\n\n使用这两个方法的前提是,你要知道当前是什么编码.然后用对应的编码去进行解码\n比如对于s字符串可以用\n```\ns.encode('utf-8') #将s由unicode转码成utf-8\ns.decode('GBK') #s是GBK编码,将s转换成unicode\n```\n###2.2 isinstance()\n```\nisinstance(s , unicode) #检测s是否是unicode编码\n\nisinstance(s , str) #检测s是否是str格式\n```\n\n\n#3 beautifulsoup编码问题\n\n###Beautiful Soup 会按顺序尝试不同的编码将你的文档转换为Unicode：\n+   可以通过from_encoding参数传递编码类型给soup的构造器\n+   通过文档本身找到编码类型：例如XML的声明或者HTML文档http-equiv的META标签。 \n+   如果Beautiful Soup在文档中发现编码类型，它试着使用找到的类型转换文档。 +\n+   但是，如果你明显的指定一个编码类型， \n+   并且成功使用了编码：这时它会忽略任何它在文档中发现的编码类型。\n+   通过嗅探文件开头的一下数据，判断编码。如果编码类型可以被检测到，\n+   它将是这些中的一个：UTF-*编码，EBCDIC或者ASCII。\n+   通过chardet库,嗅探编码，如果你安装了这个库。\n+   UTF-8\n+   Windows-1252\n\n一般来说,bs的自动识别,是不会有问题的,但是在我这里除了问题,具体原因不太清楚\n我的网页上已经声明了是`utf-8`编码\n原来代码如下\n```\n#这是原来的编码,在win下面乱码\nself.soup = bs((response.read()))\nprint self.soup.originalEncoding   #此处结果竟然返回Windows-1252\n```\n修改后代码如下\n```\n#win下乱码的关键在这里,beautifulsoup解析的编码不对,我们这里直接指定编码\nself.soup = bs((response.read()), from_encoding='utf-8')\nprint self.soup.originalEncoding   #修正后代码正确返回'utf-8'\n```\n\n看来beautifulsoup的自动识别编码不能全部依赖.\n好不容易才定位到这里的问题,折腾了一天啊\n这里用了一个方法来检测编码.就是soup.iriginalEncoding属性\n```\nprint self.soup.originalEncoding   #修正后代码正确返回'utf-8'\n```\n\n这篇博客好水,毕竟不是很懂,所以说不出来\n\nupdate:2015-03-30\n#4 新技能get\n之前都没好好理解原作者的博客,觉得没办法一个程序在win和ubuntu中不更改正常运行,现在发现,如果把编码改为unicode格式输出,那么系统会自动转换,这样就不存在utf-8编码在windows下cmd乱码了.\n\n\n#参考文献\n1 [【总结】Python 2.x中常见字符编码和解码方面的错误及其解决办法](http://www.crifan.com/summary_python_2_x_common_string_encode_decode_error_reason_and_solution/)\n2 [【已解决】python中文字符乱码（GB2312，GBK，GB18030相关的问题）](http://www.crifan.com/resolved_python_garbled_chinese_characters_gb2312_gbk_gb18030-related_issues/)\n参考资料太多,贴不过来啊,主要都是cifan的博客,里面资料很多,一步一步都有过程,非常好用,谢谢cifan作者\n","slug":"python-blog-spider","updated":1427723763000,"excerpt":"<p>在刚开始使用github pages的时候,我用python写了一个爬虫,计划是从csdn和cnblogs等博客网站上,把自己之前写的博客爬取下来,然后再转换成hexo用的markdown格式,样就可以直接添加到我的github pages.</p>\n<blockquote>\n<p>项目主页: <a href=\"https://github.com/Jackroyal/blog2markdown\" target=\"_blank\" rel=\"external\">https://github.com/Jackroyal/blog2markdown</a></p>\n</blockquote>\n<p>最近刚好在学习python,刚好就把它给优化了一下,顺便做了个跨平台(哈哈,win和ubuntu都可以跑哈),昨天遇到很蛋疼的问题,一它给了我很多思路帮助我定位问题,.直搞到凌晨两点才弄好.<br>非常非常感谢<a href=\"http://www.crifan.com/summary_python_2_x_common_string_encode_decode_error_reason_and_solution/\" target=\"_blank\" rel=\"external\">【总结】Python 2.x中常见字符编码和解码方面的错误及其解决办法</a><br>作者做了一个很好的总结,帮助我们定位问题.<br>","_id":"e6xjak820aagkwvt","comments":true,"layout":"post","photos":[],"link":""},{"title":"python学习笔记--socket编程端口复用","date":1426639622000,"tags":["d45ffwv1j6t2w7au","h6yuwlyxlutzu0ne","r7ch11y1aiwsbufi"],"categories":["gywlejx022p25fsy"],"content":"<p>最近在学习socket编程,遇到一个问题:<br>我先bind一个端口后,如果通过ctr+c关闭进程.接下来执行程序的时候,就会提示<code>socket.error: Address already in use</code>.<br><a id=\"more\"></a><br>照例google一番,找到<a href=\"http://blog.csdn.net/xl_xunzhao/article/details/3130037\" target=\"_blank\" rel=\"external\">这个</a>.博主说的情况和我的一样.<br>我还在stackoverflow上找到<a href=\"http://stackoverflow.com/questions/4465959/python-errno-98-address-already-in-use\" target=\"_blank\" rel=\"external\">这个</a>.<br>修改后代码如下:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">server_socket = <span class=\"keyword\">socket</span>.<span class=\"keyword\">socket</span>(<span class=\"keyword\">socket</span>.AF_INET, <span class=\"keyword\">socket</span>.SOCK_STREAM)</div><div class=\"line\"><span class=\"comment\">#下面这行是关健</span></div><div class=\"line\">server_socket.<span class=\"keyword\">setsockopt</span>(<span class=\"keyword\">socket</span>.SOL_SOCKET, <span class=\"keyword\">socket</span>.SO_REUSEADDR, <span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\">server_socket.<span class=\"keyword\">bind</span>((<span class=\"string\">''</span>, PORT))</div><div class=\"line\">server_socket.<span class=\"keyword\">listen</span>(<span class=\"number\">5</span>)</div></pre></td></tr></table></figure>\n\n<p>然后就搞定了.</p>\n<p>下面的代码是socket编程敲得两个小例子,基于socket的聊天小程序都是别人的东西,只是练习一下,源地址在本文最后.</p>\n<h2 id=\"多线程版本服务器端程序server2-py\">多线程版本服务器端程序server2.py</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8-*-</span></div><div class=\"line\">__author__ = <span class=\"string\">'chen'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> socket,sys</div><div class=\"line\"><span class=\"keyword\">from</span> thread <span class=\"keyword\">import</span> *</div><div class=\"line\"></div><div class=\"line\">HOST = <span class=\"string\">''</span></div><div class=\"line\">PORT = <span class=\"number\">8888</span></div><div class=\"line\"></div><div class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'socket created'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">try</span>:</div><div class=\"line\">    s.bind((HOST, PORT))</div><div class=\"line\"><span class=\"keyword\">except</span> socket.error, msg:</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'bind failed.Error code: |||%S Message: %s'</span> %(str(msg[<span class=\"number\">0</span>]), msg[<span class=\"number\">1</span>])</div><div class=\"line\">    sys.exit()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'socket bind complete'</span></div><div class=\"line\"></div><div class=\"line\">s.listen(<span class=\"number\">10</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'socket now listening'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">clientthread</span><span class=\"params\">(conn)</span>:</span></div><div class=\"line\">    conn.send(<span class=\"string\">'welcome to the server.Type something and hit enter\\n'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">        data = conn.recv(<span class=\"number\">1024</span>)</div><div class=\"line\">        reply = <span class=\"string\">'ok...'</span> + data</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</div><div class=\"line\">            <span class=\"keyword\">break</span></div><div class=\"line\">        conn.sendall(reply)</div><div class=\"line\">    conn.close()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"number\">1</span>:</div><div class=\"line\">    conn, addr = s.accept()</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'connected with %s : %s'</span> %(addr[<span class=\"number\">0</span>],str(addr[<span class=\"number\">1</span>]))</div><div class=\"line\"></div><div class=\"line\">    start_new_thread(clientthread, (conn,))</div><div class=\"line\"></div><div class=\"line\">s.close()</div></pre></td></tr></table></figure>\n\n<p>直接telnet连接socket,就可以调试</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">telnet</span> localhost <span class=\"number\">8888</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"改良版,带广播的聊天室程序server3-py\">改良版,带广播的聊天室程序server3.py</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8-*-</span></div><div class=\"line\">__author_<span class=\"number\">_</span> = <span class=\"string\">'chen'</span></div><div class=\"line\"></div><div class=\"line\">import <span class=\"keyword\">socket</span>, <span class=\"keyword\">select</span></div><div class=\"line\"></div><div class=\"line\">def broadcast_data(sock, message):</div><div class=\"line\">    <span class=\"keyword\">for</span> <span class=\"keyword\">socket</span> in CONNECTION_LIST:</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">socket</span> != server_socket != sock:</div><div class=\"line\">            try:</div><div class=\"line\">                <span class=\"keyword\">socket</span>.<span class=\"keyword\">send</span>(message)</div><div class=\"line\">            except msg:</div><div class=\"line\">                <span class=\"keyword\">socket</span>.<span class=\"keyword\">close</span>()</div><div class=\"line\">                CONNECTION_LIST.remove(<span class=\"keyword\">socket</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name_<span class=\"number\">_</span> == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    CONNECTION_LIST = []</div><div class=\"line\">    RECV_BUFFER = <span class=\"number\">4096</span></div><div class=\"line\">    PORT = <span class=\"number\">5000</span></div><div class=\"line\">    server_socket = <span class=\"keyword\">socket</span>.<span class=\"keyword\">socket</span>(<span class=\"keyword\">socket</span>.AF_INET, <span class=\"keyword\">socket</span>.SOCK_STREAM)</div><div class=\"line\">    server_socket.<span class=\"keyword\">setsockopt</span>(<span class=\"keyword\">socket</span>.SOL_SOCKET, <span class=\"keyword\">socket</span>.SO_REUSEADDR, <span class=\"number\">1</span>)</div><div class=\"line\">    server_socket.<span class=\"keyword\">bind</span>((<span class=\"string\">''</span>, PORT))</div><div class=\"line\">    server_socket.<span class=\"keyword\">listen</span>(<span class=\"number\">5</span>)</div><div class=\"line\"></div><div class=\"line\">    CONNECTION_LIST.append(server_socket)</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"chat server started on port <span class=\"variable\">%s</span>\"</span> % str(PORT)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</div><div class=\"line\">        read_sockets, write_sockets,error_sockets = <span class=\"keyword\">select</span>.<span class=\"keyword\">select</span>(CONNECTION_LIST, [], [])</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> sock in read_sockets:</div><div class=\"line\">            <span class=\"keyword\">if</span> sock == server_socket:</div><div class=\"line\">                sockfd,addr = server_socket.<span class=\"keyword\">accept</span>()</div><div class=\"line\">                CONNECTION_LIST.append(sockfd)</div><div class=\"line\">                <span class=\"keyword\">print</span> <span class=\"string\">\"client (<span class=\"variable\">%s</span>, <span class=\"variable\">%s</span>) connected\"</span> % addr</div><div class=\"line\"></div><div class=\"line\">                broadcast_data(sockfd, <span class=\"string\">\"[<span class=\"variable\">%s</span>:<span class=\"variable\">%s</span>] entered room\\n\"</span> % addr)</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                try:</div><div class=\"line\">                    data = sock.<span class=\"keyword\">recv</span>(RECV_BUFFER)</div><div class=\"line\">                    <span class=\"keyword\">if</span> data:</div><div class=\"line\">                        <span class=\"keyword\">print</span>  <span class=\"string\">\"[<span class=\"variable\">%s</span>:<span class=\"variable\">%s</span>]\"</span> % (str(sock.<span class=\"keyword\">getpeername</span>()), data)</div><div class=\"line\">                        broadcast_data(sock, <span class=\"string\">\"[<span class=\"variable\">%s</span>:<span class=\"variable\">%s</span>]\"</span> % (str(sock.<span class=\"keyword\">getpeername</span>()), data))</div><div class=\"line\">                except msg:</div><div class=\"line\">                    <span class=\"keyword\">print</span> msg</div><div class=\"line\">                    broadcast_data(sock, <span class=\"string\">\"client (<span class=\"variable\">%s</span>, <span class=\"variable\">%s</span>) is offline \"</span>% addr)</div><div class=\"line\">                    <span class=\"keyword\">print</span> <span class=\"string\">\"client (<span class=\"variable\">%s</span>,<span class=\"variable\">%s</span>) is offline \"</span> % addr</div><div class=\"line\">                    sock.<span class=\"keyword\">close</span>()</div><div class=\"line\">                    CONNECTION_LIST.remove(sock)</div><div class=\"line\">                    <span class=\"keyword\">continue</span></div><div class=\"line\">    server_socket.<span class=\"keyword\">close</span>()</div></pre></td></tr></table></figure>\n\n<h2 id=\"客户端程序client3-py\">客户端程序client3.py</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8-*-</span></div><div class=\"line\">__author_<span class=\"number\">_</span> = <span class=\"string\">'chen'</span></div><div class=\"line\"></div><div class=\"line\">import <span class=\"keyword\">socket</span>,<span class=\"keyword\">select</span>,string,sys</div><div class=\"line\"></div><div class=\"line\">def prompt():</div><div class=\"line\">    sys.stdout.<span class=\"keyword\">write</span>(<span class=\"string\">'[you]'</span>)</div><div class=\"line\">    sys.stdout.flush()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name_<span class=\"number\">_</span> == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    <span class=\"keyword\">if</span>(len(sys.argv)&lt;<span class=\"number\">3</span>):</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'usage: python client3.py hostname port'</span></div><div class=\"line\">        sys.<span class=\"keyword\">exit</span>()</div><div class=\"line\"></div><div class=\"line\">    host = sys.argv[<span class=\"number\">1</span>]</div><div class=\"line\">    port = <span class=\"keyword\">int</span>(sys.argv[<span class=\"number\">2</span>])</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">s</span> = <span class=\"keyword\">socket</span>.<span class=\"keyword\">socket</span>(<span class=\"keyword\">socket</span>.AF_INET, <span class=\"keyword\">socket</span>.SOCK_STREAM)</div><div class=\"line\">    <span class=\"keyword\">s</span>.settimeout(<span class=\"number\">2</span>)</div><div class=\"line\"></div><div class=\"line\">    try:</div><div class=\"line\">        <span class=\"keyword\">s</span>.<span class=\"keyword\">connect</span>((host, port))</div><div class=\"line\">    except:</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'unable to connect'</span></div><div class=\"line\">        sys.<span class=\"keyword\">exit</span>()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'connected to remote host. start sending messages'</span></div><div class=\"line\">    prompt()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</div><div class=\"line\">        rlist = [sys.stdin, <span class=\"keyword\">s</span>]</div><div class=\"line\"></div><div class=\"line\">        read_list, write_list, error_list = <span class=\"keyword\">select</span>.<span class=\"keyword\">select</span>(rlist, [], [])</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> sock in read_list:</div><div class=\"line\">            <span class=\"keyword\">if</span> sock == <span class=\"keyword\">s</span>:</div><div class=\"line\">                data = sock.<span class=\"keyword\">recv</span>(<span class=\"number\">4096</span>)</div><div class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</div><div class=\"line\">                    <span class=\"keyword\">print</span> <span class=\"string\">'\\nDisconnected from chat server'</span></div><div class=\"line\">                    sys.<span class=\"keyword\">exit</span>()</div><div class=\"line\">                <span class=\"keyword\">else</span>:</div><div class=\"line\">                    sys.stdout.<span class=\"keyword\">write</span>(data)</div><div class=\"line\">                    prompt()</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                msg = sys.stdin.<span class=\"keyword\">readline</span>()</div><div class=\"line\">                <span class=\"keyword\">s</span>.<span class=\"keyword\">send</span>(msg)</div><div class=\"line\">                prompt()</div></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"参考文献\">参考文献</h1>\n<p>1 <a href=\"http://www.cnblogs.com/hazir/p/python_socket_programming.html\" target=\"_blank\" rel=\"external\">Python Socket 网络编程</a><br>2 <a href=\"http://www.cnblogs.com/hazir/p/python_chat_room.html\" target=\"_blank\" rel=\"external\">Python Socket 编程——聊天室示例程序</a></p>\n","source":"_posts/python-socket-port-reuse.md","raw":"title: python学习笔记--socket编程端口复用\ndate: 2015-03-18 08:47:02\ntags:\n- python\n- socket\n- Linux\ncategories:\n- python学习笔记\n---\n最近在学习socket编程,遇到一个问题:\n我先bind一个端口后,如果通过ctr+c关闭进程.接下来执行程序的时候,就会提示`socket.error: Address already in use`.\n<!-- more -->\n照例google一番,找到[这个](http://blog.csdn.net/xl_xunzhao/article/details/3130037).博主说的情况和我的一样.\n我还在stackoverflow上找到[这个](http://stackoverflow.com/questions/4465959/python-errno-98-address-already-in-use).\n修改后代码如下:\n```\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    #下面这行是关健\n    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n\n    server_socket.bind(('', PORT))\n    server_socket.listen(5)\n```\n然后就搞定了.\n\n下面的代码是socket编程敲得两个小例子,基于socket的聊天小程序都是别人的东西,只是练习一下,源地址在本文最后.\n##多线程版本服务器端程序server2.py\n```\n#!/usr/bin/env python\n# -*- coding:utf-8-*-\n__author__ = 'chen'\n\n\nimport socket,sys\nfrom thread import *\n\nHOST = ''\nPORT = 8888\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nprint 'socket created'\n\ntry:\n    s.bind((HOST, PORT))\nexcept socket.error, msg:\n    print 'bind failed.Error code: |||%S Message: %s' %(str(msg[0]), msg[1])\n    sys.exit()\n\n\nprint 'socket bind complete'\n\ns.listen(10)\nprint 'socket now listening'\n\ndef clientthread(conn):\n    conn.send('welcome to the server.Type something and hit enter\\n')\n\n    while True:\n        data = conn.recv(1024)\n        reply = 'ok...' + data\n        if not data:\n            break\n        conn.sendall(reply)\n    conn.close()\n\nwhile 1:\n    conn, addr = s.accept()\n    print 'connected with %s : %s' %(addr[0],str(addr[1]))\n\n    start_new_thread(clientthread, (conn,))\n\ns.close()\n```\n直接telnet连接socket,就可以调试\n```\ntelnet localhost 8888\n```\n##改良版,带广播的聊天室程序server3.py\n```\n#!/usr/bin/env python\n# -*- coding:utf-8-*-\n__author__ = 'chen'\n\nimport socket, select\n\ndef broadcast_data(sock, message):\n    for socket in CONNECTION_LIST:\n        if socket != server_socket != sock:\n            try:\n                socket.send(message)\n            except msg:\n                socket.close()\n                CONNECTION_LIST.remove(socket)\n\nif __name__ == \"__main__\":\n    CONNECTION_LIST = []\n    RECV_BUFFER = 4096\n    PORT = 5000\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    server_socket.bind(('', PORT))\n    server_socket.listen(5)\n\n    CONNECTION_LIST.append(server_socket)\n    print \"chat server started on port %s\" % str(PORT)\n\n    while 1:\n        read_sockets, write_sockets,error_sockets = select.select(CONNECTION_LIST, [], [])\n\n        for sock in read_sockets:\n            if sock == server_socket:\n                sockfd,addr = server_socket.accept()\n                CONNECTION_LIST.append(sockfd)\n                print \"client (%s, %s) connected\" % addr\n\n                broadcast_data(sockfd, \"[%s:%s] entered room\\n\" % addr)\n\n            else:\n                try:\n                    data = sock.recv(RECV_BUFFER)\n                    if data:\n                        print  \"[%s:%s]\" % (str(sock.getpeername()), data)\n                        broadcast_data(sock, \"[%s:%s]\" % (str(sock.getpeername()), data))\n                except msg:\n                    print msg\n                    broadcast_data(sock, \"client (%s, %s) is offline \"% addr)\n                    print \"client (%s,%s) is offline \" % addr\n                    sock.close()\n                    CONNECTION_LIST.remove(sock)\n                    continue\n    server_socket.close()\n```\n##客户端程序client3.py\n```\n#!/usr/bin/env python\n# -*- coding:utf-8-*-\n__author__ = 'chen'\n\nimport socket,select,string,sys\n\ndef prompt():\n    sys.stdout.write('[you]')\n    sys.stdout.flush()\n\nif __name__ == \"__main__\":\n    if(len(sys.argv)<3):\n        print 'usage: python client3.py hostname port'\n        sys.exit()\n\n    host = sys.argv[1]\n    port = int(sys.argv[2])\n\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.settimeout(2)\n\n    try:\n        s.connect((host, port))\n    except:\n        print 'unable to connect'\n        sys.exit()\n\n    print 'connected to remote host. start sending messages'\n    prompt()\n\n    while 1:\n        rlist = [sys.stdin, s]\n\n        read_list, write_list, error_list = select.select(rlist, [], [])\n\n        for sock in read_list:\n            if sock == s:\n                data = sock.recv(4096)\n                if not data:\n                    print '\\nDisconnected from chat server'\n                    sys.exit()\n                else:\n                    sys.stdout.write(data)\n                    prompt()\n\n            else:\n                msg = sys.stdin.readline()\n                s.send(msg)\n                prompt()\n```\n---\n#参考文献\n1 [Python Socket 网络编程](http://www.cnblogs.com/hazir/p/python_socket_programming.html)\n2 [Python Socket 编程——聊天室示例程序](http://www.cnblogs.com/hazir/p/python_chat_room.html)\n","slug":"python-socket-port-reuse","updated":1426642594000,"excerpt":"<p>最近在学习socket编程,遇到一个问题:<br>我先bind一个端口后,如果通过ctr+c关闭进程.接下来执行程序的时候,就会提示<code>socket.error: Address already in use</code>.<br>","_id":"vbqvt9nb2k7ofel4","comments":true,"layout":"post","photos":[],"link":""},{"title":"近期任务","date":1417532191000,"tags":[],"categories":["pfkzqowk9up452y2"],"content":"<p>2014-12-02 22:56:31  接下来的一个星期，我的任务是学习python爬虫的编写，至少要实现csdn博客转markdown的任务</p>\n","source":"_posts/recent-task.md","raw":"title: 近期任务\ndate: 2014-12-02 22:56:31\ntags:\ncategories:\n- 杂文\n---\n2014-12-02 22:56:31  接下来的一个星期，我的任务是学习python爬虫的编写，至少要实现csdn博客转markdown的任务\n","slug":"recent-task","updated":1420518904000,"excerpt":"","_id":"m5dgm0t8ja8y1vwl","comments":true,"layout":"post","photos":[],"link":""},{"title":"sql中left_join和right_join混用","date":1407463320000,"tags":["8jf9fva0dgfol1y9","xo3mc6koxixv9tzl"],"categories":["wkww6t8z4663daml"],"content":"<p>left join(左联接) 返回包括左表中的所有记录和右表中联结字段相等的记录 </p>\n<p>right join(右联接) 返回包括右表中的所有记录和左表中联结字段相等的记录</p>\n<p>inner join(等值连接) 只返回两个表中联结字段相等的行</p>\n<p>如上所言,我们只做一下left join的实验,right join和left join 类似</p>\n<p>测试一共三张表,a  b   c<br><img src=\"\" alt=\"\"></p>\n<p>表结构和数据分别如下</p>\n<p>a表                                                                  b表                                                              c表<br><img src=\"\" alt=\"\">         <img src=\"\" alt=\"\">          <img src=\"\" alt=\"\"></p>\n<p>然后我们来试一下左连接</p>\n<p>1,  我们来查询a b两张表,连接他们aid=bid的选项<br>sql&gt;&gt;SELECT *  FROM a   LEFT JOIN b on aid=bid</p>\n<p><img src=\"\" alt=\"\"></p>\n<p>看图很好理解,因为是a左连接b,所以b中为空的元素 ,在查询结果中以NULL的形式补全</p>\n<p>同理可得</p>\n<p>sql&gt;&gt;SELECT * FROM a LEFT JOIN c on aid=cid<br><img src=\"\" alt=\"\"></p>\n<p>sql&gt;&gt;SELECT * FROM c LEFT JOIN b on bid=cid<br>sql&gt;&gt;SELECT * FROM c LEFT JOIN b on cid=bid</p>\n<p><img src=\"\" alt=\"\"></p>\n<p>也就是on后面的顺序无所谓,无论是bid=cid还是cid=bid,重点是前面的left join还是right join</p>\n<p>2,我们来试一下如果三张表左连接呢,会有什么情况?</p>\n<p>sql&gt;&gt;SELECT * FROM a</p>\n<pre><code>       <span class=\"built_in\">LEFT</span> <span class=\"built_in\">JOIN</span> b <span class=\"keyword\">on</span> bid=aid \n\n       <span class=\"built_in\">LEFT</span> <span class=\"built_in\">JOIN</span> c <span class=\"keyword\">on</span> aid=cid\n</code></pre><p><img src=\"\" alt=\"\"></p>\n<p>sql&gt;&gt;SELECT * FROM a LEFT JOIN b on bid=aid LEFT JOIN c on bid=cid<br><img src=\"\" alt=\"\"></p>\n<p>3,如果我用了一个right join呢?</p>\n<p>sql&gt;&gt;SELECT * FROM a LEFT JOIN b on bid=aid RIGHT JOIN c on bid=cid<br><img src=\"\" alt=\"\"></p>\n<p>这里该怎么理解呢?<br>感谢<a href=\"http://blog.csdn.net/sqlserverdiscovery/article/details/6893288\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/sqlserverdiscovery/article/details/6893288</a></p>\n<p>我们理解的时候可以把它拆成两部分去理解</p>\n<p>比如第一部分<br>sql&gt;&gt;SELECT * FROM a LEFT JOIN b on bid=aid</p>\n<p><img src=\"\" alt=\"\"></p>\n<p>然后再思考第二部分,假如上图是一张表  我们叫它a_b</p>\n<p>你可以新建一个视图,就可以真成为一张虚表了</p>\n<p>sql&gt;&gt;create  VIEW a_b  as (SELECT * FROM a LEFT JOIN b on bid=aid)<br><img src=\"\" alt=\"\"></p>\n<p>然后我们继续做下面一部分</p>\n<p>sql&gt;&gt;select * from a_b right join c on bid=cid<br><img src=\"\" alt=\"\"></p>\n<p>可见,与上面的结果是一样的,当然这是我们理解的过程,实际数据库服务器执行的时候可能不是这样的,它会做一些优化,提高效率</p>\n","source":"_posts/sql中left_join和right_join混用.md","raw":"title: 'sql中left_join和right_join混用'\ndate: 2014-08-08 10:02\ntags:\n- sql\n- select\ncategories:\n- 数据库\n---\nleft join(左联接) 返回包括左表中的所有记录和右表中联结字段相等的记录 \n\r\nright join(右联接) 返回包括右表中的所有记录和左表中联结字段相等的记录\n\r\ninner join(等值连接) 只返回两个表中联结字段相等的行\n\n\n\n如上所言,我们只做一下left join的实验,right join和left join 类似\n\n测试一共三张表,a  b   c\n![]()\n\n表结构和数据分别如下\n\na表                                                                  b表                                                              c表\n![]()         ![]()          ![]()\n\n然后我们来试一下左连接\n\n1,  我们来查询a b两张表,连接他们aid=bid的选项\nsql>>SELECT \\*  FROM a   LEFT JOIN b on aid=bid\n\n\n![]()\n\n\n\n看图很好理解,因为是a左连接b,所以b中为空的元素 ,在查询结果中以NULL的形式补全\n\n同理可得\n\nsql>>SELECT \\* FROM a LEFT JOIN c on aid=cid\n![]()\n\n\nsql>>SELECT \\* FROM c LEFT JOIN b on bid=cid\nsql>>SELECT \\* FROM c LEFT JOIN b on cid=bid\n\n\n![]()\n\n\n\n也就是on后面的顺序无所谓,无论是bid=cid还是cid=bid,重点是前面的left join还是right join\n\n\n\n\n\n\n\n2,我们来试一下如果三张表左连接呢,会有什么情况?\n\nsql>>SELECT \\* FROM a\n\n           LEFT JOIN b on bid=aid \n\n           LEFT JOIN c on aid=cid\n![]()\n\n\n\nsql>>SELECT \\* FROM a LEFT JOIN b on bid=aid LEFT JOIN c on bid=cid\n![]()\n\n\n\n3,如果我用了一个right join呢?\n\nsql>>SELECT \\* FROM a LEFT JOIN b on bid=aid RIGHT JOIN c on bid=cid\n![]()\n\n\n\n这里该怎么理解呢?\n感谢[http://blog.csdn.net/sqlserverdiscovery/article/details/6893288](http://blog.csdn.net/sqlserverdiscovery/article/details/6893288)\n\n我们理解的时候可以把它拆成两部分去理解\n\n比如第一部分\nsql>>SELECT \\* FROM a LEFT JOIN b on bid=aid\n\n\n![]()\n\n\n\n然后再思考第二部分,假如上图是一张表  我们叫它a_b\n\n你可以新建一个视图,就可以真成为一张虚表了\n\nsql>>create  VIEW a_b  as (SELECT \\* FROM a LEFT JOIN b on bid=aid)\n![]()\n\n\n\n然后我们继续做下面一部分\n\nsql>>select \\* from a_b right join c on bid=cid\n![]()\n\n\n\n可见,与上面的结果是一样的,当然这是我们理解的过程,实际数据库服务器执行的时候可能不是这样的,它会做一些优化,提高效率\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"sql中left_join和right_join混用","updated":1420518904000,"excerpt":"","_id":"pn8nqgea6xhkvgdj","comments":true,"layout":"post","photos":[],"link":""},{"title":"shadowsocks的安装和配置--在ubuntu和ubuntu中","date":1425911181000,"tags":["r7ch11y1aiwsbufi","ztmd4peubwsgd8rs","nrmwncly4b3w7ort"],"categories":["uc3yyao8lxnpqvsf"],"content":"<p>最近我的vpn一直在抽风，几乎没法正常使用，而且我的chrome也是各种花屏，我快疯了，没办法，只能改用shadowsocks了。<br>搭建过程分为两部分:服务端和客户端(这里是主要是ubuntu的客户端)。<br><a id=\"more\"></a></p>\n<h1 id=\"1_系统环境\">1 系统环境</h1>\n<p><strong>服务器</strong>:DigitalOcean上的Ubuntu 14.04 LTS<br><strong>客户端</strong>:Ubuntu 14.04 LTS</p>\n<h1 id=\"2_服务器端安装和配置\">2 服务器端安装和配置</h1>\n<p>这里主要是参考github的<a href=\"https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E\" target=\"_blank\" rel=\"external\">官方说明</a><br>通过ssh登陆的服务器上去,这里不在赘述如何登陆.<br>以下主要针对linux服务器,windows服务器查看<a href=\"https://github.com/shadowsocks/shadowsocks/wiki/Install-Shadowsocks-Server-on-Windows\" target=\"_blank\" rel=\"external\">这里</a></p>\n<h2 id=\"安装\">安装</h2>\n<p>Linux不同的发行版本执行的命令如下</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Debian / Ubuntu:</div><div class=\"line\"></div><div class=\"line\">apt-get <span class=\"operator\"><span class=\"keyword\">install</span> python-pip</span></div><div class=\"line\">pip <span class=\"keyword\">install</span> shadowsocks</div><div class=\"line\"></div><div class=\"line\">CentOS:</div><div class=\"line\"></div><div class=\"line\">yum <span class=\"keyword\">install</span> python-setuptools && easy_install pip</div><div class=\"line\">pip <span class=\"keyword\">install</span> shadowsocks</div></pre></td></tr></table></figure>\n\n<h2 id=\"配置\">配置</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">sudo</span> vi /etc/shadowsocks.json</div></pre></td></tr></table></figure>\n\n<p>配置文件的内容大致如下:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">{</div><div class=\"line\">    \"<span class=\"attribute\">server</span>\":<span class=\"value\"><span class=\"string\">\"你的服务器的ip\"</span></span>,</div><div class=\"line\">    \"<span class=\"attribute\">server_port</span>\":<span class=\"value\"><span class=\"number\">8388</span></span>,</div><div class=\"line\">    \"<span class=\"attribute\">local_address</span>\": <span class=\"value\"><span class=\"string\">\"127.0.0.1\"</span></span>,</div><div class=\"line\">    \"<span class=\"attribute\">local_port</span>\":<span class=\"value\"><span class=\"number\">1080</span></span>,</div><div class=\"line\">    \"<span class=\"attribute\">password</span>\":<span class=\"value\"><span class=\"string\">\"你设置的密码\"</span></span>,</div><div class=\"line\">    \"<span class=\"attribute\">timeout</span>\":<span class=\"value\"><span class=\"number\">300</span></span>,</div><div class=\"line\">    \"<span class=\"attribute\">method</span>\":<span class=\"value\"><span class=\"string\">\"aes-256-cfb\"</span></span>,</div><div class=\"line\">    \"<span class=\"attribute\">fast_open</span>\": <span class=\"value\"><span class=\"literal\">false</span></span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p><strong>参数名称       解释</strong><br>server         安装shadowsocks服务器ip<br>server_port    服务器端口号<br>local_address  本地服务器默认是127.0.0.1<br>local_port     本地监听的端口号<br>password       密码<br>timeout        超时时间,单位是秒<br>method         加密方法默认是: “aes-256-cfb”可以用其他加密方法<br>fast_open      是否使用TCP_FASTOPEN,默认为不使用<br>workers        number of workers, available on Unix/Linux</p>\n<h2 id=\"运行\">运行</h2>\n<p>前台运行的命令<br><code>ssserver -c /etc/shadowsocks.json</code><br>后台运行<br><code>ssserver -c /etc/shadowsocks.json -d start</code><br><code>ssserver -c /etc/shadowsocks.json -d stop</code><br>ps:我上述两条命令都会出错,这两条命令来自官方的github,我用的是下面的<br><code>nohup ssserver -c /etc/shadowsocks.json &gt; aa.log</code></p>\n<h2 id=\"开机自启\">开机自启</h2>\n<p>我们把它写入/etc/rc.local中就可以完成开机自启动了.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">sudo</span> vi /etc/rc.local  <span class=\"comment\">#打开rc.local文件</span></div><div class=\"line\"><span class=\"comment\">#然后在exit前面加入下面这一行</span></div><div class=\"line\"><span class=\"comment\">#nohup ssserver -c /etc/shadowsocks.json &gt; aa.log</span></div></pre></td></tr></table></figure>\n\n<h1 id=\"3_客户端的安装和配置\">3 客户端的安装和配置</h1>\n<p>客户端按理说和服务器端类似,安装shadowsocks,但是我的就是这个出了问题.</p>\n<h2 id=\"1)_安装相关软件\">1) 安装相关软件</h2>\n<p>shadowsocks有各种客户端版本,各个系统都有.在ubuntu下带图形化界面的有shadowsocks-qt5,还可以直接用命令行.</p>\n<p><strong>图形化:</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo <span class=\"built_in\">add</span>-apt-repository <span class=\"keyword\">pp</span><span class=\"variable\">a:hzwhuang</span>/ss-qt5</div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span></div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> install shadowsocks-qt5</div></pre></td></tr></table></figure>\n\n<p><em>PS:</em>我的电脑安装这个以后,会自动卸载我的chrome<br><em>PPS:</em>我刚才又试了一次,我在安装了命令行模式的shadowsocks以后,现在不会卸载我的chrome,总算正常了</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">The following extra packages will be installed:</div><div class=\"line\">  libbotan-<span class=\"number\">1.10</span>-<span class=\"number\">0</span> libqrencode3 libqtshadowsocks libzbar0</div><div class=\"line\">The following packages will be REMOVED:</div><div class=\"line\">  libbotan-<span class=\"number\">1.10</span>-<span class=\"number\">0</span>:i386 libqtshadowsocks:i386 libzbar0:i386</div><div class=\"line\">The following <span class=\"keyword\">NEW</span> packages will be installed:</div><div class=\"line\">  libbotan-<span class=\"number\">1.10</span>-<span class=\"number\">0</span> libqrencode3 libqtshadowsocks libzbar0 shadowsocks-qt5</div><div class=\"line\"><span class=\"number\">0</span> upgraded, <span class=\"number\">5</span> newly installed, <span class=\"number\">3</span> <span class=\"keyword\">to</span> remove <span class=\"keyword\">and</span> <span class=\"number\">19</span> <span class=\"keyword\">not</span> upgraded.</div><div class=\"line\">Need <span class=\"keyword\">to</span> <span class=\"keyword\">get</span> <span class=\"number\">1</span>,<span class=\"number\">280</span> kB <span class=\"keyword\">of</span> archives.</div><div class=\"line\">After this operation, <span class=\"number\">662</span> kB <span class=\"keyword\">of</span> additional disk space will be used.</div><div class=\"line\"><span class=\"keyword\">Do</span> you want <span class=\"keyword\">to</span> <span class=\"keyword\">continue</span>? [Y/n]</div></pre></td></tr></table></figure>\n\n<p><strong>命令行模式:</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> install <span class=\"keyword\">python</span>-pip <span class=\"keyword\">python</span>-dev build-essential </div><div class=\"line\">sudo pip install  pip</div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> install <span class=\"keyword\">python</span>-m2crypto</div><div class=\"line\">sudo pip install shadowsocks</div></pre></td></tr></table></figure>\n\n<p>我因为之前在环境中就安装过pip,所以我只需要执行倒数第三个和第四个命令.<br>但是我的倒数第四个命令<code>pip install shadowsocks</code>一直报错:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">Exception: Traceback (most recent call <span class=\"keyword\">last</span>):</div><div class=\"line\">File <span class=\"string\">\"/usr/lib/python2.7/dist-packages/pip/basecommand.py\"</span>, <span class=\"built_in\">line</span> <span class=\"number\">122</span>, <span class=\"operator\">in</span> main</div><div class=\"line\">  status = self.run(options, args)</div><div class=\"line\">File <span class=\"string\">\"/usr/lib/python2.7/dist-packages/pip/commands/install.py\"</span>, <span class=\"built_in\">line</span> <span class=\"number\">278</span>, <span class=\"operator\">in</span> run</div><div class=\"line\">  requirement_set.prepare_files(finder, force_root_egg_info=self.bundle, bundle=self.bundle) </div><div class=\"line\">File <span class=\"string\">\"/usr/lib/python2.7/dist-packages/pip/req.py\"</span>, <span class=\"built_in\">line</span> <span class=\"number\">1177</span>, <span class=\"operator\">in</span> prepare_files </div><div class=\"line\">  url = finder.find_requirement(req_to_install, upgrade=self.upgrade) </div><div class=\"line\">File <span class=\"string\">\"/usr/lib/python2.7/dist-packages/pip/index.py\"</span>, <span class=\"built_in\">line</span> <span class=\"number\">256</span>, <span class=\"operator\">in</span> find_requirement</div><div class=\"line\">  page_versions.extend(self.<span class=\"title\">_package</span>_versions(page.links, req.name.<span class=\"built_in\">lower</span>())) </div><div class=\"line\">File <span class=\"string\">\"/usr/lib/python2.7/dist-packages/pip/index.py\"</span>, <span class=\"built_in\">line</span> <span class=\"number\">432</span>, <span class=\"operator\">in</span> <span class=\"title\">_package</span>_versions </div><div class=\"line\">  <span class=\"keyword\">for</span> link <span class=\"operator\">in</span> self.<span class=\"title\">_sort</span>_links(links): </div><div class=\"line\">File <span class=\"string\">\"/usr/lib/python2.7/dist-packages/pip/index.py\"</span>, <span class=\"built_in\">line</span> <span class=\"number\">422</span>, <span class=\"operator\">in</span> <span class=\"title\">_sort</span>_links </div><div class=\"line\">  <span class=\"keyword\">for</span> link <span class=\"operator\">in</span> links: </div><div class=\"line\">File <span class=\"string\">\"/usr/lib/python2.7/dist-packages/pip/index.py\"</span>, <span class=\"built_in\">line</span> <span class=\"number\">769</span>, <span class=\"operator\">in</span> links </div><div class=\"line\">  <span class=\"keyword\">for</span> anchor <span class=\"operator\">in</span> self.parsed.findall(<span class=\"string\">\".//a\"</span>):</div><div class=\"line\">AttributeError: <span class=\"string\">'Document'</span> object has no attribute <span class=\"string\">'findall'</span></div><div class=\"line\"></div><div class=\"line\">Storing debug <span class=\"built_in\">log</span> <span class=\"keyword\">for</span> failure <span class=\"operator\">in</span> /root/.pip/pip.<span class=\"built_in\">log</span></div></pre></td></tr></table></figure>\n\n<p>网上搜索一番,在<a href=\"https://github.com/pypa/pip/issues/1742\" target=\"_blank\" rel=\"external\">这里</a>找到答案.<br>解决方法很简单,执行<code>easy_install pip</code>,就ok(貌似是把pip重新安装了一次).</p>\n<h2 id=\"2)_客户端运行\">2) 客户端运行</h2>\n<p>shadowsocks图形化的比较简单,这里不表.<br>命令行模式,启动如下:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sslocal <span class=\"operator\">-s</span> 服务器ip -p <span class=\"number\">8388</span> -k 密码</div></pre></td></tr></table></figure>\n\n<p>启动成功后会有如下输出:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">2015<span class=\"tag\">-03-10</span> 11<span class=\"pseudo\">:12</span><span class=\"pseudo\">:59</span> <span class=\"tag\">INFO</span>     <span class=\"tag\">loading</span> <span class=\"tag\">libcrypto</span> <span class=\"tag\">from</span> <span class=\"tag\">libcrypto</span><span class=\"class\">.so</span><span class=\"class\">.1</span><span class=\"class\">.0</span><span class=\"class\">.0</span></div><div class=\"line\">2015<span class=\"tag\">-03-10</span> 11<span class=\"pseudo\">:12</span><span class=\"pseudo\">:59</span> <span class=\"tag\">INFO</span>     <span class=\"tag\">starting</span> <span class=\"tag\">local</span> <span class=\"tag\">at</span> 127<span class=\"class\">.0</span><span class=\"class\">.0</span><span class=\"class\">.1</span><span class=\"pseudo\">:1080</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"3)_浏览器代理设置\">3) 浏览器代理设置</h2>\n<p>一般来说我们不希望shadowsocks做全局的翻墙,那样,访问国内的速度也会变慢,我们在chome浏览器中安装switchysharp,来管理代理.具体设置如下所示:<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1eq0k16t5ejj20ne0ihmzh.jpg\" alt=\"swichysharp设置\"></p>\n<p>enjoy it!</p>\n<h1 id=\"后记\">后记</h1>\n<p>安卓客户端安装,<a href=\"https://apps.evozi.com/apk-downloader/?id=com.github.shadowsocks\" target=\"_blank\" rel=\"external\">点我点我</a></p>\n<h1 id=\"参考文献\">参考文献</h1>\n<p>1 这是一篇好博客 <a href=\"http://mushapi.com/shadowsocks-install-config-using.html\" target=\"_blank\" rel=\"external\">http://mushapi.com/shadowsocks-install-config-using.html</a><br>2 <a href=\"https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E\" target=\"_blank\" rel=\"external\">shadowsocks使用说明</a><br>3 <a href=\"https://github.com/pypa/pip/issues/1742\" target=\"_blank\" rel=\"external\">修复我pip问题的一个issue</a></p>\n<h1 id=\"致谢\">致谢</h1>\n<p>这个网站可以下载google play的apk,对于我等天朝良民来说,可真是个好东西<br><a href=\"https://apps.evozi.com/apk-downloader/?id=com.github.shadowsocks\" target=\"_blank\" rel=\"external\">https://apps.evozi.com/apk-downloader/?id=com.github.shadowsocks</a></p>\n<p>我们家<a href=\"http://huirong.github.io\" target=\"_blank\" rel=\"external\">笨笨的博客</a>弄好了,欢迎访问</p>\n","source":"_posts/use-ss.md","raw":"title: shadowsocks的安装和配置--在ubuntu和ubuntu中\ndate: 2015-03-09 22:26:21\ntags:\n- Linux\n- ubuntu\n- shadowsocks\n\ncategories:\n- Linux\n---\n最近我的vpn一直在抽风，几乎没法正常使用，而且我的chrome也是各种花屏，我快疯了，没办法，只能改用shadowsocks了。\n搭建过程分为两部分:服务端和客户端(这里是主要是ubuntu的客户端)。\n<!-- more -->\n#1 系统环境\n**服务器**:DigitalOcean上的Ubuntu 14.04 LTS\n**客户端**:Ubuntu 14.04 LTS\n\n#2 服务器端安装和配置\n这里主要是参考github的[官方说明](https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E)\n通过ssh登陆的服务器上去,这里不在赘述如何登陆.\n以下主要针对linux服务器,windows服务器查看[这里](https://github.com/shadowsocks/shadowsocks/wiki/Install-Shadowsocks-Server-on-Windows)\n##安装\nLinux不同的发行版本执行的命令如下\n```\nDebian / Ubuntu:\n\napt-get install python-pip\npip install shadowsocks\n\nCentOS:\n\nyum install python-setuptools && easy_install pip\npip install shadowsocks\n```\n\n##配置\n```\nsudo vi /etc/shadowsocks.json\n```\n配置文件的内容大致如下:\n```\n{\n    \"server\":\"你的服务器的ip\",\n    \"server_port\":8388,\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"你设置的密码\",\n    \"timeout\":300,\n    \"method\":\"aes-256-cfb\",\n    \"fast_open\": false\n}\n```\n**参数名称       解释**\nserver         安装shadowsocks服务器ip\nserver_port    服务器端口号\nlocal_address  本地服务器默认是127.0.0.1\nlocal_port     本地监听的端口号\npassword       密码\ntimeout        超时时间,单位是秒\nmethod         加密方法默认是: \"aes-256-cfb\"可以用其他加密方法\nfast_open      是否使用TCP_FASTOPEN,默认为不使用\nworkers        number of workers, available on Unix/Linux\n\n##运行\n前台运行的命令\n`ssserver -c /etc/shadowsocks.json`\n后台运行\n`ssserver -c /etc/shadowsocks.json -d start`\n`ssserver -c /etc/shadowsocks.json -d stop`\nps:我上述两条命令都会出错,这两条命令来自官方的github,我用的是下面的\n`nohup ssserver -c /etc/shadowsocks.json > aa.log`\n\n##开机自启\n我们把它写入/etc/rc.local中就可以完成开机自启动了.\n```\nsudo vi /etc/rc.local  #打开rc.local文件\n#然后在exit前面加入下面这一行\n#nohup ssserver -c /etc/shadowsocks.json > aa.log\n```\n#3 客户端的安装和配置\n客户端按理说和服务器端类似,安装shadowsocks,但是我的就是这个出了问题.\n##1) 安装相关软件\nshadowsocks有各种客户端版本,各个系统都有.在ubuntu下带图形化界面的有shadowsocks-qt5,还可以直接用命令行.\n\n**图形化:**\n```\nsudo add-apt-repository ppa:hzwhuang/ss-qt5\nsudo apt-get update\nsudo apt-get install shadowsocks-qt5\n```\n*PS:*我的电脑安装这个以后,会自动卸载我的chrome\n*PPS:*我刚才又试了一次,我在安装了命令行模式的shadowsocks以后,现在不会卸载我的chrome,总算正常了\n```\nThe following extra packages will be installed:\n  libbotan-1.10-0 libqrencode3 libqtshadowsocks libzbar0\nThe following packages will be REMOVED:\n  libbotan-1.10-0:i386 libqtshadowsocks:i386 libzbar0:i386\nThe following NEW packages will be installed:\n  libbotan-1.10-0 libqrencode3 libqtshadowsocks libzbar0 shadowsocks-qt5\n0 upgraded, 5 newly installed, 3 to remove and 19 not upgraded.\nNeed to get 1,280 kB of archives.\nAfter this operation, 662 kB of additional disk space will be used.\nDo you want to continue? [Y/n] \n```\n\n**命令行模式:**\n```\nsudo apt-get install python-pip python-dev build-essential \nsudo pip install  pip\nsudo apt-get install python-m2crypto\nsudo pip install shadowsocks\n```\n我因为之前在环境中就安装过pip,所以我只需要执行倒数第三个和第四个命令.\n但是我的倒数第四个命令`pip install shadowsocks`一直报错:\n```\nException: Traceback (most recent call last):\nFile \"/usr/lib/python2.7/dist-packages/pip/basecommand.py\", line 122, in main\n  status = self.run(options, args)\nFile \"/usr/lib/python2.7/dist-packages/pip/commands/install.py\", line 278, in run\n  requirement_set.prepare_files(finder, force_root_egg_info=self.bundle, bundle=self.bundle) \nFile \"/usr/lib/python2.7/dist-packages/pip/req.py\", line 1177, in prepare_files \n  url = finder.find_requirement(req_to_install, upgrade=self.upgrade) \nFile \"/usr/lib/python2.7/dist-packages/pip/index.py\", line 256, in find_requirement\n  page_versions.extend(self._package_versions(page.links, req.name.lower())) \nFile \"/usr/lib/python2.7/dist-packages/pip/index.py\", line 432, in _package_versions \n  for link in self._sort_links(links): \nFile \"/usr/lib/python2.7/dist-packages/pip/index.py\", line 422, in _sort_links \n  for link in links: \nFile \"/usr/lib/python2.7/dist-packages/pip/index.py\", line 769, in links \n  for anchor in self.parsed.findall(\".//a\"):\nAttributeError: 'Document' object has no attribute 'findall'\n\nStoring debug log for failure in /root/.pip/pip.log\n```\n网上搜索一番,在[这里](https://github.com/pypa/pip/issues/1742)找到答案.\n解决方法很简单,执行`easy_install pip`,就ok(貌似是把pip重新安装了一次).\n\n##2) 客户端运行\nshadowsocks图形化的比较简单,这里不表.\n命令行模式,启动如下:\n```\nsslocal -s 服务器ip -p 8388 -k 密码\n```\n启动成功后会有如下输出:\n```\n2015-03-10 11:12:59 INFO     loading libcrypto from libcrypto.so.1.0.0\n2015-03-10 11:12:59 INFO     starting local at 127.0.0.1:1080\n```\n\n##3) 浏览器代理设置\n一般来说我们不希望shadowsocks做全局的翻墙,那样,访问国内的速度也会变慢,我们在chome浏览器中安装switchysharp,来管理代理.具体设置如下所示:\n![swichysharp设置](http://ww3.sinaimg.cn/large/692869a3gw1eq0k16t5ejj20ne0ihmzh.jpg)\n\n\nenjoy it!\n\n#后记\n\n安卓客户端安装,[点我点我](https://apps.evozi.com/apk-downloader/?id=com.github.shadowsocks)\n\n#参考文献\n1 这是一篇好博客 <http://mushapi.com/shadowsocks-install-config-using.html>\n2 [shadowsocks使用说明](https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E)\n3 [修复我pip问题的一个issue](https://github.com/pypa/pip/issues/1742)\n\n#致谢\n这个网站可以下载google play的apk,对于我等天朝良民来说,可真是个好东西\n<https://apps.evozi.com/apk-downloader/?id=com.github.shadowsocks>\n\n我们家[笨笨的博客](http://huirong.github.io)弄好了,欢迎访问\n","slug":"use-ss","updated":1425965310000,"excerpt":"<p>最近我的vpn一直在抽风，几乎没法正常使用，而且我的chrome也是各种花屏，我快疯了，没办法，只能改用shadowsocks了。<br>搭建过程分为两部分:服务端和客户端(这里是主要是ubuntu的客户端)。<br>","_id":"9ibmf09dnwz45lhh","comments":true,"layout":"post","photos":[],"link":""},{"title":"wamp与sql_server_因为端口80冲突,无法开启wamp","date":1415959740000,"tags":["8uy0fkm7b589cvhy","rmyehgtmms7cjxd3"],"categories":["xys76ak8r6wpbgjz"],"content":"<p>因为80端口占用,导致无法启动,其实不必关闭sql server太多的东西,只需要关闭SQL Server Reporting Services 就行了,这样也不会影响sql server的使用</p>\n<p>如图<br><img src=\"http://img.blog.csdn.net/20141114175909339?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<p>打开sqlserver 配置管理器,关闭以上服务</p>\n<p>或者打开控制面板-&gt;管理-&gt;服务工具-&gt;SQL Server Reporting Services</p>\n<p>然后就可以打开wamp了</p>\n","source":"_posts/wamp与sql_server_因为端口80冲突,无法开启wamp.md","raw":"title: 'wamp与sql_server_因为端口80冲突,无法开启wamp'\ndate: 2014-11-14 18:09\ntags:\n- sql server\n- wamp\ncategories:\n- 软件安装与技巧\n---\n\n因为80端口占用,导致无法启动,其实不必关闭sql server太多的东西,只需要关闭SQL Server Reporting Services 就行了,这样也不会影响sql server的使用\n\n如图\n![](http://img.blog.csdn.net/20141114175909339?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSmFja3JveWFs/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n\n\n打开sqlserver 配置管理器,关闭以上服务\n\n或者打开控制面板->管理->服务工具->SQL Server Reporting Services\n\n然后就可以打开wamp了\n","slug":"wamp与sql_server_因为端口80冲突,无法开启wamp","updated":1427611316000,"excerpt":"","_id":"3vbexhhlz5lk3bsi","comments":true,"layout":"post","photos":[],"link":""},{"title":"阿里云windows_server_2003_搭建邮件服务器","date":1403965800000,"categories":["h3nphrhyamervc94"],"content":"<pre><code>笔者最近遇到一个在阿里云上搭建邮件服务器的问题，总算搞定，记录一下。\n\n 整个搭建过程，包括pop3服务的安装和开启，smtp服务的安装和开启，dns服务的安装和设置。\n参考文章[<span class=\"link_label\">http://hi.baidu.com/senya/item/63bd6588b6817056e63d1996</span>](<span class=\"link_url\">http://hi.baidu.com/senya/item/63bd6588b6817056e63d1996</span>)\n</code></pre><p>   <a href=\"http://firefish.blog.51cto.com/298258/57983\" target=\"_blank\" rel=\"external\">http://firefish.blog.51cto.com/298258/57983</a></p>\n<p>不在赘述，直接粘贴原文</p>\n<p><strong>　　一、安装Windows Server 2003邮件服务器组件</strong></p>\n<p>(因为盗图的缘故,图片都挂了,这里大家都去看上面的参考文章连接吧,设置dns的时候再回来)</p>\n<p>图一　“管理您的服务器”控制台</p>\n<p>　　依次单击“开始”——“管理工具”——“管理您的服务器”，打开“管理您的服务器”控制台。在这个管理控制台中我们可以看到服务器已经成为的角色。单击“添加或删除角色”命令，开始管理服务器的角色。</p>\n<p>图二　配置服务器向导</p>\n<p>　　当我们单击“添加或删除角色”命令，就会运行配置服务器向导。</p>\n<p>图三　服务器管理程序检测网络连接</p>\n<p>图四　管理服务器角色</p>\n<p>　　在图四中，可以查看已经安装的服务和支持而没有安装的服务。此时的服务器还不是邮件服务器，选择“邮件服务器(POP3,SMTP)”，单击“下一步”：</p>\n<p>图五　配置“身份验证方法”及“电子邮件域名”</p>\n<p>图六　单击“下一步”</p>\n<p>图七　安装邮件服务:POP3和SMTP</p>\n<p>图八　安装成功</p>\n<p><strong>　　二、管理邮件服务器</strong></p>\n<p>　　Windows Server 2003的电子邮件服务器的功能很简单，管理界面也很简洁。单击“管理工具”下的“POP3服务”：</p>\n<p>图九 POP3服务</p>\n<p>图十　为用户添加邮箱</p>\n<p>　　在“POP3服务”中单击“添加邮箱”命令，在弹出的对话框内输入邮箱名（用户名）及密码。</p>\n<p>图十一</p>\n<p><strong>　　三、配置smtp</strong></p>\n<p>　　方法和上面类似，在图二的画面中我们选择应用程序服务器</p>\n<p><img src=\"\" alt=\"\"></p>\n<p>如图，我的已经开启了。</p>\n<p>下一步，依次打开“开始-程序-管理工具-internet信息服务”，在窗口左面，鼠标右键点击“smtp虚拟服务器”属性。切换到常规选项卡”IP地址“选择服务器的ip地址，点击确定就行了。</p>\n<p><strong>四、配置DNS</strong></p>\n<p>服务器已经配置好了，我们接下来设置下dns，这样才能解析到，不然还是无法使用的</p>\n<p>依次打开，“开始-程序-管理工具-配置您的服务器向导”</p>\n<p><img src=\"\" alt=\"\"></p>\n<p>选择自定义配置</p>\n<p><img src=\"\" alt=\"\"></p>\n<p>选择dns服务器，下一步</p>\n<p><img src=\"\" alt=\"\"></p>\n<p><img src=\"\" alt=\"\"></p>\n<p><img src=\"\" alt=\"\"></p>\n<p><img src=\"\" alt=\"\"></p>\n<p><img src=\"\" alt=\"\"></p>\n<p><img src=\"\" alt=\"\"></p>\n<p><img src=\"\" alt=\"\"></p>\n<p>点击正向查找域里面的区域名称，在右边的空白处点击右键，新建主机，分别新建POP3，smtp等主机</p>\n<p><img src=\"\" alt=\"\"></p>\n<p>还是空白处，右键，新建邮件交换器，分别新建smtp和pop3的邮件交换器</p>\n<p><img src=\"\" alt=\"\"></p>\n<p><img src=\"\" alt=\"\"></p>\n<p>注意：完全合格的域名后面没有点号，邮件服务器的完全合格的域名后面有点号，例如是smtp.ip-tcp.com.</p>\n<p>到此，邮件服务器搭建完成，可以去测试了</p>\n<p>此处参考原文<a href=\"http://www.docin.com/p-156566941.html\" target=\"_blank\" rel=\"external\">http://www.docin.com/p-156566941.html</a></p>\n<p>经过我的测试，可以收邮件，但是不能发邮件（可以自己给自己发，但是不能给qq，网易等邮箱发），一直报错550 5.7.1 Unable to relay for <a href=\"mailto:xxx@xxx.com\" target=\"_blank\" rel=\"external\"></a><a href=\"mailto:xxx@xxx.com\" target=\"_blank\" rel=\"external\">xxx@xxx.com</a></p>\n<p>最后找到答案</p>\n<p>在IIS管理器里打开“默认SMTP虚拟服务器”的属性设置对话框，在“访问”选项卡中，点击“中继”按钮，弹出“中继限制”对话框，默认为选中了“仅以下列表”，修改为选中“仅以下列表除外”即可。</p>\n<p>另外下面的“允许所有通过身份验证的计算机进行中继，而忽略上表”一项要保持选中状态（默认是选中的）。</p>\n","source":"_posts/阿里云windows_server_2003_搭建邮件服务器.md","raw":"title: '阿里云windows_server_2003_搭建邮件服务器'\ndate: 2014-06-28 22:30\ncategories:\n- 服务器\n---\n\n    笔者最近遇到一个在阿里云上搭建邮件服务器的问题，总算搞定，记录一下。\n\n     整个搭建过程，包括pop3服务的安装和开启，smtp服务的安装和开启，dns服务的安装和设置。\n    参考文章[http://hi.baidu.com/senya/item/63bd6588b6817056e63d1996](http://hi.baidu.com/senya/item/63bd6588b6817056e63d1996)\n   [http://firefish.blog.51cto.com/298258/57983](http://firefish.blog.51cto.com/298258/57983)\n\n不在赘述，直接粘贴原文\n\n\n__　　一、安装Windows Server 2003邮件服务器组件__\n\n\n\n(因为盗图的缘故,图片都挂了,这里大家都去看上面的参考文章连接吧,设置dns的时候再回来)\n\n图一　“管理您的服务器”控制台\n\n\r\n　　依次单击“开始”——“管理工具”——“管理您的服务器”，打开“管理您的服务器”控制台。在这个管理控制台中我们可以看到服务器已经成为的角色。单击“添加或删除角色”命令，开始管理服务器的角色。\n\n\n\n\n\r\n图二　配置服务器向导\n\n\r\n　　当我们单击“添加或删除角色”命令，就会运行配置服务器向导。\n\n\n\n\n\r\n图三　服务器管理程序检测网络连接\n\n\n\n\n\r\n图四　管理服务器角色\n\n\r\n　　在图四中，可以查看已经安装的服务和支持而没有安装的服务。此时的服务器还不是邮件服务器，选择“邮件服务器(POP3,SMTP)”，单击“下一步”：\n\n\n\n\n\r\n图五　配置“身份验证方法”及“电子邮件域名”\n\n\n\n\n\n\n\r\n图六　单击“下一步”\n\n\n\n\n\r\n图七　安装邮件服务:POP3和SMTP\n\n\n\n\n\r\n图八　安装成功\n\n__　　二、管理邮件服务器__\n\n\r\n　　Windows Server 2003的电子邮件服务器的功能很简单，管理界面也很简洁。单击“管理工具”下的“POP3服务”：\n\n\n\n\n\r\n图九 POP3服务\n\n\n\r\n图十　为用户添加邮箱\n\n\r\n　　在“POP3服务”中单击“添加邮箱”命令，在弹出的对话框内输入邮箱名（用户名）及密码。\n\n\n\n\n\r\n图十一\n\n__　　三、配置smtp__\n\n\r\n　　方法和上面类似，在图二的画面中我们选择应用程序服务器\n\n![]()\n\n\n\n\r\n如图，我的已经开启了。\n\n\r\n下一步，依次打开“开始-程序-管理工具-internet信息服务”，在窗口左面，鼠标右键点击“smtp虚拟服务器”属性。切换到常规选项卡”IP地址“选择服务器的ip地址，点击确定就行了。\n\n__四、配置DNS__\n\n\n\n服务器已经配置好了，我们接下来设置下dns，这样才能解析到，不然还是无法使用的\n\n\n\n依次打开，“开始-程序-管理工具-配置您的服务器向导”\n\n\n\n![]()\n\n\n\n\r\n选择自定义配置\n\n![]()\n\n\n\n\r\n选择dns服务器，下一步\n\n![]()\n\n\n\n\n\n\n\n![]()\n\n\n\n![]()\n\n\n\n![]()\n\n\n\n![]()\n\n\n\n![]()\n\n\n\n![]()\n\n\n\n\r\n点击正向查找域里面的区域名称，在右边的空白处点击右键，新建主机，分别新建POP3，smtp等主机\n\n![]()\n\n\n\n\r\n还是空白处，右键，新建邮件交换器，分别新建smtp和pop3的邮件交换器\n\n![]()\n\n\n\n![]()\n\n\n\n注意：完全合格的域名后面没有点号，邮件服务器的完全合格的域名后面有点号，例如是smtp.ip-tcp.com.\n\n到此，邮件服务器搭建完成，可以去测试了\n\n此处参考原文[http://www.docin.com/p-156566941.html](http://www.docin.com/p-156566941.html)\n\n\n\n\n\n经过我的测试，可以收邮件，但是不能发邮件（可以自己给自己发，但是不能给qq，网易等邮箱发），一直报错550 5.7.1 Unable to relay for [](mailto:xxx@xxx.com)[xxx@xxx.com](mailto:xxx@xxx.com)\n\n最后找到答案\n\n\n\n\n\n\n\n\n\n\n\r\n在IIS管理器里打开“默认SMTP虚拟服务器”的属性设置对话框，在“访问”选项卡中，点击“中继”按钮，弹出“中继限制”对话框，默认为选中了“仅以下列表”，修改为选中“仅以下列表除外”即可。\n\r\n另外下面的“允许所有通过身份验证的计算机进行中继，而忽略上表”一项要保持选中状态（默认是选中的）。\n\n\n\n\n\n\n\n\n\n\n\n","slug":"阿里云windows_server_2003_搭建邮件服务器","updated":1427611318000,"excerpt":"","_id":"oist4jck3qnb5won","tags":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"hexo发布失败","date":1427623768000,"tags":["9cs3dsl39baopq36"],"categories":["i18zy3saw203wjf9"],"content":"<p>可能受到上次ddos的问题,这两天国内访问github,总是感觉不顺畅.<br>今天下午写了一篇博客,可是却发布不成功,一直卡在这一步:<br><img src=\"http://ww3.sinaimg.cn/large/692869a3gw1eqmrrf20j1j20g006676y.jpg\" alt=\"hexo发布的时候卡住\"></p>\n<p>然后我继续等,得到如下错误:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo <span class=\"variable\">Failed</span> to <span class=\"keyword\">receive</span> <span class=\"variable\">SOCKS4</span> connect request ack.</div></pre></td></tr></table></figure>\n\n<p>我执行了<code>hexo clean</code>命令,手动删掉了<code>.deploy</code>文件夹,可是还是不行<br>最后报错<br>无法连接<code>https://github.com/Jackroyal/Jackroyal.github.io.git</code></p>\n<p><em>(ps:此处已经无法重现了,抽风啊)</em></p>\n<p>最后我换了下这条链接<br>我修改了博客目录下的<code>_config.yml</code>,改了deploy参数<br>原参数设置</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">type</span>: <span class=\"title\">github</span></span></div><div class=\"line\">  repo: https:<span class=\"comment\">//github.com/Jackroyal/Jackroyal.github.io.git</span></div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n\n<p>修改以后:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  <span class=\"built_in\">type</span>: github</div><div class=\"line\">  repo: git@github.com:Jackroyal/Jackroyal.github.<span class=\"built_in\">io</span>.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n\n<p>然后就deploy成功了.</p>\n<p><em>PPPS:千万注意,上面的参数设置repo:后面有一个空格,没有空格会报错</em></p>\n<h1 id=\"update:\">update:</h1>\n<p>repo的两种方式分别为ssh和https<br>昨天没搞清楚,专门去查了一下,ssh和https两种提交的区别<br>官方推荐用https,因为这回要求你输入用户名和密码,这样更安全<br>用ssh的话,只要你的ssh-key(可以设置一道类似密码的东西,和你的key一起加密,这样使用的时候会要求输入这段密码)对,那么就都可以提交,没有了更多的验证过程(可以设置一个para加密,提交会要求输入这段para)</p>\n<hr>\n<h3 id=\"友情链接\">友情链接</h3>\n<p><a href=\"http://rolight.cn/blog/?p=34\" target=\"_blank\" rel=\"external\">ubuntu  shadowsocks 全局 代理</a></p>\n","source":"_posts/hexo-deploy-error.md","raw":"title: hexo发布失败\ndate: 2015-03-29 18:09:28\ntags:\n- hexo\ncategories:\n- hexo\n---\n可能受到上次ddos的问题,这两天国内访问github,总是感觉不顺畅.\n今天下午写了一篇博客,可是却发布不成功,一直卡在这一步:\n![hexo发布的时候卡住](http://ww3.sinaimg.cn/large/692869a3gw1eqmrrf20j1j20g006676y.jpg)\n\n然后我继续等,得到如下错误:\n```\nhexo Failed to receive SOCKS4 connect request ack.\n```\n我执行了`hexo clean`命令,手动删掉了`.deploy`文件夹,可是还是不行\n最后报错\n无法连接`https://github.com/Jackroyal/Jackroyal.github.io.git`\n\n*(ps:此处已经无法重现了,抽风啊)*\n\n最后我换了下这条链接\n我修改了博客目录下的`_config.yml`,改了deploy参数\n原参数设置\n```\ndeploy:\n  type: github\n  repo: https://github.com/Jackroyal/Jackroyal.github.io.git\n  branch: master\n```\n修改以后:\n```\ndeploy:\n  type: github\n  repo: git@github.com:Jackroyal/Jackroyal.github.io.git\n  branch: master\n```\n然后就deploy成功了.\n\n*PPPS:千万注意,上面的参数设置repo:后面有一个空格,没有空格会报错*\n\n\n#update:\nrepo的两种方式分别为ssh和https\n昨天没搞清楚,专门去查了一下,ssh和https两种提交的区别\n官方推荐用https,因为这回要求你输入用户名和密码,这样更安全\n用ssh的话,只要你的ssh-key(可以设置一道类似密码的东西,和你的key一起加密,这样使用的时候会要求输入这段密码)对,那么就都可以提交,没有了更多的验证过程(可以设置一个para加密,提交会要求输入这段para)\n\n---\n###友情链接\n[ubuntu  shadowsocks 全局 代理](http://rolight.cn/blog/?p=34)\n","slug":"hexo-deploy-error","updated":1427723963000,"excerpt":"","_id":"hv2dc80kmkds79c2","comments":true,"layout":"post","photos":[],"link":""},{"title":"blog2markdown程序打包,csdn爬虫","date":1427638102000,"tags":["lfcfrewzielh5f3l","9cs3dsl39baopq36","v300opca0zo43dvh","d45ffwv1j6t2w7au"],"categories":["gywlejx022p25fsy"],"content":"<blockquote>\n<p>项目地址<a href=\"https://github.com/Jackroyal/blog2markdown.git\" target=\"_blank\" rel=\"external\">https://github.com/Jackroyal/blog2markdown.git</a></p>\n</blockquote>\n<p>用来实现普通blog到markdown的搬家，自动将blog的html转换成HEXO可用的Markdown格式<br>暂时只做了CSDN</p>\n<h3 id=\"UPDATE:\">UPDATE:</h3>\n<p>2015-03-29 添加了打包成exe的程序,修复cmd下乱码,win和ubuntu完美运行<br>2015-03-29 连夜修复了在win下乱码的问题,删除了冗余代码<br>2015-03-28 将某些参数改为从配置文件中读取,加入更多异常判断<br>2014-12-15 优化标签解析功能,添加了标题,tag和category<br>2014-12-13 实现解析功能,基本完成解析功能<br>2014-12-10 实现CSDN的抓取，正在实现parse解析过程<br><a id=\"more\"></a></p>\n<h3 id=\"BUG\">BUG</h3>\n<p>如果代码中有#和*会被转义成<code>\\#</code>和<code>\\*</code><br>对table的支持不好</p>\n<h3 id=\"依赖库\">依赖库</h3>\n<p>爬虫使用了<code>beautifulsoup  4.3.2</code><br><a href=\"http://www.crummy.com/software/BeautifulSoup/\" target=\"_blank\" rel=\"external\">点我点我</a><br>你必须安装这个才可以正常使用<br>PS:我打包了exe<a href=\"http://pan.baidu.com/s/1dDERlOP\" target=\"_blank\" rel=\"external\">点此下载</a>,可以什么不装,改完配置文件,直接运行</p>\n<h1 id=\"使用:\">使用:</h1>\n<h2 id=\"首先,编辑配置文件spider-conf\">首先,编辑配置文件<code>spider.conf</code></h2>\n<p>格式如下:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[blog]</div><div class=\"line\"><span class=\"comment\">#此处url不需要单引号或者双引号,不然类型识别错误,网址最后不要/</span></div><div class=\"line\"><span class=\"variable\">url=</span>http://blog.csdn.net/jackroyal</div><div class=\"line\">[setting]</div><div class=\"line\"><span class=\"variable\">wait_time=</span><span class=\"number\">5</span></div></pre></td></tr></table></figure>\n\n<p>这里的<code>url</code>地址注意不要加引号,下面的<code>wait_time</code>是指两次抓取的间隔时间,这是为了安全起见,如果高频访问,可能会被封,我设置的<code>5</code>秒,你可以根据自己需要去设置</p>\n<h2 id=\"打包\">打包</h2>\n<p>我打包了一个<a href=\"http://pan.baidu.com/s/1dDERlOP\" target=\"_blank\" rel=\"external\">exe程序</a>,放在github项目的dist目录下,在windows系统中,<code>直接下载</code>,<code>运行</code></p>\n<p>PS:由于pyInstaller的问题,导致无法在中文路径下正常运行</p>\n<p>比如你放在C:/users/张三/spider.exe<br>这样是无法正常运行的<br>所以应该放在全英文的目录下<br>C:/software/spider.exe<br>运行结果如图<br><img src=\"http://ww2.sinaimg.cn/large/692869a3gw1eqmymt6bhrj20ip0cata6.jpg\" alt=\"spider运行截图\"><br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1eqmyur9uihj20mb0gqmzf.jpg\" alt=\"运行结果截图\"></p>\n<h1 id=\"源码执行\">源码执行</h1>\n<p>如果你对我的exe不放心,可以自己执行python源码</p>\n<h3 id=\"执行\">执行</h3>\n<p>在linux下,首先要给予执行权限</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod <span class=\"keyword\">a</span>+<span class=\"keyword\">x</span> spider.<span class=\"keyword\">py</span> ParseBlog.<span class=\"keyword\">py</span></div><div class=\"line\"><span class=\"keyword\">python</span> spider.<span class=\"keyword\">py</span></div></pre></td></tr></table></figure>\n\n<p>然后就可以了,输出文件在output文件夹</p>\n<p>在win下,经过修复也可以正常运行了,在idle(在win中你安装了python2.7的话就会有这个编辑器)中是可以完全正常的显示中文</p>\n<figure class=\"highlight ,在系统自带的cmd里中文显示会有问题,因为cmd中的编码默认是GBK,我程序基本都是utf-8,如果要在cmd显示正常,显示的代码都要加个str.encode('utf-8')才行.\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">不过抓取是没有问题的,此处就不纠结了哈,能用就好</div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#在win下,没有权限的问题,直接执行就好了</div><div class=\"line\"><span class=\"keyword\">python</span> spider.<span class=\"keyword\">py</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/blog2markdown-csdn-windows.md","raw":"title: blog2markdown程序打包,csdn爬虫\ndate: 2015-03-29 22:08:22\ntags:\n- github\n- hexo\n- windows\n- python\ncategories:\n- python学习笔记\n---\n>项目地址<https://github.com/Jackroyal/blog2markdown.git>\n\n用来实现普通blog到markdown的搬家，自动将blog的html转换成HEXO可用的Markdown格式\n暂时只做了CSDN\n\n###UPDATE:\n2015-03-29 添加了打包成exe的程序,修复cmd下乱码,win和ubuntu完美运行\n2015-03-29 连夜修复了在win下乱码的问题,删除了冗余代码\n2015-03-28 将某些参数改为从配置文件中读取,加入更多异常判断\n2014-12-15 优化标签解析功能,添加了标题,tag和category\n2014-12-13 实现解析功能,基本完成解析功能\n2014-12-10 实现CSDN的抓取，正在实现parse解析过程\n<!-- more -->\n###BUG\n如果代码中有#和\\*会被转义成`\\#`和`\\*`\n对table的支持不好\n\n###依赖库\n爬虫使用了`beautifulsoup  4.3.2`\n[点我点我](http://www.crummy.com/software/BeautifulSoup/)\n你必须安装这个才可以正常使用\nPS:我打包了exe[点此下载](http://pan.baidu.com/s/1dDERlOP),可以什么不装,改完配置文件,直接运行\n\n#使用:\n\n## 首先,编辑配置文件`spider.conf`\n格式如下:\n```\n[blog]\n#此处url不需要单引号或者双引号,不然类型识别错误,网址最后不要/\nurl=http://blog.csdn.net/jackroyal\n[setting]\nwait_time=5\n```\n这里的`url`地址注意不要加引号,下面的`wait_time`是指两次抓取的间隔时间,这是为了安全起见,如果高频访问,可能会被封,我设置的`5`秒,你可以根据自己需要去设置\n\n##打包\n我打包了一个[exe程序](http://pan.baidu.com/s/1dDERlOP),放在github项目的dist目录下,在windows系统中,`直接下载`,`运行`\n\nPS:由于pyInstaller的问题,导致无法在中文路径下正常运行\n\n比如你放在C:/users/张三/spider.exe\n这样是无法正常运行的\n所以应该放在全英文的目录下\nC:/software/spider.exe\n运行结果如图\n![spider运行截图](http://ww2.sinaimg.cn/large/692869a3gw1eqmymt6bhrj20ip0cata6.jpg)\n![运行结果截图](http://ww1.sinaimg.cn/large/692869a3gw1eqmyur9uihj20mb0gqmzf.jpg)\n\n#源码执行\n如果你对我的exe不放心,可以自己执行python源码\n\n\n###  执行\n在linux下,首先要给予执行权限\n```\nchmod a+x spider.py ParseBlog.py\npython spider.py\n```\n然后就可以了,输出文件在output文件夹\n\n在win下,经过修复也可以正常运行了,在idle(在win中你安装了python2.7的话就会有这个编辑器)中是可以完全正常的显示中文~~~~,在系统自带的cmd里中文显示会有问题,因为cmd中的编码默认是GBK,我程序基本都是utf-8,如果要在cmd显示正常,显示的代码都要加个str.encode('utf-8')才行.\n不过抓取是没有问题的,此处就不纠结了哈,能用就好~~~~\n```\n#在win下,没有权限的问题,直接执行就好了\npython spider.py\n```\n\n\n\n","slug":"blog2markdown-csdn-windows","updated":1427723225000,"excerpt":"<blockquote>\n<p>项目地址<a href=\"https://github.com/Jackroyal/blog2markdown.git\" target=\"_blank\" rel=\"external\">https://github.com/Jackroyal/blog2markdown.git</a></p>\n</blockquote>\n<p>用来实现普通blog到markdown的搬家，自动将blog的html转换成HEXO可用的Markdown格式<br>暂时只做了CSDN</p>\n<h3 id=\"UPDATE:\">UPDATE:</h3>\n<p>2015-03-29 添加了打包成exe的程序,修复cmd下乱码,win和ubuntu完美运行<br>2015-03-29 连夜修复了在win下乱码的问题,删除了冗余代码<br>2015-03-28 将某些参数改为从配置文件中读取,加入更多异常判断<br>2014-12-15 优化标签解析功能,添加了标题,tag和category<br>2014-12-13 实现解析功能,基本完成解析功能<br>2014-12-10 实现CSDN的抓取，正在实现parse解析过程<br>","_id":"oev0c6ii5000yq6y","comments":true,"layout":"post","photos":[],"link":""},{"title":"使用opencv实现人脸识别","date":1430016600000,"tags":["3ybl25ozvufzy3xt","u3xbmqdwmvn5u90u","d45ffwv1j6t2w7au"],"categories":["cgvxcfdcezrmuda7"],"content":"<p>最近搞了两个星期的opencv，人脸识别方向，感觉没有什么前途，看不到论文在哪里啊。<br><a id=\"more\"></a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8-*-</span></div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> cv2</div><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div><div class=\"line\"></div><div class=\"line\">z = {} <span class=\"comment\">#存储关于每张图片对应的lable</span></div><div class=\"line\">for_pre = []  <span class=\"comment\">#存储用来进行测试的图片，规则是每个人10张图，5张用来训练，5张用来测试</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">normalize</span><span class=\"params\">(X, low, high, dtype=None)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"对数据进行正常化处理，让其处于最高和最低值之间.\"\"\"</span></div><div class=\"line\">    X = np.asarray(X)</div><div class=\"line\">    minX, maxX = np.min(X), np.max(X)</div><div class=\"line\">    <span class=\"comment\"># normalize to [0...1].</span></div><div class=\"line\">    X = X - float(minX)</div><div class=\"line\">    X = X / float((maxX - minX))</div><div class=\"line\">    <span class=\"comment\"># scale to [low...high].</span></div><div class=\"line\">    X = X * (high-low)</div><div class=\"line\">    X = X + low</div><div class=\"line\">    <span class=\"keyword\">if</span> dtype <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> np.asarray(X)</div><div class=\"line\">    <span class=\"keyword\">return</span> np.asarray(X, dtype=dtype)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read_images</span><span class=\"params\">(path, sz=None)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"从文件夹中读取图像，并且将其大小限制在一定范围之内</span></div><div class=\"line\"></div><div class=\"line\">    参数:</div><div class=\"line\">        path: 图片的路径</div><div class=\"line\">        sz: 设定图像的大小以元组的形式，例如(92,112)</div><div class=\"line\"></div><div class=\"line\">    返回值:</div><div class=\"line\">        返回一个list的数据[X,y]</div><div class=\"line\"></div><div class=\"line\">            X: 一个numpy的数组，里面存储的是所有的图片的矩阵.</div><div class=\"line\">            y:一个list存储的，都是与X中图片对应的lable</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    c = <span class=\"number\">0</span></div><div class=\"line\">    X,y = [], []</div><div class=\"line\">    <span class=\"keyword\">for</span> dirname, dirnames, filenames <span class=\"keyword\">in</span> os.walk(path):</div><div class=\"line\">        <span class=\"keyword\">for</span> subdirname <span class=\"keyword\">in</span> dirnames:</div><div class=\"line\">            subject_path = os.path.join(dirname, subdirname)</div><div class=\"line\">            <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> os.listdir(subject_path):</div><div class=\"line\">                <span class=\"keyword\">try</span>:</div><div class=\"line\">                    im = cv2.imread(os.path.join(subject_path, filename), cv2.IMREAD_GRAYSCALE)</div><div class=\"line\">                    <span class=\"comment\"># resize to given size (if given)</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (sz <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>):</div><div class=\"line\">                        im = cv2.resize(im, sz)</div><div class=\"line\">                    <span class=\"keyword\">if</span> y.count(c) &gt; <span class=\"number\">4</span>:</div><div class=\"line\">                        for_pre.append({<span class=\"string\">'no'</span>:c,<span class=\"string\">'src'</span>:np.asarray(im, dtype=np.uint8)})</div><div class=\"line\">                    <span class=\"keyword\">else</span>:</div><div class=\"line\">                        X.append(np.asarray(im, dtype=np.uint8))</div><div class=\"line\">                        y.append(c)</div><div class=\"line\">                    <span class=\"keyword\">global</span> z</div><div class=\"line\">                    z[os.path.join(subject_path, filename)] = c</div><div class=\"line\">                <span class=\"keyword\">except</span> IOError, (errno, strerror):</div><div class=\"line\">                    <span class=\"keyword\">print</span> <span class=\"string\">\"I/O error({0}): {1}\"</span>.format(errno, strerror)</div><div class=\"line\">                <span class=\"keyword\">except</span>:</div><div class=\"line\">                    <span class=\"keyword\">print</span> <span class=\"string\">\"Unexpected error:\"</span>, sys.exc_info()[<span class=\"number\">0</span>]</div><div class=\"line\">                    <span class=\"keyword\">raise</span></div><div class=\"line\">            c = c+<span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> [X,y]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">prediction</span><span class=\"params\">(model)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"图像预测</span></div><div class=\"line\"></div><div class=\"line\">    参数:</div><div class=\"line\">        model: 就是图片训练的那个model</div><div class=\"line\"></div><div class=\"line\">    数据集中每个人存储了10张图片，我把其中的5张存储到for_pre，作为训练数据。用已知的lable和预测的lable作比较，得出图片识别正确的概率</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    tn = <span class=\"number\">0</span> <span class=\"comment\">#识别正确的图片数</span></div><div class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> for_pre:</div><div class=\"line\">        [p_label, p_confidence] = model.predict(cv2.resize(item[<span class=\"string\">'src'</span>],(<span class=\"number\">92</span>,<span class=\"number\">112</span>)))</div><div class=\"line\">        <span class=\"keyword\">if</span> p_label == item[<span class=\"string\">'no'</span>]:</div><div class=\"line\">            tn = tn+<span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">'the answer is %d,'</span> % item[<span class=\"string\">'no'</span>],</div><div class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">\"Predicted label = %d (confidence=%.2f)\"</span> % (p_label, p_confidence)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"总共有%d次预测，其中正确次数为%d\"</span> %(len(for_pre),tn)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    <span class=\"comment\"># This is where we write the images, if an output_dir is given</span></div><div class=\"line\">    <span class=\"comment\"># in command line:</span></div><div class=\"line\">    out_dir = <span class=\"keyword\">None</span></div><div class=\"line\">    <span class=\"comment\"># You'll need at least a path to your image data, please see</span></div><div class=\"line\">    <span class=\"comment\"># the tutorial coming with this source code on how to prepare</span></div><div class=\"line\">    <span class=\"comment\"># your image data:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> len(sys.argv) &lt; <span class=\"number\">2</span>:</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"USAGE: face_rec.py &lt;/path/to/images&gt; [&lt;/path/to/store/images/at&gt;]\"</span></div><div class=\"line\">        sys.exit()</div><div class=\"line\">    <span class=\"comment\"># Now read in the image data. This must be a valid path!</span></div><div class=\"line\">    [X,y] = read_images(sys.argv[<span class=\"number\">1</span>], (<span class=\"number\">92</span>, <span class=\"number\">112</span>))</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\"># Convert labels to 32bit integers. This is a workaround for 64bit machines,</span></div><div class=\"line\">    <span class=\"comment\"># because the labels will truncated else. This will be fixed in code as</span></div><div class=\"line\">    <span class=\"comment\"># soon as possible, so Python users don't need to know about this.</span></div><div class=\"line\">    <span class=\"comment\"># Thanks to Leo Dirac for reporting:</span></div><div class=\"line\">    y = np.asarray(y, dtype=np.int32)</div><div class=\"line\">    <span class=\"comment\"># If a out_dir is given, set it:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> len(sys.argv) == <span class=\"number\">3</span>:</div><div class=\"line\">        out_dir = sys.argv[<span class=\"number\">2</span>]</div><div class=\"line\">    <span class=\"comment\"># Create the Eigenfaces model. We are going to use the default</span></div><div class=\"line\">    <span class=\"comment\"># parameters for this simple example, please read the documentation</span></div><div class=\"line\">    <span class=\"comment\"># for thresholding:</span></div><div class=\"line\">    model = cv2.createEigenFaceRecognizer()</div><div class=\"line\">    <span class=\"comment\"># Read</span></div><div class=\"line\">    <span class=\"comment\"># Learn the model. Remember our function returns Python lists,</span></div><div class=\"line\">    <span class=\"comment\"># so we use np.asarray to turn them into NumPy lists to make</span></div><div class=\"line\">    <span class=\"comment\"># the OpenCV wrapper happy:</span></div><div class=\"line\">    model.train(np.asarray(X), np.asarray(y))</div><div class=\"line\">    prediction(model) <span class=\"comment\">#图片预测</span></div><div class=\"line\">    <span class=\"comment\">#</span></div><div class=\"line\">    <span class=\"comment\">#</span></div><div class=\"line\">    <span class=\"comment\"># You can see the available parameters with getParams():</span></div><div class=\"line\">    <span class=\"keyword\">print</span> model.getParams()</div><div class=\"line\">    <span class=\"comment\"># Now let's get some data:</span></div><div class=\"line\">    mean = model.getMat(<span class=\"string\">\"mean\"</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> out_dir + <span class=\"string\">'/out.xml'</span></div><div class=\"line\">    f = open(out_dir + <span class=\"string\">'/out.xml'</span>,<span class=\"string\">'w'</span>)</div><div class=\"line\">    model.save(out_dir + <span class=\"string\">'/out.xml'</span>)</div><div class=\"line\">    eigenvectors = model.getMat(<span class=\"string\">\"eigenvectors\"</span>)</div><div class=\"line\">    <span class=\"comment\"># We'll save the mean, by first normalizing it:</span></div><div class=\"line\">    mean_norm = normalize(mean, <span class=\"number\">0</span>, <span class=\"number\">255</span>, dtype=np.uint8)</div><div class=\"line\">    mean_resized = mean_norm.reshape(X[<span class=\"number\">0</span>].shape)</div><div class=\"line\">    <span class=\"keyword\">if</span> out_dir <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        cv2.imshow(<span class=\"string\">\"mean\"</span>, mean_resized)</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        cv2.imwrite(<span class=\"string\">\"%s/mean.png\"</span> % (out_dir), mean_resized)</div><div class=\"line\">    <span class=\"comment\"># Turn the first (at most) 16 eigenvectors into grayscale</span></div><div class=\"line\">    <span class=\"comment\"># images. You could also use cv::normalize here, but sticking</span></div><div class=\"line\">    <span class=\"comment\"># to NumPy is much easier for now.</span></div><div class=\"line\">    <span class=\"comment\"># Note: eigenvectors are stored by column:</span></div><div class=\"line\">    <span class=\"comment\"># for i in xrange(min(len(X), 16)):</span></div><div class=\"line\">    <span class=\"comment\">#     eigenvector_i = eigenvectors[:,i].reshape(X[0].shape)</span></div><div class=\"line\">    <span class=\"comment\">#     eigenvector_i_norm = normalize(eigenvector_i, 0, 255, dtype=np.uint8)</span></div><div class=\"line\">    <span class=\"comment\">#     # Show or save the images:</span></div><div class=\"line\">    <span class=\"comment\">#     if out_dir is None:</span></div><div class=\"line\">    <span class=\"comment\">#         cv2.imshow(\"%s/eigenface_%d\" % (out_dir,i), eigenvector_i_norm)</span></div><div class=\"line\">    <span class=\"comment\">#     else:</span></div><div class=\"line\">    <span class=\"comment\">#         cv2.imwrite(\"%s/eigenface_%d.png\" % (out_dir,i), eigenvector_i_norm)</span></div><div class=\"line\">    <span class=\"comment\"># Show the images:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> z</div><div class=\"line\">    <span class=\"keyword\">if</span> out_dir <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        cv2.waitKey(<span class=\"number\">0</span>)</div></pre></td></tr></table></figure>\n\n<p>代码执行效果如下<br><img src=\"http://ww1.sinaimg.cn/large/692869a3gw1eriuc3wsckj20nr08qn2q.jpg\" alt=\"人脸识别执行效果\"><br>我在这里输出的是那些预测错误的。<code>总共有200次预测，其中正确次数为186。</code>这预测率有点低啊，我用的数据都是来自于<a href=\"http://www.cl.cam.ac.uk/research/dtg/attarchive/facedatabase.html\" target=\"_blank\" rel=\"external\"> AT&amp;T Facedatabase</a>。一共40个人，每个人10张图，图片宽高是92*112像素，全部是灰度图像。<br>至于如何提高图片识别的效率，我也不知道。</p>\n<h1 id=\"参考文献\">参考文献</h1>\n<p>1 <a href=\"http://docs.opencv.org/modules/contrib/doc/facerec/facerec_tutorial.html\" target=\"_blank\" rel=\"external\">http://docs.opencv.org/modules/contrib/doc/facerec/facerec_tutorial.html</a><br>2 <a href=\"https://code.google.com/p/pythonxy/source/browse/src/python/OpenCV/DOC/samples/python2/facerec_demo.py?repo=xy-27&amp;r=a2e41c7a3cb6db536b948747872cab71c696b44e\" target=\"_blank\" rel=\"external\">python调用opencv实现人脸识别</a></p>\n","source":"_posts/face-recognizer.md","raw":"title: 使用opencv实现人脸识别\ndate: 2015-04-26 10:50:00\ntags:\n- opencv\n- 图像处理\n- python\ncategories:\n- 图像处理\n---\n最近搞了两个星期的opencv，人脸识别方向，感觉没有什么前途，看不到论文在哪里啊。\n<!-- more -->\n```python\n#!/usr/bin/env python\n# -*- coding:utf-8-*-\nimport os\nimport sys\nimport cv2\nimport numpy as np\n\nz = {} #存储关于每张图片对应的lable\nfor_pre = []  #存储用来进行测试的图片，规则是每个人10张图，5张用来训练，5张用来测试\ndef normalize(X, low, high, dtype=None):\n    \"\"\"对数据进行正常化处理，让其处于最高和最低值之间.\"\"\"\n    X = np.asarray(X)\n    minX, maxX = np.min(X), np.max(X)\n    # normalize to [0...1].\n    X = X - float(minX)\n    X = X / float((maxX - minX))\n    # scale to [low...high].\n    X = X * (high-low)\n    X = X + low\n    if dtype is None:\n        return np.asarray(X)\n    return np.asarray(X, dtype=dtype)\n\n\ndef read_images(path, sz=None):\n    \"\"\"从文件夹中读取图像，并且将其大小限制在一定范围之内\n\n    参数:\n        path: 图片的路径\n        sz: 设定图像的大小以元组的形式，例如(92,112)\n\n    返回值:\n        返回一个list的数据[X,y]\n\n            X: 一个numpy的数组，里面存储的是所有的图片的矩阵.\n            y:一个list存储的，都是与X中图片对应的lable\n    \"\"\"\n    c = 0\n    X,y = [], []\n    for dirname, dirnames, filenames in os.walk(path):\n        for subdirname in dirnames:\n            subject_path = os.path.join(dirname, subdirname)\n            for filename in os.listdir(subject_path):\n                try:\n                    im = cv2.imread(os.path.join(subject_path, filename), cv2.IMREAD_GRAYSCALE)\n                    # resize to given size (if given)\n                    if (sz is not None):\n                        im = cv2.resize(im, sz)\n                    if y.count(c) > 4:\n                        for_pre.append({'no':c,'src':np.asarray(im, dtype=np.uint8)})\n                    else:\n                        X.append(np.asarray(im, dtype=np.uint8))\n                        y.append(c)\n                    global z\n                    z[os.path.join(subject_path, filename)] = c\n                except IOError, (errno, strerror):\n                    print \"I/O error({0}): {1}\".format(errno, strerror)\n                except:\n                    print \"Unexpected error:\", sys.exc_info()[0]\n                    raise\n            c = c+1\n    return [X,y]\n\ndef prediction(model):\n    \"\"\"图像预测\n\n    参数:\n        model: 就是图片训练的那个model\n\n    数据集中每个人存储了10张图片，我把其中的5张存储到for_pre，作为训练数据。用已知的lable和预测的lable作比较，得出图片识别正确的概率\n    \"\"\"\n    tn = 0 #识别正确的图片数\n    for item in for_pre:\n        [p_label, p_confidence] = model.predict(cv2.resize(item['src'],(92,112)))\n        if p_label == item['no']:\n            tn = tn+1\n        else:\n            print 'the answer is %d,' % item['no'],\n            print \"Predicted label = %d (confidence=%.2f)\" % (p_label, p_confidence)\n\n    print \"总共有%d次预测，其中正确次数为%d\" %(len(for_pre),tn)\n\nif __name__ == \"__main__\":\n    # This is where we write the images, if an output_dir is given\n    # in command line:\n    out_dir = None\n    # You'll need at least a path to your image data, please see\n    # the tutorial coming with this source code on how to prepare\n    # your image data:\n    if len(sys.argv) < 2:\n        print \"USAGE: face_rec.py </path/to/images> [</path/to/store/images/at>]\"\n        sys.exit()\n    # Now read in the image data. This must be a valid path!\n    [X,y] = read_images(sys.argv[1], (92, 112))\n \n    # Convert labels to 32bit integers. This is a workaround for 64bit machines,\n    # because the labels will truncated else. This will be fixed in code as\n    # soon as possible, so Python users don't need to know about this.\n    # Thanks to Leo Dirac for reporting:\n    y = np.asarray(y, dtype=np.int32)\n    # If a out_dir is given, set it:\n    if len(sys.argv) == 3:\n        out_dir = sys.argv[2]\n    # Create the Eigenfaces model. We are going to use the default\n    # parameters for this simple example, please read the documentation\n    # for thresholding:\n    model = cv2.createEigenFaceRecognizer()\n    # Read\n    # Learn the model. Remember our function returns Python lists,\n    # so we use np.asarray to turn them into NumPy lists to make\n    # the OpenCV wrapper happy:\n    model.train(np.asarray(X), np.asarray(y))\n    prediction(model) #图片预测\n    #\n    #\n    # You can see the available parameters with getParams():\n    print model.getParams()\n    # Now let's get some data:\n    mean = model.getMat(\"mean\")\n    print out_dir + '/out.xml'\n    f = open(out_dir + '/out.xml','w')\n    model.save(out_dir + '/out.xml')\n    eigenvectors = model.getMat(\"eigenvectors\")\n    # We'll save the mean, by first normalizing it:\n    mean_norm = normalize(mean, 0, 255, dtype=np.uint8)\n    mean_resized = mean_norm.reshape(X[0].shape)\n    if out_dir is None:\n        cv2.imshow(\"mean\", mean_resized)\n    else:\n        cv2.imwrite(\"%s/mean.png\" % (out_dir), mean_resized)\n    # Turn the first (at most) 16 eigenvectors into grayscale\n    # images. You could also use cv::normalize here, but sticking\n    # to NumPy is much easier for now.\n    # Note: eigenvectors are stored by column:\n    # for i in xrange(min(len(X), 16)):\n    #     eigenvector_i = eigenvectors[:,i].reshape(X[0].shape)\n    #     eigenvector_i_norm = normalize(eigenvector_i, 0, 255, dtype=np.uint8)\n    #     # Show or save the images:\n    #     if out_dir is None:\n    #         cv2.imshow(\"%s/eigenface_%d\" % (out_dir,i), eigenvector_i_norm)\n    #     else:\n    #         cv2.imwrite(\"%s/eigenface_%d.png\" % (out_dir,i), eigenvector_i_norm)\n    # Show the images:\n    print z\n    if out_dir is None:\n        cv2.waitKey(0)\n```\n\n代码执行效果如下\n![人脸识别执行效果](http://ww1.sinaimg.cn/large/692869a3gw1eriuc3wsckj20nr08qn2q.jpg)\n我在这里输出的是那些预测错误的。`总共有200次预测，其中正确次数为186。`这预测率有点低啊，我用的数据都是来自于[ AT&T Facedatabase](http://www.cl.cam.ac.uk/research/dtg/attarchive/facedatabase.html)。一共40个人，每个人10张图，图片宽高是92*112像素，全部是灰度图像。\n至于如何提高图片识别的效率，我也不知道。\n\n#参考文献\n1 <http://docs.opencv.org/modules/contrib/doc/facerec/facerec_tutorial.html>\n2 [python调用opencv实现人脸识别](https://code.google.com/p/pythonxy/source/browse/src/python/OpenCV/DOC/samples/python2/facerec_demo.py?repo=xy-27&r=a2e41c7a3cb6db536b948747872cab71c696b44e)\n","slug":"face-recognizer","updated":1430023865000,"excerpt":"<p>最近搞了两个星期的opencv，人脸识别方向，感觉没有什么前途，看不到论文在哪里啊。<br>","_id":"ddqy1l1vcqsynw8f","comments":true,"layout":"post","photos":[],"link":""},{"title":"使用opencv实现人脸检测","date":1430024064000,"tags":["3ybl25ozvufzy3xt","u3xbmqdwmvn5u90u","d45ffwv1j6t2w7au"],"categories":["cgvxcfdcezrmuda7"],"content":"<p>这两个星期，都在搞这个，就把代码都分享一下，太烂，就不分享到github了。<br><a id=\"more\"></a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8-*-</span></div><div class=\"line\">__author__ = <span class=\"string\">'chen'</span></div><div class=\"line\"><span class=\"keyword\">import</span> cv2</div><div class=\"line\"><span class=\"keyword\">import</span> Image</div><div class=\"line\"><span class=\"keyword\">import</span> ImageDraw</div><div class=\"line\"><span class=\"keyword\">import</span> sys,os</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detectFaces</span><span class=\"params\">(image_name)</span>:</span></div><div class=\"line\">    img = cv2.imread(image_name)</div><div class=\"line\">    face_cascade = cv2.CascadeClassifier(<span class=\"string\">'../data2/haarcascades/haarcascade_frontalface_alt.xml'</span>)<span class=\"comment\">#加载级联分类器，这里使用的是intel训练出来的人脸识别分类器</span></div><div class=\"line\">    <span class=\"keyword\">if</span> img.ndim == <span class=\"number\">3</span>:<span class=\"comment\">#判断图片是否是灰度图像，如果img.ndim==3那就表示不是灰度图像</span></div><div class=\"line\">        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<span class=\"comment\">#将图片转化为灰度图像</span></div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        gray = img</div><div class=\"line\"></div><div class=\"line\">    faces = face_cascade.detectMultiScale(gray, scaleFactor=<span class=\"number\">1.2</span>, minNeighbors=<span class=\"number\">4</span>, minSize=(<span class=\"number\">30</span>, <span class=\"number\">30</span>), flags = cv2.CASCADE_SCALE_IMAGE)<span class=\"comment\">#核心操作，返回图片中所有的人脸的坐标和宽高度</span></div><div class=\"line\">    result = []</div><div class=\"line\">    <span class=\"keyword\">for</span> (x, y, width, height) <span class=\"keyword\">in</span> faces:</div><div class=\"line\">        <span class=\"keyword\">print</span> (x, y, width, height)</div><div class=\"line\">        result.append((x, y, x+width, y+height))<span class=\"comment\">#将原始数据，转化为人脸的四个点的坐标</span></div><div class=\"line\">    <span class=\"keyword\">return</span> result</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">drawFaces</span><span class=\"params\">(image_name)</span>:</span></div><div class=\"line\">    faces = detectFaces(image_name)<span class=\"comment\">#此处的返回值是一个元组，(x, y, width, height)，每一个元组都包括人脸的（x,y）坐标，还有人脸的宽度和高度，有这些数据，我们就可以把人脸标记出来，比如画一个矩形框出来</span></div><div class=\"line\">    <span class=\"keyword\">print</span> faces</div><div class=\"line\">    <span class=\"keyword\">if</span> faces:</div><div class=\"line\">        imga = cv2.imread(image_name)<span class=\"comment\">#读取图片</span></div><div class=\"line\">        draw_rects(imga, faces, (<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>))<span class=\"comment\">#画矩形标记</span></div><div class=\"line\">        cv2.imshow(<span class=\"string\">'img'</span>, imga)<span class=\"comment\">#显示修改后的矩形</span></div><div class=\"line\">        cv2.waitKey(<span class=\"number\">0</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">draw_rects</span><span class=\"params\">(img, rects, color)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> x1, y1, x2, y2 <span class=\"keyword\">in</span> rects:</div><div class=\"line\">        cv2.rectangle(img, (x1, y1), (x2, y2), color, <span class=\"number\">2</span>)<span class=\"comment\">#调用cv2的矩形函数，画矩形</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">saveFaces</span><span class=\"params\">(image_name)</span>:</span><span class=\"comment\">#将人脸截取并保存成图片</span></div><div class=\"line\">    faces = detectFaces(image_name)</div><div class=\"line\">    <span class=\"keyword\">if</span> faces:</div><div class=\"line\">        save_dir = image_name.split(<span class=\"string\">'.'</span>)[<span class=\"number\">0</span>] + <span class=\"string\">\"_faces_\"</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(save_dir):<span class=\"comment\">#检测目录是否存在，如果不存在那就创建目录</span></div><div class=\"line\">            os.mkdir(save_dir)</div><div class=\"line\">        count = <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (x1, y1, x2, y2) <span class=\"keyword\">in</span> faces:</div><div class=\"line\">            imga = cv2.imread(image_name)</div><div class=\"line\">            file_name = os.path.join(save_dir,str(count)+<span class=\"string\">\".jpg\"</span>)</div><div class=\"line\">            roi = imga[y1:y2,x1:x2]<span class=\"comment\">#这一步是重点，他就像取一个数组一样，把人脸的部分保存出来</span></div><div class=\"line\">            cv2.imwrite(file_name,cv2.cvtColor(cv2.resize(roi,(<span class=\"number\">92</span>,<span class=\"number\">112</span>)), cv2.COLOR_BGR2GRAY))<span class=\"comment\">#把图片的size重新设定维（92,112），并将图片转换为灰度图像</span></div><div class=\"line\">            <span class=\"comment\"># cv2.imshow('aaa',imga)</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">drawFaces(<span class=\"string\">'../at/chen.jpg'</span>)</div><div class=\"line\">saveFaces(<span class=\"string\">'../at/chen.jpg'</span>)</div></pre></td></tr></table></figure>\n\n<p>这里面的截取人脸并保存的saveFaces函数，我觉得还不错。网上找到的代码，调用了Image库，我的代码全部都是用cv2搞定的，没有用Image库。画矩形也是，我也都是用cv2自带的东西完成的。<br>我用以上代码生成的数据，去进行人脸识别，惨不忍睹。</p>\n<h1 id=\"参考文献\">参考文献</h1>\n<p>1 <a href=\"http://blog.csdn.net/u012162613/article/details/43523507\" target=\"_blank\" rel=\"external\">Python-OpenCV人脸检测(代码)</a><br>2 <a href=\"http://wangwei007.blog.51cto.com/68019/1104940\" target=\"_blank\" rel=\"external\">python os.path模块常用方法详解</a></p>\n","source":"_posts/face-detection.md","raw":"title: 使用opencv实现人脸检测\ndate: 2015-04-26 12:54:24\ntags:\n- opencv\n- 图像处理\n- python\ncategories:\n- 图像处理\n---\n这两个星期，都在搞这个，就把代码都分享一下，太烂，就不分享到github了。\n<!-- more -->\n```python\n#!/usr/bin/env python\n# -*- coding:utf-8-*-\n__author__ = 'chen'\nimport cv2\nimport Image\nimport ImageDraw\nimport sys,os\ndef detectFaces(image_name):\n    img = cv2.imread(image_name)\n    face_cascade = cv2.CascadeClassifier('../data2/haarcascades/haarcascade_frontalface_alt.xml')#加载级联分类器，这里使用的是intel训练出来的人脸识别分类器\n    if img.ndim == 3:#判断图片是否是灰度图像，如果img.ndim==3那就表示不是灰度图像\n        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)#将图片转化为灰度图像\n    else:\n        gray = img\n\n    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.2, minNeighbors=4, minSize=(30, 30), flags = cv2.CASCADE_SCALE_IMAGE)#核心操作，返回图片中所有的人脸的坐标和宽高度\n    result = []\n    for (x, y, width, height) in faces:\n        print (x, y, width, height)\n        result.append((x, y, x+width, y+height))#将原始数据，转化为人脸的四个点的坐标\n    return result\n\ndef drawFaces(image_name):\n    faces = detectFaces(image_name)#此处的返回值是一个元组，(x, y, width, height)，每一个元组都包括人脸的（x,y）坐标，还有人脸的宽度和高度，有这些数据，我们就可以把人脸标记出来，比如画一个矩形框出来\n    print faces\n    if faces:\n        imga = cv2.imread(image_name)#读取图片\n        draw_rects(imga, faces, (0,255,0))#画矩形标记\n        cv2.imshow('img', imga)#显示修改后的矩形\n        cv2.waitKey(0)\n\ndef draw_rects(img, rects, color):\n    for x1, y1, x2, y2 in rects:\n        cv2.rectangle(img, (x1, y1), (x2, y2), color, 2)#调用cv2的矩形函数，画矩形\n\ndef saveFaces(image_name):#将人脸截取并保存成图片\n    faces = detectFaces(image_name)\n    if faces:\n        save_dir = image_name.split('.')[0] + \"_faces_\"\n        if not os.path.isdir(save_dir):#检测目录是否存在，如果不存在那就创建目录\n            os.mkdir(save_dir)\n        count = 0\n        for (x1, y1, x2, y2) in faces:\n            imga = cv2.imread(image_name)\n            file_name = os.path.join(save_dir,str(count)+\".jpg\")\n            roi = imga[y1:y2,x1:x2]#这一步是重点，他就像取一个数组一样，把人脸的部分保存出来\n            cv2.imwrite(file_name,cv2.cvtColor(cv2.resize(roi,(92,112)), cv2.COLOR_BGR2GRAY))#把图片的size重新设定维（92,112），并将图片转换为灰度图像\n            # cv2.imshow('aaa',imga)\n\n\ndrawFaces('../at/chen.jpg')\nsaveFaces('../at/chen.jpg')\n```\n这里面的截取人脸并保存的saveFaces函数，我觉得还不错。网上找到的代码，调用了Image库，我的代码全部都是用cv2搞定的，没有用Image库。画矩形也是，我也都是用cv2自带的东西完成的。\n我用以上代码生成的数据，去进行人脸识别，惨不忍睹。\n\n\n#参考文献\n1 [Python-OpenCV人脸检测(代码)](http://blog.csdn.net/u012162613/article/details/43523507)\n2 [python os.path模块常用方法详解](http://wangwei007.blog.51cto.com/68019/1104940)\n","slug":"face-detection","updated":1430025681000,"excerpt":"<p>这两个星期，都在搞这个，就把代码都分享一下，太烂，就不分享到github了。<br>","_id":"ig6koctm3vkojncq","comments":true,"layout":"post","photos":[],"link":""}],"Tag":[{"name":"javascript","_id":"42w8iuz77qggsdbu","posts":["szxowugcdv4aycb1","3y9e53558vapq3ja"]},{"name":"正则表达式","_id":"w7op3yr0y6l9rcm6","posts":["szxowugcdv4aycb1"]},{"name":"前端","_id":"yp75twrqr3dxo4q1","posts":["szxowugcdv4aycb1","3y9e53558vapq3ja"]},{"name":"js","_id":"gncx1ktpaha8w955","posts":["szxowugcdv4aycb1"]},{"name":"正则","_id":"7pbv9dl79lacq16z","posts":["3y9e53558vapq3ja"]},{"name":"kali","_id":"7f1p5ltbw4tu889p","posts":["b7nae45l1wnlvt69","abrdmh8ldf2zbtvi"]},{"name":"Linux","_id":"r7ch11y1aiwsbufi","posts":["b7nae45l1wnlvt69","abrdmh8ldf2zbtvi","6467xkjibdy2lzoy","vbqvt9nb2k7ofel4","9ibmf09dnwz45lhh"]},{"name":"chrome","_id":"ekre7h4p56ix5fuu","posts":["hgqp0jg1rcyq2ary","r6kk2mmyelzufcc4","cm6xuxbuwuakw63m","gkev3rcyuikn4npz"]},{"name":"cmcc-edu","_id":"13k6c1fzcojug313","posts":["hgqp0jg1rcyq2ary","r6kk2mmyelzufcc4","cm6xuxbuwuakw63m","gkev3rcyuikn4npz"]},{"name":"扩展","_id":"l3ngbta6shcjqbc0","posts":["hgqp0jg1rcyq2ary","gkev3rcyuikn4npz"]},{"name":"脚本","_id":"avfmmjml8fh3tdna","posts":["hgqp0jg1rcyq2ary","gkev3rcyuikn4npz"]},{"name":"中国移动","_id":"16tkm9tteziz9a17","posts":["hgqp0jg1rcyq2ary","r6kk2mmyelzufcc4","gkev3rcyuikn4npz"]},{"name":"表单","_id":"ntzbis1t7cmnwpd0","posts":["cm6xuxbuwuakw63m"]},{"name":"hexo","_id":"9cs3dsl39baopq36","posts":["lzpyj9n3n0m9gm31","2tvn6qwrqeyqutss","pv4ho70ahwdlimrk","hv2dc80kmkds79c2","oev0c6ii5000yq6y"]},{"name":"github","_id":"lfcfrewzielh5f3l","posts":["2tvn6qwrqeyqutss","6467xkjibdy2lzoy","oev0c6ii5000yq6y"]},{"name":"python","_id":"d45ffwv1j6t2w7au","posts":["5awy11sr0bhmn8bv","e6xjak820aagkwvt","vbqvt9nb2k7ofel4","oev0c6ii5000yq6y","ddqy1l1vcqsynw8f","ig6koctm3vkojncq"]},{"name":"socket","_id":"h6yuwlyxlutzu0ne","posts":["5awy11sr0bhmn8bv","vbqvt9nb2k7ofel4"]},{"name":"爬虫","_id":"1ucrpr0eo0039iam","posts":["e6xjak820aagkwvt"]},{"name":"sql","_id":"8jf9fva0dgfol1y9","posts":["pn8nqgea6xhkvgdj"]},{"name":"select","_id":"xo3mc6koxixv9tzl","posts":["pn8nqgea6xhkvgdj"]},{"name":"ubuntu","_id":"ztmd4peubwsgd8rs","posts":["9ibmf09dnwz45lhh"]},{"name":"shadowsocks","_id":"nrmwncly4b3w7ort","posts":["9ibmf09dnwz45lhh"]},{"name":"sql server","_id":"8uy0fkm7b589cvhy","posts":["3vbexhhlz5lk3bsi"]},{"name":"wamp","_id":"rmyehgtmms7cjxd3","posts":["3vbexhhlz5lk3bsi"]},{"name":"windows","_id":"v300opca0zo43dvh","posts":["oev0c6ii5000yq6y"]},{"name":"opencv","_id":"3ybl25ozvufzy3xt","posts":["ddqy1l1vcqsynw8f","ig6koctm3vkojncq"]},{"name":"图像处理","_id":"u3xbmqdwmvn5u90u","posts":["ddqy1l1vcqsynw8f","ig6koctm3vkojncq"]}]}